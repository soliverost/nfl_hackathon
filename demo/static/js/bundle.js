/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _SimpleChart = __webpack_require__(2);

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(222);

	var filter_style = "''";
	var dynamic = true;
	var charts = [{ "type": "PlotlyAPI", "options": { "chartid": "plotlyid", "url": "/plotlyurl/", "params": { "game": "game1", "new_index": "1" } } }];
	var filters = [{ "type": "SliderInput", "options": { "min": 1, "default": "1", "max": 170, "label": "new_index", "alias": "new_index", "step": 1 } }, { "type": "SelectButton", "options": { "default": "game1", "items": ["game1", "game2", "game3"], "alias": "game", "label": "Game" } }];

	ReactDOM.render(React.createElement(_SimpleChart.FilterChart, {
	    filter_style: filter_style,
	    dynamic: dynamic,
	    charts: charts,
	    filters: filters }), document.getElementById("component_id"));

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.FilterChart = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactBootstrap = __webpack_require__(160);

	var _pyxley = __webpack_require__(405);

	var _replace = __webpack_require__(408);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var FilterChart = exports.FilterChart = function (_React$Component) {
	    _inherits(FilterChart, _React$Component);

	    function FilterChart(props) {
	        _classCallCheck(this, FilterChart);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(FilterChart).call(this, props));
	    }

	    _createClass(FilterChart, [{
	        key: '_handleClick',
	        value: function _handleClick(input) {
	            var params = {};
	            for (var i = 0; i < this.props.filters.length; i++) {
	                var vals = this.refs["filter_".concat(i)].refs.filter.getCurrentState();
	                for (var key in vals) {
	                    params[key] = vals[key];
	                }
	            }
	            if (input) {
	                for (var i = 0; i < input.length; i++) {
	                    params[input[i].alias] = input[i].value;
	                }
	            }
	            for (var i = 0; i < this.props.charts.length + 1; i++) {
	                this.refs["chart_".concat(i)].update(params);
	            }
	            return params;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var items = this.props.filters.map(function (x, index) {
	                return _react2.default.createElement(_pyxley.Filter, {
	                    key: "fkey_".concat(index),
	                    ref: "filter_".concat(index),
	                    onChange: this._handleClick.bind(this),
	                    dynamic: this.props.dynamic,
	                    type: x.type, options: x.options });
	            }.bind(this));

	            var charts = this.props.charts.map(function (x, index) {
	                return _react2.default.createElement(_pyxley.Chart, {
	                    ref: "chart_".concat(index),
	                    type: x.type, options: x.options });
	            });

	            var ncharts = this.props.charts.length;
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    _reactBootstrap.Row,
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { className: this.props.filter_style },
	                        items
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactBootstrap.Row,
	                    null,
	                    _react2.default.createElement(_replace.ReplaceImages, {
	                        ref: "chart_".concat(ncharts),
	                        url: "/images/" })
	                ),
	                _react2.default.createElement(
	                    _reactBootstrap.Row,
	                    null,
	                    charts
	                )
	            );
	        }
	    }]);

	    return FilterChart;
	}(_react2.default.Component);
	// <Col xs={3} md={3}>
	// </Col>
	// <Col xs={9} md={9}>
	// </Col>

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(4);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(5);
	var ReactDOMServer = __webpack_require__(150);
	var ReactIsomorphic = __webpack_require__(154);

	var assign = __webpack_require__(41);
	var deprecated = __webpack_require__(159);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(7);
	var ReactDOMTextComponent = __webpack_require__(8);
	var ReactDefaultInjection = __webpack_require__(73);
	var ReactInstanceHandles = __webpack_require__(47);
	var ReactMount = __webpack_require__(30);
	var ReactPerf = __webpack_require__(20);
	var ReactReconciler = __webpack_require__(52);
	var ReactUpdates = __webpack_require__(56);
	var ReactVersion = __webpack_require__(148);

	var findDOMNode = __webpack_require__(93);
	var renderSubtreeIntoContainer = __webpack_require__(149);
	var warning = __webpack_require__(27);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(11);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 6 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(9);
	var DOMPropertyOperations = __webpack_require__(24);
	var ReactComponentBrowserEnvironment = __webpack_require__(28);
	var ReactMount = __webpack_require__(30);

	var assign = __webpack_require__(41);
	var escapeTextContentForBrowser = __webpack_require__(23);
	var setTextContent = __webpack_require__(22);
	var validateDOMNesting = __webpack_require__(72);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(10);
	var ReactMultiChildUpdateTypes = __webpack_require__(18);
	var ReactPerf = __webpack_require__(20);

	var setInnerHTML = __webpack_require__(21);
	var setTextContent = __webpack_require__(22);
	var invariant = __webpack_require__(15);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);

	var createNodesFromMarkup = __webpack_require__(12);
	var emptyFunction = __webpack_require__(17);
	var getMarkupWrap = __webpack_require__(16);
	var invariant = __webpack_require__(15);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 11 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);

	var createArrayFromMixed = __webpack_require__(13);
	var getMarkupWrap = __webpack_require__(16);
	var invariant = __webpack_require__(15);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(14);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);

	var invariant = __webpack_require__(15);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(19);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);
	var escapeTextContentForBrowser = __webpack_require__(23);
	var setInnerHTML = __webpack_require__(21);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 23 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(25);
	var ReactPerf = __webpack_require__(20);

	var quoteAttributeValueForBrowser = __webpack_require__(26);
	var warning = __webpack_require__(27);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(23);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(17);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(29);
	var ReactMount = __webpack_require__(30);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(9);
	var DOMPropertyOperations = __webpack_require__(24);
	var ReactMount = __webpack_require__(30);
	var ReactPerf = __webpack_require__(20);

	var invariant = __webpack_require__(15);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(25);
	var ReactBrowserEventEmitter = __webpack_require__(31);
	var ReactCurrentOwner = __webpack_require__(7);
	var ReactDOMFeatureFlags = __webpack_require__(43);
	var ReactElement = __webpack_require__(44);
	var ReactEmptyComponentRegistry = __webpack_require__(46);
	var ReactInstanceHandles = __webpack_require__(47);
	var ReactInstanceMap = __webpack_require__(49);
	var ReactMarkupChecksum = __webpack_require__(50);
	var ReactPerf = __webpack_require__(20);
	var ReactReconciler = __webpack_require__(52);
	var ReactUpdateQueue = __webpack_require__(55);
	var ReactUpdates = __webpack_require__(56);

	var assign = __webpack_require__(41);
	var emptyObject = __webpack_require__(60);
	var containsNode = __webpack_require__(61);
	var instantiateReactComponent = __webpack_require__(64);
	var invariant = __webpack_require__(15);
	var setInnerHTML = __webpack_require__(21);
	var shouldUpdateReactComponent = __webpack_require__(69);
	var validateDOMNesting = __webpack_require__(72);
	var warning = __webpack_require__(27);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(32);
	var EventPluginHub = __webpack_require__(33);
	var EventPluginRegistry = __webpack_require__(34);
	var ReactEventEmitterMixin = __webpack_require__(39);
	var ReactPerf = __webpack_require__(20);
	var ViewportMetrics = __webpack_require__(40);

	var assign = __webpack_require__(41);
	var isEventSupported = __webpack_require__(42);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(19);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(34);
	var EventPluginUtils = __webpack_require__(35);
	var ReactErrorUtils = __webpack_require__(36);

	var accumulateInto = __webpack_require__(37);
	var forEachAccumulated = __webpack_require__(38);
	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(32);
	var ReactErrorUtils = __webpack_require__(36);

	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(33);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 40 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(7);

	var assign = __webpack_require__(41);
	var canDefineProperty = __webpack_require__(45);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(48);

	var invariant = __webpack_require__(15);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(51);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(53);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(54);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(7);
	var ReactElement = __webpack_require__(44);
	var ReactInstanceMap = __webpack_require__(49);
	var ReactUpdates = __webpack_require__(56);

	var assign = __webpack_require__(41);
	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(58);
	var ReactPerf = __webpack_require__(20);
	var ReactReconciler = __webpack_require__(52);
	var Transaction = __webpack_require__(59);

	var assign = __webpack_require__(41);
	var invariant = __webpack_require__(15);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(58);

	var assign = __webpack_require__(41);
	var invariant = __webpack_require__(15);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(62);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(63);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 63 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(65);
	var ReactEmptyComponent = __webpack_require__(70);
	var ReactNativeComponent = __webpack_require__(71);

	var assign = __webpack_require__(41);
	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(7);
	var ReactElement = __webpack_require__(44);
	var ReactInstanceMap = __webpack_require__(49);
	var ReactPerf = __webpack_require__(20);
	var ReactPropTypeLocations = __webpack_require__(67);
	var ReactPropTypeLocationNames = __webpack_require__(68);
	var ReactReconciler = __webpack_require__(52);
	var ReactUpdateQueue = __webpack_require__(55);

	var assign = __webpack_require__(41);
	var emptyObject = __webpack_require__(60);
	var invariant = __webpack_require__(15);
	var shouldUpdateReactComponent = __webpack_require__(69);
	var warning = __webpack_require__(27);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(15);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(19);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(44);
	var ReactEmptyComponentRegistry = __webpack_require__(46);
	var ReactReconciler = __webpack_require__(52);

	var assign = __webpack_require__(41);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(41);
	var invariant = __webpack_require__(15);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(41);
	var emptyFunction = __webpack_require__(17);
	var warning = __webpack_require__(27);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(74);
	var ChangeEventPlugin = __webpack_require__(82);
	var ClientReactRootIndex = __webpack_require__(85);
	var DefaultEventPluginOrder = __webpack_require__(86);
	var EnterLeaveEventPlugin = __webpack_require__(87);
	var ExecutionEnvironment = __webpack_require__(11);
	var HTMLDOMPropertyConfig = __webpack_require__(91);
	var ReactBrowserComponentMixin = __webpack_require__(92);
	var ReactComponentBrowserEnvironment = __webpack_require__(28);
	var ReactDefaultBatchingStrategy = __webpack_require__(94);
	var ReactDOMComponent = __webpack_require__(95);
	var ReactDOMTextComponent = __webpack_require__(8);
	var ReactEventListener = __webpack_require__(120);
	var ReactInjection = __webpack_require__(123);
	var ReactInstanceHandles = __webpack_require__(47);
	var ReactMount = __webpack_require__(30);
	var ReactReconcileTransaction = __webpack_require__(127);
	var SelectEventPlugin = __webpack_require__(132);
	var ServerReactRootIndex = __webpack_require__(133);
	var SimpleEventPlugin = __webpack_require__(134);
	var SVGDOMPropertyConfig = __webpack_require__(143);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(144);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(32);
	var EventPropagators = __webpack_require__(75);
	var ExecutionEnvironment = __webpack_require__(11);
	var FallbackCompositionState = __webpack_require__(76);
	var SyntheticCompositionEvent = __webpack_require__(78);
	var SyntheticInputEvent = __webpack_require__(80);

	var keyOf = __webpack_require__(81);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(32);
	var EventPluginHub = __webpack_require__(33);

	var warning = __webpack_require__(27);

	var accumulateInto = __webpack_require__(37);
	var forEachAccumulated = __webpack_require__(38);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(58);

	var assign = __webpack_require__(41);
	var getTextContentAccessor = __webpack_require__(77);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(58);

	var assign = __webpack_require__(41);
	var emptyFunction = __webpack_require__(17);
	var warning = __webpack_require__(27);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(32);
	var EventPluginHub = __webpack_require__(33);
	var EventPropagators = __webpack_require__(75);
	var ExecutionEnvironment = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(79);

	var getEventTarget = __webpack_require__(83);
	var isEventSupported = __webpack_require__(42);
	var isTextInputElement = __webpack_require__(84);
	var keyOf = __webpack_require__(81);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 85 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(81);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(32);
	var EventPropagators = __webpack_require__(75);
	var SyntheticMouseEvent = __webpack_require__(88);

	var ReactMount = __webpack_require__(30);
	var keyOf = __webpack_require__(81);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(89);
	var ViewportMetrics = __webpack_require__(40);

	var getEventModifierState = __webpack_require__(90);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	var getEventTarget = __webpack_require__(83);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 90 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(25);
	var ExecutionEnvironment = __webpack_require__(11);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(49);

	var findDOMNode = __webpack_require__(93);
	var warning = __webpack_require__(27);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(7);
	var ReactInstanceMap = __webpack_require__(49);
	var ReactMount = __webpack_require__(30);

	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(56);
	var Transaction = __webpack_require__(59);

	var assign = __webpack_require__(41);
	var emptyFunction = __webpack_require__(17);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(96);
	var CSSPropertyOperations = __webpack_require__(98);
	var DOMProperty = __webpack_require__(25);
	var DOMPropertyOperations = __webpack_require__(24);
	var EventConstants = __webpack_require__(32);
	var ReactBrowserEventEmitter = __webpack_require__(31);
	var ReactComponentBrowserEnvironment = __webpack_require__(28);
	var ReactDOMButton = __webpack_require__(106);
	var ReactDOMInput = __webpack_require__(107);
	var ReactDOMOption = __webpack_require__(111);
	var ReactDOMSelect = __webpack_require__(114);
	var ReactDOMTextarea = __webpack_require__(115);
	var ReactMount = __webpack_require__(30);
	var ReactMultiChild = __webpack_require__(116);
	var ReactPerf = __webpack_require__(20);
	var ReactUpdateQueue = __webpack_require__(55);

	var assign = __webpack_require__(41);
	var canDefineProperty = __webpack_require__(45);
	var escapeTextContentForBrowser = __webpack_require__(23);
	var invariant = __webpack_require__(15);
	var isEventSupported = __webpack_require__(42);
	var keyOf = __webpack_require__(81);
	var setInnerHTML = __webpack_require__(21);
	var setTextContent = __webpack_require__(22);
	var shallowEqual = __webpack_require__(119);
	var validateDOMNesting = __webpack_require__(72);
	var warning = __webpack_require__(27);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(30);

	var findDOMNode = __webpack_require__(93);
	var focusNode = __webpack_require__(97);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(99);
	var ExecutionEnvironment = __webpack_require__(11);
	var ReactPerf = __webpack_require__(20);

	var camelizeStyleName = __webpack_require__(100);
	var dangerousStyleValue = __webpack_require__(102);
	var hyphenateStyleName = __webpack_require__(103);
	var memoizeStringOnly = __webpack_require__(105);
	var warning = __webpack_require__(27);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(101);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 101 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(99);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(104);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 105 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 106 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(29);
	var LinkedValueUtils = __webpack_require__(108);
	var ReactMount = __webpack_require__(30);
	var ReactUpdates = __webpack_require__(56);

	var assign = __webpack_require__(41);
	var invariant = __webpack_require__(15);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(109);
	var ReactPropTypeLocations = __webpack_require__(67);

	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(44);
	var ReactPropTypeLocationNames = __webpack_require__(68);

	var emptyFunction = __webpack_require__(17);
	var getIteratorFn = __webpack_require__(110);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(112);
	var ReactDOMSelect = __webpack_require__(114);

	var assign = __webpack_require__(41);
	var warning = __webpack_require__(27);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(44);

	var emptyFunction = __webpack_require__(17);
	var traverseAllChildren = __webpack_require__(113);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(7);
	var ReactElement = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(47);

	var getIteratorFn = __webpack_require__(110);
	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(108);
	var ReactMount = __webpack_require__(30);
	var ReactUpdates = __webpack_require__(56);

	var assign = __webpack_require__(41);
	var warning = __webpack_require__(27);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(108);
	var ReactDOMIDOperations = __webpack_require__(29);
	var ReactUpdates = __webpack_require__(56);

	var assign = __webpack_require__(41);
	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(66);
	var ReactMultiChildUpdateTypes = __webpack_require__(18);

	var ReactCurrentOwner = __webpack_require__(7);
	var ReactReconciler = __webpack_require__(52);
	var ReactChildReconciler = __webpack_require__(117);

	var flattenChildren = __webpack_require__(118);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(52);

	var instantiateReactComponent = __webpack_require__(64);
	var shouldUpdateReactComponent = __webpack_require__(69);
	var traverseAllChildren = __webpack_require__(113);
	var warning = __webpack_require__(27);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(113);
	var warning = __webpack_require__(27);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 119 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(121);
	var ExecutionEnvironment = __webpack_require__(11);
	var PooledClass = __webpack_require__(58);
	var ReactInstanceHandles = __webpack_require__(47);
	var ReactMount = __webpack_require__(30);
	var ReactUpdates = __webpack_require__(56);

	var assign = __webpack_require__(41);
	var getEventTarget = __webpack_require__(83);
	var getUnboundedScrollPosition = __webpack_require__(122);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(17);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 122 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(25);
	var EventPluginHub = __webpack_require__(33);
	var ReactComponentEnvironment = __webpack_require__(66);
	var ReactClass = __webpack_require__(124);
	var ReactEmptyComponent = __webpack_require__(70);
	var ReactBrowserEventEmitter = __webpack_require__(31);
	var ReactNativeComponent = __webpack_require__(71);
	var ReactPerf = __webpack_require__(20);
	var ReactRootIndex = __webpack_require__(48);
	var ReactUpdates = __webpack_require__(56);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(125);
	var ReactElement = __webpack_require__(44);
	var ReactPropTypeLocations = __webpack_require__(67);
	var ReactPropTypeLocationNames = __webpack_require__(68);
	var ReactNoopUpdateQueue = __webpack_require__(126);

	var assign = __webpack_require__(41);
	var emptyObject = __webpack_require__(60);
	var invariant = __webpack_require__(15);
	var keyMirror = __webpack_require__(19);
	var keyOf = __webpack_require__(81);
	var warning = __webpack_require__(27);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(126);

	var canDefineProperty = __webpack_require__(45);
	var emptyObject = __webpack_require__(60);
	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(27);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(58);
	var ReactBrowserEventEmitter = __webpack_require__(31);
	var ReactDOMFeatureFlags = __webpack_require__(43);
	var ReactInputSelection = __webpack_require__(128);
	var Transaction = __webpack_require__(59);

	var assign = __webpack_require__(41);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(129);

	var containsNode = __webpack_require__(61);
	var focusNode = __webpack_require__(97);
	var getActiveElement = __webpack_require__(131);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);

	var getNodeForCharacterOffset = __webpack_require__(130);
	var getTextContentAccessor = __webpack_require__(77);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(32);
	var EventPropagators = __webpack_require__(75);
	var ExecutionEnvironment = __webpack_require__(11);
	var ReactInputSelection = __webpack_require__(128);
	var SyntheticEvent = __webpack_require__(79);

	var getActiveElement = __webpack_require__(131);
	var isTextInputElement = __webpack_require__(84);
	var keyOf = __webpack_require__(81);
	var shallowEqual = __webpack_require__(119);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(32);
	var EventListener = __webpack_require__(121);
	var EventPropagators = __webpack_require__(75);
	var ReactMount = __webpack_require__(30);
	var SyntheticClipboardEvent = __webpack_require__(135);
	var SyntheticEvent = __webpack_require__(79);
	var SyntheticFocusEvent = __webpack_require__(136);
	var SyntheticKeyboardEvent = __webpack_require__(137);
	var SyntheticMouseEvent = __webpack_require__(88);
	var SyntheticDragEvent = __webpack_require__(140);
	var SyntheticTouchEvent = __webpack_require__(141);
	var SyntheticUIEvent = __webpack_require__(89);
	var SyntheticWheelEvent = __webpack_require__(142);

	var emptyFunction = __webpack_require__(17);
	var getEventCharCode = __webpack_require__(138);
	var invariant = __webpack_require__(15);
	var keyOf = __webpack_require__(81);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(79);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(89);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(89);

	var getEventCharCode = __webpack_require__(138);
	var getEventKey = __webpack_require__(139);
	var getEventModifierState = __webpack_require__(90);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 138 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(138);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(88);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(89);

	var getEventModifierState = __webpack_require__(90);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(88);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(25);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(25);
	var ReactDefaultPerfAnalysis = __webpack_require__(145);
	var ReactMount = __webpack_require__(30);
	var ReactPerf = __webpack_require__(20);

	var performanceNow = __webpack_require__(146);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(41);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(147);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(11);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.7';

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(30);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(73);
	var ReactServerRendering = __webpack_require__(151);
	var ReactVersion = __webpack_require__(148);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(94);
	var ReactElement = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(47);
	var ReactMarkupChecksum = __webpack_require__(50);
	var ReactServerBatchingStrategy = __webpack_require__(152);
	var ReactServerRenderingTransaction = __webpack_require__(153);
	var ReactUpdates = __webpack_require__(56);

	var emptyObject = __webpack_require__(60);
	var instantiateReactComponent = __webpack_require__(64);
	var invariant = __webpack_require__(15);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 152 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(58);
	var CallbackQueue = __webpack_require__(57);
	var Transaction = __webpack_require__(59);

	var assign = __webpack_require__(41);
	var emptyFunction = __webpack_require__(17);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(112);
	var ReactComponent = __webpack_require__(125);
	var ReactClass = __webpack_require__(124);
	var ReactDOMFactories = __webpack_require__(155);
	var ReactElement = __webpack_require__(44);
	var ReactElementValidator = __webpack_require__(156);
	var ReactPropTypes = __webpack_require__(109);
	var ReactVersion = __webpack_require__(148);

	var assign = __webpack_require__(41);
	var onlyChild = __webpack_require__(158);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(44);
	var ReactElementValidator = __webpack_require__(156);

	var mapObject = __webpack_require__(157);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(44);
	var ReactPropTypeLocations = __webpack_require__(67);
	var ReactPropTypeLocationNames = __webpack_require__(68);
	var ReactCurrentOwner = __webpack_require__(7);

	var canDefineProperty = __webpack_require__(45);
	var getIteratorFn = __webpack_require__(110);
	var invariant = __webpack_require__(15);
	var warning = __webpack_require__(27);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 157 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(44);

	var invariant = __webpack_require__(15);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(41);
	var warning = __webpack_require__(27);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(161)['default'];

	var _interopRequireWildcard = __webpack_require__(162)['default'];

	exports.__esModule = true;

	var _utilsChildrenValueInputValidation = __webpack_require__(163);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _Accordion2 = __webpack_require__(193);

	var _Accordion3 = _interopRequireDefault(_Accordion2);

	exports.Accordion = _Accordion3['default'];

	var _Alert2 = __webpack_require__(197);

	var _Alert3 = _interopRequireDefault(_Alert2);

	exports.Alert = _Alert3['default'];

	var _Badge2 = __webpack_require__(198);

	var _Badge3 = _interopRequireDefault(_Badge2);

	exports.Badge = _Badge3['default'];

	var _Breadcrumb2 = __webpack_require__(199);

	var _Breadcrumb3 = _interopRequireDefault(_Breadcrumb2);

	exports.Breadcrumb = _Breadcrumb3['default'];

	var _BreadcrumbItem2 = __webpack_require__(200);

	var _BreadcrumbItem3 = _interopRequireDefault(_BreadcrumbItem2);

	exports.BreadcrumbItem = _BreadcrumbItem3['default'];

	var _Button2 = __webpack_require__(210);

	var _Button3 = _interopRequireDefault(_Button2);

	exports.Button = _Button3['default'];

	var _ButtonGroup2 = __webpack_require__(213);

	var _ButtonGroup3 = _interopRequireDefault(_ButtonGroup2);

	exports.ButtonGroup = _ButtonGroup3['default'];

	var _ButtonInput2 = __webpack_require__(215);

	var _ButtonInput3 = _interopRequireDefault(_ButtonInput2);

	exports.ButtonInput = _ButtonInput3['default'];

	var _ButtonToolbar2 = __webpack_require__(219);

	var _ButtonToolbar3 = _interopRequireDefault(_ButtonToolbar2);

	exports.ButtonToolbar = _ButtonToolbar3['default'];

	var _Carousel2 = __webpack_require__(220);

	var _Carousel3 = _interopRequireDefault(_Carousel2);

	exports.Carousel = _Carousel3['default'];

	var _CarouselItem2 = __webpack_require__(221);

	var _CarouselItem3 = _interopRequireDefault(_CarouselItem2);

	exports.CarouselItem = _CarouselItem3['default'];

	var _Col2 = __webpack_require__(224);

	var _Col3 = _interopRequireDefault(_Col2);

	exports.Col = _Col3['default'];

	var _CollapsibleNav2 = __webpack_require__(225);

	var _CollapsibleNav3 = _interopRequireDefault(_CollapsibleNav2);

	exports.CollapsibleNav = _CollapsibleNav3['default'];

	var _Dropdown2 = __webpack_require__(241);

	var _Dropdown3 = _interopRequireDefault(_Dropdown2);

	exports.Dropdown = _Dropdown3['default'];

	var _DropdownButton2 = __webpack_require__(327);

	var _DropdownButton3 = _interopRequireDefault(_DropdownButton2);

	exports.DropdownButton = _DropdownButton3['default'];

	var _Glyphicon2 = __webpack_require__(218);

	var _Glyphicon3 = _interopRequireDefault(_Glyphicon2);

	exports.Glyphicon = _Glyphicon3['default'];

	var _Grid2 = __webpack_require__(329);

	var _Grid3 = _interopRequireDefault(_Grid2);

	exports.Grid = _Grid3['default'];

	var _Image2 = __webpack_require__(330);

	var _Image3 = _interopRequireDefault(_Image2);

	exports.Image = _Image3['default'];

	var _Input2 = __webpack_require__(331);

	var _Input3 = _interopRequireDefault(_Input2);

	exports.Input = _Input3['default'];

	var _Interpolate2 = __webpack_require__(334);

	var _Interpolate3 = _interopRequireDefault(_Interpolate2);

	exports.Interpolate = _Interpolate3['default'];

	var _Jumbotron2 = __webpack_require__(335);

	var _Jumbotron3 = _interopRequireDefault(_Jumbotron2);

	exports.Jumbotron = _Jumbotron3['default'];

	var _Label2 = __webpack_require__(336);

	var _Label3 = _interopRequireDefault(_Label2);

	exports.Label = _Label3['default'];

	var _ListGroup2 = __webpack_require__(337);

	var _ListGroup3 = _interopRequireDefault(_ListGroup2);

	exports.ListGroup = _ListGroup3['default'];

	var _ListGroupItem2 = __webpack_require__(338);

	var _ListGroupItem3 = _interopRequireDefault(_ListGroupItem2);

	exports.ListGroupItem = _ListGroupItem3['default'];

	var _MenuItem2 = __webpack_require__(339);

	var _MenuItem3 = _interopRequireDefault(_MenuItem2);

	exports.MenuItem = _MenuItem3['default'];

	var _Modal2 = __webpack_require__(340);

	var _Modal3 = _interopRequireDefault(_Modal2);

	exports.Modal = _Modal3['default'];

	var _ModalBody2 = __webpack_require__(347);

	var _ModalBody3 = _interopRequireDefault(_ModalBody2);

	exports.ModalBody = _ModalBody3['default'];

	var _ModalFooter2 = __webpack_require__(350);

	var _ModalFooter3 = _interopRequireDefault(_ModalFooter2);

	exports.ModalFooter = _ModalFooter3['default'];

	var _ModalHeader2 = __webpack_require__(348);

	var _ModalHeader3 = _interopRequireDefault(_ModalHeader2);

	exports.ModalHeader = _ModalHeader3['default'];

	var _ModalTitle2 = __webpack_require__(349);

	var _ModalTitle3 = _interopRequireDefault(_ModalTitle2);

	exports.ModalTitle = _ModalTitle3['default'];

	var _Nav2 = __webpack_require__(366);

	var _Nav3 = _interopRequireDefault(_Nav2);

	exports.Nav = _Nav3['default'];

	var _Navbar2 = __webpack_require__(367);

	var _Navbar3 = _interopRequireDefault(_Navbar2);

	exports.Navbar = _Navbar3['default'];

	var _NavBrand2 = __webpack_require__(369);

	var _NavBrand3 = _interopRequireDefault(_NavBrand2);

	exports.NavBrand = _NavBrand3['default'];

	var _NavbarBrand2 = __webpack_require__(370);

	var _NavbarBrand3 = _interopRequireDefault(_NavbarBrand2);

	exports.NavbarBrand = _NavbarBrand3['default'];

	var _NavDropdown2 = __webpack_require__(374);

	var _NavDropdown3 = _interopRequireDefault(_NavDropdown2);

	exports.NavDropdown = _NavDropdown3['default'];

	var _NavItem2 = __webpack_require__(375);

	var _NavItem3 = _interopRequireDefault(_NavItem2);

	exports.NavItem = _NavItem3['default'];

	var _Overlay2 = __webpack_require__(376);

	var _Overlay3 = _interopRequireDefault(_Overlay2);

	exports.Overlay = _Overlay3['default'];

	var _OverlayTrigger2 = __webpack_require__(385);

	var _OverlayTrigger3 = _interopRequireDefault(_OverlayTrigger2);

	exports.OverlayTrigger = _OverlayTrigger3['default'];

	var _PageHeader2 = __webpack_require__(386);

	var _PageHeader3 = _interopRequireDefault(_PageHeader2);

	exports.PageHeader = _PageHeader3['default'];

	var _PageItem2 = __webpack_require__(387);

	var _PageItem3 = _interopRequireDefault(_PageItem2);

	exports.PageItem = _PageItem3['default'];

	var _Pager2 = __webpack_require__(388);

	var _Pager3 = _interopRequireDefault(_Pager2);

	exports.Pager = _Pager3['default'];

	var _Pagination2 = __webpack_require__(389);

	var _Pagination3 = _interopRequireDefault(_Pagination2);

	exports.Pagination = _Pagination3['default'];

	var _Panel2 = __webpack_require__(392);

	var _Panel3 = _interopRequireDefault(_Panel2);

	exports.Panel = _Panel3['default'];

	var _PanelGroup2 = __webpack_require__(194);

	var _PanelGroup3 = _interopRequireDefault(_PanelGroup2);

	exports.PanelGroup = _PanelGroup3['default'];

	var _Popover2 = __webpack_require__(393);

	var _Popover3 = _interopRequireDefault(_Popover2);

	exports.Popover = _Popover3['default'];

	var _ProgressBar2 = __webpack_require__(394);

	var _ProgressBar3 = _interopRequireDefault(_ProgressBar2);

	exports.ProgressBar = _ProgressBar3['default'];

	var _ResponsiveEmbed2 = __webpack_require__(395);

	var _ResponsiveEmbed3 = _interopRequireDefault(_ResponsiveEmbed2);

	exports.ResponsiveEmbed = _ResponsiveEmbed3['default'];

	var _Row2 = __webpack_require__(396);

	var _Row3 = _interopRequireDefault(_Row2);

	exports.Row = _Row3['default'];

	var _SafeAnchor2 = __webpack_require__(201);

	var _SafeAnchor3 = _interopRequireDefault(_SafeAnchor2);

	exports.SafeAnchor = _SafeAnchor3['default'];

	var _SplitButton2 = __webpack_require__(397);

	var _SplitButton3 = _interopRequireDefault(_SplitButton2);

	exports.SplitButton = _SplitButton3['default'];

	var _Tab2 = __webpack_require__(399);

	var _Tab3 = _interopRequireDefault(_Tab2);

	exports.Tab = _Tab3['default'];

	var _Table2 = __webpack_require__(400);

	var _Table3 = _interopRequireDefault(_Table2);

	exports.Table = _Table3['default'];

	var _Tabs2 = __webpack_require__(401);

	var _Tabs3 = _interopRequireDefault(_Tabs2);

	exports.Tabs = _Tabs3['default'];

	var _Thumbnail2 = __webpack_require__(402);

	var _Thumbnail3 = _interopRequireDefault(_Thumbnail2);

	exports.Thumbnail = _Thumbnail3['default'];

	var _Tooltip2 = __webpack_require__(403);

	var _Tooltip3 = _interopRequireDefault(_Tooltip2);

	exports.Tooltip = _Tooltip3['default'];

	var _Well2 = __webpack_require__(404);

	var _Well3 = _interopRequireDefault(_Well2);

	exports.Well = _Well3['default'];

	var _Collapse2 = __webpack_require__(226);

	var _Collapse3 = _interopRequireDefault(_Collapse2);

	exports.Collapse = _Collapse3['default'];

	var _Fade2 = __webpack_require__(345);

	var _Fade3 = _interopRequireDefault(_Fade2);

	exports.Fade = _Fade3['default'];

	var _FormControls2 = __webpack_require__(332);

	var _FormControls = _interopRequireWildcard(_FormControls2);

	exports.FormControls = _FormControls;
	var utils = {
	  bootstrapUtils: _utilsBootstrapUtils2['default'],
	  childrenValueInputValidation: _utilsChildrenValueInputValidation2['default'],
	  createChainedFunction: _utilsCreateChainedFunction2['default'],
	  ValidComponentChildren: _utilsValidComponentChildren2['default']
	};
	exports.utils = utils;

/***/ },
/* 161 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 162 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;
	exports['default'] = valueValidation;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactPropTypesLibSinglePropFrom = __webpack_require__(164);

	var _reactPropTypesLibSinglePropFrom2 = _interopRequireDefault(_reactPropTypesLibSinglePropFrom);

	function valueValidation(props, propName, componentName) {
	  var error = _reactPropTypesLibSinglePropFrom2['default']('children', 'value')(props, propName, componentName);

	  if (!error) {
	    error = _react2['default'].PropTypes.node(props, propName, componentName);
	  }

	  return error;
	}

	module.exports = exports['default'];

/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * Checks if only one of the listed properties is in use. An error is given
	 * if multiple have a value
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */
	'use strict';

	exports.__esModule = true;
	exports['default'] = createSinglePropFromChecker;

	function createSinglePropFromChecker() {
	  for (var _len = arguments.length, arrOfProps = Array(_len), _key = 0; _key < _len; _key++) {
	    arrOfProps[_key] = arguments[_key];
	  }

	  function validate(props, propName, componentName) {
	    var usedPropCount = arrOfProps.map(function (listedProp) {
	      return props[listedProp];
	    }).reduce(function (acc, curr) {
	      return acc + (curr !== undefined ? 1 : 0);
	    }, 0);

	    if (usedPropCount > 1) {
	      var first = arrOfProps[0];
	      var others = arrOfProps.slice(1);

	      var message = others.join(', ') + ' and ' + first;
	      return new Error('Invalid prop \'' + propName + '\', only one of the following ' + ('may be provided: ' + message));
	    }
	  }
	  return validate;
	}

	module.exports = exports['default'];

/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	'use strict';

	exports.__esModule = true;
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }

	    if (acc === null) {
	      return f;
	    }

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}

	exports['default'] = createChainedFunction;
	module.exports = exports['default'];

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	/**
	 * Maps children that are typically specified as `props.children`,
	 * but only iterates over children that are "valid components".
	 *
	 * The mapFunction provided index will be normalised to the components mapped,
	 * so an invalid component would not increase the index.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapValidComponents(children, func, context) {
	  var index = 0;

	  return _react2['default'].Children.map(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      var lastIndex = index;
	      index++;
	      return func.call(context, child, lastIndex);
	    }

	    return child;
	  });
	}

	/**
	 * Iterates through children that are typically specified as `props.children`,
	 * but only iterates over children that are "valid components".
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child with the index reflecting the position relative to "valid components".
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachValidComponents(children, func, context) {
	  var index = 0;

	  return _react2['default'].Children.forEach(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      func.call(context, child, index);
	      index++;
	    }
	  });
	}

	/**
	 * Count the number of "valid components" in the Children container.
	 *
	 * @param {?*} children Children tree container.
	 * @returns {number}
	 */
	function numberOfValidComponents(children) {
	  var count = 0;

	  _react2['default'].Children.forEach(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      count++;
	    }
	  });

	  return count;
	}

	/**
	 * Determine if the Child container has one or more "valid components".
	 *
	 * @param {?*} children Children tree container.
	 * @returns {boolean}
	 */
	function hasValidComponent(children) {
	  var hasValid = false;

	  _react2['default'].Children.forEach(children, function (child) {
	    if (!hasValid && _react2['default'].isValidElement(child)) {
	      hasValid = true;
	    }
	  });

	  return hasValid;
	}

	function find(children, finder) {
	  var child = undefined;

	  forEachValidComponents(children, function (c, idx) {
	    if (!child && finder(c, idx, children)) {
	      child = c;
	    }
	  });

	  return child;
	}

	/**
	 * Finds children that are typically specified as `props.children`,
	 * but only iterates over children that are "valid components".
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child with the index reflecting the position relative to "valid components".
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} findFunc.
	 * @param {*} findContext Context for findContext.
	 * @returns {array} of children that meet the findFunc return statement
	 */
	function findValidComponents(children, func, context) {
	  var index = 0;
	  var returnChildren = [];

	  _react2['default'].Children.forEach(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      if (func.call(context, child, index)) {
	        returnChildren.push(child);
	      }
	      index++;
	    }
	  });

	  return returnChildren;
	}

	exports['default'] = {
	  map: mapValidComponents,
	  forEach: forEachValidComponents,
	  numberOf: numberOfValidComponents,
	  find: find,
	  findValidComponents: findValidComponents,
	  hasValidComponent: hasValidComponent
	};
	module.exports = exports['default'];

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _styleMaps = __webpack_require__(184);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _invariant = __webpack_require__(191);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(192);

	var _warning2 = _interopRequireDefault(_warning);

	function curry(fn) {
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var last = args[args.length - 1];
	    if (typeof last === 'function') {
	      return fn.apply(undefined, args);
	    }
	    return function (Component) {
	      return fn.apply(undefined, args.concat([Component]));
	    };
	  };
	}

	function prefix(props, variant) {
	  if (props === undefined) props = {};

	  !(props.bsClass || '').trim() ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'A `bsClass` prop is required for this component') : _invariant2['default'](false) : undefined;
	  return props.bsClass + (variant ? '-' + variant : '');
	}

	var bsClass = curry(function (defaultClass, Component) {
	  var propTypes = Component.propTypes || (Component.propTypes = {});
	  var defaultProps = Component.defaultProps || (Component.defaultProps = {});

	  propTypes.bsClass = _react.PropTypes.string;
	  defaultProps.bsClass = defaultClass;

	  return Component;
	});

	exports.bsClass = bsClass;
	var bsStyles = curry(function (styles, defaultStyle, Component) {
	  if (typeof defaultStyle !== 'string') {
	    Component = defaultStyle;
	    defaultStyle = undefined;
	  }

	  var existing = Component.STYLES || [];
	  var propTypes = Component.propTypes || {};

	  styles.forEach(function (style) {
	    if (existing.indexOf(style) === -1) {
	      existing.push(style);
	    }
	  });

	  var propType = _react.PropTypes.oneOf(existing);

	  // expose the values on the propType function for documentation
	  Component.STYLES = propType._values = existing;

	  Component.propTypes = _extends({}, propTypes, {
	    bsStyle: propType
	  });

	  if (defaultStyle !== undefined) {
	    var defaultProps = Component.defaultProps || (Component.defaultProps = {});
	    defaultProps.bsStyle = defaultStyle;
	  }

	  return Component;
	});

	exports.bsStyles = bsStyles;
	var bsSizes = curry(function (sizes, defaultSize, Component) {
	  if (typeof defaultSize !== 'string') {
	    Component = defaultSize;
	    defaultSize = undefined;
	  }

	  var existing = Component.SIZES || [];
	  var propTypes = Component.propTypes || {};

	  sizes.forEach(function (size) {
	    if (existing.indexOf(size) === -1) {
	      existing.push(size);
	    }
	  });

	  var values = existing.reduce(function (result, size) {
	    if (_styleMaps2['default'].SIZES[size] && _styleMaps2['default'].SIZES[size] !== size) {
	      result.push(_styleMaps2['default'].SIZES[size]);
	    }
	    return result.concat(size);
	  }, []);

	  var propType = _react.PropTypes.oneOf(values);

	  propType._values = values;

	  // expose the values on the propType function for documentation
	  Component.SIZES = existing;

	  Component.propTypes = _extends({}, propTypes, {
	    bsSize: propType
	  });

	  if (defaultSize !== undefined) {
	    var defaultProps = Component.defaultProps || (Component.defaultProps = {});
	    defaultProps.bsSize = defaultSize;
	  }

	  return Component;
	});

	exports.bsSizes = bsSizes;
	exports['default'] = {

	  prefix: prefix,

	  getClassSet: function getClassSet(props) {
	    var classes = {};
	    var bsClassName = prefix(props);

	    if (bsClassName) {
	      var bsSize = undefined;

	      classes[bsClassName] = true;

	      if (props.bsSize) {
	        bsSize = _styleMaps2['default'].SIZES[props.bsSize] || bsSize;
	      }

	      if (bsSize) {
	        classes[prefix(props, bsSize)] = true;
	      }

	      if (props.bsStyle) {
	        if (props.bsStyle.indexOf(prefix(props)) === 0) {
	          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, // small migration convenience, since the old method required manual prefixing
	          'bsStyle will automatically prefix custom values with the bsClass, so there is no ' + 'need to append it manually. (bsStyle: ' + props.bsStyle + ', bsClass: ' + prefix(props) + ')') : undefined;
	          classes[props.bsStyle] = true;
	        } else {
	          classes[prefix(props, props.bsStyle)] = true;
	        }
	      }
	    }

	    return classes;
	  },

	  /**
	   * Add a style variant to a Component. Mutates the propTypes of the component
	   * in order to validate the new variant.
	   */
	  addStyle: function addStyle(Component, styleVariant) {
	    bsStyles(styleVariant, Component);
	  }
	};
	var _curry = curry;
	exports._curry = _curry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$assign = __webpack_require__(169)["default"];

	exports["default"] = _Object$assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	exports.__esModule = true;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(170), __esModule: true };

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(171);
	module.exports = __webpack_require__(174).Object.assign;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(172);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(177)});

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(173)
	  , core      = __webpack_require__(174)
	  , ctx       = __webpack_require__(175)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ },
/* 173 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 174 */
/***/ function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(176);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 176 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.1 Object.assign(target, source, ...)
	var $        = __webpack_require__(178)
	  , toObject = __webpack_require__(179)
	  , IObject  = __webpack_require__(181);

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = __webpack_require__(183)(function(){
	  var a = Object.assign
	    , A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , $$    = arguments
	    , $$len = $$.length
	    , index = 1
	    , getKeys    = $.getKeys
	    , getSymbols = $.getSymbols
	    , isEnum     = $.isEnum;
	  while($$len > index){
	    var S      = IObject($$[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  }
	  return T;
	} : Object.assign;

/***/ },
/* 178 */
/***/ function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(180);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 180 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(182);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 182 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 183 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$assign = __webpack_require__(169)['default'];

	var _Object$create = __webpack_require__(185)['default'];

	var _Object$keys = __webpack_require__(187)['default'];

	exports.__esModule = true;

	var constant = function constant(obj) {
	  return _Object$assign(_Object$create({
	    values: function values() {
	      var _this = this;

	      return _Object$keys(this).map(function (k) {
	        return _this[k];
	      });
	    }
	  }), obj);
	};

	var styleMaps = {

	  SIZES: {
	    'large': 'lg',
	    'medium': 'md',
	    'small': 'sm',
	    'xsmall': 'xs',
	    'lg': 'lg',
	    'md': 'md',
	    'sm': 'sm',
	    'xs': 'xs'
	  },
	  GRID_COLUMNS: 12
	};

	var Sizes = constant({
	  LARGE: 'large',
	  MEDIUM: 'medium',
	  SMALL: 'small',
	  XSMALL: 'xsmall'
	});

	exports.Sizes = Sizes;
	var State = constant({
	  SUCCESS: 'success',
	  WARNING: 'warning',
	  DANGER: 'danger',
	  INFO: 'info'
	});

	exports.State = State;
	var DEFAULT = 'default';
	exports.DEFAULT = DEFAULT;
	var PRIMARY = 'primary';
	exports.PRIMARY = PRIMARY;
	var LINK = 'link';
	exports.LINK = LINK;
	var INVERSE = 'inverse';

	exports.INVERSE = INVERSE;
	exports['default'] = styleMaps;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(186), __esModule: true };

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(178);
	module.exports = function create(P, D){
	  return $.create(P, D);
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(188), __esModule: true };

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(189);
	module.exports = __webpack_require__(174).Object.keys;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(179);

	__webpack_require__(190)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(172)
	  , core    = __webpack_require__(174)
	  , fails   = __webpack_require__(183);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _PanelGroup = __webpack_require__(194);

	var _PanelGroup2 = _interopRequireDefault(_PanelGroup);

	var Accordion = _react2['default'].createClass({
	  displayName: 'Accordion',

	  render: function render() {
	    return _react2['default'].createElement(
	      _PanelGroup2['default'],
	      _extends({}, this.props, { accordion: true }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Accordion;
	module.exports = exports['default'];

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var PanelGroup = _react2['default'].createClass({
	  displayName: 'PanelGroup',

	  propTypes: {
	    accordion: _react2['default'].PropTypes.bool,
	    activeKey: _react2['default'].PropTypes.any,
	    className: _react2['default'].PropTypes.string,
	    children: _react2['default'].PropTypes.node,
	    defaultActiveKey: _react2['default'].PropTypes.any,
	    onSelect: _react2['default'].PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      accordion: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    var defaultActiveKey = this.props.defaultActiveKey;

	    return {
	      activeKey: defaultActiveKey
	    };
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);
	    var _props = this.props;
	    var className = _props.className;

	    var props = _objectWithoutProperties(_props, ['className']);

	    if (this.props.accordion) {
	      props.role = 'tablist';
	    }
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, { className: _classnames2['default'](className, classes), onSelect: null }),
	      _utilsValidComponentChildren2['default'].map(props.children, this.renderPanel)
	    );
	  },

	  renderPanel: function renderPanel(child, index) {
	    var activeKey = this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

	    var props = {
	      bsStyle: child.props.bsStyle || this.props.bsStyle,
	      key: child.key ? child.key : index,
	      ref: child.ref
	    };

	    if (this.props.accordion) {
	      props.headerRole = 'tab';
	      props.panelRole = 'tabpanel';
	      props.collapsible = true;
	      props.expanded = child.props.eventKey === activeKey;
	      props.onSelect = this.handleSelect;
	    }

	    return _react.cloneElement(child, props);
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleSelect: function handleSelect(e, key) {
	    e.preventDefault();

	    if (this.props.onSelect) {
	      this._isChanging = true;
	      this.props.onSelect(key);
	      this._isChanging = false;
	    }

	    if (this.state.activeKey === key) {
	      key = null;
	    }

	    this.setState({
	      activeKey: key
	    });
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsClass('panel-group', PanelGroup);
	module.exports = exports['default'];

/***/ },
/* 195 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

	exports.__esModule = true;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var Alert = _react2['default'].createClass({
	  displayName: 'Alert',

	  propTypes: {
	    onDismiss: _react2['default'].PropTypes.func,
	    dismissAfter: _react2['default'].PropTypes.number,
	    closeLabel: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      closeLabel: 'Close Alert'
	    };
	  },

	  renderDismissButton: function renderDismissButton() {
	    return _react2['default'].createElement(
	      'button',
	      {
	        type: 'button',
	        className: 'close',
	        onClick: this.props.onDismiss,
	        'aria-hidden': 'true',
	        tabIndex: '-1' },
	      _react2['default'].createElement(
	        'span',
	        null,
	        '×'
	      )
	    );
	  },

	  renderSrOnlyDismissButton: function renderSrOnlyDismissButton() {
	    return _react2['default'].createElement(
	      'button',
	      {
	        type: 'button',
	        className: 'close sr-only',
	        onClick: this.props.onDismiss },
	      this.props.closeLabel
	    );
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);
	    var isDismissable = !!this.props.onDismiss;

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'dismissable')] = isDismissable;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { role: 'alert', className: _classnames2['default'](this.props.className, classes) }),
	      isDismissable ? this.renderDismissButton() : null,
	      this.props.children,
	      isDismissable ? this.renderSrOnlyDismissButton() : null
	    );
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.dismissAfter && this.props.onDismiss) {
	      this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.dismissTimer);
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _styleMaps.State.INFO, _utilsBootstrapUtils.bsClass('alert', Alert));
	module.exports = exports['default'];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var Badge = _react2['default'].createClass({
	  displayName: 'Badge',

	  propTypes: {
	    pullRight: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      pullRight: false,
	      bsClass: 'badge'
	    };
	  },

	  hasContent: function hasContent() {
	    return _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || _react2['default'].Children.count(this.props.children) > 1 || typeof this.props.children === 'string' || typeof this.props.children === 'number';
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {
	      'pull-right': this.props.pullRight
	    }, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = this.hasContent(), _classes);
	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Badge;
	module.exports = exports['default'];

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var Breadcrumb = _react2['default'].createClass({
	  displayName: 'Breadcrumb',

	  propTypes: {
	    /**
	     * bootstrap className
	     * @private
	     */
	    bsClass: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'breadcrumb'
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var className = _props.className;

	    var props = _objectWithoutProperties(_props, ['className']);

	    return _react2['default'].createElement(
	      'ol',
	      _extends({}, props, {
	        role: 'navigation',
	        'aria-label': 'breadcrumbs',
	        className: _classnames2['default'](className, this.props.bsClass) }),
	      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderBreadcrumbItem)
	    );
	  },

	  renderBreadcrumbItem: function renderBreadcrumbItem(child, index) {
	    return _react.cloneElement(child, { key: child.key || index });
	  }
	});

	exports['default'] = Breadcrumb;
	module.exports = exports['default'];

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _SafeAnchor = __webpack_require__(201);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var BreadcrumbItem = _react2['default'].createClass({
	  displayName: 'BreadcrumbItem',

	  propTypes: {
	    /**
	     * If set to true, renders `span` instead of `a`
	     */
	    active: _react2['default'].PropTypes.bool,
	    /**
	     * HTML id for the wrapper `li` element
	     */
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    /**
	     * HTML id for the inner `a` element
	     */
	    linkId: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    /**
	     * `href` attribute for the inner `a` element
	     */
	    href: _react2['default'].PropTypes.string,
	    /**
	     * `title` attribute for the inner `a` element
	     */
	    title: _react2['default'].PropTypes.node,
	    /**
	     * `target` attribute for the inner `a` element
	     */
	    target: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var active = _props.active;
	    var className = _props.className;
	    var id = _props.id;
	    var linkId = _props.linkId;
	    var children = _props.children;
	    var href = _props.href;
	    var title = _props.title;
	    var target = _props.target;

	    var props = _objectWithoutProperties(_props, ['active', 'className', 'id', 'linkId', 'children', 'href', 'title', 'target']);

	    var linkProps = {
	      href: href,
	      title: title,
	      target: target,
	      id: linkId
	    };

	    return _react2['default'].createElement(
	      'li',
	      { id: id, className: _classnames2['default'](className, { active: active }) },
	      active ? _react2['default'].createElement(
	        'span',
	        props,
	        children
	      ) : _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        _extends({}, props, linkProps),
	        children
	      )
	    );
	  }
	});

	exports['default'] = BreadcrumbItem;
	module.exports = exports['default'];

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	/**
	 * Note: This is intended as a stop-gap for accessibility concerns that the
	 * Bootstrap CSS does not address as they have styled anchors and not buttons
	 * in many cases.
	 */

	var SafeAnchor = (function (_React$Component) {
	  _inherits(SafeAnchor, _React$Component);

	  function SafeAnchor(props) {
	    _classCallCheck(this, SafeAnchor);

	    _React$Component.call(this, props);

	    this.handleClick = this.handleClick.bind(this);
	  }

	  SafeAnchor.prototype.handleClick = function handleClick(event) {
	    if (this.props.href === undefined) {
	      event.preventDefault();
	    }
	  };

	  SafeAnchor.prototype.render = function render() {
	    return _react2['default'].createElement('a', _extends({ role: this.props.href ? undefined : 'button'
	    }, this.props, {
	      onClick: _utilsCreateChainedFunction2['default'](this.props.onClick, this.handleClick),
	      href: this.props.href || '' }));
	  };

	  return SafeAnchor;
	})(_react2['default'].Component);

	exports['default'] = SafeAnchor;

	SafeAnchor.propTypes = {
	  href: _react2['default'].PropTypes.string,
	  onClick: _react2['default'].PropTypes.func
	};
	module.exports = exports['default'];

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$create = __webpack_require__(185)["default"];

	var _Object$setPrototypeOf = __webpack_require__(203)["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(204), __esModule: true };

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(205);
	module.exports = __webpack_require__(174).Object.setPrototypeOf;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(172);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(206).set});

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = __webpack_require__(178).getDesc
	  , isObject = __webpack_require__(207)
	  , anObject = __webpack_require__(208);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(175)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 207 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(207);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 209 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var types = ['button', 'reset', 'submit'];

	var ButtonStyles = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY, _styleMaps.LINK);

	var Button = _react2['default'].createClass({
	  displayName: 'Button',

	  propTypes: {
	    active: _react2['default'].PropTypes.bool,
	    disabled: _react2['default'].PropTypes.bool,
	    block: _react2['default'].PropTypes.bool,
	    navItem: _react2['default'].PropTypes.bool,
	    navDropdown: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default'],
	    href: _react2['default'].PropTypes.string,
	    target: _react2['default'].PropTypes.string,
	    /**
	     * Defines HTML button type Attribute
	     * @type {("button"|"reset"|"submit")}
	     * @defaultValue 'button'
	     */
	    type: _react2['default'].PropTypes.oneOf(types)
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      block: false,
	      disabled: false,
	      navItem: false,
	      navDropdown: false
	    };
	  },

	  render: function render() {
	    var _extends2;

	    var classes = this.props.navDropdown ? {} : _utilsBootstrapUtils2['default'].getClassSet(this.props);
	    var renderFuncName = undefined;

	    var blockClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'block');

	    classes = _extends((_extends2 = {
	      active: this.props.active
	    }, _extends2[blockClass] = this.props.block, _extends2), classes);

	    if (this.props.navItem) {
	      return this.renderNavItem(classes);
	    }

	    renderFuncName = this.props.href || this.props.target || this.props.navDropdown ? 'renderAnchor' : 'renderButton';

	    return this[renderFuncName](classes);
	  },

	  renderAnchor: function renderAnchor(classes) {
	    var Component = this.props.componentClass || 'a';
	    var href = this.props.href || '#';
	    classes.disabled = this.props.disabled;

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        href: href,
	        className: _classnames2['default'](this.props.className, classes),
	        role: 'button' }),
	      this.props.children
	    );
	  },

	  renderButton: function renderButton(classes) {
	    var Component = this.props.componentClass || 'button';

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        type: this.props.type || 'button',
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  },

	  renderNavItem: function renderNavItem(classes) {
	    var liClasses = {
	      active: this.props.active
	    };

	    return _react2['default'].createElement(
	      'li',
	      { className: _classnames2['default'](liClasses) },
	      this.renderAnchor(classes)
	    );
	  }
	});

	Button.types = types;

	exports['default'] = _utilsBootstrapUtils.bsStyles(ButtonStyles, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL, _styleMaps.Sizes.XSMALL], _utilsBootstrapUtils.bsClass('btn', Button)));
	module.exports = exports['default'];

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _common = __webpack_require__(212);

	/**
	 * Checks whether a prop provides a type of element.
	 *
	 * The type of element can be provided in two forms:
	 * - tag name (string)
	 * - a return value of React.createClass(...)
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

	  if (typeof props[propName] !== 'function') {
	    if (_react2['default'].isValidElement(props[propName])) {
	      return new Error(errBeginning + ', not an actual Element');
	    }

	    if (typeof props[propName] !== 'string') {
	      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
	    }
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ },
/* 212 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.errMsg = errMsg;
	exports.createChainableTypeChecker = createChainableTypeChecker;

	function errMsg(props, propName, componentName, msgContinuation) {
	  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
	}

	/**
	 * Create chain-able isRequired validator
	 *
	 * Largely copied directly from:
	 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
	 */

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName) {
	    componentName = componentName || '<<anonymous>>';
	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
	      }
	    } else {
	      return validate(props, propName, componentName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactPropTypesLibAll = __webpack_require__(214);

	var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

	var _Button = __webpack_require__(210);

	var _Button2 = _interopRequireDefault(_Button);

	var ButtonGroup = _react2['default'].createClass({
	  displayName: 'ButtonGroup',

	  propTypes: {
	    vertical: _react2['default'].PropTypes.bool,
	    justified: _react2['default'].PropTypes.bool,
	    /**
	     * Display block buttons, only useful when used with the "vertical" prop.
	     * @type {bool}
	     */
	    block: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (props) {
	      if (props.block && !props.vertical) {
	        return new Error('The block property requires the vertical property to be set to have any effect');
	      }
	    })
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      block: false,
	      justified: false,
	      vertical: false
	    };
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = !this.props.vertical;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'vertical')] = this.props.vertical;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'justified')] = this.props.justified;

	    // this is annoying, since the class is `btn-block` not `btn-group-block`
	    classes[_utilsBootstrapUtils2['default'].prefix(_Button2['default'].defaultProps, 'block')] = this.props.block;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsClass('btn-group', ButtonGroup);
	module.exports = exports['default'];

/***/ },
/* 214 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = all;

	function all() {
	  for (var _len = arguments.length, propTypes = Array(_len), _key = 0; _key < _len; _key++) {
	    propTypes[_key] = arguments[_key];
	  }

	  if (propTypes === undefined) {
	    throw new Error('No validations provided');
	  }

	  if (propTypes.some(function (propType) {
	    return typeof propType !== 'function';
	  })) {
	    throw new Error('Invalid arguments, must be functions');
	  }

	  if (propTypes.length === 0) {
	    throw new Error('No validations provided');
	  }

	  return function validate(props, propName, componentName) {
	    for (var i = 0; i < propTypes.length; i++) {
	      var result = propTypes[i](props, propName, componentName);

	      if (result !== undefined && result !== null) {
	        return result;
	      }
	    }
	  };
	}

	module.exports = exports['default'];

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _Button = __webpack_require__(210);

	var _Button2 = _interopRequireDefault(_Button);

	var _FormGroup = __webpack_require__(216);

	var _FormGroup2 = _interopRequireDefault(_FormGroup);

	var _InputBase2 = __webpack_require__(217);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _utilsChildrenValueInputValidation = __webpack_require__(163);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var ButtonInput = (function (_InputBase) {
	  _inherits(ButtonInput, _InputBase);

	  function ButtonInput() {
	    _classCallCheck(this, ButtonInput);

	    _InputBase.apply(this, arguments);
	  }

	  ButtonInput.prototype.renderFormGroup = function renderFormGroup(children) {
	    var _props = this.props;
	    var bsStyle = _props.bsStyle;
	    var value = _props.value;

	    var other = _objectWithoutProperties(_props, ['bsStyle', 'value']);

	    return _react2['default'].createElement(
	      _FormGroup2['default'],
	      other,
	      children
	    );
	  };

	  ButtonInput.prototype.renderInput = function renderInput() {
	    var _props2 = this.props;
	    var children = _props2.children;
	    var value = _props2.value;

	    var other = _objectWithoutProperties(_props2, ['children', 'value']);

	    var val = children ? children : value;
	    return _react2['default'].createElement(_Button2['default'], _extends({}, other, { componentClass: 'input', ref: 'input', key: 'input', value: val }));
	  };

	  return ButtonInput;
	})(_InputBase3['default']);

	ButtonInput.types = _Button2['default'].types;

	ButtonInput.defaultProps = {
	  type: 'button'
	};

	ButtonInput.propTypes = {
	  type: _react2['default'].PropTypes.oneOf(ButtonInput.types),
	  bsStyle: function bsStyle() {
	    // defer to Button propTypes of bsStyle
	    return null;
	  },
	  children: _utilsChildrenValueInputValidation2['default'],
	  value: _utilsChildrenValueInputValidation2['default']
	};

	exports['default'] = ButtonInput;
	module.exports = exports['default'];

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var FormGroup = (function (_React$Component) {
	  _inherits(FormGroup, _React$Component);

	  function FormGroup() {
	    _classCallCheck(this, FormGroup);

	    _React$Component.apply(this, arguments);
	  }

	  FormGroup.prototype.render = function render() {
	    var classes = {
	      'form-group': !this.props.standalone,
	      'form-group-lg': !this.props.standalone && this.props.bsSize === 'large',
	      'form-group-sm': !this.props.standalone && this.props.bsSize === 'small',
	      'has-feedback': this.props.hasFeedback,
	      'has-success': this.props.bsStyle === 'success',
	      'has-warning': this.props.bsStyle === 'warning',
	      'has-error': this.props.bsStyle === 'error'
	    };

	    return _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](classes, this.props.groupClassName) },
	      this.props.children
	    );
	  };

	  return FormGroup;
	})(_react2['default'].Component);

	FormGroup.defaultProps = {
	  hasFeedback: false,
	  standalone: false
	};

	FormGroup.propTypes = {
	  standalone: _react2['default'].PropTypes.bool,
	  hasFeedback: _react2['default'].PropTypes.bool,
	  bsSize: function bsSize(props) {
	    if (props.standalone && props.bsSize !== undefined) {
	      return new Error('bsSize will not be used when `standalone` is set.');
	    }

	    return _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']).apply(null, arguments);
	  },
	  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
	  groupClassName: _react2['default'].PropTypes.string
	};

	exports['default'] = FormGroup;
	module.exports = exports['default'];

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _FormGroup = __webpack_require__(216);

	var _FormGroup2 = _interopRequireDefault(_FormGroup);

	var _Glyphicon = __webpack_require__(218);

	var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

	var InputBase = (function (_React$Component) {
	  _inherits(InputBase, _React$Component);

	  function InputBase() {
	    _classCallCheck(this, InputBase);

	    _React$Component.apply(this, arguments);
	  }

	  InputBase.prototype.getInputDOMNode = function getInputDOMNode() {
	    return this.refs.input;
	  };

	  InputBase.prototype.getValue = function getValue() {
	    if (this.props.type === 'static') {
	      return this.props.value;
	    } else if (this.props.type) {
	      if (this.props.type === 'select' && this.props.multiple) {
	        return this.getSelectedOptions();
	      }
	      return this.getInputDOMNode().value;
	    }
	    throw new Error('Cannot use getValue without specifying input type.');
	  };

	  InputBase.prototype.getChecked = function getChecked() {
	    return this.getInputDOMNode().checked;
	  };

	  InputBase.prototype.getSelectedOptions = function getSelectedOptions() {
	    var values = [];

	    Array.prototype.forEach.call(this.getInputDOMNode().getElementsByTagName('option'), function (option) {
	      if (option.selected) {
	        var value = option.getAttribute('value') || option.innerHtml;
	        values.push(value);
	      }
	    });

	    return values;
	  };

	  InputBase.prototype.isCheckboxOrRadio = function isCheckboxOrRadio() {
	    return this.props.type === 'checkbox' || this.props.type === 'radio';
	  };

	  InputBase.prototype.isFile = function isFile() {
	    return this.props.type === 'file';
	  };

	  InputBase.prototype.renderInputGroup = function renderInputGroup(children) {
	    var addonBefore = this.props.addonBefore ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-addon', key: 'addonBefore' },
	      this.props.addonBefore
	    ) : null;

	    var addonAfter = this.props.addonAfter ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-addon', key: 'addonAfter' },
	      this.props.addonAfter
	    ) : null;

	    var buttonBefore = this.props.buttonBefore ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-btn' },
	      this.props.buttonBefore
	    ) : null;

	    var buttonAfter = this.props.buttonAfter ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-btn' },
	      this.props.buttonAfter
	    ) : null;

	    var inputGroupClassName = undefined;
	    switch (this.props.bsSize) {
	      case 'small':
	        inputGroupClassName = 'input-group-sm';break;
	      case 'large':
	        inputGroupClassName = 'input-group-lg';break;
	      default:
	    }

	    return addonBefore || addonAfter || buttonBefore || buttonAfter ? _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](inputGroupClassName, 'input-group'), key: 'input-group' },
	      addonBefore,
	      buttonBefore,
	      children,
	      addonAfter,
	      buttonAfter
	    ) : children;
	  };

	  InputBase.prototype.renderIcon = function renderIcon() {
	    if (this.props.hasFeedback) {
	      if (this.props.feedbackIcon) {
	        return _react2['default'].cloneElement(this.props.feedbackIcon, { formControlFeedback: true });
	      }

	      switch (this.props.bsStyle) {
	        case 'success':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'ok', key: 'icon' });
	        case 'warning':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'warning-sign', key: 'icon' });
	        case 'error':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'remove', key: 'icon' });
	        default:
	          return _react2['default'].createElement('span', { className: 'form-control-feedback', key: 'icon' });
	      }
	    } else {
	      return null;
	    }
	  };

	  InputBase.prototype.renderHelp = function renderHelp() {
	    return this.props.help ? _react2['default'].createElement(
	      'span',
	      { className: 'help-block', key: 'help' },
	      this.props.help
	    ) : null;
	  };

	  InputBase.prototype.renderCheckboxAndRadioWrapper = function renderCheckboxAndRadioWrapper(children) {
	    var classes = {
	      'checkbox': this.props.type === 'checkbox',
	      'radio': this.props.type === 'radio'
	    };

	    return _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](classes), key: 'checkboxRadioWrapper' },
	      children
	    );
	  };

	  InputBase.prototype.renderWrapper = function renderWrapper(children) {
	    return this.props.wrapperClassName ? _react2['default'].createElement(
	      'div',
	      { className: this.props.wrapperClassName, key: 'wrapper' },
	      children
	    ) : children;
	  };

	  InputBase.prototype.renderLabel = function renderLabel(children) {
	    var classes = {
	      'control-label': !this.isCheckboxOrRadio()
	    };
	    classes[this.props.labelClassName] = this.props.labelClassName;

	    return this.props.label ? _react2['default'].createElement(
	      'label',
	      { htmlFor: this.props.id, className: _classnames2['default'](classes), key: 'label' },
	      children,
	      this.props.label
	    ) : children;
	  };

	  InputBase.prototype.renderInput = function renderInput() {
	    if (!this.props.type) {
	      return this.props.children;
	    }

	    switch (this.props.type) {
	      case 'select':
	        return _react2['default'].createElement(
	          'select',
	          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }),
	          this.props.children
	        );
	      case 'textarea':
	        return _react2['default'].createElement('textarea', _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }));
	      case 'static':
	        return _react2['default'].createElement(
	          'p',
	          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
	          this.props.value
	        );
	      default:
	        var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';
	        return _react2['default'].createElement('input', _extends({}, this.props, { className: _classnames2['default'](this.props.className, className), ref: 'input', key: 'input' }));
	    }
	  };

	  InputBase.prototype.renderFormGroup = function renderFormGroup(children) {
	    return _react2['default'].createElement(
	      _FormGroup2['default'],
	      this.props,
	      children
	    );
	  };

	  InputBase.prototype.renderChildren = function renderChildren() {
	    return !this.isCheckboxOrRadio() ? [this.renderLabel(), this.renderWrapper([this.renderInputGroup(this.renderInput()), this.renderIcon(), this.renderHelp()])] : this.renderWrapper([this.renderCheckboxAndRadioWrapper(this.renderLabel(this.renderInput())), this.renderHelp()]);
	  };

	  InputBase.prototype.render = function render() {
	    var children = this.renderChildren();
	    return this.renderFormGroup(children);
	  };

	  return InputBase;
	})(_react2['default'].Component);

	InputBase.propTypes = {
	  type: _react2['default'].PropTypes.string,
	  label: _react2['default'].PropTypes.node,
	  help: _react2['default'].PropTypes.node,
	  addonBefore: _react2['default'].PropTypes.node,
	  addonAfter: _react2['default'].PropTypes.node,
	  buttonBefore: _react2['default'].PropTypes.node,
	  buttonAfter: _react2['default'].PropTypes.node,
	  bsSize: _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']),
	  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
	  hasFeedback: _react2['default'].PropTypes.bool,
	  feedbackIcon: _react2['default'].PropTypes.node,
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	  groupClassName: _react2['default'].PropTypes.string,
	  wrapperClassName: _react2['default'].PropTypes.string,
	  labelClassName: _react2['default'].PropTypes.string,
	  multiple: _react2['default'].PropTypes.bool,
	  disabled: _react2['default'].PropTypes.bool,
	  value: _react2['default'].PropTypes.any
	};

	InputBase.defaultProps = {
	  disabled: false,
	  hasFeedback: false,
	  multiple: false
	};

	exports['default'] = InputBase;
	module.exports = exports['default'];

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Glyphicon = _react2['default'].createClass({
	  displayName: 'Glyphicon',

	  propTypes: {
	    /**
	     * bootstrap className
	     * @private
	     */
	    bsClass: _react2['default'].PropTypes.string,
	    /**
	     * An icon name. See e.g. http://getbootstrap.com/components/#glyphicons
	     */
	    glyph: _react2['default'].PropTypes.string.isRequired,
	    /**
	     * Adds 'form-control-feedback' class
	     * @private
	     */
	    formControlFeedback: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'glyphicon',
	      formControlFeedback: false
	    };
	  },

	  render: function render() {
	    var _classNames;

	    var className = _classnames2['default'](this.props.className, (_classNames = {}, _classNames[this.props.bsClass] = true, _classNames['glyphicon-' + this.props.glyph] = true, _classNames['form-control-feedback'] = this.props.formControlFeedback, _classNames));

	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: className }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Glyphicon;
	module.exports = exports['default'];

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _Button = __webpack_require__(210);

	var _Button2 = _interopRequireDefault(_Button);

	var ButtonToolbar = _react2['default'].createClass({
	  displayName: 'ButtonToolbar',

	  propTypes: {
	    bsSize: _Button2['default'].propTypes.bsSize
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'btn-toolbar'
	    };
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        role: 'toolbar',
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = ButtonToolbar;
	module.exports = exports['default'];

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _Glyphicon = __webpack_require__(218);

	var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var Carousel = _react2['default'].createClass({
	  displayName: 'Carousel',

	  propTypes: {
	    slide: _react2['default'].PropTypes.bool,
	    indicators: _react2['default'].PropTypes.bool,
	    interval: _react2['default'].PropTypes.number,
	    controls: _react2['default'].PropTypes.bool,
	    pauseOnHover: _react2['default'].PropTypes.bool,
	    wrap: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    onSlideEnd: _react2['default'].PropTypes.func,
	    activeIndex: _react2['default'].PropTypes.number,
	    defaultActiveIndex: _react2['default'].PropTypes.number,
	    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
	    prevIcon: _react2['default'].PropTypes.node,
	    nextIcon: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'carousel',
	      slide: true,
	      interval: 5000,
	      pauseOnHover: true,
	      wrap: true,
	      indicators: true,
	      controls: true,
	      prevIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-left' }),
	      nextIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-right' })
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      activeIndex: this.props.defaultActiveIndex == null ? 0 : this.props.defaultActiveIndex,
	      previousActiveIndex: null,
	      direction: null
	    };
	  },

	  getDirection: function getDirection(prevIndex, index) {
	    if (prevIndex === index) {
	      return null;
	    }

	    return prevIndex > index ? 'prev' : 'next';
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var activeIndex = this.getActiveIndex();

	    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {
	      clearTimeout(this.timeout);
	      this.setState({
	        previousActiveIndex: activeIndex,
	        direction: nextProps.direction != null ? nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)
	      });
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    this.waitForNext();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.timeout);
	  },

	  next: function next(e) {
	    if (e) {
	      e.preventDefault();
	    }

	    var index = this.getActiveIndex() + 1;
	    var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

	    if (index > count - 1) {
	      if (!this.props.wrap) {
	        return;
	      }
	      index = 0;
	    }

	    this.handleSelect(index, 'next');
	  },

	  prev: function prev(e) {
	    if (e) {
	      e.preventDefault();
	    }

	    var index = this.getActiveIndex() - 1;

	    if (index < 0) {
	      if (!this.props.wrap) {
	        return;
	      }
	      index = _utilsValidComponentChildren2['default'].numberOf(this.props.children) - 1;
	    }

	    this.handleSelect(index, 'prev');
	  },

	  pause: function pause() {
	    this.isPaused = true;
	    clearTimeout(this.timeout);
	  },

	  play: function play() {
	    this.isPaused = false;
	    this.waitForNext();
	  },

	  waitForNext: function waitForNext() {
	    if (!this.isPaused && this.props.slide && this.props.interval && this.props.activeIndex == null) {
	      this.timeout = setTimeout(this.next, this.props.interval);
	    }
	  },

	  handleMouseOver: function handleMouseOver() {
	    if (this.props.pauseOnHover) {
	      this.pause();
	    }
	  },

	  handleMouseOut: function handleMouseOut() {
	    if (this.isPaused) {
	      this.play();
	    }
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes.slide = this.props.slide, _classes);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes),
	        onMouseOver: this.handleMouseOver,
	        onMouseOut: this.handleMouseOut }),
	      this.props.indicators ? this.renderIndicators() : null,
	      _react2['default'].createElement(
	        'div',
	        {
	          ref: 'inner',
	          className: _utilsBootstrapUtils2['default'].prefix(this.props, 'inner')
	        },
	        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderItem)
	      ),
	      this.props.controls ? this.renderControls() : null
	    );
	  },

	  renderPrev: function renderPrev() {
	    var classes = 'left ' + _utilsBootstrapUtils2['default'].prefix(this.props, 'control');

	    return _react2['default'].createElement(
	      'a',
	      { className: classes, href: '#prev', key: 0, onClick: this.prev },
	      this.props.prevIcon
	    );
	  },

	  renderNext: function renderNext() {
	    var classes = 'right ' + _utilsBootstrapUtils2['default'].prefix(this.props, 'control');

	    return _react2['default'].createElement(
	      'a',
	      { className: classes, href: '#next', key: 1, onClick: this.next },
	      this.props.nextIcon
	    );
	  },

	  renderControls: function renderControls() {
	    if (!this.props.wrap) {
	      var activeIndex = this.getActiveIndex();
	      var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

	      return [activeIndex !== 0 ? this.renderPrev() : null, activeIndex !== count - 1 ? this.renderNext() : null];
	    }

	    return [this.renderPrev(), this.renderNext()];
	  },

	  renderIndicator: function renderIndicator(child, index) {
	    var className = index === this.getActiveIndex() ? 'active' : null;

	    return _react2['default'].createElement('li', {
	      key: index,
	      className: className,
	      onClick: this.handleSelect.bind(this, index, null) });
	  },

	  renderIndicators: function renderIndicators() {
	    var _this = this;

	    var indicators = [];
	    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child, index) {
	      indicators.push(_this.renderIndicator(child, index),

	      // Force whitespace between indicator elements, bootstrap
	      // requires this for correct spacing of elements.
	      ' ');
	    }, this);

	    return _react2['default'].createElement(
	      'ol',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'indicators') },
	      indicators
	    );
	  },

	  getActiveIndex: function getActiveIndex() {
	    return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;
	  },

	  handleItemAnimateOutEnd: function handleItemAnimateOutEnd() {
	    var _this2 = this;

	    this.setState({
	      previousActiveIndex: null,
	      direction: null
	    }, function () {
	      _this2.waitForNext();

	      if (_this2.props.onSlideEnd) {
	        _this2.props.onSlideEnd();
	      }
	    });
	  },

	  renderItem: function renderItem(child, index) {
	    var activeIndex = this.getActiveIndex();
	    var isActive = index === activeIndex;
	    var isPreviousActive = this.state.previousActiveIndex != null && this.state.previousActiveIndex === index && this.props.slide;

	    return _react.cloneElement(child, {
	      active: isActive,
	      ref: child.ref,
	      key: child.key ? child.key : index,
	      index: index,
	      animateOut: isPreviousActive,
	      animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,
	      direction: this.state.direction,
	      onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd : null
	    });
	  },

	  handleSelect: function handleSelect(index, direction) {
	    clearTimeout(this.timeout);

	    if (this.isMounted()) {
	      var previousActiveIndex = this.getActiveIndex();
	      direction = direction || this.getDirection(previousActiveIndex, index);

	      if (this.props.onSelect) {
	        this.props.onSelect(index, direction);
	      }

	      if (this.props.activeIndex == null && index !== previousActiveIndex) {
	        if (this.state.previousActiveIndex != null) {
	          // If currently animating don't activate the new index.
	          // TODO: look into queuing this canceled call and
	          // animating after the current animation has ended.
	          return;
	        }

	        this.setState({
	          activeIndex: index,
	          previousActiveIndex: previousActiveIndex,
	          direction: direction
	        });
	      }
	    }
	  }
	});

	exports['default'] = Carousel;
	module.exports = exports['default'];

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utilsTransitionEvents = __webpack_require__(223);

	var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var CarouselItem = _react2['default'].createClass({
	  displayName: 'CarouselItem',

	  propTypes: {
	    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
	    onAnimateOutEnd: _react2['default'].PropTypes.func,
	    active: _react2['default'].PropTypes.bool,
	    animateIn: _react2['default'].PropTypes.bool,
	    animateOut: _react2['default'].PropTypes.bool,
	    caption: _react2['default'].PropTypes.node,
	    index: _react2['default'].PropTypes.number
	  },

	  getInitialState: function getInitialState() {
	    return {
	      direction: null
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsStyle: 'carousel',
	      active: false,
	      animateIn: false,
	      animateOut: false
	    };
	  },

	  handleAnimateOutEnd: function handleAnimateOutEnd() {
	    if (this.props.onAnimateOutEnd && this.isMounted()) {
	      this.props.onAnimateOutEnd(this.props.index);
	    }
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.active !== nextProps.active) {
	      this.setState({
	        direction: null
	      });
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    if (!this.props.active && prevProps.active) {
	      _utilsTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this), this.handleAnimateOutEnd);
	    }

	    if (this.props.active !== prevProps.active) {
	      setTimeout(this.startAnimation, 20);
	    }
	  },

	  startAnimation: function startAnimation() {
	    if (!this.isMounted()) {
	      return;
	    }

	    this.setState({
	      direction: this.props.direction === 'prev' ? 'right' : 'left'
	    });
	  },

	  render: function render() {
	    var classes = {
	      item: true,
	      active: this.props.active && !this.props.animateIn || this.props.animateOut,
	      next: this.props.active && this.props.animateIn && this.props.direction === 'next',
	      prev: this.props.active && this.props.animateIn && this.props.direction === 'prev'
	    };

	    if (this.state.direction && (this.props.animateIn || this.props.animateOut)) {
	      classes[this.state.direction] = true;
	    }

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children,
	      this.props.caption ? this.renderCaption() : null
	    );
	  },

	  renderCaption: function renderCaption() {
	    var classes = _utilsBootstrapUtils2['default'].prefix(this.props, 'caption');

	    return _react2['default'].createElement(
	      'div',
	      { className: classes },
	      this.props.caption
	    );
	  }
	});

	exports['default'] = CarouselItem;
	module.exports = exports['default'];

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(5);


/***/ },
/* 223 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This file contains a modified version of:
	 * https://github.com/facebook/react/blob/v0.12.0/src/addons/transitions/ReactTransitionEvents.js
	 *
	 * This source code is licensed under the BSD-style license found here:
	 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
	 * An additional grant of patent rights can be found here:
	 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
	 */

	'use strict';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    // eslint-disable-line guard-for-in
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	exports['default'] = ReactTransitionEvents;
	module.exports = exports['default'];

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _Object$keys = __webpack_require__(187)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _styleMaps = __webpack_require__(184);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var Col = _react2['default'].createClass({
	  displayName: 'Col',

	  propTypes: {
	    /**
	     * The number of columns you wish to span
	     *
	     * for Extra small devices Phones (<768px)
	     *
	     * class-prefix `col-xs-`
	     */
	    xs: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Small devices Tablets (≥768px)
	     *
	     * class-prefix `col-sm-`
	     */
	    sm: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Medium devices Desktops (≥992px)
	     *
	     * class-prefix `col-md-`
	     */
	    md: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Large devices Desktops (≥1200px)
	     *
	     * class-prefix `col-lg-`
	     */
	    lg: _react2['default'].PropTypes.number,
	    /**
	     * Hide column
	     *
	     * on Extra small devices Phones
	     *
	     * adds class `hidden-xs`
	     */
	    xsHidden: _react2['default'].PropTypes.bool,
	    /**
	     * Hide column
	     *
	     * on Small devices Tablets
	     *
	     * adds class `hidden-sm`
	     */
	    smHidden: _react2['default'].PropTypes.bool,
	    /**
	     * Hide column
	     *
	     * on Medium devices Desktops
	     *
	     * adds class `hidden-md`
	     */
	    mdHidden: _react2['default'].PropTypes.bool,
	    /**
	     * Hide column
	     *
	     * on Large devices Desktops
	     *
	     * adds class `hidden-lg`
	     */
	    lgHidden: _react2['default'].PropTypes.bool,
	    /**
	     * Move columns to the right
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-offset-`
	     */
	    xsOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-offset-`
	     */
	    smOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-offset-`
	     */
	    mdOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-offset-`
	     */
	    lgOffset: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-push-`
	     */
	    xsPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-push-`
	     */
	    smPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-push-`
	     */
	    mdPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-push-`
	     */
	    lgPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-pull-`
	     */
	    xsPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-pull-`
	     */
	    smPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-pull-`
	     */
	    mdPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-pull-`
	     */
	    lgPull: _react2['default'].PropTypes.number,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div'
	    };
	  },

	  render: function render() {
	    var _this = this;

	    var ComponentClass = this.props.componentClass;
	    var classes = {};

	    _Object$keys(_styleMaps2['default'].SIZES).forEach(function (key) {
	      var size = _styleMaps2['default'].SIZES[key];
	      var prop = size;
	      var classPart = size + '-';

	      if (_this.props[prop]) {
	        classes['col-' + classPart + _this.props[prop]] = true;
	      }

	      classes['hidden-' + size] = _this.props[size + 'Hidden'];

	      prop = size + 'Offset';
	      classPart = size + '-offset-';
	      if (_this.props[prop] >= 0) {
	        classes['col-' + classPart + _this.props[prop]] = true;
	      }

	      prop = size + 'Push';
	      classPart = size + '-push-';
	      if (_this.props[prop] >= 0) {
	        classes['col-' + classPart + _this.props[prop]] = true;
	      }

	      prop = size + 'Pull';
	      classPart = size + '-pull-';
	      if (_this.props[prop] >= 0) {
	        classes['col-' + classPart + _this.props[prop]] = true;
	      }
	    }, this);

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Col;
	module.exports = exports['default'];

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _Collapse = __webpack_require__(226);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsDeprecationWarning = __webpack_require__(240);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var CollapsibleNav = _react2['default'].createClass({
	  displayName: 'CollapsibleNav',

	  propTypes: {
	    onSelect: _react2['default'].PropTypes.func,
	    activeHref: _react2['default'].PropTypes.string,
	    activeKey: _react2['default'].PropTypes.any,
	    collapsible: _react2['default'].PropTypes.bool,
	    expanded: _react2['default'].PropTypes.bool,
	    eventKey: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      collapsible: false,
	      expanded: false
	    };
	  },

	  render: function render() {
	    /*
	     * this.props.collapsible is set in NavBar when an eventKey is supplied.
	     */
	    var classes = this.props.collapsible ? 'navbar-collapse' : null;
	    var renderChildren = this.props.collapsible ? this.renderCollapsibleNavChildren : this.renderChildren;

	    var nav = _react2['default'].createElement(
	      'div',
	      { eventKey: this.props.eventKey, className: _classnames2['default'](this.props.className, classes) },
	      _utilsValidComponentChildren2['default'].map(this.props.children, renderChildren)
	    );

	    if (this.props.collapsible) {
	      return _react2['default'].createElement(
	        _Collapse2['default'],
	        { 'in': this.props.expanded },
	        nav
	      );
	    }
	    return nav;
	  },

	  getChildActiveProp: function getChildActiveProp(child) {
	    if (child.props.active) {
	      return true;
	    }
	    if (this.props.activeKey != null) {
	      if (child.props.eventKey === this.props.activeKey) {
	        return true;
	      }
	    }
	    if (this.props.activeHref != null) {
	      if (child.props.href === this.props.activeHref) {
	        return true;
	      }
	    }

	    return child.props.active;
	  },

	  renderChildren: function renderChildren(child, index) {
	    var key = child.key ? child.key : index;
	    return _react.cloneElement(child, {
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      ref: 'nocollapse_' + key,
	      key: key,
	      navItem: true
	    });
	  },

	  renderCollapsibleNavChildren: function renderCollapsibleNavChildren(child, index) {
	    var key = child.key ? child.key : index;
	    return _react.cloneElement(child, {
	      active: this.getChildActiveProp(child),
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      ref: 'collapsible_' + key,
	      key: key,
	      navItem: true
	    });
	  }
	});

	exports['default'] = _utilsDeprecationWarning2['default'].wrapper(CollapsibleNav, 'CollapsibleNav', 'Navbar.Collapse', 'http://react-bootstrap.github.io/components.html#navbars');
	module.exports = exports['default'];

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _domHelpersStyle = __webpack_require__(227);

	var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactOverlaysLibTransition = __webpack_require__(235);

	var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

	var _reactPropTypesLibDeprecated = __webpack_require__(239);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var capitalize = function capitalize(str) {
	  return str[0].toUpperCase() + str.substr(1);
	};

	// reading a dimension prop will cause the browser to recalculate,
	// which will let our animations work
	var triggerBrowserReflow = function triggerBrowserReflow(node) {
	  return node.offsetHeight;
	};

	var MARGINS = {
	  height: ['marginTop', 'marginBottom'],
	  width: ['marginLeft', 'marginRight']
	};

	function getDimensionValue(dimension, elem) {
	  var value = elem['offset' + capitalize(dimension)];
	  var margins = MARGINS[dimension];

	  return value + parseInt(_domHelpersStyle2['default'](elem, margins[0]), 10) + parseInt(_domHelpersStyle2['default'](elem, margins[1]), 10);
	}

	var Collapse = (function (_React$Component) {
	  _inherits(Collapse, _React$Component);

	  function Collapse(props, context) {
	    _classCallCheck(this, Collapse);

	    _React$Component.call(this, props, context);

	    this.onEnterListener = this.handleEnter.bind(this);
	    this.onEnteringListener = this.handleEntering.bind(this);
	    this.onEnteredListener = this.handleEntered.bind(this);
	    this.onExitListener = this.handleExit.bind(this);
	    this.onExitingListener = this.handleExiting.bind(this);
	  }

	  // Explicitly copied from Transition for doc generation.
	  // TODO: Remove duplication once #977 is resolved.

	  Collapse.prototype.render = function render() {
	    var enter = _utilsCreateChainedFunction2['default'](this.onEnterListener, this.props.onEnter);
	    var entering = _utilsCreateChainedFunction2['default'](this.onEnteringListener, this.props.onEntering);
	    var entered = _utilsCreateChainedFunction2['default'](this.onEnteredListener, this.props.onEntered);
	    var exit = _utilsCreateChainedFunction2['default'](this.onExitListener, this.props.onExit);
	    var exiting = _utilsCreateChainedFunction2['default'](this.onExitingListener, this.props.onExiting);

	    return _react2['default'].createElement(
	      _reactOverlaysLibTransition2['default'],
	      _extends({
	        ref: 'transition'
	      }, this.props, {
	        'aria-expanded': this.props.role ? this.props['in'] : null,
	        className: _classnames2['default'](this.props.className, { width: this._dimension() === 'width' }),
	        exitedClassName: 'collapse',
	        exitingClassName: 'collapsing',
	        enteredClassName: 'collapse in',
	        enteringClassName: 'collapsing',
	        onEnter: enter,
	        onEntering: entering,
	        onEntered: entered,
	        onExit: exit,
	        onExiting: exiting,
	        onExited: this.props.onExited
	      }),
	      this.props.children
	    );
	  };

	  /* -- Expanding -- */

	  Collapse.prototype.handleEnter = function handleEnter(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype.handleEntering = function handleEntering(elem) {
	    var dimension = this._dimension();

	    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
	  };

	  Collapse.prototype.handleEntered = function handleEntered(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = null;
	  };

	  /* -- Collapsing -- */

	  Collapse.prototype.handleExit = function handleExit(elem) {
	    var dimension = this._dimension();

	    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
	  };

	  Collapse.prototype.handleExiting = function handleExiting(elem) {
	    var dimension = this._dimension();

	    triggerBrowserReflow(elem);
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype._dimension = function _dimension() {
	    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
	  };

	  // for testing

	  Collapse.prototype._getTransitionInstance = function _getTransitionInstance() {
	    return this.refs.transition;
	  };

	  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
	    return elem['scroll' + capitalize(dimension)] + 'px';
	  };

	  return Collapse;
	})(_react2['default'].Component);

	Collapse.propTypes = {
	  /**
	   * Show the component; triggers the expand or collapse animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is collapsed
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the expand animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * Duration of the collapse animation in milliseconds, to ensure that
	   * finishing callbacks are fired even if the original browser transition end
	   * events are canceled
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * duration
	   * @private
	   */
	  duration: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.number, 'Use `timeout`.'),

	  /**
	   * Callback fired before the component expands
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to expand
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has expanded
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the component collapses
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to collapse
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has collapsed
	   */
	  onExited: _react2['default'].PropTypes.func,

	  /**
	   * The dimension used when collapsing, or a function that returns the
	   * dimension
	   *
	   * _Note: Bootstrap only partially supports 'width'!
	   * You will need to supply your own CSS animation for the `.width` CSS class._
	   */
	  dimension: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['height', 'width']), _react2['default'].PropTypes.func]),

	  /**
	   * Function that returns the height or width of the animating DOM node
	   *
	   * Allows for providing some custom logic for how much the Collapse component
	   * should animate in its specified dimension. Called with the current
	   * dimension prop value and the DOM node.
	   */
	  getDimensionValue: _react2['default'].PropTypes.func,

	  /**
	   * ARIA role of collapsible element
	   */
	  role: _react2['default'].PropTypes.string
	};

	Collapse.defaultProps = {
	  'in': false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false,

	  dimension: 'height',
	  getDimensionValue: getDimensionValue
	};

	exports['default'] = Collapse;
	module.exports = exports['default'];

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var camelize = __webpack_require__(228),
	    hyphenate = __webpack_require__(230),
	    _getComputedStyle = __webpack_require__(232),
	    removeStyle = __webpack_require__(234);

	var has = Object.prototype.hasOwnProperty;

	module.exports = function style(node, property, value) {
	  var css = '',
	      props = property;

	  if (typeof property === 'string') {

	    if (value === undefined) return node.style[camelize(property)] || _getComputedStyle(node).getPropertyValue(hyphenate(property));else (props = {})[property] = value;
	  }

	  for (var key in props) if (has.call(props, key)) {
	    !props[key] && props[key] !== 0 ? removeStyle(node, hyphenate(key)) : css += hyphenate(key) + ':' + props[key] + ';';
	  }

	  node.style.cssText += ';' + css;
	};

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
	 */

	'use strict';
	var camelize = __webpack_require__(229);
	var msPattern = /^-ms-/;

	module.exports = function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	};

/***/ },
/* 229 */
/***/ function(module, exports) {

	"use strict";

	var rHyphen = /-(.)/g;

	module.exports = function camelize(string) {
	  return string.replace(rHyphen, function (_, chr) {
	    return chr.toUpperCase();
	  });
	};

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
	 */

	"use strict";

	var hyphenate = __webpack_require__(231);
	var msPattern = /^ms-/;

	module.exports = function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, "-ms-");
	};

/***/ },
/* 231 */
/***/ function(module, exports) {

	'use strict';

	var rUpper = /([A-Z])/g;

	module.exports = function hyphenate(string) {
	  return string.replace(rUpper, '-$1').toLowerCase();
	};

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(233);

	var _utilCamelizeStyle = __webpack_require__(228);

	var _utilCamelizeStyle2 = babelHelpers.interopRequireDefault(_utilCamelizeStyle);

	var rposition = /^(top|right|bottom|left)$/;
	var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

	module.exports = function _getComputedStyle(node) {
	  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
	  var doc = node.ownerDocument;

	  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : { //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
	    getPropertyValue: function getPropertyValue(prop) {
	      var style = node.style;

	      prop = (0, _utilCamelizeStyle2['default'])(prop);

	      if (prop == 'float') prop = 'styleFloat';

	      var current = node.currentStyle[prop] || null;

	      if (current == null && style && style[prop]) current = style[prop];

	      if (rnumnonpx.test(current) && !rposition.test(prop)) {
	        // Remember the original values
	        var left = style.left;
	        var runStyle = node.runtimeStyle;
	        var rsLeft = runStyle && runStyle.left;

	        // Put in the new values to get a computed value out
	        if (rsLeft) runStyle.left = node.currentStyle.left;

	        style.left = prop === 'fontSize' ? '1em' : current;
	        current = style.pixelLeft + 'px';

	        // Revert the changed values
	        style.left = left;
	        if (rsLeft) runStyle.left = rsLeft;
	      }

	      return current;
	    }
	  };
	};

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === "object") {
	    factory(exports);
	  } else {
	    factory(root.babelHelpers = {});
	  }
	})(this, function (global) {
	  var babelHelpers = global;

	  babelHelpers.interopRequireDefault = function (obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  };

	  babelHelpers._extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };
	})

/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function removeStyle(node, key) {
	  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
	};

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _domHelpersTransitionProperties = __webpack_require__(236);

	var _domHelpersTransitionProperties2 = _interopRequireDefault(_domHelpersTransitionProperties);

	var _domHelpersEventsOn = __webpack_require__(238);

	var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var transitionEndEvent = _domHelpersTransitionProperties2['default'].end;

	var UNMOUNTED = 0;
	exports.UNMOUNTED = UNMOUNTED;
	var EXITED = 1;
	exports.EXITED = EXITED;
	var ENTERING = 2;
	exports.ENTERING = ENTERING;
	var ENTERED = 3;
	exports.ENTERED = ENTERED;
	var EXITING = 4;

	exports.EXITING = EXITING;
	/**
	 * The Transition component lets you define and run css transitions with a simple declarative api.
	 * It works similar to React's own [CSSTransitionGroup](http://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup)
	 * but is specifically optimized for transitioning a single child "in" or "out".
	 *
	 * You don't even need to use class based css transitions if you don't want to (but it is easiest).
	 * The extensive set of lifecyle callbacks means you have control over
	 * the transitioning now at each step of the way.
	 */

	var Transition = (function (_React$Component) {
	  _inherits(Transition, _React$Component);

	  function Transition(props, context) {
	    _classCallCheck(this, Transition);

	    _React$Component.call(this, props, context);

	    var initialStatus = undefined;
	    if (props['in']) {
	      // Start enter transition in componentDidMount.
	      initialStatus = props.transitionAppear ? EXITED : ENTERED;
	    } else {
	      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
	    }
	    this.state = { status: initialStatus };

	    this.nextCallback = null;
	  }

	  Transition.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.transitionAppear && this.props['in']) {
	      this.performEnter(this.props);
	    }
	  };

	  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var status = this.state.status;
	    if (nextProps['in']) {
	      if (status === EXITING) {
	        this.performEnter(nextProps);
	      } else if (this.props.unmountOnExit) {
	        if (status === UNMOUNTED) {
	          // Start enter transition in componentDidUpdate.
	          this.setState({ status: EXITED });
	        }
	      } else if (status === EXITED) {
	        this.performEnter(nextProps);
	      }

	      // Otherwise we're already entering or entered.
	    } else {
	        if (status === ENTERING || status === ENTERED) {
	          this.performExit(nextProps);
	        }

	        // Otherwise we're already exited or exiting.
	      }
	  };

	  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (this.props.unmountOnExit && this.state.status === EXITED) {
	      // EXITED is always a transitional state to either ENTERING or UNMOUNTED
	      // when using unmountOnExit.
	      if (this.props['in']) {
	        this.performEnter(this.props);
	      } else {
	        this.setState({ status: UNMOUNTED });
	      }
	    }
	  };

	  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  Transition.prototype.performEnter = function performEnter(props) {
	    var _this = this;

	    this.cancelNextCallback();
	    var node = _reactDom2['default'].findDOMNode(this);

	    // Not this.props, because we might be about to receive new props.
	    props.onEnter(node);

	    this.safeSetState({ status: ENTERING }, function () {
	      _this.props.onEntering(node);

	      _this.onTransitionEnd(node, function () {
	        _this.safeSetState({ status: ENTERED }, function () {
	          _this.props.onEntered(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.performExit = function performExit(props) {
	    var _this2 = this;

	    this.cancelNextCallback();
	    var node = _reactDom2['default'].findDOMNode(this);

	    // Not this.props, because we might be about to receive new props.
	    props.onExit(node);

	    this.safeSetState({ status: EXITING }, function () {
	      _this2.props.onExiting(node);

	      _this2.onTransitionEnd(node, function () {
	        _this2.safeSetState({ status: EXITED }, function () {
	          _this2.props.onExited(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    this.setState(nextState, this.setNextCallback(callback));
	  };

	  Transition.prototype.setNextCallback = function setNextCallback(callback) {
	    var _this3 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this3.nextCallback = null;

	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
	    this.setNextCallback(handler);

	    if (node) {
	      _domHelpersEventsOn2['default'](node, transitionEndEvent, this.nextCallback);
	      setTimeout(this.nextCallback, this.props.timeout);
	    } else {
	      setTimeout(this.nextCallback, 0);
	    }
	  };

	  Transition.prototype.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _props = this.props;
	    var children = _props.children;
	    var className = _props.className;

	    var childProps = _objectWithoutProperties(_props, ['children', 'className']);

	    Object.keys(Transition.propTypes).forEach(function (key) {
	      return delete childProps[key];
	    });

	    var transitionClassName = undefined;
	    if (status === EXITED) {
	      transitionClassName = this.props.exitedClassName;
	    } else if (status === ENTERING) {
	      transitionClassName = this.props.enteringClassName;
	    } else if (status === ENTERED) {
	      transitionClassName = this.props.enteredClassName;
	    } else if (status === EXITING) {
	      transitionClassName = this.props.exitingClassName;
	    }

	    var child = _react2['default'].Children.only(children);
	    return _react2['default'].cloneElement(child, _extends({}, childProps, {
	      className: _classnames2['default'](child.props.className, className, transitionClassName)
	    }));
	  };

	  return Transition;
	})(_react2['default'].Component);

	Transition.propTypes = {
	  /**
	   * Show the component; triggers the enter or exit animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is not shown
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the enter animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
	   * transition indefinately if the browser transitionEnd events are
	   * canceled or interrupted.
	   *
	   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
	   * setting this to the duration of your animation (or a bit above it).
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * CSS class or classes applied when the component is exited
	   */
	  exitedClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied while the component is exiting
	   */
	  exitingClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied when the component is entered
	   */
	  enteredClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied while the component is entering
	   */
	  enteringClassName: _react2['default'].PropTypes.string,

	  /**
	   * Callback fired before the "entering" classes are applied
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "entering" classes are applied
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "enter" classes are applied
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the "exiting" classes are applied
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "exiting" classes are applied
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "exited" classes are applied
	   */
	  onExited: _react2['default'].PropTypes.func
	};

	// Name the function so it is clearer in the documentation
	function noop() {}

	Transition.displayName = 'Transition';

	Transition.defaultProps = {
	  'in': false,
	  unmountOnExit: false,
	  transitionAppear: false,

	  timeout: 5000,

	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,

	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};

	exports['default'] = Transition;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(237);

	var has = Object.prototype.hasOwnProperty,
	    transform = 'transform',
	    transition = {},
	    transitionTiming,
	    transitionDuration,
	    transitionProperty,
	    transitionDelay;

	if (canUseDOM) {
	  transition = getTransitionProperties();

	  transform = transition.prefix + transform;

	  transitionProperty = transition.prefix + 'transition-property';
	  transitionDuration = transition.prefix + 'transition-duration';
	  transitionDelay = transition.prefix + 'transition-delay';
	  transitionTiming = transition.prefix + 'transition-timing-function';
	}

	module.exports = {
	  transform: transform,
	  end: transition.end,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};

	function getTransitionProperties() {
	  var endEvent,
	      prefix = '',
	      transitions = {
	    O: 'otransitionend',
	    Moz: 'transitionend',
	    Webkit: 'webkitTransitionEnd',
	    ms: 'MSTransitionEnd'
	  };

	  var element = document.createElement('div');

	  for (var vendor in transitions) if (has.call(transitions, vendor)) {
	    if (element.style[vendor + 'TransitionProperty'] !== undefined) {
	      prefix = '-' + vendor.toLowerCase() + '-';
	      endEvent = transitions[vendor];
	      break;
	    }
	  }

	  if (!endEvent && element.style.transitionProperty !== undefined) endEvent = 'transitionend';

	  return { end: endEvent, prefix: prefix };
	}

/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';
	module.exports = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(237);
	var on = function on() {};

	if (canUseDOM) {
	  on = (function () {

	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.addEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.attachEvent('on' + eventName, handler);
	    };
	  })();
	}

	module.exports = on;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = deprecated;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(192);

	var _warning2 = _interopRequireDefault(_warning);

	function deprecated(propType, explanation) {
	  return function validate(props, propName, componentName) {
	    if (props[propName] != null) {
	      _warning2['default'](false, '"' + propName + '" property of "' + componentName + '" has been deprecated.\n' + explanation);
	    }

	    return propType(props, propName, componentName);
	  };
	}

	module.exports = exports['default'];

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _warning = __webpack_require__(192);

	var _warning2 = _interopRequireDefault(_warning);

	var warned = {};

	function deprecationWarning(oldname, newname, link) {
	  var message = undefined;

	  if (typeof oldname === 'object') {
	    message = oldname.message;
	  } else {
	    message = oldname + ' is deprecated. Use ' + newname + ' instead.';

	    if (link) {
	      message += '\nYou can read more about it at ' + link;
	    }
	  }

	  if (warned[message]) {
	    return;
	  }

	  process.env.NODE_ENV !== 'production' ? _warning2['default'](false, message) : undefined;
	  warned[message] = true;
	}

	deprecationWarning.wrapper = function (Component) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return (function (_Component) {
	    _inherits(DeprecatedComponent, _Component);

	    function DeprecatedComponent() {
	      _classCallCheck(this, DeprecatedComponent);

	      _Component.apply(this, arguments);
	    }

	    DeprecatedComponent.prototype.componentWillMount = function componentWillMount() {
	      deprecationWarning.apply(undefined, args);

	      if (_Component.prototype.componentWillMount) {
	        var _Component$prototype$componentWillMount;

	        for (var _len2 = arguments.length, methodArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          methodArgs[_key2] = arguments[_key2];
	        }

	        (_Component$prototype$componentWillMount = _Component.prototype.componentWillMount).call.apply(_Component$prototype$componentWillMount, [this].concat(methodArgs));
	      }
	    };

	    return DeprecatedComponent;
	  })(Component);
	};

	exports['default'] = deprecationWarning;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _domHelpersActiveElement = __webpack_require__(242);

	var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

	var _domHelpersQueryContains = __webpack_require__(244);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var _keycode = __webpack_require__(245);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _lodashCompatCollectionFind = __webpack_require__(246);

	var _lodashCompatCollectionFind2 = _interopRequireDefault(_lodashCompatCollectionFind);

	var _lodashCompatObjectOmit = __webpack_require__(299);

	var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactPropTypesLibAll = __webpack_require__(214);

	var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(314);

	var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

	var _uncontrollable = __webpack_require__(315);

	var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _ButtonGroup = __webpack_require__(213);

	var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

	var _DropdownMenu = __webpack_require__(318);

	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

	var _DropdownToggle = __webpack_require__(324);

	var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsCustomPropTypes = __webpack_require__(325);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var TOGGLE_REF = 'toggle-btn';
	var TOGGLE_ROLE = _DropdownToggle2['default'].defaultProps.bsRole;
	var MENU_ROLE = _DropdownMenu2['default'].defaultProps.bsRole;

	var Dropdown = (function (_React$Component) {
	  _inherits(Dropdown, _React$Component);

	  function Dropdown(props) {
	    _classCallCheck(this, Dropdown);

	    _React$Component.call(this, props);

	    this.Toggle = _DropdownToggle2['default'];

	    this.toggleOpen = this.toggleOpen.bind(this);
	    this.handleClick = this.handleClick.bind(this);
	    this.handleKeyDown = this.handleKeyDown.bind(this);
	    this.handleClose = this.handleClose.bind(this);
	    this.extractChildren = this.extractChildren.bind(this);

	    this.refineMenu = this.refineMenu.bind(this);
	    this.refineToggle = this.refineToggle.bind(this);

	    this.childExtractors = [{
	      key: 'toggle',
	      matches: function matches(child) {
	        return child.props.bsRole === TOGGLE_ROLE;
	      },
	      refine: this.refineToggle
	    }, {
	      key: 'menu',
	      exclusive: true,
	      matches: function matches(child) {
	        return child.props.bsRole === MENU_ROLE;
	      },
	      refine: this.refineMenu
	    }];

	    this.state = {};

	    this.lastOpenEventType = null;
	  }

	  Dropdown.prototype.componentDidMount = function componentDidMount() {
	    this.focusNextOnOpen();
	  };

	  Dropdown.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
	    if (!nextProps.open && this.props.open) {
	      this._focusInDropdown = _domHelpersQueryContains2['default'](_reactDom2['default'].findDOMNode(this.refs.menu), _domHelpersActiveElement2['default'](document));
	    }
	  };

	  Dropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this.props.open && !prevProps.open) {
	      this.focusNextOnOpen();
	    }

	    if (!this.props.open && prevProps.open) {
	      // if focus hasn't already moved from the menu lets return it
	      // to the toggle
	      if (this._focusInDropdown) {
	        this._focusInDropdown = false;
	        this.focus();
	      }
	    }
	  };

	  Dropdown.prototype.render = function render() {
	    var _rootClasses;

	    var children = this.extractChildren();
	    var Component = this.props.componentClass;

	    var props = _lodashCompatObjectOmit2['default'](this.props, ['id', 'bsClass', 'role']);
	    var className = _utilsBootstrapUtils2['default'].prefix(this.props);

	    var rootClasses = (_rootClasses = {
	      open: this.props.open,
	      disabled: this.props.disabled
	    }, _rootClasses[className] = !this.props.dropup, _rootClasses.dropup = this.props.dropup, _rootClasses);

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, props, {
	        className: _classnames2['default'](this.props.className, rootClasses)
	      }),
	      children
	    );
	  };

	  Dropdown.prototype.toggleOpen = function toggleOpen() {
	    var eventType = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

	    var open = !this.props.open;

	    if (open) {
	      this.lastOpenEventType = eventType;
	    }

	    if (this.props.onToggle) {
	      this.props.onToggle(open);
	    }
	  };

	  Dropdown.prototype.handleClick = function handleClick() {
	    if (this.props.disabled) {
	      return;
	    }

	    this.toggleOpen('click');
	  };

	  Dropdown.prototype.handleKeyDown = function handleKeyDown(event) {
	    if (this.props.disabled) {
	      return;
	    }

	    switch (event.keyCode) {
	      case _keycode2['default'].codes.down:
	        if (!this.props.open) {
	          this.toggleOpen('keydown');
	        } else if (this.refs.menu.focusNext) {
	          this.refs.menu.focusNext();
	        }
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.esc:
	      case _keycode2['default'].codes.tab:
	        this.handleClose(event);
	        break;
	      default:
	    }
	  };

	  Dropdown.prototype.handleClose = function handleClose() {
	    if (!this.props.open) {
	      return;
	    }

	    this.toggleOpen();
	  };

	  Dropdown.prototype.focusNextOnOpen = function focusNextOnOpen() {
	    var menu = this.refs.menu;

	    if (!menu.focusNext) {
	      return;
	    }

	    if (this.lastOpenEventType === 'keydown' || this.props.role === 'menuitem') {
	      menu.focusNext();
	    }
	  };

	  Dropdown.prototype.focus = function focus() {
	    var toggle = _reactDom2['default'].findDOMNode(this.refs[TOGGLE_REF]);

	    if (toggle && toggle.focus) {
	      toggle.focus();
	    }
	  };

	  Dropdown.prototype.extractChildren = function extractChildren() {
	    var _this = this;

	    var open = !!this.props.open;
	    var seen = {};

	    return _utilsValidComponentChildren2['default'].map(this.props.children, function (child) {
	      var extractor = _lodashCompatCollectionFind2['default'](_this.childExtractors, function (x) {
	        return x.matches(child);
	      });

	      if (extractor) {
	        if (seen[extractor.key]) {
	          return false;
	        }

	        seen[extractor.key] = extractor.exclusive;
	        child = extractor.refine(child, open);
	      }

	      return child;
	    });
	  };

	  Dropdown.prototype.refineMenu = function refineMenu(menu, open) {
	    var menuProps = {
	      ref: 'menu',
	      open: open,
	      labelledBy: this.props.id,
	      pullRight: this.props.pullRight,
	      bsClass: this.props.bsClass
	    };

	    menuProps.onClose = _utilsCreateChainedFunction2['default'](menu.props.onClose, this.props.onClose, this.handleClose);

	    menuProps.onSelect = _utilsCreateChainedFunction2['default'](menu.props.onSelect, this.props.onSelect, this.handleClose);

	    return _react.cloneElement(menu, menuProps, menu.props.children);
	  };

	  Dropdown.prototype.refineToggle = function refineToggle(toggle, open) {
	    var toggleProps = {
	      open: open,
	      id: this.props.id,
	      ref: TOGGLE_REF,
	      role: this.props.role
	    };

	    toggleProps.onClick = _utilsCreateChainedFunction2['default'](toggle.props.onClick, this.handleClick);

	    toggleProps.onKeyDown = _utilsCreateChainedFunction2['default'](toggle.props.onKeyDown, this.handleKeyDown);

	    return _react.cloneElement(toggle, toggleProps, toggle.props.children);
	  };

	  return Dropdown;
	})(_react2['default'].Component);

	Dropdown.Toggle = _DropdownToggle2['default'];

	Dropdown.TOGGLE_REF = TOGGLE_REF;
	Dropdown.TOGGLE_ROLE = TOGGLE_ROLE;
	Dropdown.MENU_ROLE = MENU_ROLE;

	Dropdown.defaultProps = {
	  componentClass: _ButtonGroup2['default'],
	  bsClass: 'dropdown'
	};

	Dropdown.propTypes = {

	  bsClass: _react2['default'].PropTypes.string,

	  /**
	   * The menu will open above the dropdown button, instead of below it.
	   */
	  dropup: _react2['default'].PropTypes.bool,

	  /**
	   * An html id attribute, necessary for assistive technologies, such as screen readers.
	   * @type {string|number}
	   * @required
	   */
	  id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	  componentClass: _reactPropTypesLibElementType2['default'],

	  /**
	   * The children of a Dropdown may be a `<Dropdown.Toggle/>` or a `<Dropdown.Menu/>`.
	   * @type {node}
	   */
	  children: _reactPropTypesLibAll2['default'](_utilsCustomPropTypes2['default'].requiredRoles(TOGGLE_ROLE, MENU_ROLE), _utilsCustomPropTypes2['default'].exclusiveRoles(MENU_ROLE)),

	  /**
	   * Whether or not component is disabled.
	   */
	  disabled: _react2['default'].PropTypes.bool,

	  /**
	   * Align the menu to the right side of the Dropdown toggle
	   */
	  pullRight: _react2['default'].PropTypes.bool,

	  /**
	   * Whether or not the Dropdown is visible.
	   *
	   * @controllable onToggle
	   */
	  open: _react2['default'].PropTypes.bool,

	  /**
	   * A callback fired when the Dropdown closes.
	   */
	  onClose: _react2['default'].PropTypes.func,

	  /**
	   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
	   * `open` value.
	   *
	   * ```js
	   * function(Boolean isOpen) {}
	   * ```
	   * @controllable open
	   */
	  onToggle: _react2['default'].PropTypes.func,

	  /**
	   * A callback fired when a menu item is selected.
	   *
	   * ```js
	   * function(Object event, Any eventKey)
	   * ```
	   */
	  onSelect: _react2['default'].PropTypes.func,

	  /**
	   * If `'menuitem'`, causes the dropdown to behave like a menu item rather than
	   * a menu button.
	   */
	  role: _react2['default'].PropTypes.string
	};

	Dropdown = _uncontrollable2['default'](Dropdown, { open: 'onToggle' });

	Dropdown.Toggle = _DropdownToggle2['default'];
	Dropdown.Menu = _DropdownMenu2['default'];

	exports['default'] = Dropdown;
	module.exports = exports['default'];

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(233);

	exports.__esModule = true;

	/**
	 * document.activeElement
	 */
	exports['default'] = activeElement;

	var _ownerDocument = __webpack_require__(243);

	var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

	function activeElement() {
	  var doc = arguments[0] === undefined ? document : arguments[0];

	  try {
	    return doc.activeElement;
	  } catch (e) {}
	}

	module.exports = exports['default'];

/***/ },
/* 243 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = ownerDocument;

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	module.exports = exports["default"];

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(237);

	var contains = (function () {
	  var root = canUseDOM && document.documentElement;

	  return root && root.contains ? function (context, node) {
	    return context.contains(node);
	  } : root && root.compareDocumentPosition ? function (context, node) {
	    return context === node || !!(context.compareDocumentPosition(node) & 16);
	  } : function (context, node) {
	    if (node) do {
	      if (node === context) return true;
	    } while (node = node.parentNode);

	    return false;
	  };
	})();

	module.exports = contains;

/***/ },
/* 245 */
/***/ function(module, exports) {

	// Source: http://jsfiddle.net/vWx8V/
	// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes



	/**
	 * Conenience method returns corresponding value for given keyName or keyCode.
	 *
	 * @param {Mixed} keyCode {Number} or keyName {String}
	 * @return {Mixed}
	 * @api public
	 */

	exports = module.exports = function(searchInput) {
	  // Keyboard Events
	  if (searchInput && 'object' === typeof searchInput) {
	    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
	    if (hasKeyCode) searchInput = hasKeyCode
	  }

	  // Numbers
	  if ('number' === typeof searchInput) return names[searchInput]

	  // Everything else (cast to string)
	  var search = String(searchInput)

	  // check codes
	  var foundNamedKey = codes[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey

	  // check aliases
	  var foundNamedKey = aliases[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey

	  // weird character?
	  if (search.length === 1) return search.charCodeAt(0)

	  return undefined
	}

	/**
	 * Get by name
	 *
	 *   exports.code['enter'] // => 13
	 */

	var codes = exports.code = exports.codes = {
	  'backspace': 8,
	  'tab': 9,
	  'enter': 13,
	  'shift': 16,
	  'ctrl': 17,
	  'alt': 18,
	  'pause/break': 19,
	  'caps lock': 20,
	  'esc': 27,
	  'space': 32,
	  'page up': 33,
	  'page down': 34,
	  'end': 35,
	  'home': 36,
	  'left': 37,
	  'up': 38,
	  'right': 39,
	  'down': 40,
	  'insert': 45,
	  'delete': 46,
	  'command': 91,
	  'right click': 93,
	  'numpad *': 106,
	  'numpad +': 107,
	  'numpad -': 109,
	  'numpad .': 110,
	  'numpad /': 111,
	  'num lock': 144,
	  'scroll lock': 145,
	  'my computer': 182,
	  'my calculator': 183,
	  ';': 186,
	  '=': 187,
	  ',': 188,
	  '-': 189,
	  '.': 190,
	  '/': 191,
	  '`': 192,
	  '[': 219,
	  '\\': 220,
	  ']': 221,
	  "'": 222,
	}

	// Helper aliases

	var aliases = exports.aliases = {
	  'windows': 91,
	  '⇧': 16,
	  '⌥': 18,
	  '⌃': 17,
	  '⌘': 91,
	  'ctl': 17,
	  'control': 17,
	  'option': 18,
	  'pause': 19,
	  'break': 19,
	  'caps': 20,
	  'return': 13,
	  'escape': 27,
	  'spc': 32,
	  'pgup': 33,
	  'pgdn': 33,
	  'ins': 45,
	  'del': 46,
	  'cmd': 91
	}


	/*!
	 * Programatically add the following
	 */

	// lower case chars
	for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

	// numbers
	for (var i = 48; i < 58; i++) codes[i - 48] = i

	// function keys
	for (i = 1; i < 13; i++) codes['f'+i] = i + 111

	// numpad keys
	for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

	/**
	 * Get by code
	 *
	 *   exports.name[13] // => 'Enter'
	 */

	var names = exports.names = exports.title = {} // title for backward compat

	// Create reverse mapping
	for (i in codes) names[codes[i]] = i

	// Add aliases
	for (var alias in aliases) {
	  codes[alias] = aliases[alias]
	}


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(247),
	    createFind = __webpack_require__(272);

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias detect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.result(_.find(users, function(chr) {
	 *   return chr.age < 40;
	 * }), 'user');
	 * // => 'barney'
	 *
	 * // using the `_.matches` callback shorthand
	 * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	 * // => 'pebbles'
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.result(_.find(users, 'active', false), 'user');
	 * // => 'fred'
	 *
	 * // using the `_.property` callback shorthand
	 * _.result(_.find(users, 'active'), 'user');
	 * // => 'barney'
	 */
	var find = createFind(baseEach);

	module.exports = find;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(248),
	    createBaseEach = __webpack_require__(271);

	/**
	 * The base implementation of `_.forEach` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(249),
	    keys = __webpack_require__(256);

	/**
	 * The base implementation of `_.forOwn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(250);

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(251);

	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(252),
	    isString = __webpack_require__(253),
	    support = __webpack_require__(255);

	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  if (support.unindexedChars && isString(value)) {
	    var index = -1,
	        length = value.length,
	        result = Object(value);

	    while (++index < length) {
	      result[index] = value.charAt(index);
	    }
	    return result;
	  }
	  return isObject(value) ? value : Object(value);
	}

	module.exports = toObject;


/***/ },
/* 252 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(254);

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	}

	module.exports = isString;


/***/ },
/* 254 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 255 */
/***/ function(module, exports) {

	/** Used for native method references. */
	var arrayProto = Array.prototype,
	    errorProto = Error.prototype,
	    objectProto = Object.prototype;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/**
	 * An object environment feature flags.
	 *
	 * @static
	 * @memberOf _
	 * @type Object
	 */
	var support = {};

	(function(x) {
	  var Ctor = function() { this.x = x; },
	      object = { '0': x, 'length': x },
	      props = [];

	  Ctor.prototype = { 'valueOf': x, 'y': x };
	  for (var key in new Ctor) { props.push(key); }

	  /**
	   * Detect if `name` or `message` properties of `Error.prototype` are
	   * enumerable by default (IE < 9, Safari < 5.1).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
	    propertyIsEnumerable.call(errorProto, 'name');

	  /**
	   * Detect if `prototype` properties are enumerable by default.
	   *
	   * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
	   * (if the prototype or a property on the prototype has been set)
	   * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
	   * property to `true`.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');

	  /**
	   * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	   *
	   * In IE < 9 an object's own properties, shadowing non-enumerable ones,
	   * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.nonEnumShadows = !/valueOf/.test(props);

	  /**
	   * Detect if own properties are iterated after inherited properties (IE < 9).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.ownLast = props[0] != 'x';

	  /**
	   * Detect if `Array#shift` and `Array#splice` augment array-like objects
	   * correctly.
	   *
	   * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
	   * `shift()` and `splice()` functions that fail to remove the last element,
	   * `value[0]`, of array-like objects even though the "length" property is
	   * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
	   * while `splice()` is buggy regardless of mode in IE < 9.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.spliceObjects = (splice.call(object, 0, 1), !object[0]);

	  /**
	   * Detect lack of support for accessing string characters by index.
	   *
	   * IE < 8 can't access characters by index. IE 8 can only access characters
	   * by index on string literals, not string objects.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
	}(1, 0));

	module.exports = support;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(257),
	    isArrayLike = __webpack_require__(261),
	    isObject = __webpack_require__(252),
	    shimKeys = __webpack_require__(265),
	    support = __webpack_require__(255);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object == 'function' ? support.enumPrototypes : isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	module.exports = keys;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var isNative = __webpack_require__(258);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(259),
	    isHostObject = __webpack_require__(260),
	    isObjectLike = __webpack_require__(254);

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	}

	module.exports = isNative;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(252);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;


/***/ },
/* 260 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	var isHostObject = (function() {
	  try {
	    Object({ 'toString': 0 } + '');
	  } catch(e) {
	    return function() { return false; };
	  }
	  return function(value) {
	    // IE < 9 presents many host objects as `Object` objects that can coerce
	    // to strings despite having improperly defined `toString` methods.
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  };
	}());

	module.exports = isHostObject;


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(262),
	    isLength = __webpack_require__(264);

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	module.exports = isArrayLike;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(263);

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(251);

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : toObject(object)[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 264 */
/***/ function(module, exports) {

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(266),
	    isArray = __webpack_require__(267),
	    isIndex = __webpack_require__(268),
	    isLength = __webpack_require__(264),
	    isString = __webpack_require__(253),
	    keysIn = __webpack_require__(269);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object) || isString(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = shimKeys;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(261),
	    isObjectLike = __webpack_require__(254);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}

	module.exports = isArguments;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(257),
	    isLength = __webpack_require__(264),
	    isObjectLike = __webpack_require__(254);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;


/***/ },
/* 268 */
/***/ function(module, exports) {

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(270),
	    isArguments = __webpack_require__(266),
	    isArray = __webpack_require__(267),
	    isFunction = __webpack_require__(259),
	    isIndex = __webpack_require__(268),
	    isLength = __webpack_require__(264),
	    isObject = __webpack_require__(252),
	    isString = __webpack_require__(253),
	    support = __webpack_require__(255);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/** Used to fix the JScript `[[DontEnum]]` bug. */
	var shadowProps = [
	  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
	  'toLocaleString', 'toString', 'valueOf'
	];

	/** Used for native method references. */
	var errorProto = Error.prototype,
	    objectProto = Object.prototype,
	    stringProto = String.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to avoid iterating over non-enumerable properties in IE < 9. */
	var nonEnumProps = {};
	nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
	nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
	nonEnumProps[objectTag] = { 'constructor': true };

	arrayEach(shadowProps, function(key) {
	  for (var tag in nonEnumProps) {
	    if (hasOwnProperty.call(nonEnumProps, tag)) {
	      var props = nonEnumProps[tag];
	      props[key] = hasOwnProperty.call(props, key);
	    }
	  }
	});

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;

	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object) || isString(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
	      isProto = proto === object,
	      result = Array(length),
	      skipIndexes = length > 0,
	      skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
	      skipProto = support.enumPrototypes && isFunction(object);

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  // lodash skips the `constructor` property when it infers it's iterating
	  // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
	  // attribute of an existing property and the `constructor` property of a
	  // prototype defaults to non-enumerable.
	  for (var key in object) {
	    if (!(skipProto && key == 'prototype') &&
	        !(skipErrorProps && (key == 'message' || key == 'name')) &&
	        !(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  if (support.nonEnumShadows && object !== objectProto) {
	    var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
	        nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];

	    if (tag == objectTag) {
	      proto = objectProto;
	    }
	    length = shadowProps.length;
	    while (length--) {
	      key = shadowProps[length];
	      var nonEnum = nonEnums[key];
	      if (!(isProto && nonEnum) &&
	          (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
	        result.push(key);
	      }
	    }
	  }
	  return result;
	}

	module.exports = keysIn;


/***/ },
/* 270 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(262),
	    isLength = __webpack_require__(264),
	    toObject = __webpack_require__(251);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    var length = collection ? getLength(collection) : 0;
	    if (!isLength(length)) {
	      return eachFunc(collection, iteratee);
	    }
	    var index = fromRight ? length : -1,
	        iterable = toObject(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(273),
	    baseFind = __webpack_require__(297),
	    baseFindIndex = __webpack_require__(298),
	    isArray = __webpack_require__(267);

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(eachFunc, fromRight) {
	  return function(collection, predicate, thisArg) {
	    predicate = baseCallback(predicate, thisArg, 3);
	    if (isArray(collection)) {
	      var index = baseFindIndex(collection, predicate, fromRight);
	      return index > -1 ? collection[index] : undefined;
	    }
	    return baseFind(collection, predicate, eachFunc);
	  };
	}

	module.exports = createFind;


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(274),
	    baseMatchesProperty = __webpack_require__(286),
	    bindCallback = __webpack_require__(293),
	    identity = __webpack_require__(294),
	    property = __webpack_require__(295);

	/**
	 * The base implementation of `_.callback` which supports specifying the
	 * number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return thisArg === undefined
	      ? func
	      : bindCallback(func, thisArg, argCount);
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return thisArg === undefined
	    ? property(func)
	    : baseMatchesProperty(func, thisArg);
	}

	module.exports = baseCallback;


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(275),
	    getMatchData = __webpack_require__(283),
	    toObject = __webpack_require__(251);

	/**
	 * The base implementation of `_.matches` which does not clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      object = toObject(object);
	      return object[key] === value && (value !== undefined || (key in object));
	    };
	  }
	  return function(object) {
	    return baseIsMatch(object, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(276),
	    toObject = __webpack_require__(251);

	/**
	 * The base implementation of `_.isMatch` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} matchData The propery names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = toObject(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(277),
	    isObject = __webpack_require__(252),
	    isObjectLike = __webpack_require__(254);

	/**
	 * The base implementation of `_.isEqual` without support for `this` binding
	 * `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	}

	module.exports = baseIsEqual;


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var equalArrays = __webpack_require__(278),
	    equalByTag = __webpack_require__(280),
	    equalObjects = __webpack_require__(281),
	    isArray = __webpack_require__(267),
	    isHostObject = __webpack_require__(260),
	    isTypedArray = __webpack_require__(282);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag && !isHostObject(object),
	      othIsObj = othTag == objectTag && !isHostObject(other),
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);

	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	  stackA.pop();
	  stackB.pop();

	  return result;
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(279);

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing arrays.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalArrays;


/***/ },
/* 279 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 280 */
/***/ function(module, exports) {

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object)
	        ? other != +other
	        : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(256);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalObjects;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(264),
	    isObjectLike = __webpack_require__(254);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}

	module.exports = isTypedArray;


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(284),
	    pairs = __webpack_require__(285);

	/**
	 * Gets the propery names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = pairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(252);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(256),
	    toObject = __webpack_require__(251);

	/**
	 * Creates a two dimensional array of the key-value pairs for `object`,
	 * e.g. `[[key1, value1], [key2, value2]]`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * _.pairs({ 'barney': 36, 'fred': 40 });
	 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	 */
	function pairs(object) {
	  object = toObject(object);

	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    var key = props[index];
	    result[index] = [key, object[key]];
	  }
	  return result;
	}

	module.exports = pairs;


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(287),
	    baseIsEqual = __webpack_require__(276),
	    baseSlice = __webpack_require__(288),
	    isArray = __webpack_require__(267),
	    isKey = __webpack_require__(289),
	    isStrictComparable = __webpack_require__(284),
	    last = __webpack_require__(290),
	    toObject = __webpack_require__(251),
	    toPath = __webpack_require__(291);

	/**
	 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to compare.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  var isArr = isArray(path),
	      isCommon = isKey(path) && isStrictComparable(srcValue),
	      pathKey = (path + '');

	  path = toPath(path);
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    var key = pathKey;
	    object = toObject(object);
	    if ((isArr || !isCommon) && !(key in object)) {
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      if (object == null) {
	        return false;
	      }
	      key = last(path);
	      object = toObject(object);
	    }
	    return object[key] === srcValue
	      ? (srcValue !== undefined || (key in object))
	      : baseIsEqual(srcValue, object[key], undefined, true);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(251);

	/**
	 * The base implementation of `get` without support for string paths
	 * and default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path of the property to get.
	 * @param {string} [pathKey] The key representation of path.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path, pathKey) {
	  if (object == null) {
	    return;
	  }
	  object = toObject(object);
	  if (pathKey !== undefined && pathKey in object) {
	    path = [pathKey];
	  }
	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = toObject(object)[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 288 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(267),
	    toObject = __webpack_require__(251);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	    return true;
	  }
	  if (isArray(value)) {
	    return false;
	  }
	  var result = !reIsDeepProp.test(value);
	  return result || (object != null && value in toObject(object));
	}

	module.exports = isKey;


/***/ },
/* 290 */
/***/ function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(292),
	    isArray = __webpack_require__(267);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = toPath;


/***/ },
/* 292 */
/***/ function(module, exports) {

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}

	module.exports = baseToString;


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(294);

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	module.exports = bindCallback;


/***/ },
/* 294 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(263),
	    basePropertyDeep = __webpack_require__(296),
	    isKey = __webpack_require__(289);

	/**
	 * Creates a function that returns the property value at `path` on a
	 * given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(287),
	    toPath = __webpack_require__(291);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  var pathKey = (path + '');
	  path = toPath(path);
	  return function(object) {
	    return baseGet(object, path, pathKey);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 297 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	 * without support for callback shorthands and `this` binding, which iterates
	 * over `collection` using the provided `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @param {boolean} [retKey] Specify returning the key of the found element
	 *  instead of the element itself.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFind(collection, predicate, eachFunc, retKey) {
	  var result;
	  eachFunc(collection, function(value, key, collection) {
	    if (predicate(value, key, collection)) {
	      result = retKey ? key : value;
	      return false;
	    }
	  });
	  return result;
	}

	module.exports = baseFind;


/***/ },
/* 298 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromRight) {
	  var length = array.length,
	      index = fromRight ? length : -1;

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(300),
	    baseDifference = __webpack_require__(301),
	    baseFlatten = __webpack_require__(308),
	    bindCallback = __webpack_require__(293),
	    keysIn = __webpack_require__(269),
	    pickByArray = __webpack_require__(310),
	    pickByCallback = __webpack_require__(311),
	    restParam = __webpack_require__(313);

	/**
	 * The opposite of `_.pick`; this method creates an object composed of the
	 * own and inherited enumerable properties of `object` that are not omitted.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to omit, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.omit(object, 'age');
	 * // => { 'user': 'fred' }
	 *
	 * _.omit(object, _.isNumber);
	 * // => { 'user': 'fred' }
	 */
	var omit = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  if (typeof props[0] != 'function') {
	    var props = arrayMap(baseFlatten(props), String);
	    return pickByArray(object, baseDifference(keysIn(object), props));
	  }
	  var predicate = bindCallback(props[0], props[1], 3);
	  return pickByCallback(object, function(value, key, object) {
	    return !predicate(value, key, object);
	  });
	});

	module.exports = omit;


/***/ },
/* 300 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(302),
	    cacheIndexOf = __webpack_require__(304),
	    createCache = __webpack_require__(305);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.difference` which accepts a single array
	 * of values to exclude.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values) {
	  var length = array ? array.length : 0,
	      result = [];

	  if (!length) {
	    return result;
	  }
	  var index = -1,
	      indexOf = baseIndexOf,
	      isCommon = true,
	      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	      valuesLength = values.length;

	  if (cache) {
	    indexOf = cacheIndexOf;
	    isCommon = false;
	    values = cache;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index];

	    if (isCommon && value === value) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === value) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (indexOf(values, value, 0) < 0) {
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseDifference;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	var indexOfNaN = __webpack_require__(303);

	/**
	 * The base implementation of `_.indexOf` without support for binary searches.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseIndexOf;


/***/ },
/* 303 */
/***/ function(module, exports) {

	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = indexOfNaN;


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(252);

	/**
	 * Checks if `value` is in `cache` mimicking the return signature of
	 * `_.indexOf` by returning `0` if the value is found, else `-1`.
	 *
	 * @private
	 * @param {Object} cache The cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `0` if `value` is found, else `-1`.
	 */
	function cacheIndexOf(cache, value) {
	  var data = cache.data,
	      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	  return result ? 0 : -1;
	}

	module.exports = cacheIndexOf;


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var SetCache = __webpack_require__(306),
	    getNative = __webpack_require__(257);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 * Creates a `Set` cache object to optimize linear searches of large arrays.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	 */
	function createCache(values) {
	  return (nativeCreate && Set) ? new SetCache(values) : null;
	}

	module.exports = createCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var cachePush = __webpack_require__(307),
	    getNative = __webpack_require__(257);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 *
	 * Creates a cache object to store unique values.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var length = values ? values.length : 0;

	  this.data = { 'hash': nativeCreate(null), 'set': new Set };
	  while (length--) {
	    this.push(values[length]);
	  }
	}

	// Add functions to the `Set` cache.
	SetCache.prototype.push = cachePush;

	module.exports = SetCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(252);

	/**
	 * Adds `value` to the cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var data = this.data;
	  if (typeof value == 'string' || isObject(value)) {
	    data.set.add(value);
	  } else {
	    data.hash[value] = true;
	  }
	}

	module.exports = cachePush;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(309),
	    isArguments = __webpack_require__(266),
	    isArray = __webpack_require__(267),
	    isArrayLike = __webpack_require__(261),
	    isObjectLike = __webpack_require__(254);

	/**
	 * The base implementation of `_.flatten` with added support for restricting
	 * flattening and specifying the start index.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, isDeep, isStrict, result) {
	  result || (result = []);

	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index];
	    if (isObjectLike(value) && isArrayLike(value) &&
	        (isStrict || isArray(value) || isArguments(value))) {
	      if (isDeep) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, isDeep, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ },
/* 309 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(251);

	/**
	 * A specialized version of `_.pick` which picks `object` properties specified
	 * by `props`.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property names to pick.
	 * @returns {Object} Returns the new object.
	 */
	function pickByArray(object, props) {
	  object = toObject(object);

	  var index = -1,
	      length = props.length,
	      result = {};

	  while (++index < length) {
	    var key = props[index];
	    if (key in object) {
	      result[key] = object[key];
	    }
	  }
	  return result;
	}

	module.exports = pickByArray;


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var baseForIn = __webpack_require__(312);

	/**
	 * A specialized version of `_.pick` which picks `object` properties `predicate`
	 * returns truthy for.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Object} Returns the new object.
	 */
	function pickByCallback(object, predicate) {
	  var result = {};
	  baseForIn(object, function(value, key, object) {
	    if (predicate(value, key, object)) {
	      result[key] = value;
	    }
	  });
	  return result;
	}

	module.exports = pickByCallback;


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(249),
	    keysIn = __webpack_require__(269);

	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}

	module.exports = baseForIn;


/***/ },
/* 313 */
/***/ function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;


/***/ },
/* 314 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = isRequiredForA11y;

	function isRequiredForA11y(propType) {
	  return function validate(props, propName, componentName) {
	    if (props[propName] == null) {
	      return new Error("The prop '" + propName + "' is required to make '" + componentName + "' accessible" + " for users using assistive technologies such as screen readers");
	    }

	    return propType(props, propName, componentName);
	  };
	}

	module.exports = exports["default"];

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _createUncontrollable = __webpack_require__(316);

	var _createUncontrollable2 = _interopRequireDefault(_createUncontrollable);

	var mixin = {
	  shouldComponentUpdate: function shouldComponentUpdate() {
	    //let the forceUpdate trigger the update
	    return !this._notifying;
	  }
	};

	function set(component, propName, handler, value, args) {
	  if (handler) {
	    component._notifying = true;
	    handler.call.apply(handler, [component, value].concat(args));
	    component._notifying = false;
	  }

	  component._values[propName] = value;

	  if (component.isMounted()) component.forceUpdate();
	}

	exports['default'] = _createUncontrollable2['default']([mixin], set);
	module.exports = exports['default'];

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = createUncontrollable;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utils = __webpack_require__(317);

	var utils = _interopRequireWildcard(_utils);

	function createUncontrollable(mixins, set) {

	  return uncontrollable;

	  function uncontrollable(Component, controlledValues) {
	    var methods = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

	    var displayName = Component.displayName || Component.name || 'Component',
	        basePropTypes = utils.getType(Component).propTypes,
	        propTypes;

	    propTypes = utils.uncontrolledPropTypes(controlledValues, basePropTypes, displayName);

	    methods = utils.transform(methods, function (obj, method) {
	      obj[method] = function () {
	        var _refs$inner;

	        return (_refs$inner = this.refs.inner)[method].apply(_refs$inner, arguments);
	      };
	    }, {});

	    var component = _react2['default'].createClass(_extends({

	      displayName: 'Uncontrolled(' + displayName + ')',

	      mixins: mixins,

	      propTypes: propTypes

	    }, methods, {

	      componentWillMount: function componentWillMount() {
	        var props = this.props,
	            keys = Object.keys(controlledValues);

	        this._values = utils.transform(keys, function (values, key) {
	          values[key] = props[utils.defaultKey(key)];
	        }, {});
	      },

	      /**
	       * If a prop switches from controlled to Uncontrolled
	       * reset its value to the defaultValue
	       */
	      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        var _this = this;

	        var props = this.props,
	            keys = Object.keys(controlledValues);

	        keys.forEach(function (key) {
	          if (utils.getValue(nextProps, key) === undefined && utils.getValue(props, key) !== undefined) {
	            _this._values[key] = nextProps[utils.defaultKey(key)];
	          }
	        });
	      },

	      render: function render() {
	        var _this2 = this;

	        var newProps = {};
	        var _props = this.props;
	        var valueLink = _props.valueLink;
	        var checkedLink = _props.checkedLink;

	        var props = _objectWithoutProperties(_props, ['valueLink', 'checkedLink']);

	        utils.each(controlledValues, function (handle, propName) {
	          var linkPropName = utils.getLinkName(propName),
	              prop = _this2.props[propName];

	          if (linkPropName && !isProp(_this2.props, propName) && isProp(_this2.props, linkPropName)) {
	            prop = _this2.props[linkPropName].value;
	          }

	          newProps[propName] = prop !== undefined ? prop : _this2._values[propName];

	          newProps[handle] = setAndNotify.bind(_this2, propName);
	        });

	        newProps = _extends({}, props, newProps, { ref: 'inner' });

	        return _react2['default'].createElement(Component, newProps);
	      }

	    }));

	    component.ControlledComponent = Component;

	    /**
	     * useful when wrapping a Component and you want to control
	     * everything
	     */
	    component.deferControlTo = function (newComponent, additions, nextMethods) {
	      if (additions === undefined) additions = {};

	      return uncontrollable(newComponent, _extends({}, controlledValues, additions), nextMethods);
	    };

	    return component;

	    function setAndNotify(propName, value) {
	      var linkName = utils.getLinkName(propName),
	          handler = this.props[controlledValues[propName]];

	      if (linkName && isProp(this.props, linkName) && !handler) {
	        handler = this.props[linkName].requestChange;
	      }

	      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	        args[_key - 2] = arguments[_key];
	      }

	      set(this, propName, handler, value, args);
	    }

	    function isProp(props, prop) {
	      return props[prop] !== undefined;
	    }
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.customPropType = customPropType;
	exports.uncontrolledPropTypes = uncontrolledPropTypes;
	exports.getType = getType;
	exports.getValue = getValue;
	exports.getLinkName = getLinkName;
	exports.defaultKey = defaultKey;
	exports.chain = chain;
	exports.transform = transform;
	exports.each = each;
	exports.has = has;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(191);

	var _invariant2 = _interopRequireDefault(_invariant);

	function customPropType(handler, propType, name) {

	  return function (props, propName) {

	    if (props[propName] !== undefined) {
	      if (!props[handler]) {
	        return new Error('You have provided a `' + propName + '` prop to ' + '`' + name + '` without an `' + handler + '` handler. This will render a read-only field. ' + 'If the field should be mutable use `' + defaultKey(propName) + '`. Otherwise, set `' + handler + '`');
	      }

	      return propType && propType(props, propName, name);
	    }
	  };
	}

	function uncontrolledPropTypes(controlledValues, basePropTypes, displayName) {
	  var propTypes = {};

	  if (process.env.NODE_ENV !== 'production' && basePropTypes) {
	    transform(controlledValues, function (obj, handler, prop) {
	      var type = basePropTypes[prop];

	      _invariant2['default'](typeof handler === 'string' && handler.trim().length, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop);

	      obj[prop] = customPropType(handler, type, displayName);

	      if (type !== undefined) obj[defaultKey(prop)] = type;
	    }, propTypes);
	  }

	  return propTypes;
	}

	var version = _react2['default'].version.split('.').map(parseFloat);

	exports.version = version;

	function getType(component) {
	  if (version[0] === 0 && version[1] >= 13) return component;

	  return component.type;
	}

	function getValue(props, name) {
	  var linkPropName = getLinkName(name);

	  if (linkPropName && !isProp(props, name) && isProp(props, linkPropName)) return props[linkPropName].value;

	  return props[name];
	}

	function isProp(props, prop) {
	  return props[prop] !== undefined;
	}

	function getLinkName(name) {
	  return name === 'value' ? 'valueLink' : name === 'checked' ? 'checkedLink' : null;
	}

	function defaultKey(key) {
	  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
	}

	function chain(thisArg, a, b) {
	  return function chainedFunction() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    a && a.call.apply(a, [thisArg].concat(args));
	    b && b.call.apply(b, [thisArg].concat(args));
	  };
	}

	function transform(obj, cb, seed) {
	  each(obj, cb.bind(null, seed = seed || (Array.isArray(obj) ? [] : {})));
	  return seed;
	}

	function each(obj, cb, thisArg) {
	  if (Array.isArray(obj)) return obj.forEach(cb, thisArg);

	  for (var key in obj) if (has(obj, key)) cb.call(thisArg, obj[key], key, obj);
	}

	function has(o, k) {
	  return o ? Object.prototype.hasOwnProperty.call(o, k) : false;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _keycode = __webpack_require__(245);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactOverlaysLibRootCloseWrapper = __webpack_require__(319);

	var _reactOverlaysLibRootCloseWrapper2 = _interopRequireDefault(_reactOverlaysLibRootCloseWrapper);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var DropdownMenu = (function (_React$Component) {
	  _inherits(DropdownMenu, _React$Component);

	  function DropdownMenu(props) {
	    _classCallCheck(this, DropdownMenu);

	    _React$Component.call(this, props);

	    this.focusNext = this.focusNext.bind(this);
	    this.focusPrevious = this.focusPrevious.bind(this);
	    this.getFocusableMenuItems = this.getFocusableMenuItems.bind(this);
	    this.getItemsAndActiveIndex = this.getItemsAndActiveIndex.bind(this);

	    this.handleKeyDown = this.handleKeyDown.bind(this);
	  }

	  DropdownMenu.prototype.handleKeyDown = function handleKeyDown(event) {
	    switch (event.keyCode) {
	      case _keycode2['default'].codes.down:
	        this.focusNext();
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.up:
	        this.focusPrevious();
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.esc:
	      case _keycode2['default'].codes.tab:
	        this.props.onClose(event);
	        break;
	      default:
	    }
	  };

	  DropdownMenu.prototype.focusNext = function focusNext() {
	    var _getItemsAndActiveIndex = this.getItemsAndActiveIndex();

	    var items = _getItemsAndActiveIndex.items;
	    var activeItemIndex = _getItemsAndActiveIndex.activeItemIndex;

	    if (items.length === 0) {
	      return;
	    }

	    if (activeItemIndex === items.length - 1) {
	      items[0].focus();
	      return;
	    }

	    items[activeItemIndex + 1].focus();
	  };

	  DropdownMenu.prototype.focusPrevious = function focusPrevious() {
	    var _getItemsAndActiveIndex2 = this.getItemsAndActiveIndex();

	    var items = _getItemsAndActiveIndex2.items;
	    var activeItemIndex = _getItemsAndActiveIndex2.activeItemIndex;

	    if (activeItemIndex === 0) {
	      items[items.length - 1].focus();
	      return;
	    }

	    items[activeItemIndex - 1].focus();
	  };

	  DropdownMenu.prototype.getItemsAndActiveIndex = function getItemsAndActiveIndex() {
	    var items = this.getFocusableMenuItems();
	    var activeElement = document.activeElement;
	    var activeItemIndex = items.indexOf(activeElement);

	    return { items: items, activeItemIndex: activeItemIndex };
	  };

	  DropdownMenu.prototype.getFocusableMenuItems = function getFocusableMenuItems() {
	    var menuNode = _reactDom2['default'].findDOMNode(this);

	    if (menuNode === undefined) {
	      return [];
	    }

	    return [].slice.call(menuNode.querySelectorAll('[tabIndex="-1"]'), 0);
	  };

	  DropdownMenu.prototype.render = function render() {
	    var _classes,
	        _this = this;

	    var _props = this.props;
	    var children = _props.children;
	    var onSelect = _props.onSelect;
	    var pullRight = _props.pullRight;
	    var className = _props.className;
	    var labelledBy = _props.labelledBy;
	    var open = _props.open;
	    var onClose = _props.onClose;

	    var props = _objectWithoutProperties(_props, ['children', 'onSelect', 'pullRight', 'className', 'labelledBy', 'open', 'onClose']);

	    var items = _utilsValidComponentChildren2['default'].map(children, function (child) {
	      var childProps = child.props || {};

	      return _react2['default'].cloneElement(child, {
	        onKeyDown: _utilsCreateChainedFunction2['default'](childProps.onKeyDown, _this.handleKeyDown),
	        onSelect: _utilsCreateChainedFunction2['default'](childProps.onSelect, onSelect)
	      }, childProps.children);
	    });

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'menu')] = true, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'menu-right')] = pullRight, _classes);

	    var list = _react2['default'].createElement(
	      'ul',
	      _extends({
	        className: _classnames2['default'](className, classes),
	        role: 'menu',
	        'aria-labelledby': labelledBy
	      }, props),
	      items
	    );

	    if (open) {
	      list = _react2['default'].createElement(
	        _reactOverlaysLibRootCloseWrapper2['default'],
	        { noWrap: true, onRootClose: onClose },
	        list
	      );
	    }

	    return list;
	  };

	  return DropdownMenu;
	})(_react2['default'].Component);

	DropdownMenu.defaultProps = {
	  bsRole: 'menu',
	  bsClass: 'dropdown',
	  pullRight: false
	};

	DropdownMenu.propTypes = {
	  open: _react2['default'].PropTypes.bool,
	  pullRight: _react2['default'].PropTypes.bool,
	  onClose: _react2['default'].PropTypes.func,
	  labelledBy: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	  onSelect: _react2['default'].PropTypes.func
	};

	exports['default'] = DropdownMenu;
	module.exports = exports['default'];

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utilsAddEventListener = __webpack_require__(320);

	var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

	var _utilsCreateChainedFunction = __webpack_require__(322);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsOwnerDocument = __webpack_require__(323);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	// TODO: Consider using an ES6 symbol here, once we use babel-runtime.
	var CLICK_WAS_INSIDE = '__click_was_inside';

	var counter = 0;

	function getSuppressRootClose() {
	  var id = CLICK_WAS_INSIDE + '_' + counter++;
	  return {
	    id: id,
	    suppressRootClose: function suppressRootClose(event) {
	      // Tag the native event to prevent the root close logic on document click.
	      // This seems safer than using event.nativeEvent.stopImmediatePropagation(),
	      // which is only supported in IE >= 9.
	      event.nativeEvent[id] = true;
	    }
	  };
	}

	var RootCloseWrapper = (function (_React$Component) {
	  _inherits(RootCloseWrapper, _React$Component);

	  function RootCloseWrapper(props) {
	    _classCallCheck(this, RootCloseWrapper);

	    _React$Component.call(this, props);

	    this.handleDocumentClick = this.handleDocumentClick.bind(this);
	    this.handleDocumentKeyUp = this.handleDocumentKeyUp.bind(this);

	    var _getSuppressRootClose = getSuppressRootClose();

	    var id = _getSuppressRootClose.id;
	    var suppressRootClose = _getSuppressRootClose.suppressRootClose;

	    this._suppressRootId = id;

	    this._suppressRootCloseHandler = suppressRootClose;
	  }

	  RootCloseWrapper.prototype.bindRootCloseHandlers = function bindRootCloseHandlers() {
	    var doc = _utilsOwnerDocument2['default'](this);

	    this._onDocumentClickListener = _utilsAddEventListener2['default'](doc, 'click', this.handleDocumentClick);

	    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);
	  };

	  RootCloseWrapper.prototype.handleDocumentClick = function handleDocumentClick(e) {
	    // This is now the native event.
	    if (e[this._suppressRootId]) {
	      return;
	    }

	    this.props.onRootClose();
	  };

	  RootCloseWrapper.prototype.handleDocumentKeyUp = function handleDocumentKeyUp(e) {
	    if (e.keyCode === 27) {
	      this.props.onRootClose();
	    }
	  };

	  RootCloseWrapper.prototype.unbindRootCloseHandlers = function unbindRootCloseHandlers() {
	    if (this._onDocumentClickListener) {
	      this._onDocumentClickListener.remove();
	    }

	    if (this._onDocumentKeyupListener) {
	      this._onDocumentKeyupListener.remove();
	    }
	  };

	  RootCloseWrapper.prototype.componentDidMount = function componentDidMount() {
	    this.bindRootCloseHandlers();
	  };

	  RootCloseWrapper.prototype.render = function render() {
	    var _props = this.props;
	    var noWrap = _props.noWrap;
	    var children = _props.children;

	    var child = _react2['default'].Children.only(children);

	    if (noWrap) {
	      return _react2['default'].cloneElement(child, {
	        onClick: _utilsCreateChainedFunction2['default'](this._suppressRootCloseHandler, child.props.onClick)
	      });
	    }

	    // Wrap the child in a new element, so the child won't have to handle
	    // potentially combining multiple onClick listeners.
	    return _react2['default'].createElement(
	      'div',
	      { onClick: this._suppressRootCloseHandler },
	      child
	    );
	  };

	  RootCloseWrapper.prototype.getWrappedDOMNode = function getWrappedDOMNode() {
	    // We can't use a ref to identify the wrapped child, since we might be
	    // stealing the ref from the owner, but we know exactly the DOM structure
	    // that will be rendered, so we can just do this to get the child's DOM
	    // node for doing size calculations in OverlayMixin.
	    var node = _reactDom2['default'].findDOMNode(this);
	    return this.props.noWrap ? node : node.firstChild;
	  };

	  RootCloseWrapper.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unbindRootCloseHandlers();
	  };

	  return RootCloseWrapper;
	})(_react2['default'].Component);

	exports['default'] = RootCloseWrapper;

	RootCloseWrapper.displayName = 'RootCloseWrapper';

	RootCloseWrapper.propTypes = {
	  onRootClose: _react2['default'].PropTypes.func.isRequired,

	  /**
	   * Passes the suppress click handler directly to the child component instead
	   * of placing it on a wrapping div. Only use when you can be sure the child
	   * properly handle the click event.
	   */
	  noWrap: _react2['default'].PropTypes.bool
	};
	module.exports = exports['default'];

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _domHelpersEventsOn = __webpack_require__(238);

	var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

	var _domHelpersEventsOff = __webpack_require__(321);

	var _domHelpersEventsOff2 = _interopRequireDefault(_domHelpersEventsOff);

	exports['default'] = function (node, event, handler) {
	  _domHelpersEventsOn2['default'](node, event, handler);
	  return {
	    remove: function remove() {
	      _domHelpersEventsOff2['default'](node, event, handler);
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(237);
	var off = function off() {};

	if (canUseDOM) {

	  off = (function () {

	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.removeEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.detachEvent('on' + eventName, handler);
	    };
	  })();
	}

	module.exports = off;

/***/ },
/* 322 */
/***/ function(module, exports) {

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	'use strict';

	exports.__esModule = true;
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }

	    if (acc === null) {
	      return f;
	    }

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}

	exports['default'] = createChainedFunction;
	module.exports = exports['default'];

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _domHelpersOwnerDocument = __webpack_require__(243);

	var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

	exports['default'] = function (componentOrElement) {
	  return _domHelpersOwnerDocument2['default'](_reactDom2['default'].findDOMNode(componentOrElement));
	};

	module.exports = exports['default'];

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Button = __webpack_require__(210);

	var _Button2 = _interopRequireDefault(_Button);

	var _SafeAnchor = __webpack_require__(201);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var CARET = _react2['default'].createElement(
	  'span',
	  null,
	  ' ',
	  _react2['default'].createElement('span', { className: 'caret' })
	);

	var DropdownToggle = (function (_React$Component) {
	  _inherits(DropdownToggle, _React$Component);

	  function DropdownToggle() {
	    _classCallCheck(this, DropdownToggle);

	    _React$Component.apply(this, arguments);
	  }

	  DropdownToggle.prototype.render = function render() {
	    var caret = this.props.noCaret ? null : CARET;

	    var classes = {
	      'dropdown-toggle': true
	    };

	    var Component = this.props.useAnchor ? _SafeAnchor2['default'] : _Button2['default'];

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        className: _classnames2['default'](classes, this.props.className),
	        type: 'button',
	        'aria-haspopup': true,
	        'aria-expanded': this.props.open }),
	      this.props.children || this.props.title,
	      caret
	    );
	  };

	  return DropdownToggle;
	})(_react2['default'].Component);

	exports['default'] = DropdownToggle;

	DropdownToggle.defaultProps = {
	  open: false,
	  useAnchor: false,
	  bsRole: 'toggle'
	};

	DropdownToggle.propTypes = {
	  bsRole: _react2['default'].PropTypes.string,
	  noCaret: _react2['default'].PropTypes.bool,
	  open: _react2['default'].PropTypes.bool,
	  title: _react2['default'].PropTypes.string,
	  useAnchor: _react2['default'].PropTypes.bool
	};

	DropdownToggle.isToggle = true;
	DropdownToggle.titleProp = 'title';
	DropdownToggle.onClickProp = 'onClick';
	module.exports = exports['default'];

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _reactPropTypesLibCommon = __webpack_require__(212);

	var _childrenToArray = __webpack_require__(326);

	var _childrenToArray2 = _interopRequireDefault(_childrenToArray);

	exports['default'] = {

	  requiredRoles: function requiredRoles() {
	    for (var _len = arguments.length, roles = Array(_len), _key = 0; _key < _len; _key++) {
	      roles[_key] = arguments[_key];
	    }

	    return _reactPropTypesLibCommon.createChainableTypeChecker(function requiredRolesValidator(props, propName, component) {
	      var missing = undefined;
	      var children = _childrenToArray2['default'](props.children);

	      var inRole = function inRole(role, child) {
	        return role === child.props.bsRole;
	      };

	      roles.every(function (role) {
	        if (!children.some(function (child) {
	          return inRole(role, child);
	        })) {
	          missing = role;
	          return false;
	        }
	        return true;
	      });

	      if (missing) {
	        return new Error('(children) ' + component + ' - Missing a required child with bsRole: ' + missing + '. ' + (component + ' must have at least one child of each of the following bsRoles: ' + roles.join(', ')));
	      }
	    });
	  },

	  exclusiveRoles: function exclusiveRoles() {
	    for (var _len2 = arguments.length, roles = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      roles[_key2] = arguments[_key2];
	    }

	    return _reactPropTypesLibCommon.createChainableTypeChecker(function exclusiveRolesValidator(props, propName, component) {
	      var children = _childrenToArray2['default'](props.children);
	      var duplicate = undefined;

	      roles.every(function (role) {
	        var childrenWithRole = children.filter(function (child) {
	          return child.props.bsRole === role;
	        });

	        if (childrenWithRole.length > 1) {
	          duplicate = role;
	          return false;
	        }
	        return true;
	      });

	      if (duplicate) {
	        return new Error('(children) ' + component + ' - Duplicate children detected of bsRole: ' + duplicate + '. ' + ('Only one child each allowed with the following bsRoles: ' + roles.join(', ')));
	      }
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;
	exports['default'] = childrenAsArray;

	var _ValidComponentChildren = __webpack_require__(166);

	var _ValidComponentChildren2 = _interopRequireDefault(_ValidComponentChildren);

	function childrenAsArray(children) {
	  var result = [];

	  if (children === undefined) {
	    return result;
	  }

	  _ValidComponentChildren2['default'].forEach(children, function (child) {
	    result.push(child);
	  });

	  return result;
	}

	module.exports = exports['default'];

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _Object$keys = __webpack_require__(187)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _Dropdown = __webpack_require__(241);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var _lodashCompatObjectOmit = __webpack_require__(299);

	var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

	var _lodashCompatObjectPick = __webpack_require__(328);

	var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

	var _Button = __webpack_require__(210);

	var _Button2 = _interopRequireDefault(_Button);

	var DropdownButton = (function (_React$Component) {
	  _inherits(DropdownButton, _React$Component);

	  function DropdownButton() {
	    _classCallCheck(this, DropdownButton);

	    _React$Component.apply(this, arguments);
	  }

	  DropdownButton.prototype.render = function render() {
	    var _props = this.props;
	    var bsStyle = _props.bsStyle;
	    var bsSize = _props.bsSize;
	    var disabled = _props.disabled;
	    var _props2 = this.props;
	    var title = _props2.title;
	    var children = _props2.children;

	    var props = _objectWithoutProperties(_props2, ['title', 'children']);

	    var dropdownProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));
	    var toggleProps = _lodashCompatObjectOmit2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      _extends({}, dropdownProps, {
	        bsSize: bsSize,
	        bsStyle: bsStyle
	      }),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Toggle,
	        _extends({}, toggleProps, {
	          disabled: disabled
	        }),
	        title
	      ),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        children
	      )
	    );
	  };

	  return DropdownButton;
	})(_react2['default'].Component);

	DropdownButton.propTypes = _extends({
	  disabled: _react2['default'].PropTypes.bool,
	  bsStyle: _Button2['default'].propTypes.bsStyle,
	  bsSize: _Button2['default'].propTypes.bsSize,

	  /**
	   * When used with the `title` prop, the noCaret option will not render a caret icon, in the toggle element.
	   */
	  noCaret: _react2['default'].PropTypes.bool,
	  title: _react2['default'].PropTypes.node.isRequired

	}, _Dropdown2['default'].propTypes);

	DropdownButton.defaultProps = {
	  disabled: false,
	  pullRight: false,
	  dropup: false,
	  navItem: false,
	  noCaret: false
	};

	exports['default'] = DropdownButton;
	module.exports = exports['default'];

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(308),
	    bindCallback = __webpack_require__(293),
	    pickByArray = __webpack_require__(310),
	    pickByCallback = __webpack_require__(311),
	    restParam = __webpack_require__(313);

	/**
	 * Creates an object composed of the picked `object` properties. Property
	 * names may be specified as individual arguments or as arrays of property
	 * names. If `predicate` is provided it's invoked for each property of `object`
	 * picking the properties `predicate` returns truthy for. The predicate is
	 * bound to `thisArg` and invoked with three arguments: (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to pick, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.pick(object, 'user');
	 * // => { 'user': 'fred' }
	 *
	 * _.pick(object, _.isString);
	 * // => { 'user': 'fred' }
	 */
	var pick = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  return typeof props[0] == 'function'
	    ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	    : pickByArray(object, baseFlatten(props));
	});

	module.exports = pick;


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var Grid = _react2['default'].createClass({
	  displayName: 'Grid',

	  propTypes: {
	    /**
	     * Turn any fixed-width grid layout into a full-width layout by this property.
	     *
	     * Adds `container-fluid` class.
	     */
	    fluid: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div',
	      fluid: false
	    };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;
	    var className = this.props.fluid ? 'container-fluid' : 'container';

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, className) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Grid;
	module.exports = exports['default'];

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Image = _react2['default'].createClass({
	  displayName: 'Image',

	  propTypes: {

	    /**
	     * Sets image as responsive image
	     */
	    responsive: _react2['default'].PropTypes.bool,

	    /**
	     * Sets image shape as rounded
	     */
	    rounded: _react2['default'].PropTypes.bool,

	    /**
	     * Sets image shape as circle
	     */
	    circle: _react2['default'].PropTypes.bool,

	    /**
	     * Sets image shape as thumbnail
	     */
	    thumbnail: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      responsive: false,
	      rounded: false,
	      circle: false,
	      thumbnail: false
	    };
	  },

	  render: function render() {
	    var classes = {
	      'img-responsive': this.props.responsive,
	      'img-rounded': this.props.rounded,
	      'img-circle': this.props.circle,
	      'img-thumbnail': this.props.thumbnail
	    };

	    return _react2['default'].createElement('img', _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }));
	  }
	});

	exports['default'] = Image;
	module.exports = exports['default'];

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	var _interopRequireWildcard = __webpack_require__(162)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _InputBase2 = __webpack_require__(217);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _FormControls = __webpack_require__(332);

	var FormControls = _interopRequireWildcard(_FormControls);

	var _utilsDeprecationWarning = __webpack_require__(240);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var Input = (function (_InputBase) {
	  _inherits(Input, _InputBase);

	  function Input() {
	    _classCallCheck(this, Input);

	    _InputBase.apply(this, arguments);
	  }

	  Input.prototype.render = function render() {
	    if (this.props.type === 'static') {
	      _utilsDeprecationWarning2['default']('Input type=static', 'FormControls.Static');
	      return _react2['default'].createElement(FormControls.Static, this.props);
	    }

	    return _InputBase.prototype.render.call(this);
	  };

	  return Input;
	})(_InputBase3['default']);

	Input.propTypes = {
	  type: _react2['default'].PropTypes.string
	};

	exports['default'] = Input;
	module.exports = exports['default'];

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _Static2 = __webpack_require__(333);

	var _Static3 = _interopRequireDefault(_Static2);

	exports.Static = _Static3['default'];

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _InputBase2 = __webpack_require__(217);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _utilsChildrenValueInputValidation = __webpack_require__(163);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var Static = (function (_InputBase) {
	  _inherits(Static, _InputBase);

	  function Static() {
	    _classCallCheck(this, Static);

	    _InputBase.apply(this, arguments);
	  }

	  Static.prototype.getValue = function getValue() {
	    var _props = this.props;
	    var children = _props.children;
	    var value = _props.value;

	    return children ? children : value;
	  };

	  Static.prototype.renderInput = function renderInput() {
	    return _react2['default'].createElement(
	      'p',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
	      this.getValue()
	    );
	  };

	  return Static;
	})(_InputBase3['default']);

	Static.propTypes = {
	  value: _utilsChildrenValueInputValidation2['default'],
	  children: _utilsChildrenValueInputValidation2['default']
	};

	exports['default'] = Static;
	module.exports = exports['default'];

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	// https://www.npmjs.org/package/react-interpolate-component
	// TODO: Drop this in favor of es6 string interpolation

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var REGEXP = /\%\((.+?)\)s/;

	var Interpolate = _react2['default'].createClass({
	  displayName: 'Interpolate',

	  propTypes: {
	    component: _react2['default'].PropTypes.node,
	    format: _react2['default'].PropTypes.string,
	    unsafe: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      component: 'span',
	      unsafe: false
	    };
	  },

	  render: function render() {
	    var format = _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || typeof this.props.children === 'string' ? this.props.children : this.props.format;
	    var parent = this.props.component;
	    var unsafe = this.props.unsafe === true;
	    var props = _extends({}, this.props);

	    delete props.children;
	    delete props.format;
	    delete props.component;
	    delete props.unsafe;

	    if (unsafe) {
	      var content = format.split(REGEXP).reduce(function (memo, match, index) {
	        var html = undefined;

	        if (index % 2 === 0) {
	          html = match;
	        } else {
	          html = props[match];
	          delete props[match];
	        }

	        if (_react2['default'].isValidElement(html)) {
	          throw new Error('cannot interpolate a React component into unsafe text');
	        }

	        memo += html;

	        return memo;
	      }, '');

	      props.dangerouslySetInnerHTML = { __html: content };

	      return _react2['default'].createElement(parent, props);
	    }
	    var kids = format.split(REGEXP).reduce(function (memo, match, index) {
	      var child = undefined;

	      if (index % 2 === 0) {
	        if (match.length === 0) {
	          return memo;
	        }

	        child = match;
	      } else {
	        child = props[match];
	        delete props[match];
	      }

	      memo.push(child);

	      return memo;
	    }, []);

	    return _react2['default'].createElement(parent, props, kids);
	  }
	});

	exports['default'] = Interpolate;
	module.exports = exports['default'];

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var Jumbotron = _react2['default'].createClass({
	  displayName: 'Jumbotron',

	  propTypes: {
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return { componentClass: 'div' };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'jumbotron') }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Jumbotron;
	module.exports = exports['default'];

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var Label = (function (_React$Component) {
	  _inherits(Label, _React$Component);

	  function Label() {
	    _classCallCheck(this, _Label);

	    _React$Component.apply(this, arguments);
	  }

	  Label.prototype.render = function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  };

	  var _Label = Label;
	  Label = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY), _styleMaps.DEFAULT)(Label) || Label;
	  Label = _utilsBootstrapUtils.bsClass('label')(Label) || Label;
	  return Label;
	})(_react2['default'].Component);

	exports['default'] = Label;
	module.exports = exports['default'];

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _ListGroupItem = __webpack_require__(338);

	var _ListGroupItem2 = _interopRequireDefault(_ListGroupItem);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var ListGroup = (function (_React$Component) {
	  _inherits(ListGroup, _React$Component);

	  function ListGroup() {
	    _classCallCheck(this, ListGroup);

	    _React$Component.apply(this, arguments);
	  }

	  ListGroup.prototype.render = function render() {
	    var _this = this;

	    var items = _utilsValidComponentChildren2['default'].map(this.props.children, function (item, index) {
	      return _react.cloneElement(item, { key: item.key ? item.key : index });
	    });

	    if (this.areCustomChildren(items)) {
	      var Component = this.props.componentClass;
	      return _react2['default'].createElement(
	        Component,
	        _extends({}, this.props, {
	          className: _classnames2['default'](this.props.className, 'list-group') }),
	        items
	      );
	    }

	    var shouldRenderDiv = false;

	    if (!this.props.children) {
	      shouldRenderDiv = true;
	    } else {
	      _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child) {
	        if (_this.isAnchorOrButton(child.props)) {
	          shouldRenderDiv = true;
	        }
	      });
	    }

	    return shouldRenderDiv ? this.renderDiv(items) : this.renderUL(items);
	  };

	  ListGroup.prototype.isAnchorOrButton = function isAnchorOrButton(props) {
	    return props.href || props.onClick;
	  };

	  ListGroup.prototype.areCustomChildren = function areCustomChildren(children) {
	    var customChildren = false;

	    _utilsValidComponentChildren2['default'].forEach(children, function (child) {
	      if (child.type !== _ListGroupItem2['default']) {
	        customChildren = true;
	      }
	    }, this);

	    return customChildren;
	  };

	  ListGroup.prototype.renderUL = function renderUL(items) {
	    var listItems = _utilsValidComponentChildren2['default'].map(items, function (item) {
	      return _react.cloneElement(item, { listItem: true });
	    });

	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'list-group') }),
	      listItems
	    );
	  };

	  ListGroup.prototype.renderDiv = function renderDiv(items) {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'list-group') }),
	      items
	    );
	  };

	  return ListGroup;
	})(_react2['default'].Component);

	ListGroup.defaultProps = {
	  componentClass: 'div'
	};

	ListGroup.propTypes = {
	  className: _react2['default'].PropTypes.string,
	  /**
	   * The element for ListGroup if children are
	   * user-defined custom components.
	   * @type {("ul"|"div")}
	   */
	  componentClass: _react2['default'].PropTypes.oneOf(['ul', 'div']),
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
	};

	exports['default'] = ListGroup;
	module.exports = exports['default'];

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var ListGroupItem = (function (_React$Component) {
	  _inherits(ListGroupItem, _React$Component);

	  function ListGroupItem() {
	    _classCallCheck(this, ListGroupItem);

	    _React$Component.apply(this, arguments);
	  }

	  ListGroupItem.prototype.render = function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    classes.active = this.props.active;
	    classes.disabled = this.props.disabled;

	    if (this.props.href) {
	      return this.renderAnchor(classes);
	    } else if (this.props.onClick) {
	      return this.renderButton(classes);
	    } else if (this.props.listItem) {
	      return this.renderLi(classes);
	    }

	    return this.renderSpan(classes);
	  };

	  ListGroupItem.prototype.renderLi = function renderLi(classes) {
	    return _react2['default'].createElement(
	      'li',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  };

	  ListGroupItem.prototype.renderAnchor = function renderAnchor(classes) {
	    return _react2['default'].createElement(
	      'a',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes)
	      }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  };

	  ListGroupItem.prototype.renderButton = function renderButton(classes) {
	    return _react2['default'].createElement(
	      'button',
	      _extends({
	        type: 'button'
	      }, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  };

	  ListGroupItem.prototype.renderSpan = function renderSpan(classes) {
	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  };

	  ListGroupItem.prototype.renderStructuredContent = function renderStructuredContent() {
	    var header = undefined;
	    var headingClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'heading');

	    if (_react2['default'].isValidElement(this.props.header)) {
	      header = _react.cloneElement(this.props.header, {
	        key: 'header',
	        className: _classnames2['default'](this.props.header.props.className, headingClass)
	      });
	    } else {
	      header = _react2['default'].createElement(
	        'h4',
	        { key: 'header', className: headingClass },
	        this.props.header
	      );
	    }

	    var content = _react2['default'].createElement(
	      'p',
	      { key: 'content', className: _utilsBootstrapUtils2['default'].prefix(this.props, 'text') },
	      this.props.children
	    );

	    return [header, content];
	  };

	  return ListGroupItem;
	})(_react2['default'].Component);

	ListGroupItem.propTypes = {
	  className: _react2['default'].PropTypes.string,
	  active: _react2['default'].PropTypes.any,
	  disabled: _react2['default'].PropTypes.any,
	  header: _react2['default'].PropTypes.node,
	  listItem: _react2['default'].PropTypes.bool,
	  onClick: _react2['default'].PropTypes.func,
	  eventKey: _react2['default'].PropTypes.any,
	  href: _react2['default'].PropTypes.string,
	  target: _react2['default'].PropTypes.string
	};

	ListGroupItem.defaultTypes = {
	  listItem: false
	};

	exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('list-group-item', ListGroupItem));
	module.exports = exports['default'];

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactPropTypesLibAll = __webpack_require__(214);

	var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

	var _SafeAnchor = __webpack_require__(201);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var MenuItem = (function (_React$Component) {
	  _inherits(MenuItem, _React$Component);

	  function MenuItem(props) {
	    _classCallCheck(this, MenuItem);

	    _React$Component.call(this, props);

	    this.handleClick = this.handleClick.bind(this);
	  }

	  MenuItem.prototype.handleClick = function handleClick(event) {
	    if (!this.props.href || this.props.disabled) {
	      event.preventDefault();
	    }

	    if (this.props.disabled) {
	      return;
	    }

	    if (this.props.onSelect) {
	      this.props.onSelect(event, this.props.eventKey);
	    }
	  };

	  MenuItem.prototype.render = function render() {
	    var headerClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'header');

	    if (this.props.divider) {
	      return _react2['default'].createElement('li', { role: 'separator', className: 'divider' });
	    }

	    if (this.props.header) {
	      return _react2['default'].createElement(
	        'li',
	        { role: 'heading', className: headerClass },
	        this.props.children
	      );
	    }

	    var _props = this.props;
	    var className = _props.className;
	    var style = _props.style;
	    var onClick = _props.onClick;

	    var props = _objectWithoutProperties(_props, ['className', 'style', 'onClick']);

	    var classes = {
	      disabled: this.props.disabled,
	      active: this.props.active
	    };

	    return _react2['default'].createElement(
	      'li',
	      { role: 'presentation',
	        className: _classnames2['default'](className, classes),
	        style: style
	      },
	      _react2['default'].createElement(_SafeAnchor2['default'], _extends({}, props, {
	        role: 'menuitem',
	        tabIndex: '-1',
	        onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick)
	      }))
	    );
	  };

	  return MenuItem;
	})(_react2['default'].Component);

	MenuItem.propTypes = {
	  active: _react2['default'].PropTypes.bool,
	  disabled: _react2['default'].PropTypes.bool,
	  divider: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (props) {
	    if (props.divider && props.children) {
	      return new Error('Children will not be rendered for dividers');
	    }
	  }),
	  eventKey: _react2['default'].PropTypes.any,
	  header: _react2['default'].PropTypes.bool,
	  href: _react2['default'].PropTypes.string,
	  target: _react2['default'].PropTypes.string,
	  title: _react2['default'].PropTypes.string,
	  onClick: _react2['default'].PropTypes.func,
	  onKeyDown: _react2['default'].PropTypes.func,
	  onSelect: _react2['default'].PropTypes.func,
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
	};

	MenuItem.defaultProps = {
	  divider: false,
	  disabled: false,
	  header: false
	};

	exports['default'] = _utilsBootstrapUtils.bsClass('dropdown', MenuItem);
	module.exports = exports['default'];

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	
	/* eslint-disable react/prop-types */
	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _Object$keys = __webpack_require__(187)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var _domHelpersUtilScrollbarSize = __webpack_require__(341);

	var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

	var _domHelpersUtilInDOM = __webpack_require__(237);

	var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

	var _domHelpersOwnerDocument = __webpack_require__(243);

	var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

	var _domHelpersEvents = __webpack_require__(342);

	var _domHelpersEvents2 = _interopRequireDefault(_domHelpersEvents);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _Fade = __webpack_require__(345);

	var _Fade2 = _interopRequireDefault(_Fade);

	var _ModalDialog = __webpack_require__(346);

	var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

	var _ModalBody = __webpack_require__(347);

	var _ModalBody2 = _interopRequireDefault(_ModalBody);

	var _ModalHeader = __webpack_require__(348);

	var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

	var _ModalTitle = __webpack_require__(349);

	var _ModalTitle2 = _interopRequireDefault(_ModalTitle);

	var _ModalFooter = __webpack_require__(350);

	var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

	var _reactOverlaysLibModal = __webpack_require__(351);

	var _reactOverlaysLibModal2 = _interopRequireDefault(_reactOverlaysLibModal);

	var _reactOverlaysLibUtilsIsOverflowing = __webpack_require__(362);

	var _reactOverlaysLibUtilsIsOverflowing2 = _interopRequireDefault(_reactOverlaysLibUtilsIsOverflowing);

	var _lodashCompatObjectPick = __webpack_require__(328);

	var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

	var Modal = _react2['default'].createClass({
	  displayName: 'Modal',

	  propTypes: _extends({}, _reactOverlaysLibModal2['default'].propTypes, _ModalDialog2['default'].propTypes, {

	    /**
	     * Include a backdrop component. Specify 'static' for a backdrop that doesn't trigger an "onHide" when clicked.
	     */
	    backdrop: _react2['default'].PropTypes.oneOf(['static', true, false]),

	    /**
	     * Close the modal when escape key is pressed
	     */
	    keyboard: _react2['default'].PropTypes.bool,

	    /**
	     * Open and close the Modal with a slide and fade animation.
	     */
	    animation: _react2['default'].PropTypes.bool,

	    /**
	     * A Component type that provides the modal content Markup. This is a useful prop when you want to use your own
	     * styles and markup to create a custom modal component.
	     */
	    dialogComponent: _reactPropTypesLibElementType2['default'],

	    /**
	     * When `true` The modal will automatically shift focus to itself when it opens, and replace it to the last focused element when it closes.
	     * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen-readers.
	     */
	    autoFocus: _react2['default'].PropTypes.bool,

	    /**
	     * When `true` The modal will prevent focus from leaving the Modal while open.
	     * Consider leaving the default value here, as it is necessary to make the Modal work well with assistive technologies,
	     * such as screen readers.
	     */
	    enforceFocus: _react2['default'].PropTypes.bool,

	    /**
	     * Hide this from automatic props documentation generation.
	     * @private
	     */
	    bsStyle: _react2['default'].PropTypes.string,

	    /**
	     * When `true` The modal will show itself.
	     */
	    show: _react2['default'].PropTypes.bool,

	    /**
	     * A callback fired when the header closeButton or non-static backdrop is
	     * clicked. Required if either are specified.
	     */
	    onHide: _react2['default'].PropTypes.func,

	    /**
	     * Callback fired before the Modal transitions in
	     */
	    onEnter: _react2['default'].PropTypes.func,

	    /**
	     * Callback fired as the Modal begins to transition in
	     */
	    onEntering: _react2['default'].PropTypes.func,

	    /**
	     * Callback fired after the Modal finishes transitioning in
	     */
	    onEntered: _react2['default'].PropTypes.func,

	    /**
	     * Callback fired right before the Modal transitions out
	     */
	    onExit: _react2['default'].PropTypes.func,

	    /**
	     * Callback fired as the Modal begins to transition out
	     */
	    onExiting: _react2['default'].PropTypes.func,

	    /**
	     * Callback fired after the Modal finishes transitioning out
	     */
	    onExited: _react2['default'].PropTypes.func
	  }),

	  childContextTypes: {
	    '$bs_onModalHide': _react2['default'].PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return _extends({}, _reactOverlaysLibModal2['default'].defaultProps, {
	      bsClass: 'modal',
	      animation: true,
	      dialogComponent: _ModalDialog2['default']
	    });
	  },

	  getInitialState: function getInitialState() {
	    return {
	      modalStyles: {}
	    };
	  },

	  getChildContext: function getChildContext() {
	    return {
	      $bs_onModalHide: this.props.onHide
	    };
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);
	  },

	  render: function render() {
	    var _this = this;

	    var _props = this.props;
	    var className = _props.className;
	    var children = _props.children;
	    var dialogClassName = _props.dialogClassName;
	    var animation = _props.animation;

	    var props = _objectWithoutProperties(_props, ['className', 'children', 'dialogClassName', 'animation']);

	    var modalStyles = this.state.modalStyles;

	    var inClass = { 'in': props.show && !animation };
	    var Dialog = props.dialogComponent;

	    var parentProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_reactOverlaysLibModal2['default'].propTypes).concat(['onExit', 'onExiting', 'onEnter', 'onEntered']) // the rest are fired in _onHide() and _onShow()
	    );

	    var modal = _react2['default'].createElement(
	      Dialog,
	      _extends({
	        key: 'modal',
	        ref: function (ref) {
	          return _this._modal = ref;
	        }
	      }, props, {
	        style: modalStyles,
	        className: _classnames2['default'](className, inClass),
	        dialogClassName: dialogClassName,
	        onClick: props.backdrop === true ? this.handleDialogClick : null
	      }),
	      this.props.children
	    );

	    return _react2['default'].createElement(
	      _reactOverlaysLibModal2['default'],
	      _extends({}, parentProps, {
	        show: props.show,
	        ref: function (ref) {
	          _this._wrapper = ref && ref.refs.modal;
	          _this._backdrop = ref && ref.refs.backdrop;
	        },
	        onEntering: this._onShow,
	        onExited: this._onHide,
	        backdropClassName: _classnames2['default'](_utilsBootstrapUtils2['default'].prefix(props, 'backdrop'), inClass),
	        containerClassName: _utilsBootstrapUtils2['default'].prefix(props, 'open'),
	        transition: animation ? _Fade2['default'] : undefined,
	        dialogTransitionTimeout: Modal.TRANSITION_DURATION,
	        backdropTransitionTimeout: Modal.BACKDROP_TRANSITION_DURATION
	      }),
	      modal
	    );
	  },

	  _onShow: function _onShow() {
	    _domHelpersEvents2['default'].on(window, 'resize', this.handleWindowResize);

	    this.setState(this._getStyles());

	    if (this.props.onEntering) {
	      var _props2;

	      (_props2 = this.props).onEntering.apply(_props2, arguments);
	    }
	  },

	  _onHide: function _onHide() {
	    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);

	    if (this.props.onExited) {
	      var _props3;

	      (_props3 = this.props).onExited.apply(_props3, arguments);
	    }
	  },

	  handleDialogClick: function handleDialogClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }

	    this.props.onHide();
	  },

	  handleWindowResize: function handleWindowResize() {
	    this.setState(this._getStyles());
	  },

	  _getStyles: function _getStyles() {
	    if (!_domHelpersUtilInDOM2['default']) {
	      return {};
	    }

	    var node = _reactDom2['default'].findDOMNode(this._modal);
	    var doc = _domHelpersOwnerDocument2['default'](node);

	    var scrollHt = node.scrollHeight;
	    var bodyIsOverflowing = _reactOverlaysLibUtilsIsOverflowing2['default'](_reactDom2['default'].findDOMNode(this.props.container || doc.body));
	    var modalIsOverflowing = scrollHt > doc.documentElement.clientHeight;

	    return {
	      modalStyles: {
	        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0,
	        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0
	      }
	    };
	  }
	});

	Modal.Body = _ModalBody2['default'];
	Modal.Header = _ModalHeader2['default'];
	Modal.Title = _ModalTitle2['default'];
	Modal.Footer = _ModalFooter2['default'];

	Modal.Dialog = _ModalDialog2['default'];

	Modal.TRANSITION_DURATION = 300;
	Modal.BACKDROP_TRANSITION_DURATION = 150;

	exports['default'] = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], _utilsBootstrapUtils.bsClass('modal', Modal));
	module.exports = exports['default'];

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var canUseDOM = __webpack_require__(237);

	var size;

	module.exports = function (recalc) {
	  if (!size || recalc) {
	    if (canUseDOM) {
	      var scrollDiv = document.createElement('div');

	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';

	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }

	  return size;
	};

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var on = __webpack_require__(238),
	    off = __webpack_require__(321),
	    filter = __webpack_require__(343);

	module.exports = { on: on, off: off, filter: filter };

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var contains = __webpack_require__(244),
	    qsa = __webpack_require__(344);

	module.exports = function (selector, handler) {
	  return function (e) {
	    var top = e.currentTarget,
	        target = e.target,
	        matches = qsa(top, selector);

	    if (matches.some(function (match) {
	      return contains(match, target);
	    })) handler.call(this, e);
	  };
	};

/***/ },
/* 344 */
/***/ function(module, exports) {

	'use strict';
	//     Zepto.js
	//     (c) 2010-2015 Thomas Fuchs
	//     Zepto.js may be freely distributed under the MIT license.
	var simpleSelectorRE = /^[\w-]*$/,
	    toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);

	module.exports = function qsa(element, selector) {
	  var maybeID = selector[0] === '#',
	      maybeClass = selector[0] === '.',
	      nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,
	      isSimple = simpleSelectorRE.test(nameOnly),
	      found;

	  if (isSimple) {
	    if (maybeID) {
	      element = element.getElementById ? element : document;
	      return (found = element.getElementById(nameOnly)) ? [found] : [];
	    }

	    if (element.getElementsByClassName && maybeClass) return toArray(element.getElementsByClassName(nameOnly));

	    return toArray(element.getElementsByTagName(selector));
	  }

	  return toArray(element.querySelectorAll(selector));
	};

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactOverlaysLibTransition = __webpack_require__(235);

	var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

	var _reactPropTypesLibDeprecated = __webpack_require__(239);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var Fade = (function (_React$Component) {
	  _inherits(Fade, _React$Component);

	  function Fade() {
	    _classCallCheck(this, Fade);

	    _React$Component.apply(this, arguments);
	  }

	  // Explicitly copied from Transition for doc generation.
	  // TODO: Remove duplication once #977 is resolved.

	  Fade.prototype.render = function render() {
	    var timeout = this.props.timeout || this.props.duration;

	    return _react2['default'].createElement(
	      _reactOverlaysLibTransition2['default'],
	      _extends({}, this.props, {
	        timeout: timeout,
	        className: _classnames2['default'](this.props.className, 'fade'),
	        enteredClassName: 'in',
	        enteringClassName: 'in'
	      }),
	      this.props.children
	    );
	  };

	  return Fade;
	})(_react2['default'].Component);

	Fade.propTypes = {
	  /**
	   * Show the component; triggers the fade in or fade out animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is faded out
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the fade in animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * Duration of the fade animation in milliseconds, to ensure that finishing
	   * callbacks are fired even if the original browser transition end events are
	   * canceled
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * duration
	   * @private
	   */
	  duration: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.number, 'Use `timeout`.'),

	  /**
	   * Callback fired before the component fades in
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to fade in
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the has component faded in
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the component fades out
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to fade out
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has faded out
	   */
	  onExited: _react2['default'].PropTypes.func
	};

	Fade.defaultProps = {
	  'in': false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false
	};

	exports['default'] = Fade;
	module.exports = exports['default'];

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable react/prop-types */
	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var ModalDialog = _react2['default'].createClass({
	  displayName: 'ModalDialog',

	  propTypes: {
	    /**
	     * A css class to apply to the Modal dialog DOM node.
	     */
	    dialogClassName: _react2['default'].PropTypes.string
	  },

	  render: function render() {
	    var modalStyle = _extends({
	      display: 'block'
	    }, this.props.style);
	    var prefix = _utilsBootstrapUtils2['default'].prefix(this.props);
	    var dialogClasses = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    delete dialogClasses[prefix];
	    dialogClasses[_utilsBootstrapUtils2['default'].prefix(this.props, 'dialog')] = true;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        title: null,
	        tabIndex: '-1',
	        role: 'dialog',
	        style: modalStyle,
	        className: _classnames2['default'](this.props.className, prefix)
	      }),
	      _react2['default'].createElement(
	        'div',
	        { className: _classnames2['default'](this.props.dialogClassName, dialogClasses) },
	        _react2['default'].createElement(
	          'div',
	          { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content'), role: 'document' },
	          this.props.children
	        )
	      )
	    );
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], _utilsBootstrapUtils.bsClass('modal', ModalDialog));
	module.exports = exports['default'];

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var ModalBody = (function (_React$Component) {
	  _inherits(ModalBody, _React$Component);

	  function ModalBody() {
	    _classCallCheck(this, ModalBody);

	    _React$Component.apply(this, arguments);
	  }

	  ModalBody.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'body')) }),
	      this.props.children
	    );
	  };

	  return ModalBody;
	})(_react2['default'].Component);

	exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalBody);
	module.exports = exports['default'];

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var ModalHeader = (function (_React$Component) {
	  _inherits(ModalHeader, _React$Component);

	  function ModalHeader() {
	    _classCallCheck(this, ModalHeader);

	    _React$Component.apply(this, arguments);
	  }

	  ModalHeader.prototype.render = function render() {
	    var _props = this.props;
	    var label = _props['aria-label'];

	    var props = _objectWithoutProperties(_props, ['aria-label']);

	    var onHide = _utilsCreateChainedFunction2['default'](this.context.$bs_onModalHide, this.props.onHide);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'header'))
	      }),
	      this.props.closeButton && _react2['default'].createElement(
	        'button',
	        {
	          type: 'button',
	          className: 'close',
	          'aria-label': label,
	          onClick: onHide },
	        _react2['default'].createElement(
	          'span',
	          { 'aria-hidden': 'true' },
	          '×'
	        )
	      ),
	      this.props.children
	    );
	  };

	  return ModalHeader;
	})(_react2['default'].Component);

	ModalHeader.propTypes = {
	  /**
	   * The 'aria-label' attribute provides an accessible label for the close button.
	   * It is used for Assistive Technology when the label text is not readable.
	   */
	  'aria-label': _react2['default'].PropTypes.string,

	  bsClass: _react2['default'].PropTypes.string,

	  /**
	   * Specify whether the Component should contain a close button
	   */
	  closeButton: _react2['default'].PropTypes.bool,

	  /**
	   * A Callback fired when the close button is clicked. If used directly inside a Modal component, the onHide will automatically
	   * be propagated up to the parent Modal `onHide`.
	   */
	  onHide: _react2['default'].PropTypes.func
	};

	ModalHeader.contextTypes = {
	  '$bs_onModalHide': _react2['default'].PropTypes.func
	};

	ModalHeader.defaultProps = {
	  'aria-label': 'Close',
	  closeButton: false
	};

	exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalHeader);
	module.exports = exports['default'];

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var ModalTitle = (function (_React$Component) {
	  _inherits(ModalTitle, _React$Component);

	  function ModalTitle() {
	    _classCallCheck(this, ModalTitle);

	    _React$Component.apply(this, arguments);
	  }

	  ModalTitle.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'h4',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'title')) }),
	      this.props.children
	    );
	  };

	  return ModalTitle;
	})(_react2['default'].Component);

	exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalTitle);
	module.exports = exports['default'];

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var ModalFooter = (function (_React$Component) {
	  _inherits(ModalFooter, _React$Component);

	  function ModalFooter() {
	    _classCallCheck(this, ModalFooter);

	    _React$Component.apply(this, arguments);
	  }

	  ModalFooter.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'footer')) }),
	      this.props.children
	    );
	  };

	  return ModalFooter;
	})(_react2['default'].Component);

	ModalFooter.propTypes = {
	  /**
	   * A css class applied to the Component
	   */
	  bsClass: _react2['default'].PropTypes.string
	};

	ModalFooter.defaultProps = {
	  bsClass: 'modal'
	};

	exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalFooter);
	module.exports = exports['default'];

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable react/prop-types */
	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(192);

	var _warning2 = _interopRequireDefault(_warning);

	var _reactPropTypesLibMountable = __webpack_require__(352);

	var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

	var _reactPropTypesLibElementType = __webpack_require__(354);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _Portal = __webpack_require__(355);

	var _Portal2 = _interopRequireDefault(_Portal);

	var _ModalManager = __webpack_require__(357);

	var _ModalManager2 = _interopRequireDefault(_ModalManager);

	var _utilsOwnerDocument = __webpack_require__(323);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	var _utilsAddEventListener = __webpack_require__(320);

	var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

	var _utilsAddFocusListener = __webpack_require__(365);

	var _utilsAddFocusListener2 = _interopRequireDefault(_utilsAddFocusListener);

	var _domHelpersUtilInDOM = __webpack_require__(237);

	var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

	var _domHelpersActiveElement = __webpack_require__(242);

	var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

	var _domHelpersQueryContains = __webpack_require__(244);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var _utilsGetContainer = __webpack_require__(356);

	var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

	var modalManager = new _ModalManager2['default']();

	/**
	 * Love them or hate them, `<Modal/>` provides a solid foundation for creating dialogs, lightboxes, or whatever else.
	 * The Modal component renders its `children` node in front of a backdrop component.
	 *
	 * The Modal offers a few helpful features over using just a `<Portal/>` component and some styles:
	 *
	 * - Manages dialog stacking when one-at-a-time just isn't enough.
	 * - Creates a backdrop, for disabling interaction below the modal.
	 * - It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.
	 * - It disables scrolling of the page content while open.
	 * - Adds the appropriate ARIA roles are automatically.
	 * - Easily pluggable animations via a `<Transition/>` component.
	 *
	 */
	var Modal = _react2['default'].createClass({
	  displayName: 'Modal',

	  propTypes: _extends({}, _Portal2['default'].propTypes, {

	    /**
	     * A Node, Component instance, or function that returns either. The Modal is appended to it's container element.
	     *
	     * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the
	     * page content can be placed behind a virtual backdrop as well as a visual one.
	     */
	    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func]),

	    /**
	     * A callback fired when the Modal is opening.
	     */
	    onShow: _react2['default'].PropTypes.func,

	    /**
	     * A callback fired when either the backdrop is clicked, or the escape key is pressed.
	     *
	     * The `onHide` callback only signals intent from the Modal,
	     * you must actually set the `show` prop to `false` for the Modal to close.
	     */
	    onHide: _react2['default'].PropTypes.func,

	    /**
	     * Include a backdrop component.
	     */
	    backdrop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.oneOf(['static'])]),

	    /**
	     * A callback fired when the escape key, if specified in `keyboard`, is pressed.
	     */
	    onEscapeKeyUp: _react2['default'].PropTypes.func,

	    /**
	     * A callback fired when the backdrop, if specified, is clicked.
	     */
	    onBackdropClick: _react2['default'].PropTypes.func,

	    /**
	     * A style object for the backdrop component.
	     */
	    backdropStyle: _react2['default'].PropTypes.object,

	    /**
	     * A css class or classes for the backdrop component.
	     */
	    backdropClassName: _react2['default'].PropTypes.string,

	    /**
	     * A css class or set of classes applied to the modal container when the modal is open,
	     * and removed when it is closed.
	     */
	    containerClassName: _react2['default'].PropTypes.string,

	    /**
	     * Close the modal when escape key is pressed
	     */
	    keyboard: _react2['default'].PropTypes.bool,

	    /**
	     * A `<Transition/>` component to use for the dialog and backdrop components.
	     */
	    transition: _reactPropTypesLibElementType2['default'],

	    /**
	     * The `timeout` of the dialog transition if specified. This number is used to ensure that
	     * transition callbacks are always fired, even if browser transition events are canceled.
	     *
	     * See the Transition `timeout` prop for more infomation.
	     */
	    dialogTransitionTimeout: _react2['default'].PropTypes.number,

	    /**
	     * The `timeout` of the backdrop transition if specified. This number is used to
	     * ensure that transition callbacks are always fired, even if browser transition events are canceled.
	     *
	     * See the Transition `timeout` prop for more infomation.
	     */
	    backdropTransitionTimeout: _react2['default'].PropTypes.number,

	    /**
	     * When `true` The modal will automatically shift focus to itself when it opens, and
	     * replace it to the last focused element when it closes.
	     * Generally this should never be set to false as it makes the Modal less
	     * accessible to assistive technologies, like screen readers.
	     */
	    autoFocus: _react2['default'].PropTypes.bool,

	    /**
	     * When `true` The modal will prevent focus from leaving the Modal while open.
	     * Generally this should never be set to false as it makes the Modal less
	     * accessible to assistive technologies, like screen readers.
	     */
	    enforceFocus: _react2['default'].PropTypes.bool

	  }),

	  getDefaultProps: function getDefaultProps() {
	    var noop = function noop() {};

	    return {
	      show: false,
	      backdrop: true,
	      keyboard: true,
	      autoFocus: true,
	      enforceFocus: true,
	      onHide: noop
	    };
	  },

	  getInitialState: function getInitialState() {
	    return { exited: !this.props.show };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var Transition = _props.transition;
	    var backdrop = _props.backdrop;
	    var dialogTransitionTimeout = _props.dialogTransitionTimeout;

	    var props = _objectWithoutProperties(_props, ['children', 'transition', 'backdrop', 'dialogTransitionTimeout']);

	    var onExit = props.onExit;
	    var onExiting = props.onExiting;
	    var onEnter = props.onEnter;
	    var onEntering = props.onEntering;
	    var onEntered = props.onEntered;

	    var show = !!props.show;
	    var dialog = _react2['default'].Children.only(this.props.children);

	    var mountModal = show || Transition && !this.state.exited;

	    if (!mountModal) {
	      return null;
	    }

	    var _dialog$props = dialog.props;
	    var role = _dialog$props.role;
	    var tabIndex = _dialog$props.tabIndex;

	    if (role === undefined || tabIndex === undefined) {
	      dialog = _react.cloneElement(dialog, {
	        role: role === undefined ? 'document' : role,
	        tabIndex: tabIndex == null ? '-1' : tabIndex
	      });
	    }

	    if (Transition) {
	      dialog = _react2['default'].createElement(
	        Transition,
	        {
	          transitionAppear: true,
	          unmountOnExit: true,
	          'in': show,
	          timeout: dialogTransitionTimeout,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.handleHidden,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered
	        },
	        dialog
	      );
	    }

	    return _react2['default'].createElement(
	      _Portal2['default'],
	      {
	        ref: this.setMountNode,
	        container: props.container
	      },
	      _react2['default'].createElement(
	        'div',
	        {
	          ref: 'modal',
	          role: props.role || 'dialog',
	          style: props.style,
	          className: props.className
	        },
	        backdrop && this.renderBackdrop(),
	        dialog
	      )
	    );
	  },

	  renderBackdrop: function renderBackdrop() {
	    var _props2 = this.props;
	    var Transition = _props2.transition;
	    var backdropTransitionTimeout = _props2.backdropTransitionTimeout;

	    var backdrop = _react2['default'].createElement('div', { ref: 'backdrop',
	      style: this.props.backdropStyle,
	      className: this.props.backdropClassName,
	      onClick: this.handleBackdropClick
	    });

	    if (Transition) {
	      backdrop = _react2['default'].createElement(
	        Transition,
	        { transitionAppear: true,
	          'in': this.props.show,
	          timeout: backdropTransitionTimeout
	        },
	        backdrop
	      );
	    }

	    return backdrop;
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.transition) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  },

	  componentWillUpdate: function componentWillUpdate(nextProps) {
	    if (nextProps.show) {
	      this.checkForFocus();
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.show) {
	      this.onShow();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var transition = this.props.transition;

	    if (prevProps.show && !this.props.show && !transition) {
	      // Otherwise handleHidden will call this.
	      this.onHide();
	    } else if (!prevProps.show && this.props.show) {
	      this.onShow();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    var _props3 = this.props;
	    var show = _props3.show;
	    var transition = _props3.transition;

	    if (show || transition && !this.state.exited) {
	      this.onHide();
	    }
	  },

	  onShow: function onShow() {
	    var doc = _utilsOwnerDocument2['default'](this);
	    var container = _utilsGetContainer2['default'](this.props.container, doc.body);

	    modalManager.add(this, container, this.props.containerClassName);

	    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);

	    this._onFocusinListener = _utilsAddFocusListener2['default'](this.enforceFocus);

	    this.focus();

	    if (this.props.onShow) {
	      this.props.onShow();
	    }
	  },

	  onHide: function onHide() {
	    modalManager.remove(this);

	    this._onDocumentKeyupListener.remove();

	    this._onFocusinListener.remove();

	    this.restoreLastFocus();
	  },

	  setMountNode: function setMountNode(ref) {
	    this.mountNode = ref ? ref.getMountNode() : ref;
	  },

	  handleHidden: function handleHidden() {
	    this.setState({ exited: true });
	    this.onHide();

	    if (this.props.onExited) {
	      var _props4;

	      (_props4 = this.props).onExited.apply(_props4, arguments);
	    }
	  },

	  handleBackdropClick: function handleBackdropClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }

	    if (this.props.onBackdropClick) {
	      this.props.onBackdropClick(e);
	    }

	    if (this.props.backdrop === true) {
	      this.props.onHide();
	    }
	  },

	  handleDocumentKeyUp: function handleDocumentKeyUp(e) {
	    if (this.props.keyboard && e.keyCode === 27 && this.isTopModal()) {
	      if (this.props.onEscapeKeyUp) {
	        this.props.onEscapeKeyUp(e);
	      }
	      this.props.onHide();
	    }
	  },

	  checkForFocus: function checkForFocus() {
	    if (_domHelpersUtilInDOM2['default']) {
	      this.lastFocus = _domHelpersActiveElement2['default']();
	    }
	  },

	  focus: function focus() {
	    var autoFocus = this.props.autoFocus;
	    var modalContent = this.getDialogElement();
	    var current = _domHelpersActiveElement2['default'](_utilsOwnerDocument2['default'](this));
	    var focusInModal = current && _domHelpersQueryContains2['default'](modalContent, current);

	    if (modalContent && autoFocus && !focusInModal) {
	      this.lastFocus = current;

	      if (!modalContent.hasAttribute('tabIndex')) {
	        modalContent.setAttribute('tabIndex', -1);
	        _warning2['default'](false, 'The modal content node does not accept focus. ' + 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".');
	      }

	      modalContent.focus();
	    }
	  },

	  restoreLastFocus: function restoreLastFocus() {
	    // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
	    if (this.lastFocus && this.lastFocus.focus) {
	      this.lastFocus.focus();
	      this.lastFocus = null;
	    }
	  },

	  enforceFocus: function enforceFocus() {
	    var enforceFocus = this.props.enforceFocus;

	    if (!enforceFocus || !this.isMounted() || !this.isTopModal()) {
	      return;
	    }

	    var active = _domHelpersActiveElement2['default'](_utilsOwnerDocument2['default'](this));
	    var modal = this.getDialogElement();

	    if (modal && modal !== active && !_domHelpersQueryContains2['default'](modal, active)) {
	      modal.focus();
	    }
	  },

	  //instead of a ref, which might conflict with one the parent applied.
	  getDialogElement: function getDialogElement() {
	    var node = this.refs.modal;
	    return node && node.lastChild;
	  },

	  isTopModal: function isTopModal() {
	    return modalManager.isTopModal(this);
	  }

	});

	Modal.manager = modalManager;

	exports['default'] = Modal;
	module.exports = exports['default'];

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _common = __webpack_require__(353);

	/**
	 * Checks whether a prop provides a DOM element
	 *
	 * The element can be provided in two forms:
	 * - Directly passed
	 * - Or passed an object that has a `render` method
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  if (typeof props[propName] !== 'object' || typeof props[propName].render !== 'function' && props[propName].nodeType !== 1) {
	    return new Error(_common.errMsg(props, propName, componentName, ', expected a DOM element or an object that has a `render` method'));
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ },
/* 353 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.errMsg = errMsg;
	exports.createChainableTypeChecker = createChainableTypeChecker;

	function errMsg(props, propName, componentName, msgContinuation) {
	  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
	}

	/**
	 * Create chain-able isRequired validator
	 *
	 * Largely copied directly from:
	 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
	 */

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName) {
	    componentName = componentName || '<<anonymous>>';
	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
	      }
	    } else {
	      return validate(props, propName, componentName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _common = __webpack_require__(353);

	/**
	 * Checks whether a prop provides a type of element.
	 *
	 * The type of element can be provided in two forms:
	 * - tag name (string)
	 * - a return value of React.createClass(...)
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

	  if (typeof props[propName] !== 'function') {
	    if (_react2['default'].isValidElement(props[propName])) {
	      return new Error(errBeginning + ', not an actual Element');
	    }

	    if (typeof props[propName] !== 'string') {
	      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
	    }
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactPropTypesLibMountable = __webpack_require__(352);

	var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

	var _utilsOwnerDocument = __webpack_require__(323);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	var _utilsGetContainer = __webpack_require__(356);

	var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

	/**
	 * The `<Portal/>` component renders its children into a new "subtree" outside of current component hierarchy.
	 * You can think of it as a declarative `appendChild()`, or jQuery's `$.fn.appendTo()`.
	 * The children of `<Portal/>` component will be appended to the `container` specified.
	 */
	var Portal = _react2['default'].createClass({

	  displayName: 'Portal',

	  propTypes: {
	    /**
	     * A Node, Component instance, or function that returns either. The `container` will have the Portal children
	     * appended to it.
	     */
	    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func])
	  },

	  componentDidMount: function componentDidMount() {
	    this._renderOverlay();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._renderOverlay();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._unrenderOverlay();
	    this._unmountOverlayTarget();
	  },

	  _mountOverlayTarget: function _mountOverlayTarget() {
	    if (!this._overlayTarget) {
	      this._overlayTarget = document.createElement('div');
	      this.getContainerDOMNode().appendChild(this._overlayTarget);
	    }
	  },

	  _unmountOverlayTarget: function _unmountOverlayTarget() {
	    if (this._overlayTarget) {
	      this.getContainerDOMNode().removeChild(this._overlayTarget);
	      this._overlayTarget = null;
	    }
	  },

	  _renderOverlay: function _renderOverlay() {

	    var overlay = !this.props.children ? null : _react2['default'].Children.only(this.props.children);

	    // Save reference for future access.
	    if (overlay !== null) {
	      this._mountOverlayTarget();
	      this._overlayInstance = _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, overlay, this._overlayTarget);
	    } else {
	      // Unrender if the component is null for transitions to null
	      this._unrenderOverlay();
	      this._unmountOverlayTarget();
	    }
	  },

	  _unrenderOverlay: function _unrenderOverlay() {
	    if (this._overlayTarget) {
	      _reactDom2['default'].unmountComponentAtNode(this._overlayTarget);
	      this._overlayInstance = null;
	    }
	  },

	  render: function render() {
	    return null;
	  },

	  getMountNode: function getMountNode() {
	    return this._overlayTarget;
	  },

	  getOverlayDOMNode: function getOverlayDOMNode() {
	    if (!this.isMounted()) {
	      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
	    }

	    if (this._overlayInstance) {
	      if (this._overlayInstance.getWrappedDOMNode) {
	        return this._overlayInstance.getWrappedDOMNode();
	      } else {
	        return _reactDom2['default'].findDOMNode(this._overlayInstance);
	      }
	    }

	    return null;
	  },

	  getContainerDOMNode: function getContainerDOMNode() {
	    return _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);
	  }
	});

	exports['default'] = Portal;
	module.exports = exports['default'];

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = getContainer;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function getContainer(container, defaultContainer) {
	  container = typeof container === 'function' ? container() : container;
	  return _reactDom2['default'].findDOMNode(container) || defaultContainer;
	}

	module.exports = exports['default'];

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _domHelpersStyle = __webpack_require__(227);

	var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

	var _domHelpersClass = __webpack_require__(358);

	var _domHelpersClass2 = _interopRequireDefault(_domHelpersClass);

	var _domHelpersUtilScrollbarSize = __webpack_require__(341);

	var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

	var _utilsIsOverflowing = __webpack_require__(362);

	var _utilsIsOverflowing2 = _interopRequireDefault(_utilsIsOverflowing);

	var _utilsManageAriaHidden = __webpack_require__(364);

	function findIndexOf(arr, cb) {
	  var idx = -1;
	  arr.some(function (d, i) {
	    if (cb(d, i)) {
	      idx = i;
	      return true;
	    }
	  });
	  return idx;
	}

	function findContainer(data, modal) {
	  return findIndexOf(data, function (d) {
	    return d.modals.indexOf(modal) !== -1;
	  });
	}

	/**
	 * Proper state managment for containers and the modals in those containers.
	 *
	 * @internal Used by the Modal to ensure proper styling of containers.
	 */

	var ModalManager = (function () {
	  function ModalManager() {
	    var hideSiblingNodes = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

	    _classCallCheck(this, ModalManager);

	    this.hideSiblingNodes = hideSiblingNodes;
	    this.modals = [];
	    this.containers = [];
	    this.data = [];
	  }

	  ModalManager.prototype.add = function add(modal, container, className) {
	    var modalIdx = this.modals.indexOf(modal);
	    var containerIdx = this.containers.indexOf(container);

	    if (modalIdx !== -1) {
	      return modalIdx;
	    }

	    modalIdx = this.modals.length;
	    this.modals.push(modal);

	    if (this.hideSiblingNodes) {
	      _utilsManageAriaHidden.hideSiblings(container, modal.mountNode);
	    }

	    if (containerIdx !== -1) {
	      this.data[containerIdx].modals.push(modal);
	      return modalIdx;
	    }

	    var data = {
	      modals: [modal],
	      //right now only the first modal of a container will have its classes applied
	      classes: className ? className.split(/\s+/) : [],
	      //we are only interested in the actual `style` here becasue we will override it
	      style: {
	        overflow: container.style.overflow,
	        paddingRight: container.style.paddingRight
	      }
	    };

	    var style = { overflow: 'hidden' };

	    data.overflowing = _utilsIsOverflowing2['default'](container);

	    if (data.overflowing) {
	      // use computed style, here to get the real padding
	      // to add our scrollbar width
	      style.paddingRight = parseInt(_domHelpersStyle2['default'](container, 'paddingRight') || 0, 10) + _domHelpersUtilScrollbarSize2['default']() + 'px';
	    }

	    _domHelpersStyle2['default'](container, style);

	    data.classes.forEach(_domHelpersClass2['default'].addClass.bind(null, container));

	    this.containers.push(container);
	    this.data.push(data);

	    return modalIdx;
	  };

	  ModalManager.prototype.remove = function remove(modal) {
	    var modalIdx = this.modals.indexOf(modal);

	    if (modalIdx === -1) {
	      return;
	    }

	    var containerIdx = findContainer(this.data, modal);
	    var data = this.data[containerIdx];
	    var container = this.containers[containerIdx];

	    data.modals.splice(data.modals.indexOf(modal), 1);

	    this.modals.splice(modalIdx, 1);

	    // if that was the last modal in a container,
	    // clean up the container stylinhg.
	    if (data.modals.length === 0) {
	      Object.keys(data.style).forEach(function (key) {
	        return container.style[key] = data.style[key];
	      });

	      data.classes.forEach(_domHelpersClass2['default'].removeClass.bind(null, container));

	      if (this.hideSiblingNodes) {
	        _utilsManageAriaHidden.showSiblings(container, modal.mountNode);
	      }
	      this.containers.splice(containerIdx, 1);
	      this.data.splice(containerIdx, 1);
	    } else if (this.hideSiblingNodes) {
	      //otherwise make sure the next top modal is visible to a SR
	      _utilsManageAriaHidden.ariaHidden(false, data.modals[data.modals.length - 1].mountNode);
	    }
	  };

	  ModalManager.prototype.isTopModal = function isTopModal(modal) {
	    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
	  };

	  return ModalManager;
	})();

	exports['default'] = ModalManager;
	module.exports = exports['default'];

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  addClass: __webpack_require__(359),
	  removeClass: __webpack_require__(361),
	  hasClass: __webpack_require__(360)
	};

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var hasClass = __webpack_require__(360);

	module.exports = function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!hasClass(element)) element.className = element.className + ' ' + className;
	};

/***/ },
/* 360 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (' ' + element.className + ' ').indexOf(' ' + className + ' ') !== -1;
	};

/***/ },
/* 361 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	};

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = isOverflowing;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _domHelpersQueryIsWindow = __webpack_require__(363);

	var _domHelpersQueryIsWindow2 = _interopRequireDefault(_domHelpersQueryIsWindow);

	var _domHelpersOwnerDocument = __webpack_require__(243);

	var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

	function isBody(node) {
	  return node && node.tagName.toLowerCase() === 'body';
	}

	function bodyIsOverflowing(node) {
	  var doc = _domHelpersOwnerDocument2['default'](node);
	  var win = _domHelpersQueryIsWindow2['default'](doc);
	  var fullWidth = win.innerWidth;

	  // Support: ie8, no innerWidth
	  if (!fullWidth) {
	    var documentElementRect = doc.documentElement.getBoundingClientRect();
	    fullWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	  }

	  return doc.body.clientWidth < fullWidth;
	}

	function isOverflowing(container) {
	  var win = _domHelpersQueryIsWindow2['default'](container);

	  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
	}

	module.exports = exports['default'];

/***/ },
/* 363 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function getWindow(node) {
	  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
	};

/***/ },
/* 364 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.ariaHidden = ariaHidden;
	exports.hideSiblings = hideSiblings;
	exports.showSiblings = showSiblings;

	var BLACKLIST = ['template', 'script', 'style'];

	var isHidable = function isHidable(_ref) {
	  var nodeType = _ref.nodeType;
	  var tagName = _ref.tagName;
	  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
	};

	var siblings = function siblings(container, mount, cb) {
	  mount = [].concat(mount);

	  [].forEach.call(container.children, function (node) {
	    if (mount.indexOf(node) === -1 && isHidable(node)) {
	      cb(node);
	    }
	  });
	};

	function ariaHidden(show, node) {
	  if (!node) {
	    return;
	  }
	  if (show) {
	    node.setAttribute('aria-hidden', 'true');
	  } else {
	    node.removeAttribute('aria-hidden');
	  }
	}

	function hideSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(true, node);
	  });
	}

	function showSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(false, node);
	  });
	}

/***/ },
/* 365 */
/***/ function(module, exports) {

	/**
	 * Firefox doesn't have a focusin event so using capture is easiest way to get bubbling
	 * IE8 can't do addEventListener, but does have onfocusin, so we use that in ie8
	 *
	 * We only allow one Listener at a time to avoid stack overflows
	 */
	'use strict';

	exports.__esModule = true;
	exports['default'] = addFocusListener;

	function addFocusListener(handler) {
	  var useFocusin = !document.addEventListener;
	  var remove = undefined;

	  if (useFocusin) {
	    document.attachEvent('onfocusin', handler);
	    remove = function () {
	      return document.detachEvent('onfocusin', handler);
	    };
	  } else {
	    document.addEventListener('focus', handler, true);
	    remove = function () {
	      return document.removeEventListener('focus', handler, true);
	    };
	  }

	  return { remove: remove };
	}

	module.exports = exports['default'];

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibAll = __webpack_require__(214);

	var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

	var _reactPropTypesLibDeprecated = __webpack_require__(239);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _Collapse = __webpack_require__(226);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var Nav = (function (_React$Component) {
	  _inherits(Nav, _React$Component);

	  function Nav() {
	    _classCallCheck(this, Nav);

	    _React$Component.apply(this, arguments);
	  }

	  Nav.prototype.render = function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var ulClassName = _props.ulClassName;
	    var id = _props.id;
	    var ulId = _props.ulId;

	    var isNavbar = this.props.navbar != null ? this.props.navbar : this.context.$bs_navbar;
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'stacked')] = this.props.stacked;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'justified')] = this.props.justified;

	    if (isNavbar) {
	      var bsClass = this.context.$bs_navbar_bsClass || 'navbar';
	      var navbarRight = this.props.right != null ? this.props.right : this.props.pullRight;

	      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'nav')] = true;
	      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'right')] = navbarRight;
	      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'left')] = this.props.pullLeft;
	    } else {
	      classes['pull-right'] = this.props.pullRight;
	      classes['pull-left'] = this.props.pullLeft;
	    }

	    var list = _react2['default'].createElement(
	      'ul',
	      _extends({ ref: 'ul'
	      }, this.props, {
	        id: ulId || id,
	        role: this.props.bsStyle === 'tabs' ? 'tablist' : null,
	        className: _classnames2['default'](className, ulClassName, classes)
	      }),
	      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem, this)
	    );

	    // TODO remove in 0.29
	    if (this.context.$bs_deprecated_navbar && this.props.collapsible) {
	      list = _react2['default'].createElement(
	        _Collapse2['default'],
	        {
	          'in': this.props.expanded,
	          className: isNavbar ? 'navbar-collapse' : void 0
	        },
	        _react2['default'].createElement(
	          'div',
	          null,
	          list
	        )
	      );
	    }

	    return list;
	  };

	  Nav.prototype.getChildActiveProp = function getChildActiveProp(child) {
	    if (child.props.active) {
	      return true;
	    }
	    if (this.props.activeKey != null) {
	      if (child.props.eventKey === this.props.activeKey) {
	        return true;
	      }
	    }
	    if (this.props.activeHref != null) {
	      if (child.props.href === this.props.activeHref) {
	        return true;
	      }
	    }

	    return child.props.active;
	  };

	  Nav.prototype.renderNavItem = function renderNavItem(child, index) {
	    return _react.cloneElement(child, {
	      role: this.props.bsStyle === 'tabs' ? 'tab' : null,
	      active: this.getChildActiveProp(child),
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      key: child.key ? child.key : index,
	      navItem: true
	    });
	  };

	  return Nav;
	})(_react2['default'].Component);

	Nav.propTypes = {
	  activeHref: _react2['default'].PropTypes.string,
	  activeKey: _react2['default'].PropTypes.any,

	  stacked: _react2['default'].PropTypes.bool,
	  justified: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (_ref) {
	    var justified = _ref.justified;
	    var navbar = _ref.navbar;
	    return justified && navbar ? Error('justified navbar `Nav`s are not supported') : null;
	  }),
	  onSelect: _react2['default'].PropTypes.func,

	  /**
	   * CSS classes for the wrapper `nav` element
	   */
	  className: _react2['default'].PropTypes.string,
	  /**
	   * HTML id for the wrapper `nav` element
	   */
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	  /**
	   * CSS classes for the inner `ul` element
	   *
	   * @deprecated
	   */
	  ulClassName: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.string, 'The wrapping `<nav>` has been removed you can use `className` now'),
	  /**
	   * HTML id for the inner `ul` element
	   *
	   * @deprecated
	   */

	  ulId: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.string, 'The wrapping `<nav>` has been removed you can use `id` now'),

	  /**
	   * Apply styling an alignment for use in a Navbar. This prop will be set
	   * automatically when the Nav is used inside a Navbar.
	   */
	  navbar: _react2['default'].PropTypes.bool,
	  eventKey: _react2['default'].PropTypes.any,
	  pullRight: _react2['default'].PropTypes.bool,
	  pullLeft: _react2['default'].PropTypes.bool,

	  right: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use the `pullRight` prop instead'),

	  /**
	   * @private
	   */
	  expanded: _react2['default'].PropTypes.bool,

	  /**
	   * @private
	   */
	  collapsible: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use `Navbar.Collapse` instead, to create collapsible Navbars')
	};

	Nav.contextTypes = {
	  $bs_navbar: _react2['default'].PropTypes.bool,
	  $bs_navbar_bsClass: _react2['default'].PropTypes.string,

	  $bs_deprecated_navbar: _react2['default'].PropTypes.bool
	};

	Nav.defaultProps = {
	  justified: false,
	  pullRight: false,
	  pullLeft: false,
	  stacked: false
	};

	exports['default'] = _utilsBootstrapUtils.bsClass('nav', _utilsBootstrapUtils.bsStyles(['tabs', 'pills'], Nav));
	module.exports = exports['default'];

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint react/no-multi-comp: 0 */
	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _uncontrollable = __webpack_require__(315);

	var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _reactPropTypesLibDeprecated = __webpack_require__(239);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var _utilsDeprecationWarning = __webpack_require__(240);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _Grid = __webpack_require__(329);

	var _Grid2 = _interopRequireDefault(_Grid);

	var _deprecatedNavbar = __webpack_require__(368);

	var _deprecatedNavbar2 = _interopRequireDefault(_deprecatedNavbar);

	var _NavbarBrand = __webpack_require__(370);

	var _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);

	var _NavbarHeader = __webpack_require__(371);

	var _NavbarHeader2 = _interopRequireDefault(_NavbarHeader);

	var _NavbarToggle = __webpack_require__(372);

	var _NavbarToggle2 = _interopRequireDefault(_NavbarToggle);

	var _NavbarCollapse = __webpack_require__(373);

	var _NavbarCollapse2 = _interopRequireDefault(_NavbarCollapse);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var has = function has(obj, key) {
	  return obj && ({}).hasOwnProperty.call(obj, key);
	};

	function shouldRenderOldNavbar(component) {
	  var props = component.props;
	  return has(props, 'brand') || has(props, 'toggleButton') || has(props, 'toggleNavKey') || has(props, 'navExpanded') || has(props, 'defaultNavExpanded') ||
	  // this should be safe b/c the new version requires wrapping in a Header
	  _utilsValidComponentChildren2['default'].findValidComponents(props.children, function (child) {
	    return child.props.bsRole === 'brand';
	  }).length > 0;
	}

	var Navbar = _react2['default'].createClass({
	  displayName: 'Navbar',

	  propTypes: {
	    /**
	     * Create a fixed navbar along the top of the screen, that scrolls with the page
	     */
	    fixedTop: _react2['default'].PropTypes.bool,
	    /**
	     * Create a fixed navbar along the bottom of the screen, that scrolls with the page
	     */
	    fixedBottom: _react2['default'].PropTypes.bool,
	    /**
	     * Create a full-width navbar that scrolls away with the page
	     */
	    staticTop: _react2['default'].PropTypes.bool,
	    /**
	     * An alternative dark visual style for the Navbar
	     */
	    inverse: _react2['default'].PropTypes.bool,
	    /**
	     * Allow the Navbar to fluidly adjust to the page or container width, instead of at the
	     * predefined screen breakpoints
	     */
	    fluid: _react2['default'].PropTypes.bool,

	    /**
	     * Set a custom element for this component.
	     */
	    componentClass: _reactPropTypesLibElementType2['default'],
	    /**
	     * A callback fired when the `<Navbar>` body collapses or expands.
	     * Fired when a `<Navbar.Toggle>` is clicked and called with the new `navExpanded` boolean value.
	     *
	     * @controllable navExpanded
	     */
	    onToggle: _react2['default'].PropTypes.func,

	    /**
	     * Explicitly set the visiblity of the navbar body
	     *
	     * @controllable onToggle
	     */
	    expanded: _react2['default'].PropTypes.bool,

	    /**
	     * @deprecated
	     */
	    navExpanded: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use `expanded` and `defaultExpanded` instead.')
	  },

	  childContextTypes: {
	    $bs_navbar: _react.PropTypes.bool,
	    $bs_navbar_bsClass: _react.PropTypes.string,
	    $bs_navbar_onToggle: _react.PropTypes.func,
	    $bs_navbar_expanded: _react.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'nav',
	      fixedTop: false,
	      fixedBottom: false,
	      staticTop: false,
	      inverse: false,
	      fluid: false
	    };
	  },

	  getChildContext: function getChildContext() {
	    return {
	      $bs_navbar: true,
	      $bs_navbar_bsClass: this.props.bsClass,
	      $bs_navbar_onToggle: this.handleToggle,
	      $bs_navbar_expanded: this.props.expanded
	    };
	  },

	  handleToggle: function handleToggle() {
	    this.props.onToggle(!this.props.expanded);
	  },

	  isNavExpanded: function isNavExpanded() {
	    return !!this.props.expanded;
	  },

	  render: function render() {
	    if (shouldRenderOldNavbar(this)) {
	      _utilsDeprecationWarning2['default']({ message: 'Rendering a deprecated version of the Navbar due to the use of deprecated ' + 'props. Please use the new Navbar api, and remove `toggleButton`, ' + '`toggleNavKey`, `brand`, `navExpanded`, `defaultNavExpanded` props or the ' + 'use of the `<NavBrand>` component outside of a `<Navbar.Header>`. \n\n' + 'for more details see: http://react-bootstrap.github.io/components.html#navbars'
	      });

	      return _react2['default'].createElement(_deprecatedNavbar2['default'], this.props);
	    }

	    var _props = this.props;
	    var fixedTop = _props.fixedTop;
	    var fixedBottom = _props.fixedBottom;
	    var staticTop = _props.staticTop;
	    var inverse = _props.inverse;
	    var ComponentClass = _props.componentClass;
	    var fluid = _props.fluid;
	    var className = _props.className;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'componentClass', 'fluid', 'className', 'children']);

	    // will result in some false positives but that seems better
	    // than false negatives. strict `undefined` check allows explicit
	    // "nulling" of the role if the user really doesn't want one
	    if (props.role === undefined && ComponentClass !== 'nav') {
	      props.role = 'navigation';
	    }

	    if (inverse) {
	      props.bsStyle = _styleMaps.INVERSE;
	    }

	    var classes = _utilsBootstrapUtils2['default'].getClassSet(props);

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-top')] = fixedTop;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-bottom')] = fixedBottom;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'static-top')] = staticTop;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, props, { className: _classnames2['default'](className, classes) }),
	      _react2['default'].createElement(
	        _Grid2['default'],
	        { fluid: fluid },
	        children
	      )
	    );
	  }
	});

	var NAVBAR_STATES = [_styleMaps.DEFAULT, _styleMaps.INVERSE];

	Navbar = _utilsBootstrapUtils.bsStyles(NAVBAR_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('navbar', _uncontrollable2['default'](Navbar, { expanded: 'onToggle' })));

	function createSimpleWrapper(tag, suffix, displayName) {
	  var wrapper = function wrapper(_ref, _ref2) {
	    var Tag = _ref.componentClass;
	    var className = _ref.className;

	    var props = _objectWithoutProperties(_ref, ['componentClass', 'className']);

	    var _classNames;

	    var _ref2$$bs_navbar_bsClass = _ref2.$bs_navbar_bsClass;
	    var bsClass = _ref2$$bs_navbar_bsClass === undefined ? 'navbar' : _ref2$$bs_navbar_bsClass;
	    return _react2['default'].createElement(Tag, _extends({}, props, {
	      className: _classnames2['default'](className, _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, suffix), (_classNames = {}, _classNames[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'right')] = props.pullRight, _classNames[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'left')] = props.pullLeft, _classNames))
	    }));
	  };

	  wrapper.displayName = displayName;

	  wrapper.propTypes = {
	    componentClass: _reactPropTypesLibElementType2['default'],
	    pullRight: _react2['default'].PropTypes.bool,
	    pullLeft: _react2['default'].PropTypes.bool
	  };
	  wrapper.defaultProps = {
	    componentClass: tag,
	    pullRight: false,
	    pullLeft: false
	  };

	  wrapper.contextTypes = {
	    $bs_navbar_bsClass: _react.PropTypes.string
	  };

	  return wrapper;
	}

	Navbar.Brand = _NavbarBrand2['default'];
	Navbar.Header = _NavbarHeader2['default'];
	Navbar.Toggle = _NavbarToggle2['default'];
	Navbar.Collapse = _NavbarCollapse2['default'];

	Navbar.Form = createSimpleWrapper('div', 'form', 'NavbarForm');
	Navbar.Text = createSimpleWrapper('p', 'text', 'NavbarText');
	Navbar.Link = createSimpleWrapper('a', 'link', 'NavbarLink');

	exports['default'] = Navbar;
	module.exports = exports['default'];

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibDeprecated = __webpack_require__(239);

	var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _Grid = __webpack_require__(329);

	var _Grid2 = _interopRequireDefault(_Grid);

	var _NavBrand = __webpack_require__(369);

	var _NavBrand2 = _interopRequireDefault(_NavBrand);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var Navbar = _react2['default'].createClass({
	  displayName: 'Navbar',

	  propTypes: {
	    fixedTop: _react2['default'].PropTypes.bool,
	    fixedBottom: _react2['default'].PropTypes.bool,
	    staticTop: _react2['default'].PropTypes.bool,
	    inverse: _react2['default'].PropTypes.bool,
	    fluid: _react2['default'].PropTypes.bool,
	    role: _react2['default'].PropTypes.string,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default'],
	    brand: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.node, 'Use the `NavBrand` component.'),
	    toggleButton: _react2['default'].PropTypes.node,
	    toggleNavKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onToggle: _react2['default'].PropTypes.func,
	    navExpanded: _react2['default'].PropTypes.bool,
	    defaultNavExpanded: _react2['default'].PropTypes.bool
	  },

	  // TODO Remove in 0.29
	  childContextTypes: {
	    $bs_deprecated_navbar: _react2['default'].PropTypes.bool
	  },

	  getChildContext: function getChildContext() {
	    return {
	      $bs_deprecated_navbar: true
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      role: 'navigation',
	      componentClass: 'nav',
	      fixedTop: false,
	      fixedBottom: false,
	      staticTop: false,
	      inverse: false,
	      fluid: false,
	      defaultNavExpanded: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      navExpanded: this.props.defaultNavExpanded
	    };
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleToggle: function handleToggle() {
	    if (this.props.onToggle) {
	      this._isChanging = true;
	      this.props.onToggle();
	      this._isChanging = false;
	    }

	    this.setState({
	      navExpanded: !this.state.navExpanded
	    });
	  },

	  isNavExpanded: function isNavExpanded() {
	    return this.props.navExpanded != null ? this.props.navExpanded : this.state.navExpanded;
	  },

	  hasNavBrandChild: function hasNavBrandChild() {
	    return _utilsValidComponentChildren2['default'].findValidComponents(this.props.children, function (child) {
	      return child.props.bsRole === 'brand';
	    }).length > 0;
	  },

	  render: function render() {
	    var _props = this.props;
	    var brand = _props.brand;
	    var toggleButton = _props.toggleButton;
	    var toggleNavKey = _props.toggleNavKey;
	    var fixedTop = _props.fixedTop;
	    var fixedBottom = _props.fixedBottom;
	    var staticTop = _props.staticTop;
	    var inverse = _props.inverse;
	    var ComponentClass = _props.componentClass;
	    var fluid = _props.fluid;
	    var className = _props.className;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['brand', 'toggleButton', 'toggleNavKey', 'fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'componentClass', 'fluid', 'className', 'children']);

	    // will result in some false positives but that seems better
	    // than false negatives. strict `undefined` check allows explicit
	    // "nulling" of the role if the user really doesn't want one
	    if (props.role === undefined && ComponentClass !== 'nav') {
	      props.role = 'navigation';
	    }

	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-top')] = this.props.fixedTop;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-bottom')] = this.props.fixedBottom;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'static-top')] = this.props.staticTop;

	    // handle built-in styles manually to provide the convenience `inverse` prop
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, _styleMaps.INVERSE)] = this.props.inverse;
	    classes[_utilsBootstrapUtils2['default'].prefix(this.props, _styleMaps.DEFAULT)] = !this.props.inverse;

	    var showHeader = (brand || toggleButton || toggleNavKey != null) && !this.hasNavBrandChild();

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, props, { className: _classnames2['default'](className, classes) }),
	      _react2['default'].createElement(
	        _Grid2['default'],
	        { fluid: fluid },
	        showHeader ? this.renderBrandHeader() : null,
	        _utilsValidComponentChildren2['default'].map(children, this.renderChild)
	      )
	    );
	  },

	  renderBrandHeader: function renderBrandHeader() {
	    var brand = this.props.brand;

	    if (brand) {
	      brand = _react2['default'].createElement(
	        _NavBrand2['default'],
	        null,
	        brand
	      );
	    }

	    return this.renderHeader(brand);
	  },

	  renderHeader: function renderHeader(brand) {
	    var hasToggle = this.props.toggleButton || this.props.toggleNavKey != null;
	    var headerClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'header');

	    return _react2['default'].createElement(
	      'div',
	      { className: headerClass },
	      brand,
	      hasToggle ? this.renderToggleButton() : null
	    );
	  },

	  renderChild: function renderChild(child, index) {
	    var key = child.key != null ? child.key : index;

	    if (child.props.bsRole === 'brand') {
	      return _react2['default'].cloneElement(this.renderHeader(child), { key: key });
	    }

	    var toggleNavKey = this.props.toggleNavKey;

	    var collapsible = toggleNavKey != null && toggleNavKey === child.props.eventKey;

	    return _react2['default'].cloneElement(child, {
	      navbar: true,
	      collapsible: collapsible,
	      expanded: collapsible && this.isNavExpanded(),
	      key: key
	    });
	  },

	  renderToggleButton: function renderToggleButton() {
	    var toggleButton = this.props.toggleButton;

	    var toggleClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'toggle');

	    if (_react2['default'].isValidElement(toggleButton)) {
	      return _react2['default'].cloneElement(toggleButton, {
	        className: _classnames2['default'](toggleButton.props.className, toggleClass),
	        onClick: _utilsCreateChainedFunction2['default'](this.handleToggle, toggleButton.props.onClick)
	      });
	    }

	    var children = undefined;
	    if (toggleButton != null) {
	      children = toggleButton;
	    } else {
	      children = [_react2['default'].createElement(
	        'span',
	        { className: 'sr-only', key: 0 },
	        'Toggle navigation'
	      ), _react2['default'].createElement('span', { className: 'icon-bar', key: 1 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 2 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 3 })];
	    }

	    return _react2['default'].createElement(
	      'button',
	      {
	        type: 'button',
	        onClick: this.handleToggle,
	        className: toggleClass
	      },
	      children
	    );
	  }

	});

	var NAVBAR_STATES = [_styleMaps.DEFAULT, _styleMaps.INVERSE];

	exports['default'] = _utilsBootstrapUtils.bsStyles(NAVBAR_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('navbar', Navbar));
	module.exports = exports['default'];

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _NavbarBrand = __webpack_require__(370);

	var _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);

	var _utilsDeprecationWarning = __webpack_require__(240);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	exports['default'] = _utilsDeprecationWarning2['default'].wrapper(_NavbarBrand2['default'], {
	  message: 'The `NavBrand` component has been renamed to: `NavbarBrand`. ' + 'Please use that component instead; this alias will be removed in an upcoming release'
	});
	module.exports = exports['default'];

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var NavbarBrand = (function (_React$Component) {
	  _inherits(NavbarBrand, _React$Component);

	  function NavbarBrand() {
	    _classCallCheck(this, NavbarBrand);

	    _React$Component.apply(this, arguments);
	  }

	  NavbarBrand.prototype.render = function render() {
	    var _props = this.props;
	    var className = _props.className;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['className', 'children']);

	    var _context$$bs_navbar_bsClass = this.context.$bs_navbar_bsClass;
	    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;

	    var brandClasses = _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'brand');

	    if (_react2['default'].isValidElement(children)) {
	      return _react2['default'].cloneElement(children, {
	        className: _classnames2['default'](children.props.className, className, brandClasses)
	      });
	    }

	    return _react2['default'].createElement(
	      'span',
	      _extends({}, props, { className: _classnames2['default'](className, brandClasses) }),
	      children
	    );
	  };

	  return NavbarBrand;
	})(_react2['default'].Component);

	NavbarBrand.contextTypes = {
	  $bs_navbar_bsClass: _react2['default'].PropTypes.string
	};

	exports['default'] = NavbarBrand;
	module.exports = exports['default'];

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var NavbarHeader = _react2['default'].createClass({
	  displayName: 'NavbarHeader',

	  contextTypes: {
	    $bs_navbar_bsClass: _react.PropTypes.string
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['children']);

	    var _context$$bs_navbar_bsClass = this.context.$bs_navbar_bsClass;
	    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;

	    return _react2['default'].createElement(
	      'div',
	      { className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'header') },
	      children
	    );
	  }
	});

	exports['default'] = NavbarHeader;
	module.exports = exports['default'];

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var NavbarToggle = _react2['default'].createClass({
	  displayName: 'NavbarToggle',

	  propTypes: {
	    /**
	     * The toggle content, if left empty it will render the default toggle (seen above).
	     */
	    children: _react.PropTypes.node
	  },

	  contextTypes: {
	    $bs_navbar_bsClass: _react.PropTypes.string,
	    $bs_navbar_onToggle: _react.PropTypes.func
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['children']);

	    var _context = this.context;
	    var _context$$bs_navbar_bsClass = _context.$bs_navbar_bsClass;
	    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;
	    var onToggle = _context.$bs_navbar_onToggle;

	    return _react2['default'].createElement(
	      'button',
	      { type: 'button',
	        onClick: onToggle,
	        className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'toggle')
	      },
	      children || [_react2['default'].createElement(
	        'span',
	        { className: 'sr-only', key: 0 },
	        'Toggle navigation'
	      ), _react2['default'].createElement('span', { className: 'icon-bar', key: 1 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 2 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 3 })]
	    );
	  }
	});

	exports['default'] = NavbarToggle;
	module.exports = exports['default'];

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _Collapse = __webpack_require__(226);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var NavbarCollapse = _react2['default'].createClass({
	  displayName: 'NavbarCollapse',

	  contextTypes: {
	    $bs_navbar_bsClass: _react.PropTypes.string,
	    $bs_navbar_expanded: _react.PropTypes.bool
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['children']);

	    var _context = this.context;
	    var _context$$bs_navbar_bsClass = _context.$bs_navbar_bsClass;
	    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;
	    var expanded = _context.$bs_navbar_expanded;

	    return _react2['default'].createElement(
	      _Collapse2['default'],
	      _extends({ 'in': expanded }, props),
	      _react2['default'].createElement(
	        'div',
	        { className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'collapse') },
	        children
	      )
	    );
	  }
	});

	exports['default'] = NavbarCollapse;
	module.exports = exports['default'];

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _Dropdown = __webpack_require__(241);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var NavDropdown = (function (_React$Component) {
	  _inherits(NavDropdown, _React$Component);

	  function NavDropdown() {
	    _classCallCheck(this, NavDropdown);

	    _React$Component.apply(this, arguments);
	  }

	  NavDropdown.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var title = _props.title;
	    var noCaret = _props.noCaret;

	    var props = _objectWithoutProperties(_props, ['children', 'title', 'noCaret']);

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      _extends({}, props, { componentClass: 'li' }),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Toggle,
	        {
	          useAnchor: true,
	          disabled: props.disabled,
	          noCaret: noCaret
	        },
	        title
	      ),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        children
	      )
	    );
	  };

	  return NavDropdown;
	})(_react2['default'].Component);

	NavDropdown.propTypes = _extends({
	  noCaret: _react2['default'].PropTypes.bool,
	  title: _react2['default'].PropTypes.node.isRequired
	}, _Dropdown2['default'].propTypes);

	exports['default'] = NavDropdown;
	module.exports = exports['default'];

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SafeAnchor = __webpack_require__(201);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var NavItem = _react2['default'].createClass({
	  displayName: 'NavItem',

	  propTypes: {
	    linkId: _react2['default'].PropTypes.string,
	    onSelect: _react2['default'].PropTypes.func,
	    active: _react2['default'].PropTypes.bool,
	    disabled: _react2['default'].PropTypes.bool,
	    href: _react2['default'].PropTypes.string,
	    onClick: _react2['default'].PropTypes.func,
	    role: _react2['default'].PropTypes.string,
	    title: _react2['default'].PropTypes.node,
	    eventKey: _react2['default'].PropTypes.any,
	    target: _react2['default'].PropTypes.string,
	    'aria-controls': _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      disabled: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var role = _props.role;
	    var linkId = _props.linkId;
	    var disabled = _props.disabled;
	    var active = _props.active;
	    var href = _props.href;
	    var onClick = _props.onClick;
	    var title = _props.title;
	    var target = _props.target;
	    var children = _props.children;
	    var tabIndex = _props.tabIndex;
	    var ariaControls = _props['aria-controls'];

	    var props = _objectWithoutProperties(_props, ['role', 'linkId', 'disabled', 'active', 'href', 'onClick', 'title', 'target', 'children', 'tabIndex', 'aria-controls']);

	    var classes = {
	      active: active,
	      disabled: disabled
	    };
	    var linkProps = {
	      role: role,
	      href: href,
	      onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick),
	      title: title,
	      target: target,
	      tabIndex: tabIndex,
	      id: linkId
	    };

	    if (!role && href === '#') {
	      linkProps.role = 'button';
	    } else if (role === 'tab') {
	      linkProps['aria-selected'] = active;
	    }

	    return _react2['default'].createElement(
	      'li',
	      _extends({}, props, { role: 'presentation', className: _classnames2['default'](props.className, classes) }),
	      _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        _extends({}, linkProps, { 'aria-controls': ariaControls }),
	        children
	      )
	    );
	  },

	  handleClick: function handleClick(e) {
	    if (this.props.onSelect) {
	      e.preventDefault();

	      if (!this.props.disabled) {
	        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
	      }
	    }
	  }
	});

	exports['default'] = NavItem;
	module.exports = exports['default'];
	//eslint-disable-line

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint react/prop-types: [2, {ignore: ["container", "containerPadding", "target", "placement", "children"] }] */
	/* These properties are validated in 'Portal' and 'Position' components */

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactOverlaysLibOverlay = __webpack_require__(377);

	var _reactOverlaysLibOverlay2 = _interopRequireDefault(_reactOverlaysLibOverlay);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _Fade = __webpack_require__(345);

	var _Fade2 = _interopRequireDefault(_Fade);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Overlay = (function (_React$Component) {
	  _inherits(Overlay, _React$Component);

	  function Overlay() {
	    _classCallCheck(this, Overlay);

	    _React$Component.apply(this, arguments);
	  }

	  Overlay.prototype.render = function render() {
	    var _props = this.props;
	    var child = _props.children;
	    var transition = _props.animation;

	    var props = _objectWithoutProperties(_props, ['children', 'animation']);

	    if (transition === true) {
	      transition = _Fade2['default'];
	    }

	    if (transition === false) {
	      transition = null;
	    }

	    if (!transition) {
	      child = _react.cloneElement(child, {
	        className: _classnames2['default']('in', child.props.className)
	      });
	    }

	    return _react2['default'].createElement(
	      _reactOverlaysLibOverlay2['default'],
	      _extends({}, props, {
	        transition: transition
	      }),
	      child
	    );
	  };

	  return Overlay;
	})(_react2['default'].Component);

	Overlay.propTypes = _extends({}, _reactOverlaysLibOverlay2['default'].propTypes, {

	  /**
	   * Set the visibility of the Overlay
	   */
	  show: _react2['default'].PropTypes.bool,
	  /**
	   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
	   */
	  rootClose: _react2['default'].PropTypes.bool,
	  /**
	   * A callback invoked by the overlay when it wishes to be hidden. Required if
	   * `rootClose` is specified.
	   */
	  onHide: _react2['default'].PropTypes.func,

	  /**
	   * Use animation
	   */
	  animation: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _reactPropTypesLibElementType2['default']]),

	  /**
	   * Callback fired before the Overlay transitions in
	   */
	  onEnter: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition in
	   */
	  onEntering: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning in
	   */
	  onEntered: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired right before the Overlay transitions out
	   */
	  onExit: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition out
	   */
	  onExiting: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning out
	   */
	  onExited: _react2['default'].PropTypes.func
	});

	Overlay.defaultProps = {
	  animation: _Fade2['default'],
	  rootClose: false,
	  show: false
	};

	exports['default'] = Overlay;
	module.exports = exports['default'];

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _Portal = __webpack_require__(355);

	var _Portal2 = _interopRequireDefault(_Portal);

	var _Position = __webpack_require__(378);

	var _Position2 = _interopRequireDefault(_Position);

	var _RootCloseWrapper = __webpack_require__(319);

	var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

	var _reactPropTypesLibElementType = __webpack_require__(354);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	/**
	 * Built on top of `<Position/>` and `<Portal/>`, the overlay component is great for custom tooltip overlays.
	 */

	var Overlay = (function (_React$Component) {
	  _inherits(Overlay, _React$Component);

	  function Overlay(props, context) {
	    _classCallCheck(this, Overlay);

	    _React$Component.call(this, props, context);

	    this.state = { exited: !props.show };
	    this.onHiddenListener = this.handleHidden.bind(this);
	  }

	  Overlay.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.transition) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  };

	  Overlay.prototype.render = function render() {
	    var _props = this.props;
	    var container = _props.container;
	    var containerPadding = _props.containerPadding;
	    var target = _props.target;
	    var placement = _props.placement;
	    var shouldUpdatePosition = _props.shouldUpdatePosition;
	    var rootClose = _props.rootClose;
	    var children = _props.children;
	    var Transition = _props.transition;

	    var props = _objectWithoutProperties(_props, ['container', 'containerPadding', 'target', 'placement', 'shouldUpdatePosition', 'rootClose', 'children', 'transition']);

	    // Don't un-render the overlay while it's transitioning out.
	    var mountOverlay = props.show || Transition && !this.state.exited;
	    if (!mountOverlay) {
	      // Don't bother showing anything if we don't have to.
	      return null;
	    }

	    var child = children;

	    // Position is be inner-most because it adds inline styles into the child,
	    // which the other wrappers don't forward correctly.
	    child = _react2['default'].createElement(
	      _Position2['default'],
	      { container: container, containerPadding: containerPadding, target: target, placement: placement, shouldUpdatePosition: shouldUpdatePosition },
	      child
	    );

	    if (Transition) {
	      var onExit = props.onExit;
	      var onExiting = props.onExiting;
	      var onEnter = props.onEnter;
	      var onEntering = props.onEntering;
	      var onEntered = props.onEntered;

	      // This animates the child node by injecting props, so it must precede
	      // anything that adds a wrapping div.
	      child = _react2['default'].createElement(
	        Transition,
	        {
	          'in': props.show,
	          transitionAppear: true,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.onHiddenListener,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered
	        },
	        child
	      );
	    }

	    // This goes after everything else because it adds a wrapping div.
	    if (rootClose) {
	      child = _react2['default'].createElement(
	        _RootCloseWrapper2['default'],
	        { onRootClose: props.onHide },
	        child
	      );
	    }

	    return _react2['default'].createElement(
	      _Portal2['default'],
	      { container: container },
	      child
	    );
	  };

	  Overlay.prototype.handleHidden = function handleHidden() {
	    this.setState({ exited: true });

	    if (this.props.onExited) {
	      var _props2;

	      (_props2 = this.props).onExited.apply(_props2, arguments);
	    }
	  };

	  return Overlay;
	})(_react2['default'].Component);

	Overlay.propTypes = _extends({}, _Portal2['default'].propTypes, _Position2['default'].propTypes, {
	  /**
	   * Set the visibility of the Overlay
	   */
	  show: _react2['default'].PropTypes.bool,
	  /**
	   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
	   */
	  rootClose: _react2['default'].PropTypes.bool,
	  /**
	   * A Callback fired by the Overlay when it wishes to be hidden.
	   */
	  onHide: _react2['default'].PropTypes.func,

	  /**
	   * A `<Transition/>` component used to animate the overlay changes visibility.
	   */
	  transition: _reactPropTypesLibElementType2['default'],

	  /**
	   * Callback fired before the Overlay transitions in
	   */
	  onEnter: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition in
	   */
	  onEntering: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning in
	   */
	  onEntered: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired right before the Overlay transitions out
	   */
	  onExit: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition out
	   */
	  onExiting: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning out
	   */
	  onExited: _react2['default'].PropTypes.func
	});

	exports['default'] = Overlay;
	module.exports = exports['default'];

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsOwnerDocument = __webpack_require__(323);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	var _utilsGetContainer = __webpack_require__(356);

	var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

	var _utilsOverlayPositionUtils = __webpack_require__(379);

	var _reactPropTypesLibMountable = __webpack_require__(352);

	var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

	/**
	 * The Position component calulates the corrdinates for its child, to
	 * position it relative to a `target` component or node. Useful for creating callouts and tooltips,
	 * the Position component injects a `style` props with `left` and `top` values for positioning your component.
	 *
	 * It also injects "arrow" `left`, and `top` values for styling callout arrows for giving your components
	 * a sense of directionality.
	 */

	var Position = (function (_React$Component) {
	  _inherits(Position, _React$Component);

	  function Position(props, context) {
	    _classCallCheck(this, Position);

	    _React$Component.call(this, props, context);

	    this.state = {
	      positionLeft: 0,
	      positionTop: 0,
	      arrowOffsetLeft: null,
	      arrowOffsetTop: null
	    };

	    this._needsFlush = false;
	    this._lastTarget = null;
	  }

	  Position.prototype.componentDidMount = function componentDidMount() {
	    this.updatePosition();
	  };

	  Position.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
	    this._needsFlush = true;
	  };

	  Position.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this._needsFlush) {
	      this._needsFlush = false;
	      this.updatePosition(prevProps.placement !== this.props.placement);
	    }
	  };

	  Position.prototype.componentWillUnmount = function componentWillUnmount() {
	    // Probably not necessary, but just in case holding a reference to the
	    // target causes problems somewhere.
	    this._lastTarget = null;
	  };

	  Position.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var className = _props.className;

	    var props = _objectWithoutProperties(_props, ['children', 'className']);

	    var _state = this.state;
	    var positionLeft = _state.positionLeft;
	    var positionTop = _state.positionTop;

	    var arrowPosition = _objectWithoutProperties(_state, ['positionLeft', 'positionTop']);

	    // These should not be forwarded to the child.
	    delete props.target;
	    delete props.container;
	    delete props.containerPadding;

	    var child = _react2['default'].Children.only(children);
	    return _react.cloneElement(child, _extends({}, props, arrowPosition, {
	      //do we need to also forward positionLeft and positionTop if they are set to style?
	      positionLeft: positionLeft,
	      positionTop: positionTop,
	      className: _classnames2['default'](className, child.props.className),
	      style: _extends({}, child.props.style, {
	        left: positionLeft,
	        top: positionTop
	      })
	    }));
	  };

	  Position.prototype.getTargetSafe = function getTargetSafe() {
	    if (!this.props.target) {
	      return null;
	    }

	    var target = this.props.target(this.props);
	    if (!target) {
	      // This is so we can just use === check below on all falsy targets.
	      return null;
	    }

	    return target;
	  };

	  Position.prototype.updatePosition = function updatePosition(placementChanged) {
	    var target = this.getTargetSafe();

	    if (!this.props.shouldUpdatePosition && target === this._lastTarget && !placementChanged) {
	      return;
	    }

	    this._lastTarget = target;

	    if (!target) {
	      this.setState({
	        positionLeft: 0,
	        positionTop: 0,
	        arrowOffsetLeft: null,
	        arrowOffsetTop: null
	      });

	      return;
	    }

	    var overlay = _reactDom2['default'].findDOMNode(this);
	    var container = _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);

	    this.setState(_utilsOverlayPositionUtils.calcOverlayPosition(this.props.placement, overlay, target, container, this.props.containerPadding));
	  };

	  return Position;
	})(_react2['default'].Component);

	Position.propTypes = {
	  /**
	   * Function mapping props to a DOM node the component is positioned next to
	   *
	   */
	  target: _react2['default'].PropTypes.func,

	  /**
	   * "offsetParent" of the component
	   */
	  container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func]),
	  /**
	   * Minimum spacing in pixels between container border and component border
	   */
	  containerPadding: _react2['default'].PropTypes.number,
	  /**
	   * How to position the component relative to the target
	   */
	  placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),
	  /**
	   * Whether the position should be changed on each update
	   */
	  shouldUpdatePosition: _react2['default'].PropTypes.bool
	};

	Position.displayName = 'Position';

	Position.defaultProps = {
	  containerPadding: 0,
	  placement: 'right',
	  shouldUpdatePosition: false
	};

	exports['default'] = Position;
	module.exports = exports['default'];

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ownerDocument = __webpack_require__(323);

	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);

	var _domHelpersQueryOffset = __webpack_require__(380);

	var _domHelpersQueryOffset2 = _interopRequireDefault(_domHelpersQueryOffset);

	var _domHelpersQueryPosition = __webpack_require__(381);

	var _domHelpersQueryPosition2 = _interopRequireDefault(_domHelpersQueryPosition);

	var _domHelpersQueryScrollTop = __webpack_require__(383);

	var _domHelpersQueryScrollTop2 = _interopRequireDefault(_domHelpersQueryScrollTop);

	var utils = {

	  getContainerDimensions: function getContainerDimensions(containerNode) {
	    var width = undefined,
	        height = undefined,
	        scroll = undefined;

	    if (containerNode.tagName === 'BODY') {
	      width = window.innerWidth;
	      height = window.innerHeight;

	      scroll = _domHelpersQueryScrollTop2['default'](_ownerDocument2['default'](containerNode).documentElement) || _domHelpersQueryScrollTop2['default'](containerNode);
	    } else {
	      var _getOffset = _domHelpersQueryOffset2['default'](containerNode);

	      width = _getOffset.width;
	      height = _getOffset.height;

	      scroll = _domHelpersQueryScrollTop2['default'](containerNode);
	    }

	    return { width: width, height: height, scroll: scroll };
	  },

	  getPosition: function getPosition(target, container) {
	    var offset = container.tagName === 'BODY' ? _domHelpersQueryOffset2['default'](target) : _domHelpersQueryPosition2['default'](target, container);

	    return offset;
	  },

	  calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {
	    var childOffset = utils.getPosition(target, container);

	    var _getOffset2 = _domHelpersQueryOffset2['default'](overlayNode);

	    var overlayHeight = _getOffset2.height;
	    var overlayWidth = _getOffset2.width;

	    var positionLeft = undefined,
	        positionTop = undefined,
	        arrowOffsetLeft = undefined,
	        arrowOffsetTop = undefined;

	    if (placement === 'left' || placement === 'right') {
	      positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;

	      if (placement === 'left') {
	        positionLeft = childOffset.left - overlayWidth;
	      } else {
	        positionLeft = childOffset.left + childOffset.width;
	      }

	      var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);

	      positionTop += topDelta;
	      arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
	      arrowOffsetLeft = void 0;
	    } else if (placement === 'top' || placement === 'bottom') {
	      positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;

	      if (placement === 'top') {
	        positionTop = childOffset.top - overlayHeight;
	      } else {
	        positionTop = childOffset.top + childOffset.height;
	      }

	      var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
	      positionLeft += leftDelta;
	      arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';
	      arrowOffsetTop = void 0;
	    } else {
	      throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
	    }

	    return { positionLeft: positionLeft, positionTop: positionTop, arrowOffsetLeft: arrowOffsetLeft, arrowOffsetTop: arrowOffsetTop };
	  }
	};

	function getTopDelta(top, overlayHeight, container, padding) {
	  var containerDimensions = utils.getContainerDimensions(container);
	  var containerScroll = containerDimensions.scroll;
	  var containerHeight = containerDimensions.height;

	  var topEdgeOffset = top - padding - containerScroll;
	  var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;

	  if (topEdgeOffset < 0) {
	    return -topEdgeOffset;
	  } else if (bottomEdgeOffset > containerHeight) {
	    return containerHeight - bottomEdgeOffset;
	  } else {
	    return 0;
	  }
	}

	function getLeftDelta(left, overlayWidth, container, padding) {
	  var containerDimensions = utils.getContainerDimensions(container);
	  var containerWidth = containerDimensions.width;

	  var leftEdgeOffset = left - padding;
	  var rightEdgeOffset = left + padding + overlayWidth;

	  if (leftEdgeOffset < 0) {
	    return -leftEdgeOffset;
	  } else if (rightEdgeOffset > containerWidth) {
	    return containerWidth - rightEdgeOffset;
	  } else {
	    return 0;
	  }
	}
	exports['default'] = utils;
	module.exports = exports['default'];

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var contains = __webpack_require__(244),
	    getWindow = __webpack_require__(363),
	    ownerDocument = __webpack_require__(243);

	module.exports = function offset(node) {
	  var doc = ownerDocument(node),
	      win = getWindow(doc),
	      docElem = doc && doc.documentElement,
	      box = { top: 0, left: 0, height: 0, width: 0 };

	  if (!doc) return;

	  // Make sure it's not a disconnected DOM node
	  if (!contains(docElem, node)) return box;

	  if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect();

	  if (box.width || box.height) {

	    box = {
	      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
	      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
	      width: (box.width == null ? node.offsetWidth : box.width) || 0,
	      height: (box.height == null ? node.offsetHeight : box.height) || 0
	    };
	  }

	  return box;
	};

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(233);

	exports.__esModule = true;
	exports['default'] = position;

	var _offset = __webpack_require__(380);

	var _offset2 = babelHelpers.interopRequireDefault(_offset);

	var _offsetParent = __webpack_require__(382);

	var _offsetParent2 = babelHelpers.interopRequireDefault(_offsetParent);

	var _scrollTop = __webpack_require__(383);

	var _scrollTop2 = babelHelpers.interopRequireDefault(_scrollTop);

	var _scrollLeft = __webpack_require__(384);

	var _scrollLeft2 = babelHelpers.interopRequireDefault(_scrollLeft);

	var _style = __webpack_require__(227);

	var _style2 = babelHelpers.interopRequireDefault(_style);

	function nodeName(node) {
	  return node.nodeName && node.nodeName.toLowerCase();
	}

	function position(node, offsetParent) {
	  var parentOffset = { top: 0, left: 0 },
	      offset;

	  // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
	  // because it is its only offset parent
	  if ((0, _style2['default'])(node, 'position') === 'fixed') {
	    offset = node.getBoundingClientRect();
	  } else {
	    offsetParent = offsetParent || (0, _offsetParent2['default'])(node);
	    offset = (0, _offset2['default'])(node);

	    if (nodeName(offsetParent) !== 'html') parentOffset = (0, _offset2['default'])(offsetParent);

	    parentOffset.top += parseInt((0, _style2['default'])(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop2['default'])(offsetParent) || 0;
	    parentOffset.left += parseInt((0, _style2['default'])(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft2['default'])(offsetParent) || 0;
	  }

	  // Subtract parent offsets and node margins
	  return babelHelpers._extends({}, offset, {
	    top: offset.top - parentOffset.top - (parseInt((0, _style2['default'])(node, 'marginTop'), 10) || 0),
	    left: offset.left - parentOffset.left - (parseInt((0, _style2['default'])(node, 'marginLeft'), 10) || 0)
	  });
	}

	module.exports = exports['default'];

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(233);

	exports.__esModule = true;
	exports['default'] = offsetParent;

	var _ownerDocument = __webpack_require__(243);

	var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

	var _style = __webpack_require__(227);

	var _style2 = babelHelpers.interopRequireDefault(_style);

	function nodeName(node) {
	  return node.nodeName && node.nodeName.toLowerCase();
	}

	function offsetParent(node) {
	  var doc = (0, _ownerDocument2['default'])(node),
	      offsetParent = node && node.offsetParent;

	  while (offsetParent && nodeName(node) !== 'html' && (0, _style2['default'])(offsetParent, 'position') === 'static') {
	    offsetParent = offsetParent.offsetParent;
	  }

	  return offsetParent || doc.documentElement;
	}

	module.exports = exports['default'];

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var getWindow = __webpack_require__(363);

	module.exports = function scrollTop(node, val) {
	  var win = getWindow(node);

	  if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;

	  if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;
	};

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var getWindow = __webpack_require__(363);

	module.exports = function scrollTop(node, val) {
	  var win = getWindow(node);

	  if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;

	  if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;
	};

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* eslint-disable react/prop-types */

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _Object$keys = __webpack_require__(187)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _domHelpersQueryContains = __webpack_require__(244);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var _lodashCompatObjectPick = __webpack_require__(328);

	var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _warning = __webpack_require__(192);

	var _warning2 = _interopRequireDefault(_warning);

	var _Overlay = __webpack_require__(376);

	var _Overlay2 = _interopRequireDefault(_Overlay);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	/**
	 * Check if value one is inside or equal to the of value
	 *
	 * @param {string} one
	 * @param {string|array} of
	 * @returns {boolean}
	 */
	function isOneOf(one, of) {
	  if (Array.isArray(of)) {
	    return of.indexOf(one) >= 0;
	  }
	  return one === of;
	}

	var OverlayTrigger = _react2['default'].createClass({
	  displayName: 'OverlayTrigger',

	  propTypes: _extends({}, _Overlay2['default'].propTypes, {

	    /**
	    * Specify which action or actions trigger Overlay visibility
	    */
	    trigger: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']), _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']))]),

	    /**
	     * A millisecond delay amount to show and hide the Overlay once triggered
	     */
	    delay: _react2['default'].PropTypes.number,
	    /**
	     * A millisecond delay amount before showing the Overlay once triggered.
	     */
	    delayShow: _react2['default'].PropTypes.number,
	    /**
	     * A millisecond delay amount before hiding the Overlay once triggered.
	     */
	    delayHide: _react2['default'].PropTypes.number,

	    /**
	     * The initial visibility state of the Overlay, for more nuanced visibility controll consider
	     * using the Overlay component directly.
	     */
	    defaultOverlayShown: _react2['default'].PropTypes.bool,

	    /**
	     * An element or text to overlay next to the target.
	     */
	    overlay: _react2['default'].PropTypes.node.isRequired,

	    /**
	     * @private
	     */
	    onBlur: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onClick: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onFocus: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onMouseEnter: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onMouseLeave: _react2['default'].PropTypes.func,

	    // override specific overlay props
	    /**
	     * @private
	     */
	    target: function target() {},
	    /**
	    * @private
	    */
	    onHide: function onHide() {},
	    /**
	     * @private
	     */
	    show: function show() {}
	  }),

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultOverlayShown: false,
	      trigger: ['hover', 'focus']
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isOverlayShown: this.props.defaultOverlayShown
	    };
	  },

	  show: function show() {
	    this.setState({
	      isOverlayShown: true
	    });
	  },

	  hide: function hide() {
	    this.setState({
	      isOverlayShown: false
	    });
	  },

	  toggle: function toggle() {
	    if (this.state.isOverlayShown) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  },

	  componentWillMount: function componentWillMount() {
	    this.handleMouseOver = this.handleMouseOverOut.bind(null, this.handleDelayedShow);
	    this.handleMouseOut = this.handleMouseOverOut.bind(null, this.handleDelayedHide);
	  },

	  componentDidMount: function componentDidMount() {
	    this._mountNode = document.createElement('div');
	    this.renderOverlay();
	  },

	  renderOverlay: function renderOverlay() {
	    _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, this._overlay, this._mountNode);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    _reactDom2['default'].unmountComponentAtNode(this._mountNode);
	    this._mountNode = null;
	    clearTimeout(this._hoverShowDelay);
	    clearTimeout(this._hoverHideDelay);
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this._mountNode) {
	      this.renderOverlay();
	    }
	  },

	  getOverlayTarget: function getOverlayTarget() {
	    return _reactDom2['default'].findDOMNode(this);
	  },

	  getOverlay: function getOverlay() {
	    var overlayProps = _extends({}, _lodashCompatObjectPick2['default'](this.props, _Object$keys(_Overlay2['default'].propTypes)), {
	      show: this.state.isOverlayShown,
	      onHide: this.hide,
	      target: this.getOverlayTarget,
	      onExit: this.props.onExit,
	      onExiting: this.props.onExiting,
	      onExited: this.props.onExited,
	      onEnter: this.props.onEnter,
	      onEntering: this.props.onEntering,
	      onEntered: this.props.onEntered
	    });

	    var overlay = _react.cloneElement(this.props.overlay, {
	      placement: overlayProps.placement,
	      container: overlayProps.container
	    });

	    return _react2['default'].createElement(
	      _Overlay2['default'],
	      overlayProps,
	      overlay
	    );
	  },

	  render: function render() {
	    var trigger = _react2['default'].Children.only(this.props.children);
	    var triggerProps = trigger.props;

	    var props = {
	      'aria-describedby': this.props.overlay.props.id
	    };

	    // create in render otherwise owner is lost...
	    this._overlay = this.getOverlay();

	    props.onClick = _utilsCreateChainedFunction2['default'](triggerProps.onClick, this.props.onClick);

	    if (isOneOf('click', this.props.trigger)) {
	      props.onClick = _utilsCreateChainedFunction2['default'](this.toggle, props.onClick);
	    }

	    if (isOneOf('hover', this.props.trigger)) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!(this.props.trigger === 'hover'), '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibilty of the overlay to just mouse users. ' + 'Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.') : undefined;

	      props.onMouseOver = _utilsCreateChainedFunction2['default'](this.handleMouseOver, this.props.onMouseOver, triggerProps.onMouseOver);
	      props.onMouseOut = _utilsCreateChainedFunction2['default'](this.handleMouseOut, this.props.onMouseOut, triggerProps.onMouseOut);
	    }

	    if (isOneOf('focus', this.props.trigger)) {
	      props.onFocus = _utilsCreateChainedFunction2['default'](this.handleDelayedShow, this.props.onFocus, triggerProps.onFocus);
	      props.onBlur = _utilsCreateChainedFunction2['default'](this.handleDelayedHide, this.props.onBlur, triggerProps.onBlur);
	    }

	    return _react.cloneElement(trigger, props);
	  },

	  handleDelayedShow: function handleDelayedShow() {
	    var _this = this;

	    if (this._hoverHideDelay != null) {
	      clearTimeout(this._hoverHideDelay);
	      this._hoverHideDelay = null;
	      return;
	    }

	    if (this.state.isOverlayShown || this._hoverShowDelay != null) {
	      return;
	    }

	    var delay = this.props.delayShow != null ? this.props.delayShow : this.props.delay;

	    if (!delay) {
	      this.show();
	      return;
	    }

	    this._hoverShowDelay = setTimeout(function () {
	      _this._hoverShowDelay = null;
	      _this.show();
	    }, delay);
	  },

	  handleDelayedHide: function handleDelayedHide() {
	    var _this2 = this;

	    if (this._hoverShowDelay != null) {
	      clearTimeout(this._hoverShowDelay);
	      this._hoverShowDelay = null;
	      return;
	    }

	    if (!this.state.isOverlayShown || this._hoverHideDelay != null) {
	      return;
	    }

	    var delay = this.props.delayHide != null ? this.props.delayHide : this.props.delay;

	    if (!delay) {
	      this.hide();
	      return;
	    }

	    this._hoverHideDelay = setTimeout(function () {
	      _this2._hoverHideDelay = null;
	      _this2.hide();
	    }, delay);
	  },

	  // Simple implementation of mouseEnter and mouseLeave.
	  // React's built version is broken: https://github.com/facebook/react/issues/4251
	  // for cases when the trigger is disabled and mouseOut/Over can cause flicker moving
	  // from one child element to another.
	  handleMouseOverOut: function handleMouseOverOut(handler, e) {
	    var target = e.currentTarget;
	    var related = e.relatedTarget || e.nativeEvent.toElement;

	    if (!related || related !== target && !_domHelpersQueryContains2['default'](target, related)) {
	      handler(e);
	    }
	  }

	});

	exports['default'] = OverlayTrigger;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var PageHeader = _react2['default'].createClass({
	  displayName: 'PageHeader',

	  render: function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'page-header') }),
	      _react2['default'].createElement(
	        'h1',
	        null,
	        this.props.children
	      )
	    );
	  }
	});

	exports['default'] = PageHeader;
	module.exports = exports['default'];

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SafeAnchor = __webpack_require__(201);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var PageItem = _react2['default'].createClass({
	  displayName: 'PageItem',

	  propTypes: {
	    href: _react2['default'].PropTypes.string,
	    target: _react2['default'].PropTypes.string,
	    title: _react2['default'].PropTypes.string,
	    disabled: _react2['default'].PropTypes.bool,
	    previous: _react2['default'].PropTypes.bool,
	    next: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    eventKey: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: false,
	      previous: false,
	      next: false
	    };
	  },

	  render: function render() {
	    var classes = {
	      'disabled': this.props.disabled,
	      'previous': this.props.previous,
	      'next': this.props.next
	    };

	    return _react2['default'].createElement(
	      'li',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        {
	          href: this.props.href,
	          title: this.props.title,
	          target: this.props.target,
	          onClick: this.handleSelect },
	        this.props.children
	      )
	    );
	  },

	  handleSelect: function handleSelect(e) {
	    if (this.props.onSelect || this.props.disabled) {
	      e.preventDefault();

	      if (!this.props.disabled) {
	        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
	      }
	    }
	  }
	});

	exports['default'] = PageItem;
	module.exports = exports['default'];

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var Pager = _react2['default'].createClass({
	  displayName: 'Pager',

	  propTypes: {
	    onSelect: _react2['default'].PropTypes.func
	  },

	  render: function render() {
	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'pager') }),
	      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderPageItem)
	    );
	  },

	  renderPageItem: function renderPageItem(child, index) {
	    return _react.cloneElement(child, {
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      key: child.key ? child.key : index
	    });
	  }
	});

	exports['default'] = Pager;
	module.exports = exports['default'];

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _PaginationButton = __webpack_require__(390);

	var _PaginationButton2 = _interopRequireDefault(_PaginationButton);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var _SafeAnchor = __webpack_require__(201);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var Pagination = _react2['default'].createClass({
	  displayName: 'Pagination',

	  propTypes: {
	    activePage: _react2['default'].PropTypes.number,
	    items: _react2['default'].PropTypes.number,
	    maxButtons: _react2['default'].PropTypes.number,
	    /**
	     * When `true`, will display the first and the last button page
	     */
	    boundaryLinks: _react2['default'].PropTypes.bool,
	    /**
	     * When `true`, will display the default node value ('&hellip;').
	     * Otherwise, will display provided node (when specified).
	     */
	    ellipsis: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    /**
	     * When `true`, will display the default node value ('&laquo;').
	     * Otherwise, will display provided node (when specified).
	     */
	    first: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    /**
	     * When `true`, will display the default node value ('&raquo;').
	     * Otherwise, will display provided node (when specified).
	     */
	    last: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    /**
	     * When `true`, will display the default node value ('&lsaquo;').
	     * Otherwise, will display provided node (when specified).
	     */
	    prev: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    /**
	     * When `true`, will display the default node value ('&rsaquo;').
	     * Otherwise, will display provided node (when specified).
	     */
	    next: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
	    onSelect: _react2['default'].PropTypes.func,
	    /**
	     * You can use a custom element for the buttons
	     */
	    buttonComponentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      activePage: 1,
	      items: 1,
	      maxButtons: 0,
	      first: false,
	      last: false,
	      prev: false,
	      next: false,
	      ellipsis: true,
	      boundaryLinks: false,
	      buttonComponentClass: _SafeAnchor2['default'],
	      bsClass: 'pagination'
	    };
	  },

	  renderPageButtons: function renderPageButtons() {
	    var pageButtons = [];
	    var startPage = undefined,
	        endPage = undefined,
	        hasHiddenPagesAfter = undefined;
	    var _props = this.props;
	    var maxButtons = _props.maxButtons;
	    var activePage = _props.activePage;
	    var items = _props.items;
	    var onSelect = _props.onSelect;
	    var ellipsis = _props.ellipsis;
	    var buttonComponentClass = _props.buttonComponentClass;
	    var boundaryLinks = _props.boundaryLinks;

	    if (maxButtons) {
	      var hiddenPagesBefore = activePage - parseInt(maxButtons / 2, 10);
	      startPage = hiddenPagesBefore > 1 ? hiddenPagesBefore : 1;
	      hasHiddenPagesAfter = startPage + maxButtons <= items;

	      if (!hasHiddenPagesAfter) {
	        endPage = items;
	        startPage = items - maxButtons + 1;
	        if (startPage < 1) {
	          startPage = 1;
	        }
	      } else {
	        endPage = startPage + maxButtons - 1;
	      }
	    } else {
	      startPage = 1;
	      endPage = items;
	    }

	    for (var pagenumber = startPage; pagenumber <= endPage; pagenumber++) {
	      pageButtons.push(_react2['default'].createElement(
	        _PaginationButton2['default'],
	        {
	          key: pagenumber,
	          eventKey: pagenumber,
	          active: pagenumber === activePage,
	          onSelect: onSelect,
	          buttonComponentClass: buttonComponentClass },
	        pagenumber
	      ));
	    }

	    if (boundaryLinks && ellipsis && startPage !== 1) {
	      pageButtons.unshift(_react2['default'].createElement(
	        _PaginationButton2['default'],
	        {
	          key: 'ellipsisFirst',
	          disabled: true,
	          buttonComponentClass: buttonComponentClass },
	        _react2['default'].createElement(
	          'span',
	          { 'aria-label': 'More' },
	          this.props.ellipsis === true ? '…' : this.props.ellipsis
	        )
	      ));

	      pageButtons.unshift(_react2['default'].createElement(
	        _PaginationButton2['default'],
	        {
	          key: 1,
	          eventKey: 1,
	          active: false,
	          onSelect: onSelect,
	          buttonComponentClass: buttonComponentClass },
	        '1'
	      ));
	    }

	    if (maxButtons && hasHiddenPagesAfter && ellipsis) {
	      pageButtons.push(_react2['default'].createElement(
	        _PaginationButton2['default'],
	        {
	          key: 'ellipsis',
	          disabled: true,
	          buttonComponentClass: buttonComponentClass },
	        _react2['default'].createElement(
	          'span',
	          { 'aria-label': 'More' },
	          this.props.ellipsis === true ? '…' : this.props.ellipsis
	        )
	      ));

	      if (boundaryLinks && endPage !== items) {
	        pageButtons.push(_react2['default'].createElement(
	          _PaginationButton2['default'],
	          {
	            key: items,
	            eventKey: items,
	            active: false,
	            onSelect: onSelect,
	            buttonComponentClass: buttonComponentClass },
	          items
	        ));
	      }
	    }

	    return pageButtons;
	  },

	  renderPrev: function renderPrev() {
	    if (!this.props.prev) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'prev',
	        eventKey: this.props.activePage - 1,
	        disabled: this.props.activePage === 1,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Previous' },
	        this.props.prev === true ? '‹' : this.props.prev
	      )
	    );
	  },

	  renderNext: function renderNext() {
	    if (!this.props.next) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'next',
	        eventKey: this.props.activePage + 1,
	        disabled: this.props.activePage >= this.props.items,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Next' },
	        this.props.next === true ? '›' : this.props.next
	      )
	    );
	  },

	  renderFirst: function renderFirst() {
	    if (!this.props.first) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'first',
	        eventKey: 1,
	        disabled: this.props.activePage === 1,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'First' },
	        this.props.first === true ? '«' : this.props.first
	      )
	    );
	  },

	  renderLast: function renderLast() {
	    if (!this.props.last) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'last',
	        eventKey: this.props.items,
	        disabled: this.props.activePage >= this.props.items,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Last' },
	        this.props.last === true ? '»' : this.props.last
	      )
	    );
	  },

	  render: function render() {
	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].getClassSet(this.props)) }),
	      this.renderFirst(),
	      this.renderPrev(),
	      this.renderPageButtons(),
	      this.renderNext(),
	      this.renderLast()
	    );
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsClass('pagination', Pagination);
	module.exports = exports['default'];

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsCreateSelectedEvent = __webpack_require__(391);

	var _utilsCreateSelectedEvent2 = _interopRequireDefault(_utilsCreateSelectedEvent);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var PaginationButton = _react2['default'].createClass({
	  displayName: 'PaginationButton',

	  propTypes: {
	    className: _react2['default'].PropTypes.string,
	    eventKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onSelect: _react2['default'].PropTypes.func,
	    disabled: _react2['default'].PropTypes.bool,
	    active: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    buttonComponentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      disabled: false
	    };
	  },

	  handleClick: function handleClick(event) {
	    if (this.props.disabled) {
	      return;
	    }

	    if (this.props.onSelect) {
	      var selectedEvent = _utilsCreateSelectedEvent2['default'](this.props.eventKey);
	      this.props.onSelect(event, selectedEvent);
	    }
	  },

	  render: function render() {
	    var classes = {
	      active: this.props.active,
	      disabled: this.props.disabled
	    };

	    var _props = this.props;
	    var className = _props.className;

	    var anchorProps = _objectWithoutProperties(_props, ['className']);

	    var ButtonComponentClass = this.props.buttonComponentClass;

	    return _react2['default'].createElement(
	      'li',
	      { className: _classnames2['default'](className, classes) },
	      _react2['default'].createElement(ButtonComponentClass, _extends({}, anchorProps, {
	        onClick: this.handleClick }))
	    );
	  }
	});

	exports['default'] = PaginationButton;
	module.exports = exports['default'];

/***/ },
/* 391 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = createSelectedEvent;

	function createSelectedEvent(eventKey) {
	  var selectionPrevented = false;

	  return {
	    eventKey: eventKey,

	    preventSelection: function preventSelection() {
	      selectionPrevented = true;
	    },

	    isSelectionPrevented: function isSelectionPrevented() {
	      return selectionPrevented;
	    }
	  };
	}

	module.exports = exports["default"];

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var _Collapse = __webpack_require__(226);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var Panel = _react2['default'].createClass({
	  displayName: 'Panel',

	  propTypes: {
	    collapsible: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    header: _react2['default'].PropTypes.node,
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    footer: _react2['default'].PropTypes.node,
	    defaultExpanded: _react2['default'].PropTypes.bool,
	    expanded: _react2['default'].PropTypes.bool,
	    eventKey: _react2['default'].PropTypes.any,
	    headerRole: _react2['default'].PropTypes.string,
	    panelRole: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultExpanded: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      expanded: this.props.defaultExpanded
	    };
	  },

	  handleSelect: function handleSelect(e) {
	    e.selected = true;

	    if (this.props.onSelect) {
	      this.props.onSelect(e, this.props.eventKey);
	    } else {
	      e.preventDefault();
	    }

	    if (e.selected) {
	      this.handleToggle();
	    }
	  },

	  handleToggle: function handleToggle() {
	    this.setState({ expanded: !this.state.expanded });
	  },

	  isExpanded: function isExpanded() {
	    return this.props.expanded != null ? this.props.expanded : this.state.expanded;
	  },

	  render: function render() {
	    var _props = this.props;
	    var headerRole = _props.headerRole;
	    var panelRole = _props.panelRole;

	    var props = _objectWithoutProperties(_props, ['headerRole', 'panelRole']);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, {
	        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].getClassSet(this.props)),
	        id: this.props.collapsible ? null : this.props.id, onSelect: null }),
	      this.renderHeading(headerRole),
	      this.props.collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody(),
	      this.renderFooter()
	    );
	  },

	  renderCollapsibleBody: function renderCollapsibleBody(panelRole) {
	    var props = {
	      className: _utilsBootstrapUtils2['default'].prefix(this.props, 'collapse'),
	      id: this.props.id,
	      ref: 'panel',
	      'aria-hidden': !this.isExpanded()
	    };
	    if (panelRole) {
	      props.role = panelRole;
	    }

	    return _react2['default'].createElement(
	      _Collapse2['default'],
	      { 'in': this.isExpanded() },
	      _react2['default'].createElement(
	        'div',
	        props,
	        this.renderBody()
	      )
	    );
	  },

	  renderBody: function renderBody() {
	    var _this = this;

	    var allChildren = this.props.children;
	    var bodyElements = [];
	    var panelBodyChildren = [];
	    var bodyClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'body');

	    function getProps() {
	      return { key: bodyElements.length };
	    }

	    function addPanelChild(child) {
	      bodyElements.push(_react.cloneElement(child, getProps()));
	    }

	    function addPanelBody(children) {
	      bodyElements.push(_react2['default'].createElement(
	        'div',
	        _extends({ className: bodyClass }, getProps()),
	        children
	      ));
	    }

	    function maybeRenderPanelBody() {
	      if (panelBodyChildren.length === 0) {
	        return;
	      }

	      addPanelBody(panelBodyChildren);
	      panelBodyChildren = [];
	    }

	    // Handle edge cases where we should not iterate through children.
	    if (!Array.isArray(allChildren) || allChildren.length === 0) {
	      if (this.shouldRenderFill(allChildren)) {
	        addPanelChild(allChildren);
	      } else {
	        addPanelBody(allChildren);
	      }
	    } else {
	      allChildren.forEach(function (child) {
	        if (_this.shouldRenderFill(child)) {
	          maybeRenderPanelBody();

	          // Separately add the filled element.
	          addPanelChild(child);
	        } else {
	          panelBodyChildren.push(child);
	        }
	      });

	      maybeRenderPanelBody();
	    }

	    return bodyElements;
	  },

	  shouldRenderFill: function shouldRenderFill(child) {
	    return _react2['default'].isValidElement(child) && child.props.fill != null;
	  },

	  renderHeading: function renderHeading(headerRole) {
	    var header = this.props.header;

	    if (!header) {
	      return null;
	    }

	    if (!_react2['default'].isValidElement(header) || Array.isArray(header)) {
	      header = this.props.collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;
	    } else {
	      var className = _classnames2['default'](_utilsBootstrapUtils2['default'].prefix(this.props, 'title'), header.props.className);

	      if (this.props.collapsible) {
	        header = _react.cloneElement(header, {
	          className: className,
	          children: this.renderAnchor(header.props.children, headerRole)
	        });
	      } else {
	        header = _react.cloneElement(header, { className: className });
	      }
	    }

	    return _react2['default'].createElement(
	      'div',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'heading') },
	      header
	    );
	  },

	  renderAnchor: function renderAnchor(header, headerRole) {
	    return _react2['default'].createElement(
	      'a',
	      {
	        href: '#' + (this.props.id || ''),
	        'aria-controls': this.props.collapsible ? this.props.id : null,
	        className: this.isExpanded() ? null : 'collapsed',
	        'aria-expanded': this.isExpanded(),
	        'aria-selected': this.isExpanded(),
	        onClick: this.handleSelect,
	        role: headerRole },
	      header
	    );
	  },

	  renderCollapsibleTitle: function renderCollapsibleTitle(header, headerRole) {
	    return _react2['default'].createElement(
	      'h4',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'title'), role: 'presentation' },
	      this.renderAnchor(header, headerRole)
	    );
	  },

	  renderFooter: function renderFooter() {
	    if (!this.props.footer) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      'div',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'footer') },
	      this.props.footer
	    );
	  }
	});

	var PANEL_STATES = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY);

	exports['default'] = _utilsBootstrapUtils.bsStyles(PANEL_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('panel', Panel));
	module.exports = exports['default'];

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(314);

	var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

	var Popover = _react2['default'].createClass({
	  displayName: 'Popover',

	  propTypes: {

	    /**
	     * An html id attribute, necessary for accessibility
	     * @type {string}
	     * @required
	     */
	    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	    /**
	     * Sets the direction the Popover is positioned towards.
	     */
	    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

	    /**
	     * The "left" position value for the Popover.
	     */
	    positionLeft: _react2['default'].PropTypes.number,
	    /**
	     * The "top" position value for the Popover.
	     */
	    positionTop: _react2['default'].PropTypes.number,
	    /**
	     * The "left" position value for the Popover arrow.
	     */
	    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * The "top" position value for the Popover arrow.
	     */
	    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * Title text
	     */
	    title: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      placement: 'right',
	      bsClass: 'popover'
	    };
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes[this.props.placement] = true, _classes);

	    var style = _extends({
	      'left': this.props.positionLeft,
	      'top': this.props.positionTop,
	      'display': 'block'
	    }, this.props.style);

	    // eslint-disable-line react/prop-types
	    var arrowStyle = {
	      'left': this.props.arrowOffsetLeft,
	      'top': this.props.arrowOffsetTop
	    };

	    return _react2['default'].createElement(
	      'div',
	      _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style, title: null }),
	      _react2['default'].createElement('div', { className: 'arrow', style: arrowStyle }),
	      this.props.title ? this.renderTitle() : null,
	      _react2['default'].createElement(
	        'div',
	        { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content') },
	        this.props.children
	      )
	    );
	  },

	  renderTitle: function renderTitle() {
	    return _react2['default'].createElement(
	      'h3',
	      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'title') },
	      this.props.title
	    );
	  }
	});

	exports['default'] = Popover;
	module.exports = exports['default'];
	// we don't want to expose the `style` property

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _Interpolate = __webpack_require__(334);

	var _Interpolate2 = _interopRequireDefault(_Interpolate);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	/**
	 * Custom propTypes checker
	 */
	function onlyProgressBar(props, propName, componentName) {
	  if (props[propName]) {
	    var _ret = (function () {
	      var error = undefined,
	          childIdentifier = undefined;

	      _react2['default'].Children.forEach(props[propName], function (child) {
	        if (child.type !== ProgressBar) {
	          //eslint-disable-line
	          childIdentifier = child.type.displayName ? child.type.displayName : child.type;
	          error = new Error('Children of ' + componentName + ' can contain only ProgressBar components. Found ' + childIdentifier);
	        }
	      });

	      return {
	        v: error
	      };
	    })();

	    if (typeof _ret === 'object') return _ret.v;
	  }
	}

	var ProgressBar = (function (_React$Component) {
	  _inherits(ProgressBar, _React$Component);

	  function ProgressBar() {
	    _classCallCheck(this, ProgressBar);

	    _React$Component.apply(this, arguments);
	  }

	  ProgressBar.prototype.getPercentage = function getPercentage(now, min, max) {
	    var roundPrecision = 1000;
	    return Math.round((now - min) / (max - min) * 100 * roundPrecision) / roundPrecision;
	  };

	  ProgressBar.prototype.render = function render() {
	    if (this.props.isChild) {
	      return this.renderProgressBar();
	    }

	    var content = undefined;

	    if (this.props.children) {
	      content = _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChildBar);
	    } else {
	      content = this.renderProgressBar();
	    }

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'progress'),
	        min: null,
	        max: null,
	        label: null,
	        'aria-valuetext': null
	      }),
	      content
	    );
	  };

	  ProgressBar.prototype.renderChildBar = function renderChildBar(child, index) {
	    return _react.cloneElement(child, {
	      isChild: true,
	      key: child.key ? child.key : index
	    });
	  };

	  ProgressBar.prototype.renderProgressBar = function renderProgressBar() {
	    var _classNames;

	    var _props = this.props;
	    var className = _props.className;
	    var label = _props.label;
	    var now = _props.now;
	    var min = _props.min;
	    var max = _props.max;

	    var props = _objectWithoutProperties(_props, ['className', 'label', 'now', 'min', 'max']);

	    var percentage = this.getPercentage(now, min, max);

	    if (typeof label === 'string') {
	      label = this.renderLabel(percentage);
	    }

	    if (this.props.srOnly) {
	      label = _react2['default'].createElement(
	        'span',
	        { className: 'sr-only' },
	        label
	      );
	    }

	    var classes = _classnames2['default'](className, _utilsBootstrapUtils2['default'].getClassSet(this.props), (_classNames = {
	      active: this.props.active
	    }, _classNames[_utilsBootstrapUtils2['default'].prefix(this.props, 'striped')] = this.props.active || this.props.striped, _classNames));

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, {
	        className: classes,
	        role: 'progressbar',
	        style: { width: percentage + '%' },
	        'aria-valuenow': this.props.now,
	        'aria-valuemin': this.props.min,
	        'aria-valuemax': this.props.max }),
	      label
	    );
	  };

	  ProgressBar.prototype.renderLabel = function renderLabel(percentage) {
	    var InterpolateClass = this.props.interpolateClass || _Interpolate2['default'];

	    return _react2['default'].createElement(
	      InterpolateClass,
	      {
	        now: this.props.now,
	        min: this.props.min,
	        max: this.props.max,
	        percent: percentage,
	        bsStyle: this.props.bsStyle },
	      this.props.label
	    );
	  };

	  return ProgressBar;
	})(_react2['default'].Component);

	ProgressBar.propTypes = _extends({}, ProgressBar.propTypes, {
	  min: _react.PropTypes.number,
	  now: _react.PropTypes.number,
	  max: _react.PropTypes.number,
	  label: _react.PropTypes.node,
	  srOnly: _react.PropTypes.bool,
	  striped: _react.PropTypes.bool,
	  active: _react.PropTypes.bool,
	  children: onlyProgressBar,
	  className: _react2['default'].PropTypes.string,
	  interpolateClass: _react.PropTypes.node,
	  /**
	   * @private
	   */
	  isChild: _react.PropTypes.bool
	});

	ProgressBar.defaultProps = _extends({}, ProgressBar.defaultProps, {
	  min: 0,
	  max: 100,
	  active: false,
	  isChild: false,
	  srOnly: false,
	  striped: false
	});

	exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('progress-bar', ProgressBar));
	module.exports = exports['default'];

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(192);

	var _warning2 = _interopRequireDefault(_warning);

	var ResponsiveEmbed = (function (_React$Component) {
	  _inherits(ResponsiveEmbed, _React$Component);

	  function ResponsiveEmbed() {
	    _classCallCheck(this, ResponsiveEmbed);

	    _React$Component.apply(this, arguments);
	  }

	  ResponsiveEmbed.prototype.render = function render() {
	    var _props = this.props;
	    var bsClass = _props.bsClass;
	    var className = _props.className;
	    var a16by9 = _props.a16by9;
	    var a4by3 = _props.a4by3;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['bsClass', 'className', 'a16by9', 'a4by3', 'children']);

	    process.env.NODE_ENV !== 'production' ? _warning2['default'](!(!a16by9 && !a4by3), '`a16by9` or `a4by3` attribute must be set.') : undefined;
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](!(a16by9 && a4by3), 'Either `a16by9` or `a4by3` attribute can be set. Not both.') : undefined;

	    var aspectRatio = {
	      'embed-responsive-16by9': a16by9,
	      'embed-responsive-4by3': a4by3
	    };

	    return _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](bsClass, aspectRatio) },
	      _react.cloneElement(children, _extends({}, props, {
	        className: _classnames2['default'](className, 'embed-responsive-item')
	      }))
	    );
	  };

	  return ResponsiveEmbed;
	})(_react2['default'].Component);

	ResponsiveEmbed.defaultProps = {
	  bsClass: 'embed-responsive',
	  a16by9: false,
	  a4by3: false
	};

	ResponsiveEmbed.propTypes = {
	  /**
	   * bootstrap className
	   * @private
	   */
	  bsClass: _react.PropTypes.string,
	  /**
	   * This component accepts only one child element
	   */
	  children: _react.PropTypes.element.isRequired,
	  /**
	   * 16by9 aspect ratio
	   */
	  a16by9: _react.PropTypes.bool,
	  /**
	   * 4by3 aspect ratio
	   */
	  a4by3: _react.PropTypes.bool
	};

	exports['default'] = ResponsiveEmbed;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactPropTypesLibElementType = __webpack_require__(211);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	var Row = _react2['default'].createClass({
	  displayName: 'Row',

	  propTypes: {
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _reactPropTypesLibElementType2['default']
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div'
	    };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'row') }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Row;
	module.exports = exports['default'];

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _Object$keys = __webpack_require__(187)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _Button = __webpack_require__(210);

	var _Button2 = _interopRequireDefault(_Button);

	var _Dropdown = __webpack_require__(241);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var _SplitToggle = __webpack_require__(398);

	var _SplitToggle2 = _interopRequireDefault(_SplitToggle);

	var _lodashCompatObjectOmit = __webpack_require__(299);

	var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

	var _lodashCompatObjectPick = __webpack_require__(328);

	var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

	var SplitButton = (function (_React$Component) {
	  _inherits(SplitButton, _React$Component);

	  function SplitButton() {
	    _classCallCheck(this, SplitButton);

	    _React$Component.apply(this, arguments);
	  }

	  SplitButton.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var title = _props.title;
	    var onClick = _props.onClick;
	    var target = _props.target;
	    var href = _props.href;
	    var toggleLabel = _props.toggleLabel;
	    var bsSize = _props.bsSize;
	    var bsStyle = _props.bsStyle;

	    var props = _objectWithoutProperties(_props, ['children', 'title', 'onClick', 'target', 'href', 'toggleLabel', 'bsSize', 'bsStyle']);

	    var disabled = props.disabled;

	    var dropdownProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));
	    var buttonProps = _lodashCompatObjectOmit2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      dropdownProps,
	      _react2['default'].createElement(
	        _Button2['default'],
	        _extends({}, buttonProps, {
	          onClick: onClick,
	          bsStyle: bsStyle,
	          bsSize: bsSize,
	          disabled: disabled,
	          target: target,
	          href: href
	        }),
	        title
	      ),
	      _react2['default'].createElement(_SplitToggle2['default'], {
	        'aria-label': toggleLabel || title,
	        bsStyle: bsStyle,
	        bsSize: bsSize,
	        disabled: disabled
	      }),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        children
	      )
	    );
	  };

	  return SplitButton;
	})(_react2['default'].Component);

	SplitButton.propTypes = _extends({}, _Dropdown2['default'].propTypes, {
	  bsStyle: _Button2['default'].propTypes.bsStyle,

	  /**
	   * @private
	   */
	  onClick: function onClick() {},
	  target: _react2['default'].PropTypes.string,
	  href: _react2['default'].PropTypes.string,
	  /**
	   * The content of the split button.
	   */
	  title: _react2['default'].PropTypes.node.isRequired,
	  /**
	   * Accessible label for the toggle; the value of `title` if not specified.
	   */
	  toggleLabel: _react2['default'].PropTypes.string
	});

	SplitButton.defaultProps = {
	  disabled: false,
	  dropup: false,
	  pullRight: false
	};

	SplitButton.Toggle = _SplitToggle2['default'];

	exports['default'] = SplitButton;
	module.exports = exports['default'];

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _DropdownToggle = __webpack_require__(324);

	var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

	var SplitToggle = (function (_React$Component) {
	  _inherits(SplitToggle, _React$Component);

	  function SplitToggle() {
	    _classCallCheck(this, SplitToggle);

	    _React$Component.apply(this, arguments);
	  }

	  SplitToggle.prototype.render = function render() {
	    return _react2['default'].createElement(_DropdownToggle2['default'], _extends({}, this.props, {
	      useAnchor: false,
	      noCaret: false
	    }));
	  };

	  return SplitToggle;
	})(_react2['default'].Component);

	exports['default'] = SplitToggle;

	SplitToggle.defaultProps = _DropdownToggle2['default'].defaultProps;
	module.exports = exports['default'];

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsTransitionEvents = __webpack_require__(223);

	var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

	var Tab = _react2['default'].createClass({
	  displayName: 'Tab',

	  propTypes: {
	    /**
	     * @private
	     */
	    active: _react2['default'].PropTypes.bool,
	    animation: _react2['default'].PropTypes.bool,
	    /**
	     * It is used by 'Tabs' - parent component
	     * @private
	     */
	    onAnimateOutEnd: _react2['default'].PropTypes.func,
	    disabled: _react2['default'].PropTypes.bool,
	    title: _react2['default'].PropTypes.node,
	    /**
	     * tabClassName is used as className for the associated NavItem
	     */
	    tabClassName: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'tab',
	      animation: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      animateIn: false,
	      animateOut: false
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.animation) {
	      if (!this.state.animateIn && nextProps.active && !this.props.active) {
	        this.setState({
	          animateIn: true
	        });
	      } else if (!this.state.animateOut && !nextProps.active && this.props.active) {
	        this.setState({
	          animateOut: true
	        });
	      }
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.state.animateIn) {
	      setTimeout(this.startAnimateIn, 0);
	    }
	    if (this.state.animateOut) {
	      _utilsTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this), this.stopAnimateOut);
	    }
	  },

	  startAnimateIn: function startAnimateIn() {
	    if (this.isMounted()) {
	      this.setState({
	        animateIn: false
	      });
	    }
	  },

	  stopAnimateOut: function stopAnimateOut() {
	    if (this.isMounted()) {
	      this.setState({
	        animateOut: false
	      });

	      if (this.props.onAnimateOutEnd) {
	        this.props.onAnimateOutEnd();
	      }
	    }
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'pane')] = true, _classes['fade'] = true, _classes['active'] = this.props.active || this.state.animateOut, _classes['in'] = this.props.active && !this.state.animateIn, _classes);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        title: undefined,
	        role: 'tabpanel',
	        'aria-hidden': !this.props.active,
	        className: _classnames2['default'](this.props.className, classes)
	      }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Tab;
	module.exports = exports['default'];

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Table = _react2['default'].createClass({
	  displayName: 'Table',

	  propTypes: {
	    striped: _react2['default'].PropTypes.bool,
	    bordered: _react2['default'].PropTypes.bool,
	    condensed: _react2['default'].PropTypes.bool,
	    hover: _react2['default'].PropTypes.bool,
	    responsive: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bordered: false,
	      condensed: false,
	      hover: false,
	      responsive: false,
	      striped: false
	    };
	  },

	  render: function render() {
	    var classes = {
	      'table': true,
	      'table-striped': this.props.striped,
	      'table-bordered': this.props.bordered,
	      'table-condensed': this.props.condensed,
	      'table-hover': this.props.hover
	    };
	    var table = _react2['default'].createElement(
	      'table',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );

	    return this.props.responsive ? _react2['default'].createElement(
	      'div',
	      { className: 'table-responsive' },
	      table
	    ) : table;
	  }
	});

	exports['default'] = Table;
	module.exports = exports['default'];

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _objectWithoutProperties = __webpack_require__(195)['default'];

	var _Object$keys = __webpack_require__(187)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(222);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Col = __webpack_require__(224);

	var _Col2 = _interopRequireDefault(_Col);

	var _Nav = __webpack_require__(366);

	var _Nav2 = _interopRequireDefault(_Nav);

	var _NavItem = __webpack_require__(375);

	var _NavItem2 = _interopRequireDefault(_NavItem);

	var _styleMaps = __webpack_require__(184);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _keycode = __webpack_require__(245);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _utilsCreateChainedFunction = __webpack_require__(165);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _utilsValidComponentChildren = __webpack_require__(166);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var paneId = function paneId(props, child) {
	  return child.props.id ? child.props.id : props.id && props.id + '___pane___' + child.props.eventKey;
	};
	var tabId = function tabId(props, child) {
	  return child.props.id ? child.props.id + '___tab' : props.id && props.id + '___tab___' + child.props.eventKey;
	};

	var findChild = _utilsValidComponentChildren2['default'].find;

	function getDefaultActiveKeyFromChildren(children) {
	  var defaultActiveKey = undefined;

	  _utilsValidComponentChildren2['default'].forEach(children, function (child) {
	    if (defaultActiveKey == null) {
	      defaultActiveKey = child.props.eventKey;
	    }
	  });

	  return defaultActiveKey;
	}

	function move(children, currentKey, keys, moveNext) {
	  var lastIdx = keys.length - 1;
	  var stopAt = keys[moveNext ? Math.max(lastIdx, 0) : 0];
	  var nextKey = currentKey;

	  function getNext() {
	    var idx = keys.indexOf(nextKey);
	    nextKey = moveNext ? keys[Math.min(lastIdx, idx + 1)] : keys[Math.max(0, idx - 1)];

	    return findChild(children, function (_child) {
	      return _child.props.eventKey === nextKey;
	    });
	  }

	  var next = getNext();

	  while (next.props.eventKey !== stopAt && next.props.disabled) {
	    next = getNext();
	  }

	  return next.props.disabled ? currentKey : next.props.eventKey;
	}

	var Tabs = _react2['default'].createClass({
	  displayName: 'Tabs',

	  propTypes: {
	    activeKey: _react2['default'].PropTypes.any,
	    defaultActiveKey: _react2['default'].PropTypes.any,
	    /**
	     * Navigation style for tabs
	     *
	     * If not specified, it will be treated as `'tabs'` when vertically
	     * positioned and `'pills'` when horizontally positioned.
	     */
	    bsStyle: _react2['default'].PropTypes.oneOf(['tabs', 'pills']),
	    animation: _react2['default'].PropTypes.bool,
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onSelect: _react2['default'].PropTypes.func,
	    position: _react2['default'].PropTypes.oneOf(['top', 'left', 'right']),
	    /**
	     * Number of grid columns for the tabs if horizontally positioned
	     *
	     * This accepts either a single width or a mapping of size to width.
	     */
	    tabWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
	    /**
	     * Number of grid columns for the panes if horizontally positioned
	     *
	     * This accepts either a single width or a mapping of size to width. If not
	     * specified, it will be treated as `styleMaps.GRID_COLUMNS` minus
	     * `tabWidth`.
	     */
	    paneWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
	    /**
	     * Render without clearfix if horizontally positioned
	     */
	    standalone: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'tab',
	      animation: true,
	      tabWidth: 2,
	      position: 'top',
	      standalone: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    var defaultActiveKey = this.props.defaultActiveKey != null ? this.props.defaultActiveKey : getDefaultActiveKeyFromChildren(this.props.children);

	    return {
	      activeKey: defaultActiveKey,
	      previousActiveKey: null
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var _this = this;

	    if (nextProps.activeKey != null && nextProps.activeKey !== this.props.activeKey) {
	      (function () {
	        // check if the 'previousActiveKey' child still exists
	        var previousActiveKey = _this.props.activeKey;
	        _react2['default'].Children.forEach(nextProps.children, function (child) {
	          if (_react2['default'].isValidElement(child)) {
	            if (child.props.eventKey === previousActiveKey) {
	              _this.setState({
	                previousActiveKey: previousActiveKey
	              });
	              return;
	            }
	          }
	        });
	      })();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    var tabs = this._tabs;
	    var tabIdx = this._eventKeys().indexOf(this.getActiveKey());

	    if (this._needsRefocus) {
	      this._needsRefocus = false;
	      if (tabs && tabIdx !== -1) {
	        var tabNode = _reactDom2['default'].findDOMNode(tabs[tabIdx]);

	        if (tabNode) {
	          tabNode.firstChild.focus();
	        }
	      }
	    }
	  },

	  handlePaneAnimateOutEnd: function handlePaneAnimateOutEnd() {
	    this.setState({
	      previousActiveKey: null
	    });
	  },

	  render: function render() {
	    var _props = this.props;
	    var id = _props.id;
	    var className = _props.className;
	    var style = _props.style;
	    var position = _props.position;
	    var bsStyle = _props.bsStyle;
	    var tabWidth = _props.tabWidth;
	    var paneWidth = _props.paneWidth;
	    var standalone = _props.standalone;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['id', 'className', 'style', 'position', 'bsStyle', 'tabWidth', 'paneWidth', 'standalone', 'children']);

	    var isHorizontal = position === 'left' || position === 'right';

	    if (bsStyle == null) {
	      bsStyle = isHorizontal ? 'pills' : 'tabs';
	    }

	    var containerProps = { id: id, className: className, style: style };

	    var tabsProps = _extends({}, props, {
	      bsStyle: bsStyle,
	      bsClass: undefined,
	      stacked: isHorizontal,
	      activeKey: this.getActiveKey(),
	      onSelect: this.handleSelect,
	      ref: 'tabs',
	      role: 'tablist'
	    });
	    var childTabs = _utilsValidComponentChildren2['default'].map(children, this.renderTab);

	    var panesProps = {
	      className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content'),
	      ref: 'panes'
	    };
	    var childPanes = _utilsValidComponentChildren2['default'].map(children, this.renderPane);

	    if (isHorizontal) {
	      if (!standalone) {
	        containerProps.className = _classnames2['default'](containerProps.className, 'clearfix');
	      }

	      var _getColProps = this.getColProps({ tabWidth: tabWidth, paneWidth: paneWidth });

	      var tabsColProps = _getColProps.tabsColProps;
	      var panesColProps = _getColProps.panesColProps;

	      var tabs = _react2['default'].createElement(
	        _Col2['default'],
	        _extends({ componentClass: _Nav2['default'] }, tabsProps, tabsColProps),
	        childTabs
	      );
	      var panes = _react2['default'].createElement(
	        _Col2['default'],
	        _extends({}, panesProps, panesColProps),
	        childPanes
	      );

	      if (position === 'left') {
	        return _react2['default'].createElement(
	          'div',
	          containerProps,
	          tabs,
	          panes
	        );
	      }

	      return _react2['default'].createElement(
	        'div',
	        containerProps,
	        panes,
	        tabs
	      );
	    }

	    return _react2['default'].createElement(
	      'div',
	      containerProps,
	      _react2['default'].createElement(
	        _Nav2['default'],
	        tabsProps,
	        childTabs
	      ),
	      _react2['default'].createElement(
	        'div',
	        panesProps,
	        childPanes
	      )
	    );
	  },

	  getActiveKey: function getActiveKey() {
	    return this.props.activeKey !== undefined ? this.props.activeKey : this.state.activeKey;
	  },

	  renderPane: function renderPane(child, index) {
	    var previousActiveKey = this.state.previousActiveKey;

	    var shouldPaneBeSetActive = child.props.eventKey === this.getActiveKey();
	    var thereIsNoActivePane = previousActiveKey == null;

	    var paneIsAlreadyActive = previousActiveKey != null && child.props.eventKey === previousActiveKey;

	    return _react.cloneElement(child, {
	      active: shouldPaneBeSetActive && (thereIsNoActivePane || !this.props.animation),
	      id: paneId(this.props, child),
	      'aria-labelledby': tabId(this.props, child),
	      key: child.key ? child.key : index,
	      animation: this.props.animation,
	      onAnimateOutEnd: paneIsAlreadyActive ? this.handlePaneAnimateOutEnd : null
	    });
	  },

	  renderTab: function renderTab(child, index) {
	    var _this2 = this;

	    if (child.props.title == null) {
	      return null;
	    }

	    var _child$props = child.props;
	    var eventKey = _child$props.eventKey;
	    var title = _child$props.title;
	    var disabled = _child$props.disabled;
	    var onKeyDown = _child$props.onKeyDown;
	    var tabClassName = _child$props.tabClassName;
	    var _child$props$tabIndex = _child$props.tabIndex;
	    var tabIndex = _child$props$tabIndex === undefined ? 0 : _child$props$tabIndex;

	    var isActive = this.getActiveKey() === eventKey;

	    return _react2['default'].createElement(
	      _NavItem2['default'],
	      {
	        linkId: tabId(this.props, child),
	        ref: function (ref) {
	          return (_this2._tabs || (_this2._tabs = []))[index] = ref;
	        },
	        'aria-controls': paneId(this.props, child),
	        onKeyDown: _utilsCreateChainedFunction2['default'](this.handleKeyDown, onKeyDown),
	        eventKey: eventKey,
	        tabIndex: isActive ? tabIndex : -1,
	        disabled: disabled,
	        className: tabClassName },
	      title
	    );
	  },

	  getColProps: function getColProps(_ref) {
	    var tabWidth = _ref.tabWidth;
	    var paneWidth = _ref.paneWidth;

	    var tabsColProps = undefined;
	    if (tabWidth instanceof Object) {
	      tabsColProps = tabWidth;
	    } else {
	      tabsColProps = { xs: tabWidth };
	    }

	    var panesColProps = undefined;
	    if (paneWidth == null) {
	      panesColProps = {};
	      _Object$keys(tabsColProps).forEach(function (size) {
	        panesColProps[size] = _styleMaps2['default'].GRID_COLUMNS - tabsColProps[size];
	      });
	    } else if (paneWidth instanceof Object) {
	      panesColProps = paneWidth;
	    } else {
	      panesColProps = { xs: paneWidth };
	    }

	    return { tabsColProps: tabsColProps, panesColProps: panesColProps };
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleSelect: function handleSelect(selectedKey) {
	    if (this.props.onSelect) {
	      this._isChanging = true;
	      this.props.onSelect(selectedKey);
	      this._isChanging = false;
	      return;
	    }

	    // if there is no external handler, then use embedded one
	    var previousActiveKey = this.getActiveKey();
	    if (selectedKey !== previousActiveKey) {
	      this.setState({
	        activeKey: selectedKey,
	        previousActiveKey: previousActiveKey
	      });
	    }
	  },

	  handleKeyDown: function handleKeyDown(event) {
	    var keys = this._eventKeys();
	    var currentKey = this.getActiveKey() || keys[0];
	    var next = undefined;

	    switch (event.keyCode) {

	      case _keycode2['default'].codes.left:
	      case _keycode2['default'].codes.up:
	        next = move(this.props.children, currentKey, keys, false);

	        if (next && next !== currentKey) {
	          event.preventDefault();
	          this.handleSelect(next);
	          this._needsRefocus = true;
	        }
	        break;
	      case _keycode2['default'].codes.right:
	      case _keycode2['default'].codes.down:
	        next = move(this.props.children, currentKey, keys, true);

	        if (next && next !== currentKey) {
	          event.preventDefault();
	          this.handleSelect(next);
	          this._needsRefocus = true;
	        }
	        break;
	      default:
	    }
	  },

	  _eventKeys: function _eventKeys() {
	    var keys = [];

	    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (_ref2) {
	      var eventKey = _ref2.props.eventKey;
	      return keys.push(eventKey);
	    });

	    return keys;
	  }
	});

	exports['default'] = Tabs;
	module.exports = exports['default'];

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SafeAnchor = __webpack_require__(201);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var Thumbnail = _react2['default'].createClass({
	  displayName: 'Thumbnail',

	  propTypes: {
	    alt: _react2['default'].PropTypes.string,
	    href: _react2['default'].PropTypes.string,
	    src: _react2['default'].PropTypes.string
	  },

	  render: function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    if (this.props.href) {
	      return _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        _extends({}, this.props, { href: this.props.href, className: _classnames2['default'](this.props.className, classes) }),
	        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
	      );
	    }

	    if (this.props.children) {
	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'caption' },
	          this.props.children
	        )
	      );
	    }

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
	    );
	  }
	});

	exports['default'] = _utilsBootstrapUtils.bsClass('thumbnail', Thumbnail);
	module.exports = exports['default'];

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(314);

	var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

	var Tooltip = _react2['default'].createClass({
	  displayName: 'Tooltip',

	  propTypes: {
	    /**
	     * An html id attribute, necessary for accessibility
	     * @type {string}
	     * @required
	     */
	    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	    /**
	     * Sets the direction the Tooltip is positioned towards.
	     */
	    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

	    /**
	     * The "left" position value for the Tooltip.
	     */
	    positionLeft: _react2['default'].PropTypes.number,
	    /**
	     * The "top" position value for the Tooltip.
	     */
	    positionTop: _react2['default'].PropTypes.number,
	    /**
	     * The "left" position value for the Tooltip arrow.
	     */
	    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * The "top" position value for the Tooltip arrow.
	     */
	    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * Title text
	     */
	    title: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'tooltip',
	      placement: 'right'
	    };
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes[this.props.placement] = true, _classes);

	    var style = _extends({
	      'left': this.props.positionLeft,
	      'top': this.props.positionTop
	    }, this.props.style);

	    var arrowStyle = {
	      'left': this.props.arrowOffsetLeft,
	      'top': this.props.arrowOffsetTop
	    };

	    return _react2['default'].createElement(
	      'div',
	      _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style }),
	      _react2['default'].createElement('div', { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'arrow'), style: arrowStyle }),
	      _react2['default'].createElement(
	        'div',
	        { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'inner') },
	        this.props.children
	      )
	    );
	  }
	});

	exports['default'] = Tooltip;
	module.exports = exports['default'];

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(202)['default'];

	var _classCallCheck = __webpack_require__(209)['default'];

	var _extends = __webpack_require__(168)['default'];

	var _interopRequireDefault = __webpack_require__(161)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(196);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsBootstrapUtils = __webpack_require__(167);

	var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

	var _styleMaps = __webpack_require__(184);

	var Well = (function (_React$Component) {
	  _inherits(Well, _React$Component);

	  function Well() {
	    _classCallCheck(this, _Well);

	    _React$Component.apply(this, arguments);
	  }

	  Well.prototype.render = function render() {
	    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  };

	  var _Well = Well;
	  Well = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL])(Well) || Well;
	  Well = _utilsBootstrapUtils.bsClass('well')(Well) || Well;
	  return Well;
	})(_react2['default'].Component);

	exports['default'] = Well;
	module.exports = exports['default'];

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(3), __webpack_require__(406), __webpack_require__(407));
		else if(typeof define === 'function' && define.amd)
			define(["react", "jQuery", "react-dom"], factory);
		else if(typeof exports === 'object')
			exports["pxyley"] = factory(require("react"), require("jQuery"), require("react-dom"));
		else
			root["pxyley"] = factory(root["React"], root["jQuery"], root["ReactDOM"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_15__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _factory = __webpack_require__(1);

		Object.defineProperty(exports, 'ChartFactory', {
		  enumerable: true,
		  get: function get() {
		    return _factory.ChartFactory;
		  }
		});

		var _factory2 = __webpack_require__(16);

		Object.defineProperty(exports, 'FilterFactory', {
		  enumerable: true,
		  get: function get() {
		    return _factory2.FilterFactory;
		  }
		});

		var _FilterChart = __webpack_require__(270);

		Object.defineProperty(exports, 'FilterChart', {
		  enumerable: true,
		  get: function get() {
		    return _FilterChart.FilterChart;
		  }
		});
		Object.defineProperty(exports, 'Filter', {
		  enumerable: true,
		  get: function get() {
		    return _factory2.Filter;
		  }
		});
		Object.defineProperty(exports, 'Chart', {
		  enumerable: true,
		  get: function get() {
		    return _factory.Chart;
		  }
		});

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.ChartFactory = exports.Chart = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _base = __webpack_require__(3);

		var _base2 = __webpack_require__(7);

		var _base3 = __webpack_require__(11);

		var _base4 = __webpack_require__(13);

		var _base5 = __webpack_require__(14);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var ChartFactory = function ChartFactory(type) {

		    if (typeof ChartFactory[type] != 'function') {
		        throw new Error(type + ' is not a valid chart type.');
		    }

		    return ChartFactory[type];
		};

		ChartFactory.MetricsGraphics = _base.MetricsGraphics;
		ChartFactory.Table = _base3.Table;
		ChartFactory.NVD3Chart = _base2.NVD3Chart;
		ChartFactory.Datamaps = _base4.Datamaps;
		ChartFactory.PlotlyAPI = _base5.PlotlyAPI;

		var Chart = function (_React$Component) {
		    _inherits(Chart, _React$Component);

		    function Chart(props) {
		        _classCallCheck(this, Chart);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(Chart).call(this, props));
		    }

		    _createClass(Chart, [{
		        key: 'update',
		        value: function update(params) {
		            this.refs.chart._update(params);
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            var Z = this.props.factory(this.props.type);
		            return _react2.default.createElement(Z, { ref: "chart", options: this.props.options });
		        }
		    }]);

		    return Chart;
		}(_react2.default.Component);

		Chart.defaultProps = {
		    type: _react2.default.PropTypes.string,
		    factory: ChartFactory,
		    options: _react2.default.PropTypes.object
		};

		exports.Chart = Chart;
		exports.ChartFactory = ChartFactory;

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.MetricsGraphics = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _metricsGraphics = __webpack_require__(5);

		var _metricsGraphics2 = _interopRequireDefault(_metricsGraphics);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var MetricsGraphics = exports.MetricsGraphics = function (_React$Component) {
		    _inherits(MetricsGraphics, _React$Component);

		    function MetricsGraphics(props) {
		        _classCallCheck(this, MetricsGraphics);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(MetricsGraphics).call(this, props));
		    }

		    _createClass(MetricsGraphics, [{
		        key: 'componentDidMount',
		        value: function componentDidMount() {
		            this._initialize(this.props.options.params.init_params);
		        }
		    }, {
		        key: '_initialize',
		        value: function _initialize(params) {
		            d3.json(this.props.options.url.concat("?", $.param(params)), function (error, data) {

		                var options = this.props.options.params;
		                if (data.date) {
		                    for (var i = 0; i < data.result.length; i++) {
		                        data.result[i] = _metricsGraphics2.default.convert.date(data.result[i], "x", this.props.options.date_format);
		                    }
		                }
		                options.data = data.result;
		                _metricsGraphics2.default.data_graphic(options);
		            }.bind(this));
		        }
		    }, {
		        key: '_update',
		        value: function _update(params) {
		            d3.json(this.props.options.url.concat("?", $.param(params)), function (error, data) {
		                var options = this.props.options.params;
		                if (data.date) {
		                    for (var i = 0; i < data.result.length; i++) {
		                        data.result[i] = _metricsGraphics2.default.convert.date(data.result[i], "x", this.props.options.date_format);
		                    }
		                }
		                options.data = data.result;
		                _metricsGraphics2.default.data_graphic(options);
		            }.bind(this));
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            var width = { width: this.props.options.params.width };

		            return _react2.default.createElement('div', { id: this.props.options.chart_id, style: width });
		        }
		    }]);

		    return MetricsGraphics;
		}(_react2.default.Component);
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 4 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  } else if (typeof exports === 'object') {
		    module.exports = factory(require('d3'), require('jquery'));
		  } else {
		    root.MG = factory(root.d3, root.jQuery);
		  }
		}(this, function(d3, $) {
		window.MG = {version: '2.8.0'};

		function register(chartType, descriptor, defaults) {
		  MG.charts[chartType] = {
		    descriptor: descriptor,
		    defaults: defaults || {}
		  };
		}

		MG.register = register;

		/**
		  Record of all registered hooks.
		  For internal use only.
		*/
		MG._hooks = {};

		/**
		  Add a hook callthrough to the stack.

		  Hooks are executed in the order that they were registered.
		*/
		MG.add_hook = function(name, func, context) {
		  var hooks;

		  if (!MG._hooks[name]) {
		    MG._hooks[name] = [];
		  }

		  hooks = MG._hooks[name];

		  var already_registered =
		    hooks.filter(function(hook) {
		      return hook.func === func;
		    })
		    .length > 0;

		  if (already_registered) {
		    throw 'That function is already registered.';
		  }

		  hooks.push({
		    func: func,
		    context: context
		  });
		};

		/**
		  Execute registered hooks.

		  Optional arguments
		*/
		MG.call_hook = function(name) {
		  var hooks = MG._hooks[name],
		    result = [].slice.apply(arguments, [1]),
		    processed;

		  if (hooks) {
		    hooks.forEach(function(hook) {
		      if (hook.func) {
		        var params = processed || result;

		        if (params && params.constructor !== Array) {
		          params = [params];
		        }

		        params = [].concat.apply([], params);
		        processed = hook.func.apply(hook.context, params);
		      }
		    });
		  }

		  return processed || result;
		};

		MG.globals = {};
		MG.deprecations = {
		  rollover_callback: { replacement: 'mouseover', version: '2.0' },
		  rollout_callback: { replacement: 'mouseout', version: '2.0' },
		  x_rollover_format: { replacement: 'x_mouseover', version: '2.10' },
		  y_rollover_format: { replacement: 'y_mouseover', version: '2.10' },
		  show_years: { replacement: 'show_secondary_x_label', version: '2.1' },
		  xax_start_at_min: { replacement: 'axes_not_compact', version: '2.7' }
		};
		MG.globals.link = false;
		MG.globals.version = "1.1";

		MG.charts = {};

		MG.data_graphic = function(args) {
		  'use strict';
		  var defaults = {
		    missing_is_zero: false,             // if true, missing values will be treated as zeros
		    missing_is_hidden: false,           // if true, missing values will appear as broken segments
		    missing_is_hidden_accessor: null,   // the accessor that determines the boolean value for missing data points
		    legend: '' ,                        // an array identifying the labels for a chart's lines
		    legend_target: '',                  // if set, the specified element is populated with a legend
		    error: '',                          // if set, a graph will show an error icon and log the error to the console
		    animate_on_load: false,             // animate lines on load
		    top: 65,                            // the size of the top margin
		    title_y_position: 10,               // how many pixels from the top edge (0) should we show the title at
		    bottom: 30,                         // the size of the bottom margin
		    right: 10,                          // size of the right margin
		    left: 50,                           // size of the left margin
		    buffer: 8,                          // the buffer between the actual chart area and the margins
		    width: 350,                         // the width of the entire graphic
		    height: 220,                        // the height of the entire graphic
		    full_width: false,                  // sets the graphic width to be the width of the parent element and resizes dynamically
		    full_height: false,                 // sets the graphic width to be the width of the parent element and resizes dynamically
		    small_height_threshold: 120,        // the height threshold for when smaller text appears
		    small_width_threshold: 160,         // the width  threshold for when smaller text appears
		    xax_count: 6,                       // number of x axis ticks
		    xax_tick_length: 5,                 // x axis tick length
		    axes_not_compact: true,
		    yax_count: 5,                       // number of y axis ticks
		    yax_tick_length: 5,                 // y axis tick length
		    x_extended_ticks: false,            // extends x axis ticks across chart - useful for tall charts
		    y_extended_ticks: false,            // extends y axis ticks across chart - useful for long charts
		    y_scale_type: 'linear',
		    max_x: null,
		    max_y: null,
		    min_x: null,
		    min_y: null,                        // if set, y axis starts at an arbitrary value
		    min_y_from_data: false,             // if set, y axis will start at minimum value rather than at 0
		    point_size: 2.5,                    // the size of the dot that appears on a line on mouse-over
		    x_accessor: 'date',
		    xax_units: '',
		    x_label: '',
		    x_sort: true,
		    x_axis: true,
		    y_axis: true,
		    y_accessor: 'value',
		    y_label: '',
		    yax_units: '',
		    x_rug: false,
		    y_rug: false,
		    x_mouseover: null,
		    y_mouseover: null,
		    transition_on_update: true,
		    mouseover: null,
		    click: null,
		    show_rollover_text: true,
		    show_confidence_band: null,         // given [l, u] shows a confidence at each point from l to u
		    xax_format: null,                   // xax_format is a function that formats the labels for the x axis.
		    area: true,
		    chart_type: 'line',
		    data: [],
		    decimals: 2,                        // the number of decimals in any rollover
		    format: 'count',                    // format = {count, percentage}
		    inflator: 10/9,                     // for setting y axis max
		    linked: false,                      // links together all other graphs with linked:true, so rollovers in one trigger rollovers in the others
		    linked_format: '%Y-%m-%d',          // What granularity to link on for graphs. Default is at day
		    list: false,
		    baselines: null,                    // sets the baseline lines
		    markers: null,                      // sets the marker lines
		    scalefns: {},
		    scales: {},
		    utc_time: false,
		    european_clock: false,
		    show_year_markers: false,
		    show_secondary_x_label: true,
		    target: '#viz',
		    interpolate: 'cardinal',            // interpolation method to use when rendering lines
		    interpolate_tension: 0.7,           // its range is from 0 to 1; increase if your data is irregular and you notice artifacts
		    custom_line_color_map: [],          // allows arbitrary mapping of lines to colors, e.g. [2,3] will map line 1 to color 2 and line 2 to color 3
		    colors: null,                       // UNIMPLEMENTED - allows direct color mapping to line colors. Will eventually require
		    max_data_size: null,                // explicitly specify the the max number of line series, for use with custom_line_color_map
		    aggregate_rollover: false,          // links the lines in a multi-line chart
		    show_tooltips: true                 // if enabled, a chart's description will appear in a tooltip (requires jquery)
		  };

		  MG.call_hook('global.defaults', defaults);

		  if (!args) { args = {}; }

		  var selected_chart = MG.charts[args.chart_type || defaults.chart_type];
		  merge_with_defaults(args, selected_chart.defaults, defaults);

		  if (args.list) {
		    args.x_accessor = 0;
		    args.y_accessor = 1;
		  }

		  // check for deprecated parameters
		  for (var key in MG.deprecations) {
		    if (args.hasOwnProperty(key)) {
		      var deprecation = MG.deprecations[key],
		        message = 'Use of `args.' + key + '` has been deprecated',
		        replacement = deprecation.replacement,
		        version;

		      // transparently alias the deprecated
		      if (replacement) {
		        if (args[replacement]) {
		          message += '. The replacement - `args.' + replacement + '` - has already been defined. This definition will be discarded.';
		        } else {
		          args[replacement] = args[key];
		        }
		      }

		      if (deprecation.warned) {
		        continue;
		      }

		      deprecation.warned = true;

		      if (replacement) {
		        message += ' in favor of `args.' + replacement + '`';
		      }

		      warn_deprecation(message, deprecation.version);
		    }
		  }

		  MG.call_hook('global.before_init', args);

		  new selected_chart.descriptor(args);

		  return args.data;
		};

		if (typeof jQuery !== 'undefined') {
		    /* ========================================================================
		     * Bootstrap: tooltip.js v3.3.5
		     * http://getbootstrap.com/javascript/#tooltip
		     * Inspired by the original jQuery.tipsy by Jason Frame
		     * ========================================================================
		     * Copyright 2011-2015 Twitter, Inc.
		     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		     * ======================================================================== */


		    +function ($) {
		      'use strict';

		      // TOOLTIP PUBLIC CLASS DEFINITION
		      // ===============================

		      var Tooltip = function (element, options) {
		        this.type       = null
		        this.options    = null
		        this.enabled    = null
		        this.timeout    = null
		        this.hoverState = null
		        this.$element   = null
		        this.inState    = null

		        this.init('tooltip', element, options)
		      }

		      Tooltip.VERSION  = '3.3.5'

		      Tooltip.TRANSITION_DURATION = 150

		      Tooltip.DEFAULTS = {
		        animation: true,
		        placement: 'top',
		        selector: false,
		        template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
		        trigger: 'hover focus',
		        title: '',
		        delay: 0,
		        html: false,
		        container: false,
		        viewport: {
		          selector: 'body',
		          padding: 0
		        }
		      }

		      Tooltip.prototype.init = function (type, element, options) {
		        this.enabled   = true
		        this.type      = type
		        this.$element  = $(element)
		        this.options   = this.getOptions(options)
		        this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
		        this.inState   = { click: false, hover: false, focus: false }

		        if (this.$element[0] instanceof document.constructor && !this.options.selector) {
		          throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
		        }

		        var triggers = this.options.trigger.split(' ')

		        for (var i = triggers.length; i--;) {
		          var trigger = triggers[i]

		          if (trigger == 'click') {
		            this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
		          } else if (trigger != 'manual') {
		            var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
		            var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

		            this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
		            this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
		          }
		        }

		        this.options.selector ?
		          (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
		          this.fixTitle()
		      }

		      Tooltip.prototype.getDefaults = function () {
		        return Tooltip.DEFAULTS
		      }

		      Tooltip.prototype.getOptions = function (options) {
		        options = $.extend({}, this.getDefaults(), this.$element.data(), options)

		        if (options.delay && typeof options.delay == 'number') {
		          options.delay = {
		            show: options.delay,
		            hide: options.delay
		          }
		        }

		        return options
		      }

		      Tooltip.prototype.getDelegateOptions = function () {
		        var options  = {}
		        var defaults = this.getDefaults()

		        this._options && $.each(this._options, function (key, value) {
		          if (defaults[key] != value) options[key] = value
		        })

		        return options
		      }

		      Tooltip.prototype.enter = function (obj) {
		        var self = obj instanceof this.constructor ?
		          obj : $(obj.currentTarget).data('bs.' + this.type)

		        if (!self) {
		          self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
		          $(obj.currentTarget).data('bs.' + this.type, self)
		        }

		        if (obj instanceof $.Event) {
		          self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
		        }

		        if (self.tip().hasClass('in') || self.hoverState == 'in') {
		          self.hoverState = 'in'
		          return
		        }

		        clearTimeout(self.timeout)

		        self.hoverState = 'in'

		        if (!self.options.delay || !self.options.delay.show) return self.show()

		        self.timeout = setTimeout(function () {
		          if (self.hoverState == 'in') self.show()
		        }, self.options.delay.show)
		      }

		      Tooltip.prototype.isInStateTrue = function () {
		        for (var key in this.inState) {
		          if (this.inState[key]) return true
		        }

		        return false
		      }

		      Tooltip.prototype.leave = function (obj) {
		        var self = obj instanceof this.constructor ?
		          obj : $(obj.currentTarget).data('bs.' + this.type)

		        if (!self) {
		          self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
		          $(obj.currentTarget).data('bs.' + this.type, self)
		        }

		        if (obj instanceof $.Event) {
		          self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
		        }

		        if (self.isInStateTrue()) return

		        clearTimeout(self.timeout)

		        self.hoverState = 'out'

		        if (!self.options.delay || !self.options.delay.hide) return self.hide()

		        self.timeout = setTimeout(function () {
		          if (self.hoverState == 'out') self.hide()
		        }, self.options.delay.hide)
		      }

		      Tooltip.prototype.show = function () {
		        var e = $.Event('show.bs.' + this.type)

		        if (this.hasContent() && this.enabled) {
		          this.$element.trigger(e)

		          var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
		          if (e.isDefaultPrevented() || !inDom) return
		          var that = this

		          var $tip = this.tip()

		          var tipId = this.getUID(this.type)

		          this.setContent()
		          $tip.attr('id', tipId)
		          this.$element.attr('aria-describedby', tipId)

		          if (this.options.animation) $tip.addClass('fade')

		          var placement = typeof this.options.placement == 'function' ?
		            this.options.placement.call(this, $tip[0], this.$element[0]) :
		            this.options.placement

		          var autoToken = /\s?auto?\s?/i
		          var autoPlace = autoToken.test(placement)
		          if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

		          $tip
		            .detach()
		            .css({ top: 0, left: 0, display: 'block' })
		            .addClass(placement)
		            .data('bs.' + this.type, this)

		          this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
		          this.$element.trigger('inserted.bs.' + this.type)

		          var pos          = this.getPosition()
		          var actualWidth  = $tip[0].offsetWidth
		          var actualHeight = $tip[0].offsetHeight

		          if (autoPlace) {
		            var orgPlacement = placement
		            var viewportDim = this.getPosition(this.$viewport)

		            placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
		                        placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
		                        placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
		                        placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
		                        placement

		            $tip
		              .removeClass(orgPlacement)
		              .addClass(placement)
		          }

		          var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

		          this.applyPlacement(calculatedOffset, placement)

		          var complete = function () {
		            var prevHoverState = that.hoverState
		            that.$element.trigger('shown.bs.' + that.type)
		            that.hoverState = null

		            if (prevHoverState == 'out') that.leave(that)
		          }

		          $.support.transition && this.$tip.hasClass('fade') ?
		            $tip
		              .one('bsTransitionEnd', complete)
		              .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
		            complete()
		        }
		      }

		      Tooltip.prototype.applyPlacement = function (offset, placement) {
		        var $tip   = this.tip()
		        var width  = $tip[0].offsetWidth
		        var height = $tip[0].offsetHeight

		        // manually read margins because getBoundingClientRect includes difference
		        var marginTop = parseInt($tip.css('margin-top'), 10)
		        var marginLeft = parseInt($tip.css('margin-left'), 10)

		        // we must check for NaN for ie 8/9
		        if (isNaN(marginTop))  marginTop  = 0
		        if (isNaN(marginLeft)) marginLeft = 0

		        offset.top  += marginTop
		        offset.left += marginLeft

		        // $.fn.offset doesn't round pixel values
		        // so we use setOffset directly with our own function B-0
		        $.offset.setOffset($tip[0], $.extend({
		          using: function (props) {
		            $tip.css({
		              top: Math.round(props.top),
		              left: Math.round(props.left)
		            })
		          }
		        }, offset), 0)

		        $tip.addClass('in')

		        // check to see if placing tip in new offset caused the tip to resize itself
		        var actualWidth  = $tip[0].offsetWidth
		        var actualHeight = $tip[0].offsetHeight

		        if (placement == 'top' && actualHeight != height) {
		          offset.top = offset.top + height - actualHeight
		        }

		        var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

		        if (delta.left) offset.left += delta.left
		        else offset.top += delta.top

		        var isVertical          = /top|bottom/.test(placement)
		        var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
		        var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

		        $tip.offset(offset)
		        this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
		      }

		      Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
		        this.arrow()
		          .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
		          .css(isVertical ? 'top' : 'left', '')
		      }

		      Tooltip.prototype.setContent = function () {
		        var $tip  = this.tip()
		        var title = this.getTitle()

		        $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
		        $tip.removeClass('fade in top bottom left right')
		      }

		      Tooltip.prototype.hide = function (callback) {
		        var that = this
		        var $tip = $(this.$tip)
		        var e    = $.Event('hide.bs.' + this.type)

		        function complete() {
		          if (that.hoverState != 'in') $tip.detach()
		          that.$element
		            .removeAttr('aria-describedby')
		            .trigger('hidden.bs.' + that.type)
		          callback && callback()
		        }

		        this.$element.trigger(e)

		        if (e.isDefaultPrevented()) return

		        $tip.removeClass('in')

		        $.support.transition && $tip.hasClass('fade') ?
		          $tip
		            .one('bsTransitionEnd', complete)
		            .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
		          complete()

		        this.hoverState = null

		        return this
		      }

		      Tooltip.prototype.fixTitle = function () {
		        var $e = this.$element
		        if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
		          $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
		        }
		      }

		      Tooltip.prototype.hasContent = function () {
		        return this.getTitle()
		      }

		      Tooltip.prototype.getPosition = function ($element) {
		        $element   = $element || this.$element

		        var el     = $element[0]
		        var isBody = el.tagName == 'BODY'

		        var elRect    = el.getBoundingClientRect()
		        if (elRect.width == null) {
		          // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
		          elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
		        }
		        var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
		        var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
		        var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

		        return $.extend({}, elRect, scroll, outerDims, elOffset)
		      }

		      Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
		        return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
		               placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
		               placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
		            /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

		      }

		      Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
		        var delta = { top: 0, left: 0 }
		        if (!this.$viewport) return delta

		        var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
		        var viewportDimensions = this.getPosition(this.$viewport)

		        if (/right|left/.test(placement)) {
		          var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
		          var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
		          if (topEdgeOffset < viewportDimensions.top) { // top overflow
		            delta.top = viewportDimensions.top - topEdgeOffset
		          } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
		            delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
		          }
		        } else {
		          var leftEdgeOffset  = pos.left - viewportPadding
		          var rightEdgeOffset = pos.left + viewportPadding + actualWidth
		          if (leftEdgeOffset < viewportDimensions.left) { // left overflow
		            delta.left = viewportDimensions.left - leftEdgeOffset
		          } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
		            delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
		          }
		        }

		        return delta
		      }

		      Tooltip.prototype.getTitle = function () {
		        var title
		        var $e = this.$element
		        var o  = this.options

		        title = $e.attr('data-original-title')
		          || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

		        return title
		      }

		      Tooltip.prototype.getUID = function (prefix) {
		        do prefix += ~~(Math.random() * 1000000)
		        while (document.getElementById(prefix))
		        return prefix
		      }

		      Tooltip.prototype.tip = function () {
		        if (!this.$tip) {
		          this.$tip = $(this.options.template)
		          if (this.$tip.length != 1) {
		            throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
		          }
		        }
		        return this.$tip
		      }

		      Tooltip.prototype.arrow = function () {
		        return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
		      }

		      Tooltip.prototype.enable = function () {
		        this.enabled = true
		      }

		      Tooltip.prototype.disable = function () {
		        this.enabled = false
		      }

		      Tooltip.prototype.toggleEnabled = function () {
		        this.enabled = !this.enabled
		      }

		      Tooltip.prototype.toggle = function (e) {
		        var self = this
		        if (e) {
		          self = $(e.currentTarget).data('bs.' + this.type)
		          if (!self) {
		            self = new this.constructor(e.currentTarget, this.getDelegateOptions())
		            $(e.currentTarget).data('bs.' + this.type, self)
		          }
		        }

		        if (e) {
		          self.inState.click = !self.inState.click
		          if (self.isInStateTrue()) self.enter(self)
		          else self.leave(self)
		        } else {
		          self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
		        }
		      }

		      Tooltip.prototype.destroy = function () {
		        var that = this
		        clearTimeout(this.timeout)
		        this.hide(function () {
		          that.$element.off('.' + that.type).removeData('bs.' + that.type)
		          if (that.$tip) {
		            that.$tip.detach()
		          }
		          that.$tip = null
		          that.$arrow = null
		          that.$viewport = null
		        })
		      }


		      // TOOLTIP PLUGIN DEFINITION
		      // =========================

		      function Plugin(option) {
		        return this.each(function () {
		          var $this   = $(this)
		          var data    = $this.data('bs.tooltip')
		          var options = typeof option == 'object' && option

		          if (!data && /destroy|hide/.test(option)) return
		          if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
		          if (typeof option == 'string') data[option]()
		        })
		      }

		      var old = $.fn.tooltip

		      $.fn.tooltip             = Plugin
		      $.fn.tooltip.Constructor = Tooltip


		      // TOOLTIP NO CONFLICT
		      // ===================

		      $.fn.tooltip.noConflict = function () {
		        $.fn.tooltip = old
		        return this
		      }

		    }(jQuery);


		    /* ========================================================================
		     * Bootstrap: popover.js v3.3.5
		     * http://getbootstrap.com/javascript/#popovers
		     * ========================================================================
		     * Copyright 2011-2015 Twitter, Inc.
		     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		     * ======================================================================== */


		    +function ($) {
		      'use strict';

		      // POPOVER PUBLIC CLASS DEFINITION
		      // ===============================

		      var Popover = function (element, options) {
		        this.init('popover', element, options)
		      }

		      if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

		      Popover.VERSION  = '3.3.5'

		      Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
		        placement: 'right',
		        trigger: 'click',
		        content: '',
		        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
		      })


		      // NOTE: POPOVER EXTENDS tooltip.js
		      // ================================

		      Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

		      Popover.prototype.constructor = Popover

		      Popover.prototype.getDefaults = function () {
		        return Popover.DEFAULTS
		      }

		      Popover.prototype.setContent = function () {
		        var $tip    = this.tip()
		        var title   = this.getTitle()
		        var content = this.getContent()

		        $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
		        $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
		          this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
		        ](content)

		        $tip.removeClass('fade top bottom left right in')

		        // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
		        // this manually by checking the contents.
		        if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
		      }

		      Popover.prototype.hasContent = function () {
		        return this.getTitle() || this.getContent()
		      }

		      Popover.prototype.getContent = function () {
		        var $e = this.$element
		        var o  = this.options

		        return $e.attr('data-content')
		          || (typeof o.content == 'function' ?
		                o.content.call($e[0]) :
		                o.content)
		      }

		      Popover.prototype.arrow = function () {
		        return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
		      }


		      // POPOVER PLUGIN DEFINITION
		      // =========================

		      function Plugin(option) {
		        return this.each(function () {
		          var $this   = $(this)
		          var data    = $this.data('bs.popover')
		          var options = typeof option == 'object' && option

		          if (!data && /destroy|hide/.test(option)) return
		          if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
		          if (typeof option == 'string') data[option]()
		        })
		      }

		      var old = $.fn.popover

		      $.fn.popover             = Plugin
		      $.fn.popover.Constructor = Popover


		      // POPOVER NO CONFLICT
		      // ===================

		      $.fn.popover.noConflict = function () {
		        $.fn.popover = old
		        return this
		      }

		    }(jQuery);
		}
		function chart_title(args) {
		  'use strict';

		  var svg = mg_get_svg_child_of(args.target);

		  //remove the current title if it exists
		  svg.select('.mg-header').remove();

		  if (args.target && args.title) {
		    var chartTitle = svg.insert('text')
		      .attr('class', 'mg-header')
		      .attr('x', (args.width + args.left - args.right) / 2)
		      .attr('y', args.title_y_position)
		      .attr('text-anchor', 'middle')
		      .attr('dy', '0.55em');

		    //show the title
		    chartTitle.append('tspan')
		      .attr('class', 'mg-chart-title')
		      .text(args.title);

		    //show and activate the description icon if we have a description
		    if (args.show_tooltips && args.description) {
		      chartTitle.append('tspan')
		        .attr('class', 'mg-chart-description')
		        .attr('dx', '0.3em')
		        .text('\uf059');

		      //now that the title is an svg text element, we'll have to trigger
		      //mouseenter, mouseleave events manually for the popover to work properly
		      var $chartTitle = $(chartTitle.node());
		      $chartTitle.popover({
		        html: true,
		        animation: false,
		        placement: 'top',
		        content: args.description,
		        container: args.target,
		        trigger: 'manual',
		        template: '<div class="popover mg-popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'
		      }).on('mouseenter', function() {
		        d3.selectAll(args.target)
		          .selectAll('.mg-popover')
		          .remove();

		        $(this).popover('show');
		        $(args.target).select('.popover')
		          .on('mouseleave', function () {
		            $chartTitle.popover('hide');
		          });
		      }).on('mouseleave', function () {
		        setTimeout(function () {
		          if (!$('.popover:hover').length) {
		            $chartTitle.popover('hide');
		          }
		        }, 120);
		      });
		    }
		  }

		  if (args.error) {
		    error(args);
		  }
		}

		MG.chart_title = chart_title;

		function y_rug (args) {
		  'use strict';
		  args.rug_buffer_size = args.chart_type === 'point'
		    ? args.buffer / 2
		    : args.buffer * 2 / 3;

		  var rug = mg_make_rug(args, 'mg-y-rug');

		  rug.attr('x1', args.left + 1)
		    .attr('x2', args.left + args.rug_buffer_size)
		    .attr('y1', args.scalefns.yf)
		    .attr('y2', args.scalefns.yf);

		  mg_add_color_accessor_to_rug(rug, args, 'mg-y-rug-mono');
		}

		MG.y_rug = y_rug;

		function mg_change_y_extents_for_bars (args, my) {
		  if (args.chart_type === 'bar') {
		    my.min = 0;
		    my.max = d3.max(args.data[0], function (d) {
		      var trio = [];
		      trio.push(d[args.y_accessor]);

		      if (args.baseline_accessor !== null) {
		        trio.push(d[args.baseline_accessor]);
		      }

		      if (args.predictor_accessor !== null) {
		        trio.push(d[args.predictor_accessor]);
		      }

		      return Math.max.apply(null, trio);
		    });
		  }
		  return my;
		}

		function mg_compute_yax_format (args) {
		  var yax_format = args.yax_format;
		  if (!yax_format) {
		    if (args.format === 'count') {
		      // increase decimals if we have small values, useful for realtime data
		      if (args.processed.max_y < 0.0001) {
		        args.decimals = 6;
		      } else if (args.processed.max_y < 0.1) {
		        args.decimals = 4;
		      }

		      yax_format = function (f) {
		        if (f < 1.0) {
		          // Don't scale tiny values.
		          return args.yax_units + d3.round(f, args.decimals);
		        } else {
		          var pf = d3.formatPrefix(f);
		          return args.yax_units + pf.scale(f) + pf.symbol;
		        }
		      };
		    } else { // percentage
		      yax_format = function (d_) {
		        var n = d3.format('2p');
		        return n(d_);
		      };
		    }
		  }
		  return yax_format;
		}

		function set_min_max_y (args) {
		  // flatten data
		  // remove weird data, if log.
		  var data = mg_flatten_array(args.data);
		  if (args.y_scale_type === 'log') data = data.filter(function (d) { return d[args.y_accessor] > 0; });
		  if (args.baselines) { data = data.concat(args.baselines); }

		  var extents = d3.extent(data, function (d) { return d[args.y_accessor]; });

		  var my = {};
		  my.min = extents[0];
		  my.max = extents[1];
		  // the default case is for the y-axis to start at 0, unless we explicitly want it
		  // to start at an arbitrary number or from the data's minimum value
		  if (my.min >= 0 && !args.min_y && !args.min_y_from_data) {
		    my.min = 0;
		  }

		  mg_change_y_extents_for_bars(args, my);
		  my.min = (args.min_y !== null)
		    ? args.min_y
		    : my.min;

		  my.max = (args.max_y !== null)
		    ? args.max_y
		    : (my.max < 0)
		      ? my.max + (my.max - my.max * args.inflator)
		      : my.max * args.inflator;

		  if (args.y_scale_type !== 'log' && my.min < 0) {
		    my.min = my.min - (my.min - my.min * args.inflator);
		  }

		  if (!args.min_y && args.min_y_from_data) {
		    my.min = my.min / args.inflator;
		  }
		  args.processed.min_y = my.min;
		  args.processed.max_y = my.max;
		}

		function mg_y_domain_range (args, scale) {
		  scale.domain([args.processed.min_y, args.processed.max_y])
		    .range([mg_get_plot_bottom(args), args.top]);
		  return scale;
		}

		function mg_define_y_scales (args) {
		  var scale = args.y_scale_type === 'log' ? d3.scale.log() : d3.scale.linear();
		  if (args.y_scale_type === 'log') {
		    if (args.chart_type === 'histogram') {
		      // log histogram plots should start just below 1
		      // so that bins with single counts are visible
		      args.processed.min_y = 0.2;
		    } else {
		      if (args.processed.min_y <= 0) {
		        args.processed.min_y = 1;
		      }
		    }
		  }
		  args.scales.Y = mg_y_domain_range(args, scale);
		  args.scales.Y.clamp(args.y_scale_type === 'log');

		  // used for ticks and such, and designed to be paired with log or linear
		  args.scales.Y_axis = mg_y_domain_range(args, d3.scale.linear());
		}

		function mg_add_y_label (g, args) {
		  if (args.y_label) {
		    g.append('text')
		      .attr('class', 'label')
		      .attr('x', function () {
		        return -1 * (mg_get_plot_top(args) +
		        ((mg_get_plot_bottom(args)) - (mg_get_plot_top(args))) / 2);
		      })
		      .attr('y', function () {
		        return args.left / 2;
		      })
		      .attr('dy', '0.4em')
		      .attr('text-anchor', 'middle')
		      .text(function (d) {
		        return args.y_label;
		      })
		      .attr('transform', function (d) {
		        return 'rotate(-90)';
		      });
		  }
		}

		function mg_process_scale_ticks (args) {
		  var scale_ticks = args.scales.Y.ticks(args.yax_count);

		  function log10 (val) {
		    if (val === 1000) {
		      return 3;
		    }
		    if (val === 1000000) {
		      return 7;
		    }
		    return Math.log(val) / Math.LN10;
		  }

		  if (args.y_scale_type === 'log') {
		    // get out only whole logs
		    scale_ticks = scale_ticks.filter(function (d) {
		      return Math.abs(log10(d)) % 1 < 1e-6 || Math.abs(log10(d)) % 1 > 1 - 1e-6;
		    });
		  }

		  // filter out fraction ticks if our data is ints and if ymax > number of generated ticks
		  var number_of_ticks = args.scales.Y.ticks(args.yax_count).length;

		  // is our data object all ints?
		  var data_is_int = true;
		  args.data.forEach(function (d, i) {
		    d.forEach(function (d, i) {
		      if (d[args.y_accessor] % 1 !== 0) {
		        data_is_int = false;
		        return false;
		      }
		    });
		  });

		  if (data_is_int && number_of_ticks > args.processed.max_y && args.format === 'count') {
		    // remove non-integer ticks
		    scale_ticks = scale_ticks.filter(function (d) {
		      return d % 1 === 0;
		    });
		  }
		  args.processed.y_ticks = scale_ticks;
		}

		function mg_add_y_axis_rim (g, args) {
		  var tick_length = args.processed.y_ticks.length;
		  if (!args.x_extended_ticks && !args.y_extended_ticks && tick_length) {
		    var y1scale, y2scale;

		    if (args.axes_not_compact && args.chart_type !== 'bar') {
		      y1scale = args.height - args.bottom;
		      y2scale = args.top;
		    } else if (tick_length) {
		      y1scale = args.scales.Y(args.processed.y_ticks[0]).toFixed(2);
		      y2scale = args.scales.Y(args.processed.y_ticks[tick_length - 1]).toFixed(2);
		    } else {
		      y1scale = 0;
		      y2scale = 0;
		    }

		    g.append('line')
		      .attr('x1', args.left)
		      .attr('x2', args.left)
		      .attr('y1', y1scale)
		      .attr('y2', y2scale);
		  }
		}

		function mg_add_y_axis_tick_lines (g, args) {
		  g.selectAll('.mg-yax-ticks')
		    .data(args.processed.y_ticks).enter()
		    .append('line')
		    .classed('mg-extended-y-ticks', args.y_extended_ticks)
		    .attr('x1', args.left)
		    .attr('x2', function () {
		      return (args.y_extended_ticks)
		        ? args.width - args.right
		        : args.left - args.yax_tick_length;
		    })
		    .attr('y1', function (d) { return args.scales.Y(d).toFixed(2); })
		    .attr('y2', function (d) { return args.scales.Y(d).toFixed(2); });
		}

		function mg_add_y_axis_tick_labels (g, args) {
		  var yax_format = mg_compute_yax_format(args);
		  g.selectAll('.mg-yax-labels')
		    .data(args.processed.y_ticks).enter()
		    .append('text')
		    .attr('x', args.left - args.yax_tick_length * 3 / 2)
		    .attr('dx', -3)
		    .attr('y', function (d) {
		      return args.scales.Y(d).toFixed(2);
		    })
		    .attr('dy', '.35em')
		    .attr('text-anchor', 'end')
		    .text(function (d) {
		      var o = yax_format(d);
		      return o;
		    });
		}

		function y_axis (args) {
		  if (!args.processed) {
		    args.processed = {};
		  }

		  var svg = mg_get_svg_child_of(args.target);

		  set_min_max_y(args);
		  MG.call_hook('y_axis.process_min_max', args, args.processed.min_y, args.processed.max_y);

		  mg_define_y_scales(args);
		  mg_add_scale_function(args, 'yf', 'Y', args.y_accessor);

		  mg_selectAll_and_remove(svg, '.mg-y-axis');

		  if (!args.y_axis) { return this; }

		  var g = mg_add_g(svg, 'mg-y-axis');
		  mg_add_y_label(g, args);
		  mg_process_scale_ticks(args);
		  mg_add_y_axis_rim(g, args);
		  mg_add_y_axis_tick_lines(g, args);
		  mg_add_y_axis_tick_labels(g, args);

		  if (args.y_rug) { y_rug(args); }

		  return this;
		}

		MG.y_axis = y_axis;

		function mg_add_categorical_labels (args) {
		  var svg = mg_get_svg_child_of(args.target);
		  mg_selectAll_and_remove(svg, '.mg-y-axis');
		  var g = mg_add_g(svg, 'mg-y-axis');

		  var labels = g.selectAll('text').data(args.categorical_variables).enter().append('svg:text')
		    .attr('x', args.left)
		    .attr('y', function (d) {
		      return args.scales.Y(d) + args.scales.Y.rangeBand() / 2 + (args.buffer) * args.outer_padding_percentage;
		    })
		    .attr('dy', '.35em')
		    .attr('text-anchor', 'end')
		    .text(String);

		  mg_rotate_labels(labels, args.rotate_y_labels);
		}

		function y_axis_categorical (args) {
		  mg_add_categorical_scale(args, 'Y', args.categorical_variables, mg_get_plot_bottom(args), args.top, args.padding_percentage, args.outer_padding_percentage);
		  mg_add_scale_function(args, 'yf', 'Y', args.y_accessor);
		  if (!args.y_axis) { return this; }
		  mg_add_categorical_labels(args);

		  return this;
		}

		MG.y_axis_categorical = y_axis_categorical;

		function x_rug (args) {
		  'use strict';
		  args.rug_buffer_size = args.chart_type === 'point'
		    ? args.buffer / 2
		    : args.buffer;
		  var rug = mg_make_rug(args, 'mg-x-rug');
		  rug.attr('x1', args.scalefns.xf)
		    .attr('x2', args.scalefns.xf)
		    .attr('y1', args.height - args.bottom - args.rug_buffer_size)
		    .attr('y2', args.height - args.bottom);
		  mg_add_color_accessor_to_rug(rug, args, 'mg-x-rug-mono');
		}

		MG.x_rug = x_rug;

		function mg_add_processed_object (args) {
		  if (!args.processed) {
		    args.processed = {};
		  }
		}

		function mg_define_x_scale (args) {
		  mg_add_scale_function(args, 'xf', 'X', args.x_accessor);
		  mg_find_min_max_x(args);

		  var time_scale = (args.utc_time)
		    ? d3.time.scale.utc()
		    : d3.time.scale();

		  args.scales.X = (args.time_series)
		    ? time_scale
		    : d3.scale.linear();

		  args.scales.X
		    .domain([args.processed.min_x, args.processed.max_x])
		    .range([mg_get_plot_left(args), mg_get_plot_right(args) - args.additional_buffer]);
		}

		function x_axis (args) {
		  'use strict';

		  var svg = mg_get_svg_child_of(args.target);
		  mg_add_processed_object(args);
		  mg_define_x_scale(args);

		  if (args.chart_type === 'point') {
		    mg_point_add_color_scale(args);
		    mg_point_add_size_scale(args);
		  }
		  mg_selectAll_and_remove(svg, '.mg-x-axis');

		  if (!args.x_axis) { return this; }
		  var g = mg_add_g(svg, 'mg-x-axis');

		  if (args.x_label) { mg_add_x_label(g, args); }

		  mg_add_x_ticks(g, args);
		  mg_add_x_tick_labels(g, args);

		  if (args.x_rug) { x_rug(args); }

		  return this;
		}

		MG.x_axis = x_axis;

		function x_axis_categorical (args) {
		  var svg = mg_get_svg_child_of(args.target);
		  var additional_buffer = 0;

		  if (args.chart_type === 'bar') { additional_buffer = args.buffer + 5; }

		  mg_add_categorical_scale(args, 'X', args.categorical_variables.reverse(), args.left, mg_get_plot_right(args) - additional_buffer);
		  mg_add_scale_function(args, 'xf', 'X', args.x_accessor);
		  mg_selectAll_and_remove(svg, '.mg-x-axis');

		  var g = mg_add_g(svg, 'mg-x-axis');

		  if (!args.x_axis) { return this; }

		  mg_add_x_axis_categorical_labels(g, args, additional_buffer);
		  return this;
		}

		function mg_add_x_axis_categorical_labels (g, args, additional_buffer) {
		  var labels = g.selectAll('text').data(args.categorical_variables).enter().append('svg:text');
		  labels.attr('x', function (d) {
		    return args.scales.X(d) + args.scales.X.rangeBand() / 2
		    + (args.buffer) * args.outer_padding_percentage + (additional_buffer / 2);
		  })
		    .attr('y', mg_get_plot_bottom(args))
		    .attr('dy', '.35em')
		    .attr('text-anchor', 'middle')
		    .text(String);

		  if (args.truncate_x_labels) {
		    labels.each(function (d, idx) {
		      var elem = this,
		        width = args.scales.X.rangeBand();
		      truncate_text(elem, d, width);
		    });
		  }
		  mg_rotate_labels(labels, args.rotate_x_labels);
		}

		MG.x_axis_categorical = x_axis_categorical;

		function mg_point_add_color_scale (args) {
		  var color_domain, color_range;

		  if (args.color_accessor !== null) {
		    color_domain = mg_get_color_domain(args);
		    color_range = mg_get_color_range(args);

		    if (args.color_type === 'number') {
		      args.scales.color = d3.scale.linear()
		        .domain(color_domain)
		        .range(color_range)
		        .clamp(true);
		    } else {
		      args.scales.color = args.color_range !== null
		        ? d3.scale.ordinal().range(color_range)
		        : (color_domain.length > 10
		          ? d3.scale.category20() : d3.scale.category10());

		      args.scales.color.domain(color_domain);
		    }
		    mg_add_scale_function(args, 'color', 'color', args.color_accessor);
		  }
		}

		function mg_get_color_domain (args) {
		  var color_domain;
		  if (args.color_domain === null) {
		    if (args.color_type === 'number') {
		      color_domain = d3.extent(args.data[0],function(d){return d[args.color_accessor];});
		    }
		    else if (args.color_type === 'category') {
		      color_domain = d3.set(args.data[0]
		        .map(function (d) { return d[args.color_accessor]; }))
		        .values();

		      color_domain.sort();
		    }
		  } else {
		    color_domain = args.color_domain;
		  }
		  return color_domain;
		}

		function mg_get_color_range (args) {
		  var color_range;
		  if (args.color_range === null) {
		    if (args.color_type === 'number') {
		      color_range = ['blue', 'red'];
		    } else {
		      color_range = null;
		    }
		  } else {
		    color_range = args.color_range;
		  }
		  return color_range;
		}

		function mg_point_add_size_scale (args) {
		  var min_size, max_size, size_domain, size_range;
		  if (args.size_accessor !== null) {
		    size_domain = mg_get_size_domain(args);
		    size_range = mg_get_size_range(args);

		    args.scales.size = d3.scale.linear()
		      .domain(size_domain)
		      .range(size_range)
		      .clamp(true);

		    mg_add_scale_function(args, 'size', 'size', args.size_accessor);
		  }
		}

		function mg_get_size_domain (args) {
		  return args.size_domain === null ?
		    d3.extent(args.data[0], function(d) { return d[args.size_accessor]; }) :
		    args.size_domain;
		}

		function mg_get_size_range (args) {
		  var size_range;
		  if (args.size_range === null) {
		    size_range = [1, 5]; // args.size_domain;
		  } else {
		    size_range = args.size_range;
		  }
		  return size_range;
		}

		function mg_add_x_label (g, args) {
		  g.append('text')
		    .attr('class', 'label')
		    .attr('x', function () {
		      return (args.left + args.width - args.right) / 2;
		    })
		    .attr('y', (args.height - args.bottom / 2).toFixed(2))
		    .attr('dy', '.50em')
		    .attr('text-anchor', 'middle')
		    .text(function (d) {
		      return args.x_label;
		    });
		}

		function mg_default_bar_xax_format (args) {
		  return function (f) {
		    if (f < 1.0) {
		      // don't scale tiny values
		      return args.xax_units + d3.round(f, args.decimals);
		    } else {
		      var pf = d3.formatPrefix(f);
		      return args.xax_units + pf.scale(f) + pf.symbol;
		    }
		  };
		}

		function mg_get_time_frame (diff) {
		  // diff should be (max_x - min_x) / 1000, in other words, the difference in seconds.
		  var time_frame;
		  if (mg_milisec_diff(diff)) {
		    time_frame = 'millis';
		  } else if ( mg_sec_diff(diff)) {
		    time_frame = 'seconds';
		  } else if (mg_day_diff(diff)) {
		    time_frame = 'less-than-a-day';
		  } else if (mg_four_days(diff)) {
		    time_frame = 'four-days';
		  } else if (mg_many_days(diff)) { /// a handful of months?
		    time_frame = 'many-days';
		  } else if (mg_many_months(diff)) {
		    time_frame = 'many-months';
		  } else if (mg_years(diff)) {
		    time_frame = 'years';
		  }else {
		    time_frame = 'default';
		  }
		  return time_frame;
		}

		function mg_milisec_diff       (diff) { return diff < 10; }
		function mg_sec_diff           (diff) { return diff < 60; }
		function mg_day_diff           (diff) { return diff / (60 * 60) <= 24; }
		function mg_four_days          (diff) { return diff / (60 * 60) <= 24 * 4; }
		function mg_many_days          (diff) { return diff / (60 * 60 * 24) <= 93; }
		function mg_many_months        (diff) { return diff / (60*60*24) < 365*2; }
		function mg_years              (diff) { return diff / (60*60*24) >= 365*2; }

		function mg_get_time_format (utc, diff) {
		  var main_time_format;
		         if ( mg_milisec_diff(diff) ) {
		    main_time_format = MG.time_format(utc, '%M:%S.%L');
		  } else if ( mg_sec_diff(diff) ) {
		    main_time_format = MG.time_format(utc, '%M:%S');

		  } else if ( mg_day_diff(diff) ) {
		    main_time_format = MG.time_format(utc, '%H:%M');

		  } else if ( mg_four_days(diff) ) {
		    main_time_format = MG.time_format(utc, '%H:%M');

		  } else if ( mg_many_days(diff) ) {
		    main_time_format = MG.time_format(utc, '%b %d');

		  } else if ( mg_many_months(diff) ) {
		    main_time_format = MG.time_format(utc, '%b');
		  } else {
		    main_time_format = MG.time_format(utc, '%Y');

		  }
		  return main_time_format;
		}

		function mg_process_time_format (args) {
		  var diff;
		  var main_time_format;
		  var time_frame;

		  if (args.time_series) {
		    diff = (args.processed.max_x - args.processed.min_x) / 1000;
		    time_frame = mg_get_time_frame(diff);
		    main_time_format = mg_get_time_format(args.utc_time, diff);
		  }

		  args.processed.main_x_time_format = main_time_format;
		  args.processed.x_time_frame = time_frame;
		}

		function mg_default_xax_format (args) {
		  if (args.xax_format) {
		    return args.xax_format;
		  }
		  var data = args.processed.original_data || args.data;
		  var test_point = mg_flatten_array(data)[0][args.processed.original_x_accessor || args.x_accessor];
		  return function (d) {
		    mg_process_time_format(args);
		    var pf = d3.formatPrefix(d);
		    if (test_point instanceof Date) {
		      return args.processed.main_x_time_format(new Date(d));
		    } else if (typeof test_point === 'number') {
		      if (d < 1.0) {
		        // don't scale tiny values
		        return args.xax_units + d3.round(d, args.decimals);
		      } else {
		        pf = d3.formatPrefix(d);
		        return args.xax_units + pf.scale(d) + pf.symbol;
		      }
		    } else {
		      return d;
		    }
		  };
		}

		function mg_add_x_ticks (g, args) {
		  if (args.chart_type !== 'bar' && !args.y_extended_ticks) {
		    mg_add_x_axis_rim(args, g);
		    mg_add_x_axis_tick_lines(args, g);
		  }

		}

		function mg_add_x_axis_rim (args, g) {
		  var last_i = args.scales.X.ticks(args.xax_count).length - 1;
		  if (!args.x_extended_ticks) {
		    g.append('line')
		      .attr('x1', function () {
		        if (args.xax_count === 0) {
		          return mg_get_plot_left(args);
		        } else if (args.axes_not_compact && args.chart_type !== 'bar') {
		          return args.left;
		        } else {
		          return (args.scales.X(args.scales.X.ticks(args.xax_count)[0])).toFixed(2);
		        }
		      })
		      .attr('x2', function () {
		        if (args.xax_count === 0 || (args.axes_not_compact && args.chart_type !== 'bar')) {
		          return mg_get_plot_right(args);
		        } else {
		          return args.scales.X(args.scales.X.ticks(args.xax_count)[last_i]).toFixed(2);
		        }
		      })
		      .attr('y1', args.height - args.bottom)
		      .attr('y2', args.height - args.bottom);
		  }
		}

		function mg_add_x_axis_tick_lines (args, g) {
		  var ticks = args.scales.X.ticks(args.xax_count);
		  g.selectAll('.mg-xax-ticks')
		    .data(ticks).enter()
		    .append('line')
		    .attr('x1', function (d) { return args.scales.X(d).toFixed(2); })
		    .attr('x2', function (d) { return args.scales.X(d).toFixed(2); })
		    .attr('y1', args.height - args.bottom)
		    .attr('y2', function () {
		      return (args.x_extended_ticks)
		        ? args.top
		        : args.height - args.bottom + args.xax_tick_length;
		    })
		    .attr('class', function () {
		      if (args.x_extended_ticks) {
		        return 'mg-extended-x-ticks';
		      }
		    })
		    .classed('mg-xax-ticks', true);
		}

		function mg_add_x_tick_labels (g, args) {
		  mg_add_primary_x_axis_label(args, g);
		  mg_add_secondary_x_axis_label(args, g);

		}

		function mg_add_primary_x_axis_label (args, g) {
		  var ticks = args.scales.X.ticks(args.xax_count);
		  var labels = g.selectAll('.mg-xax-labels')
		    .data(ticks).enter()
		    .append('text')
		    .attr('x', function (d) { return args.scales.X(d).toFixed(2); })
		    .attr('y', (args.height - args.bottom + args.xax_tick_length * 7 / 3).toFixed(2))
		    .attr('dy', '.50em')
		    .attr('text-anchor', 'middle');

		  if (args.time_series && args.european_clock) {
		    labels.append('tspan').classed('mg-european-hours', true).text(function (_d, i) {
		      var d = new Date(_d);
		      if (i === 0) return d3.time.format('%H')(d);
		      else return '';
		    });
		    labels.append('tspan').classed('mg-european-minutes-seconds', true).text(function (_d, i) {
		      var d = new Date(_d);
		      return ':' + args.processed.xax_format(d);
		    });
		  } else {
		    labels.text(function (d) {
		      return args.xax_units + args.processed.xax_format(d);
		    });
		  }
		  // CHECK TO SEE IF OVERLAP for labels. If so,
		  // remove half of them. This is a dirty hack.
		  // We will need to figure out a more principled way of doing this.
		  if (mg_elements_are_overlapping(labels)) {
		    labels.filter(function(d,i) {
		      return (i+1) % 2 === 0;
		    }).remove();

		    var svg = mg_get_svg_child_of(args.target);
		    svg.selectAll('.mg-xax-ticks').filter(function(d,i){ return (i+1) % 2 === 0; })
		      .remove();
		  }
		}

		function mg_add_secondary_x_axis_label (args, g) {
		  if (args.time_series && (args.show_years || args.show_secondary_x_label)) {
		    var tf = mg_get_yformat_and_secondary_time_function(args);
		    mg_add_secondary_x_axis_elements(args, g, tf.timeframe, tf.yformat, tf.secondary);
		  }
		}

		function mg_get_yformat_and_secondary_time_function (args) {
		  var tf = {};
		  tf.timeframe = args.processed.x_time_frame;
		  switch (tf.timeframe) {
		    case 'millis':
		    case 'seconds':
		      tf.secondary = d3.time.days;
		      if (args.european_clock) tf.yformat = MG.time_format(args.utc_time, '%b %d');
		      else tf.yformat = MG.time_format(args.utc_time, '%I %p');
		      break;
		    case 'less-than-a-day':
		      tf.secondary = d3.time.days;
		      tf.yformat = MG.time_format(args.utc_time, '%b %d');
		      break;
		    case 'four-days':
		      tf.secondary = d3.time.days;
		      tf.yformat = MG.time_format(args.utc_time, '%b %d');
		      break;
		    case 'many-days':
		      tf.secondary = d3.time.years;
		      tf.yformat = MG.time_format(args.utc_time, '%Y');
		      break;
		    case 'many-months':
		      tf.secondary = d3.time.years;
		      tf.yformat = MG.time_format(args.utc_time, '%Y');
		      break;
		    default:
		      tf.secondary = d3.time.years;
		      tf.yformat = MG.time_format(args.utc_time, '%Y');
		  }
		  return tf;
		}

		function mg_add_secondary_x_axis_elements (args, g, time_frame, yformat, secondary_function) {
		  var years = secondary_function(args.processed.min_x, args.processed.max_x);
		  if (years.length === 0) {
		    var first_tick = args.scales.X.ticks(args.xax_count)[0];
		    years = [first_tick];
		  }

		  var yg = mg_add_g(g, 'mg-year-marker');
		  if (time_frame === 'default' && args.show_year_markers) {
		    mg_add_year_marker_line(args, yg, years, yformat);
		  }
		  if (time_frame != 'years') mg_add_year_marker_text(args, yg, years, yformat);
		}

		function mg_add_year_marker_line (args, g, years, yformat) {
		  g.selectAll('.mg-year-marker')
		    .data(years).enter()
		    .append('line')
		    .attr('x1', function (d) { return args.scales.X(d).toFixed(2); })
		    .attr('x2', function (d) { return args.scales.X(d).toFixed(2); })
		    .attr('y1', mg_get_top(args))
		    .attr('y2', mg_get_bottom(args));
		}

		function mg_add_year_marker_text (args, g, years, yformat) {
		  g.selectAll('.mg-year-marker')
		    .data(years).enter()
		    .append('text')
		    .attr('x', function (d, i) {
		      return args.scales.X(d).toFixed(2);
		    })
		    .attr('y', function () {
		      var xAxisTextElement = d3.select(args.target)
		        .select('.mg-x-axis text').node().getBoundingClientRect();
		      return (mg_get_bottom(args) + args.xax_tick_length * 7 / 3) + (xAxisTextElement.height * 0.8);
		    })
		    .attr('dy', '.50em')
		    .attr('text-anchor', 'middle')
		    .text(function (d) {
		      return yformat(new Date(d));
		    });
		}

		function mg_min_max_x_for_nonbars (mx, args, data) {
		  var extent_x = d3.extent(data, function (d) { return d[args.x_accessor]; });
		  mx.min = extent_x[0];
		  mx.max = extent_x[1];
		}

		function mg_min_max_x_for_bars (mx, args, data) {
		  mx.min = 0;
		  mx.max = d3.max(data, function (d) {
		    var trio = [
		      d[args.x_accessor],
		      (d[args.baseline_accessor]) ? d[args.baseline_accessor] : 0,
		      (d[args.predictor_accessor]) ? d[args.predictor_accessor] : 0
		    ];
		    return Math.max.apply(null, trio);
		  });
		}

		function mg_min_max_x_for_dates (mx) {
		  var yesterday = MG.clone(mx.min).setDate(mx.min.getDate() - 1);
		  var tomorrow = MG.clone(mx.min).setDate(mx.min.getDate() + 1);
		  mx.min = yesterday;
		  mx.max = tomorrow;
		}

		function mg_min_max_x_for_numbers (mx) {
		  // this seems silly. I envision a problem with something this simplistic.
		  mx.min = mx.min - 1;
		  mx.max = mx.max + 1;
		}

		function mg_min_max_x_for_strings (mx) {
		  // ok. Not sure who wrote this, but this seems also pretty silly. We
		  // should not be allowing strings here to be coerced into numbers. Veto.
		  mx.min = Number(mx.min) - 1;
		  mx.max = Number(mx.max) + 1;
		}

		function mg_force_xax_count_to_be_two (args) {
		  args.xax_count = 2;
		}

		function mg_sort_through_data_type_and_set_x_min_max_accordingly (mx, args, data) {
		  if (args.chart_type === 'line' || args.chart_type === 'point' || args.chart_type === 'histogram') {
		    mg_min_max_x_for_nonbars(mx, args, data);

		  } else if (args.chart_type === 'bar') {
		    mg_min_max_x_for_bars(mx, args, data);
		  }
		  // if data set is of length 1, expand the range so that we can build the x-axis
		  if (mx.min === mx.max && !(args.min_x && args.max_x)) {
		    if (mx.min instanceof Date) {
		      mg_min_max_x_for_dates(mx);
		    } else if (typeof min_x === 'number') {
		      mg_min_max_x_for_numbers(mx);
		    } else if (typeof min_x === 'string') {
		      mg_min_max_x_for_strings(mx);
		    }
		    // force xax_count to be 2
		    mg_force_xax_count_to_be_two(args);
		  }
		}

		function mg_find_min_max_x_from_data (args) {
		  var all_data = mg_flatten_array(args.data);
		  var mx = {};
		  mg_sort_through_data_type_and_set_x_min_max_accordingly(mx, args, all_data);
		  mx.min = args.min_x || mx.min;
		  mx.max = args.max_x || mx.max;
		  args.x_axis_negative = false;
		  args.processed.min_x = mx.min;
		  args.processed.max_x = mx.max;
		}

		function mg_find_min_max_x (args) {
		  mg_find_min_max_x_from_data(args);
		  mg_select_xax_format(args);
		  MG.call_hook('x_axis.process_min_max', args, args.processed.min_x, args.processed.max_x);
		  if (!args.time_series) {
		    if (args.processed.min_x < 0) {
		      args.processed.min_x = args.processed.min_x - (args.processed.max_x * (args.inflator - 1));
		      args.x_axis_negative = true;
		    }
		  }

		  if (args.chart_type === 'bar') {
		    args.additional_buffer = args.buffer * 5;
		  } else {
		    args.additional_buffer = 0;
		  }
		}

		function mg_select_xax_format (args) {
		  var c = args.chart_type;

		  if (!args.processed.xax_format) {
		    if (args.xax_format) {
		      args.processed.xax_format = args.xax_format;
		    } else {
		      if (c === 'line' || c === 'point' || c === 'histogram') {
		        args.processed.xax_format = mg_default_xax_format(args);
		      } else if (c === 'bar') {
		        args.processed.xax_format = mg_default_bar_xax_format(args);
		      }
		    }
		  }
		}

		function mg_merge_args_with_defaults (args) {
		  var defaults = {
		    target: null,
		    title: null,
		    description: null
		  };
		  if (!args) { args = {}; }

		  if (!args.processed) {
		    args.processed = {};
		  }

		  args = merge_with_defaults(args, defaults);
		  return args;
		}

		function mg_is_time_series (args) {
		  var first_elem = mg_flatten_array(args.processed.original_data || args.data)[0];
		  args.time_series = first_elem[args.processed.original_x_accessor || args.x_accessor] instanceof Date;
		}

		function mg_init_compute_width (args) {
		  var svg_width = args.width;
		  // are we setting the aspect ratio?
		  if (args.full_width) {
		    // get parent element
		    svg_width = get_width(args.target);
		  }
		  args.width = svg_width;
		}

		function mg_init_compute_height (args) {
		  var svg_height = args.height;
		  if (args.full_height) {
		    svg_height = get_height(args.target);
		  }

		  if (args.chart_type === 'bar' && svg_height === null) {
		    svg_height = args.height = args.data[0].length * args.bar_height + args.top + args.bottom;
		  }

		  args.height = svg_height;
		}

		function mg_remove_svg_if_chart_type_has_changed (svg, args) {
		  if ((!svg.selectAll('.mg-main-line').empty() && args.chart_type !== 'line') ||
		    (!svg.selectAll('.mg-points').empty() && args.chart_type !== 'point') ||
		    (!svg.selectAll('.mg-histogram').empty() && args.chart_type !== 'histogram') ||
		    (!svg.selectAll('.mg-barplot').empty() && args.chart_type !== 'bar')
		  ) {
		    svg.remove();
		  }
		}

		function mg_add_svg_if_it_doesnt_exist (svg, args) {
		  if (mg_get_svg_child_of(args.target).empty()) {
		    svg = d3.select(args.target)
		      .append('svg')
		      .classed('linked', args.linked)
		      .attr('width', args.width)
		      .attr('height', args.height);
		  }
		  return svg;
		}

		function mg_add_clip_path_for_plot_area (svg, args) {
		  svg.selectAll('.mg-clip-path').remove();
		  svg.append('defs')
		    .attr('class', 'mg-clip-path')
		    .append('clipPath')
		    .attr('id', 'mg-plot-window-' + mg_target_ref(args.target))
		    .append('svg:rect')
		    .attr('x', args.left)
		    .attr('y', args.top)
		    .attr('width', args.width - args.left - args.right - args.buffer)
		    .attr('height', args.height - args.top - args.bottom - args.buffer + 1);
		}

		function mg_adjust_width_and_height_if_changed (svg, args) {
		  if (args.width !== Number(svg.attr('width'))) {
		    svg.attr('width', args.width);
		  }
		  if (args.height !== Number(svg.attr('height'))) {
		    svg.attr('height', args.height);
		  }
		}

		function mg_set_viewbox_for_scaling (svg, args) {
		  // we need to reconsider how we handle automatic scaling
		  svg.attr('viewBox', '0 0 ' + args.width + ' ' + args.height);
		  if (args.full_width || args.full_height) {
		    svg.attr('preserveAspectRatio', 'xMinYMin meet');
		  }
		}

		function mg_remove_missing_classes_and_text (svg) {
		  // remove missing class
		  svg.classed('mg-missing', false);

		  // remove missing text
		  svg.selectAll('.mg-missing-text').remove();
		  svg.selectAll('.mg-missing-pane').remove();
		}

		function mg_remove_outdated_lines (svg, args) {
		  // if we're updating an existing chart and we have fewer lines than
		  // before, remove the outdated lines, e.g. if we had 3 lines, and we're calling
		  // data_graphic() on the same target with 2 lines, remove the 3rd line

		  var i = 0;
		  if (svg.selectAll('.mg-main-line')[0].length >= args.data.length) {
		    // now, the thing is we can't just remove, say, line3 if we have a custom
		    // line-color map, instead, see which are the lines to be removed, and delete those
		    if (args.custom_line_color_map.length > 0) {
		      var array_full_series = function (len) {
		        var arr = new Array(len);
		        for (var i = 0; i < arr.length; i++) { arr[i] = i + 1; }
		        return arr;
		      };

		      // get an array of lines ids to remove
		      var lines_to_remove = arr_diff(
		        array_full_series(args.max_data_size),
		        args.custom_line_color_map);

		      for (i = 0; i < lines_to_remove.length; i++) {
		        svg.selectAll('.mg-main-line.mg-line' + lines_to_remove[i] + '-color')
		          .remove();
		      }
		    } else {
		      // if we don't have a custom line-color map, just remove the lines from the end

		      var num_of_new = args.data.length;
		      var num_of_existing = svg.selectAll('.mg-main-line')[0].length;

		      for (i = num_of_existing; i > num_of_new; i--) {
		        svg.selectAll('.mg-main-line.mg-line' + i + '-color')
		          .remove();
		      }
		    }
		  }
		}

		function mg_raise_container_error(container, args){
		  if (container.empty()) {
		    console.warn('The specified target element "' + args.target + '" could not be found in the page. The chart will not be rendered.');
		    return;
		  }
		}

		function init (args) {
		  'use strict';
		  args = arguments[0];
		  args = mg_merge_args_with_defaults(args);
		  // If you pass in a dom element for args.target, the expectation
		  // of a string elsewhere will break.
		  var container = d3.select(args.target);
		  mg_raise_container_error(container, args);

		  var svg = container.selectAll('svg');

		  mg_is_time_series(args);
		  mg_init_compute_width(args);
		  mg_init_compute_height(args);

		  mg_remove_svg_if_chart_type_has_changed(svg, args);
		  svg = mg_add_svg_if_it_doesnt_exist(svg, args);

		  mg_add_clip_path_for_plot_area(svg, args);
		  mg_adjust_width_and_height_if_changed(svg, args);
		  mg_set_viewbox_for_scaling(svg, args);
		  mg_remove_missing_classes_and_text(svg);
		  chart_title(args);
		  mg_remove_outdated_lines(svg, args);

		  return this;
		}

		MG.init = init;

		function mg_return_label (d) {
		  return d.label;
		}

		function mg_remove_existing_markers (svg) {
		  svg.selectAll('.mg-markers').remove();
		  svg.selectAll('.mg-baselines').remove();
		}

		function mg_in_range (args) {
		  return function (d) {
		    return (args.scales.X(d[args.x_accessor]) > mg_get_plot_left(args))
		    && (args.scales.X(d[args.x_accessor]) < mg_get_plot_right(args));
		  };
		}

		function mg_x_position (args) {
		  return function (d) {
		    return args.scales.X(d[args.x_accessor]);
		  };
		}

		function mg_x_position_fixed (args) {
		  var _mg_x_pos = mg_x_position(args);
		  return function (d) {
		    return _mg_x_pos(d).toFixed(2);
		  };
		}

		function mg_y_position_fixed (args) {
		  var _mg_y_pos = args.scales.Y;
		  return function (d) {
		    return _mg_y_pos(d.value).toFixed(2);
		  };
		}

		function mg_place_annotations(checker, class_name, args, svg, line_fcn, text_fcn){
		    var g;
		    if (checker) {
		        g = svg.append('g').attr('class', class_name);
		        line_fcn(g, args);
		        text_fcn(g, args);
		    }
		}

		function mg_place_markers (args, svg) {
		  mg_place_annotations(args.markers, 'mg-markers', args, svg, mg_place_marker_lines, mg_place_marker_text);
		}

		function mg_place_baselines (args, svg) {
		  mg_place_annotations(args.baselines, 'mg-baselines', args, svg, mg_place_baseline_lines, mg_place_baseline_text);   
		}

		function mg_place_marker_lines (gm, args) {
		  var x_pos_fixed = mg_x_position_fixed(args);
		  gm.selectAll('.mg-markers')
		    .data(args.markers.filter(mg_in_range(args)))
		    .enter()
		    .append('line')
		    .attr('x1', x_pos_fixed)
		    .attr('x2', x_pos_fixed)
		    .attr('y1', args.top)
		    .attr('y2', mg_get_plot_bottom(args))
		    .attr('class', function (d) {
		      return d.lineclass;
		    })
		    .attr('stroke-dasharray', '3,1');
		}

		function mg_place_marker_text (gm, args) {
		  gm.selectAll('.mg-markers')
		    .data(args.markers.filter(mg_in_range(args)))
		    .enter()
		    .append('text')
		    .attr('class', function (d) { return d.textclass || ''; })
		    .classed('mg-marker-text', true)
		    .attr('x', mg_x_position(args))
		    .attr('y', args.top * 0.95)
		    .attr('text-anchor', 'middle')
		    .text(mg_return_label)
		    .each(function (d) {
		      if (d.click) d3.select(this).style('cursor', 'pointer').on('click', d.click);
		    });
		  mg_prevent_horizontal_overlap(gm.selectAll('.mg-marker-text')[0], args);
		}

		function mg_place_baseline_lines (gb, args) {
		  var y_pos = mg_y_position_fixed(args);
		  gb.selectAll('.mg-baselines')
		    .data(args.baselines)
		    .enter().append('line')
		    .attr('x1', mg_get_plot_left(args))
		    .attr('x2', mg_get_plot_right(args))
		    .attr('y1', y_pos)
		    .attr('y2', y_pos);
		}

		function mg_place_baseline_text (gb, args) {
		  var y_pos = mg_y_position_fixed(args);
		  gb.selectAll('.mg-baselines')
		    .data(args.baselines)
		    .enter().append('text')
		    .attr('x', mg_get_plot_right(args))
		    .attr('y', y_pos)
		    .attr('dy', -3)
		    .attr('text-anchor', 'end')
		    .text(mg_return_label);
		}

		function markers (args) {
		  'use strict';
		  var svg = mg_get_svg_child_of(args.target);
		  mg_remove_existing_markers(svg);
		  mg_place_markers(args, svg);
		  mg_place_baselines(args, svg);
		  return this;
		}

		MG.markers = markers;

		function mouseover_tspan (svg, text) {
		  var tspan = '';
		  var cl = null;
		  if (arguments.length === 3) cl = arguments[2];
		  tspan = svg.append('tspan').text(text);
		  if (cl !== null) tspan.classed(cl, true);

		  return (function () {
		    this.tspan = tspan;

		    this.bold = function () {
		      this.tspan.attr('font-weight', 'bold');
		      return this;
		    };
		    this.color = function (args, d) {
		      if (args.chart_type === 'line') {
		        this.tspan.classed('mg-hover-line' + d.line_id + '-color', args.colors === null)
		          .attr('stroke', args.colors === null ? '' : args.colors[d.line_id - 1]);
		      } else if (args.chart_type === 'point') {
		        if (args.color_accessor !== null) {
		          this.tspan.attr('fill', args.scalefns.color(d));
		          this.tspan.attr('stroke', args.scalefns.color(d));
		        } else {
		          this.tspan.classed('mg-points-mono', true);
		        }
		      }
		    };
		    this.x = function (x) {
		      this.tspan.attr('x', x);
		      return this;
		    };
		    this.y = function (y) {
		      this.tspan.attr('y', y);
		      return this;
		    };
		    this.elem = function () {
		      return this.tspan;
		    };
		    return this;
		  })();
		}

		function mg_reset_active_datapoint_text (svg) {
		  var textContainer = svg.select('.mg-active-datapoint');
		  textContainer
		    .selectAll('*')
		    .remove();
		  return textContainer;
		}

		function mg_format_aggregate_rollover_text (args, svg, textContainer, formatted_x, formatted_y, num, fmt, d, i) {
		  var lineCount = 0;
		  var lineHeight = 1.1;
		  if (args.time_series) {
		    mg_append_aggregate_rollover_timeseries(args, textContainer, formatted_x, d, num);
		  } else {
		    mg_append_aggregate_rollover_text(args, textContainer, formatted_x, d, num);
		  }

		  // append an blank (&nbsp;) line to mdash positioning
		  mouseover_tspan(textContainer, '\u00A0').x(0).y((lineCount * lineHeight) + 'em');
		}

		function mg_append_aggregate_rollover_timeseries (args, textContainer, formatted_x, d, num) {
		  var lineCount = 0;
		  var lineHeight = 1.1;
		  var formatted_y;

		  mouseover_tspan(textContainer, formatted_x.trim());

		  lineCount = 1;
		  var sub_container;
		  d.values.forEach(function (datum) {
		    sub_container = textContainer.append('tspan').attr('x', 0).attr('y', (lineCount * lineHeight) + 'em');
		    formatted_y = mg_format_y_rollover(args, num, datum);
		    mouseover_tspan(sub_container, '\u2014  ')
		      .color(args, datum);
		    mouseover_tspan(sub_container, formatted_y);

		    lineCount++;
		  });
		  // necessary blank line.
		  mouseover_tspan(textContainer, '\u00A0').x(0).y((lineCount * lineHeight) + 'em');
		}

		function mg_append_aggregate_rollover_text (args, textContainer, formatted_x, d, num) {
		  var lineCount = 0;
		  var lineHeight = 1.1;
		  d.values.forEach(function (datum) {
		    formatted_y = mg_format_y_rollover(args, num, datum);

		    if (args.y_rollover_format !== null) {
		      formatted_y = number_rollover_format(args.y_rollover_format, datum, args.y_accessor);
		    } else {
		      formatted_y = args.yax_units + num(datum[args.y_accessor]);
		    }

		    sub_container = textContainer.append('tspan').attr('x', 0).attr('y', (lineCount * lineHeight) + 'em');
		    formatted_y = mg_format_y_rollover(args, num, datum);
		    mouseover_tspan(sub_container, '\u2014  ')
		      .color(args, datum);
		    mouseover_tspan(sub_container, formatted_x + ' ' + formatted_y);

		    lineCount++;
		  });
		}

		function mg_update_rollover_text (args, svg, fmt, shape, d, i) {
		  var num = format_rollover_number(args);
		  var textContainer = mg_reset_active_datapoint_text(svg);
		  var formatted_y = mg_format_y_rollover(args, num, d);
		  var formatted_x = mg_format_x_rollover(args, fmt, d);

		  // rollover text when aggregate_rollover is enabled
		  if (args.aggregate_rollover && args.data.length > 1) {
		    mg_format_aggregate_rollover_text(args, svg, textContainer, formatted_x, formatted_y, num, fmt, d, i);

		  } else {
		    // rollover text when aggregate_rollover is not enabled
		    if (args.time_series) textContainer.select('*').remove();

		    // label.
		    if (args.legend || args.label_accessor) {
		      mouseover_tspan(textContainer,
		        args.chart_type === 'line' ? args.legend[d.line_id - 1] + '  ' : d[args.label_accessor] + '  ')
		        .color(args, d);
		    }

		    // shape to accompany rollover.
		    if (args.data.length > 1 || args.chart_type === 'point') {
		      mouseover_tspan(textContainer, shape + '  ').color(args, d);
		    }
		    // rollover text.
		    mouseover_tspan(textContainer, formatted_x, args.time_series ? 'mg-x-rollover-text' : null);
		    mouseover_tspan(textContainer, formatted_y, args.time_series ? 'mg-y-rollover-text' : null);
		  }
		}

		function mg_window_listeners(args) {
		  mg_if_aspect_ratio_resize_svg(args);
		}

		function mg_if_aspect_ratio_resize_svg(args) {
		  // have we asked the svg to fill a div, if so resize with div
		  if (args.full_width || args.full_height) {
		    if (window.onresize === null) {
		      window.onresize = window_listener;
		    }
		  }

		  function window_listener() {
		    var svg = d3.select(args.target).select('svg');

		    var aspect = svg.attr('width') !== 0
		        ? (svg.attr('height') / svg.attr('width'))
		        : 0;

		    var newWidth = get_width(args.target);

		    svg.attr('width', newWidth);
		    svg.attr('height', aspect * newWidth);
		  }
		}

		if (typeof jQuery !== 'undefined') {
		    /*!
		     * Bootstrap v3.3.1 (http://getbootstrap.com)
		     * Copyright 2011-2014 Twitter, Inc.
		     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		     */

		    /*!
		     * Generated using the Bootstrap Customizer (http://getbootstrap.com/customize/?id=c3834cc5b59ef727da53)
		     * Config saved to config.json and https://gist.github.com/c3834cc5b59ef727da53
		     */

		    /* ========================================================================
		     * Bootstrap: dropdown.js v3.3.1
		     * http://getbootstrap.com/javascript/#dropdowns
		     * ========================================================================
		     * Copyright 2011-2014 Twitter, Inc.
		     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
		     * ======================================================================== */


		    +function ($) {
		      'use strict';

		      if(typeof $().dropdown == 'function')
		        return true;

		      // DROPDOWN CLASS DEFINITION
		      // =========================

		      var backdrop = '.dropdown-backdrop';
		      var toggle   = '[data-toggle="dropdown"]';
		      var Dropdown = function (element) {
		        $(element).on('click.bs.dropdown', this.toggle);
		      };

		      Dropdown.VERSION = '3.3.1';

		      Dropdown.prototype.toggle = function (e) {
		        var $this = $(this);

		        if ($this.is('.disabled, :disabled')) return;

		        var $parent  = getParent($this);
		        var isActive = $parent.hasClass('open');

		        clearMenus();

		        if (!isActive) {
		          if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
		            // if mobile we use a backdrop because click events don't delegate
		            $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus);
		          }

		          var relatedTarget = { relatedTarget: this };
		          $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));

		          if (e.isDefaultPrevented()) return;

		          $this
		            .trigger('focus')
		            .attr('aria-expanded', 'true');

		          $parent
		            .toggleClass('open')
		            .trigger('shown.bs.dropdown', relatedTarget);
		        }

		        return false;
		      };

		      Dropdown.prototype.keydown = function (e) {
		        if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;

		        var $this = $(this);

		        e.preventDefault();
		        e.stopPropagation();

		        if ($this.is('.disabled, :disabled')) return;

		        var $parent  = getParent($this);
		        var isActive = $parent.hasClass('open');

		        if ((!isActive && e.which != 27) || (isActive && e.which == 27)) {
		          if (e.which == 27) $parent.find(toggle).trigger('focus');
		          return $this.trigger('click');
		        }

		        var desc = ' li:not(.divider):visible a';
		        var $items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc);

		        if (!$items.length) return;

		        var index = $items.index(e.target);

		        if (e.which == 38 && index > 0)                 index--;                        // up
		        if (e.which == 40 && index < $items.length - 1) index++;                        // down
		        if (!~index)                                      index = 0;

		        $items.eq(index).trigger('focus');
		      };

		      function clearMenus(e) {
		        if (e && e.which === 3) return;
		        $(backdrop).remove();
		        $(toggle).each(function () {
		          var $this         = $(this);
		          var $parent       = getParent($this);
		          var relatedTarget = { relatedTarget: this };

		          if (!$parent.hasClass('open')) return;

		          $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));

		          if (e.isDefaultPrevented()) return;

		          $this.attr('aria-expanded', 'false');
		          $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget);
		        });
		      }

		      function getParent($this) {
		        var selector = $this.attr('data-target');

		        if (!selector) {
		          selector = $this.attr('href');
		          selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
		        }

		        var $parent = selector && $(selector);

		        return $parent && $parent.length ? $parent : $this.parent();
		      }


		      // DROPDOWN PLUGIN DEFINITION
		      // ==========================

		      function Plugin(option) {
		        return this.each(function () {
		          var $this = $(this);
		          var data  = $this.data('bs.dropdown');

		          if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)));
		          if (typeof option == 'string') data[option].call($this);
		        });
		      }

		      var old = $.fn.dropdown;

		      $.fn.dropdown             = Plugin;
		      $.fn.dropdown.Constructor = Dropdown;


		      // DROPDOWN NO CONFLICT
		      // ====================

		      $.fn.dropdown.noConflict = function () {
		        $.fn.dropdown = old;
		        return this;
		      };


		      // APPLY TO STANDARD DROPDOWN ELEMENTS
		      // ===================================

		      $(document)
		        .on('click.bs.dropdown.data-api', clearMenus)
		        .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation(); })
		        .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
		        .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
		        .on('keydown.bs.dropdown.data-api', '[role="menu"]', Dropdown.prototype.keydown)
		        .on('keydown.bs.dropdown.data-api', '[role="listbox"]', Dropdown.prototype.keydown);

		    }(jQuery);
		}
		MG.button_layout = function(target) {
		  'use strict';
		  this.target = target;
		  this.feature_set = {};
		  this.public_name = {};
		  this.sorters = {};
		  this.manual = [];
		  this.manual_map = {};
		  this.manual_callback = {};

		  this._strip_punctuation = function(s) {
		    var punctuationless = s.replace(/[^a-zA-Z0-9 _]+/g, '');
		    var finalString = punctuationless.replace(/ +?/g, '');
		    return finalString;
		  };

		  this.data = function(data) {
		    this._data = data;
		    return this;
		  };

		  this.manual_button = function(feature, feature_set, callback) {
		    this.feature_set[feature]=feature_set;
		    this.manual_map[this._strip_punctuation(feature)] = feature;
		    this.manual_callback[feature]=callback;// the default is going to be the first feature.
		    return this;
		  };

		  this.button = function(feature) {
		    if (arguments.length > 1) {
		      this.public_name[feature] = arguments[1];
		    }

		    if (arguments.length > 2) {
		      this.sorters[feature] = arguments[2];
		    }

		    this.feature_set[feature] = [];
		    return this;
		  };

		  this.callback = function(callback) {
		    this._callback = callback;
		    return this;
		  };

		  this.display = function() {
		    var callback = this._callback;
		    var manual_callback = this.manual_callback;
		    var manual_map = this.manual_map;

		    var d,f, features, feat;
		    features = Object.keys(this.feature_set);

		    var mapDtoF = function(f) { return d[f]; };

		    var i;

		    // build out this.feature_set with this.data
		    for (i = 0; i < this._data.length; i++) {
		      d = this._data[i];
		      f = features.map(mapDtoF);
		      for (var j = 0; j < features.length; j++) {
		        feat = features[j];
		        if (this.feature_set[feat].indexOf(f[j]) === -1) {
		          this.feature_set[feat].push(f[j]);
		        }
		      }
		    }

		    for (feat in this.feature_set) {
		      if (this.sorters.hasOwnProperty(feat)) {
		        this.feature_set[feat].sort(this.sorters[feat]);
		      }
		    }

		    $(this.target).empty();

		    $(this.target).append("<div class='col-lg-12 segments text-center'></div>");

		    var dropdownLiAClick = function() {
		      var k = $(this).data('key');
		      var feature = $(this).data('feature');
		      var manual_feature;
		      $('.' + feature + '-btns button.btn span.title').html(k);
		      if (!manual_map.hasOwnProperty(feature)) {
		        callback(feature, k);
		      } else {
		        manual_feature = manual_map[feature];
		        manual_callback[manual_feature](k);
		      }

		      return false;
		    };

		    for (var feature in this.feature_set) {
		      features = this.feature_set[feature];
		      $(this.target + ' div.segments').append(
		          '<div class="btn-group '+this._strip_punctuation(feature)+'-btns text-left">' + // This never changes.
		          '<button type="button" class="btn btn-default btn-lg dropdown-toggle" data-toggle="dropdown">' +
		            "<span class='which-button'>" + (this.public_name.hasOwnProperty(feature) ? this.public_name[feature] : feature) +"</span>" +
		            "<span class='title'>" + (this.manual_callback.hasOwnProperty(feature) ? this.feature_set[feature][0] : 'all') +  "</span>" + // if a manual button, don't default to all in label.
		            '<span class="caret"></span>' +
		          '</button>' +
		          '<ul class="dropdown-menu" role="menu">' +
		            (!this.manual_callback.hasOwnProperty(feature) ? '<li><a href="#" data-feature="'+feature+'" data-key="all">All</a></li>' : "") +
		            (!this.manual_callback.hasOwnProperty(feature) ? '<li class="divider"></li>' : "") +
		          '</ul>'
		        + '</div>');

		      for (i = 0; i < features.length; i++) {
		        if (features[i] !== 'all' && features[i] !== undefined) { // strange bug with undefined being added to manual buttons.
		          $(this.target + ' div.' + this._strip_punctuation(feature) + '-btns ul.dropdown-menu').append(
		            '<li><a href="#" data-feature="' + this._strip_punctuation(feature) + '" data-key="' + features[i] + '">'
		              + features[i] + '</a></li>'
		          );
		        }
		      }

		      $('.' + this._strip_punctuation(feature) + '-btns .dropdown-menu li a').on('click', dropdownLiAClick);
		    }

		    return this;
		  };

		  return this;
		};

		(function () {
		  'use strict';

		  function mg_line_graph_generators (args, plot, svg) {
		    mg_add_line_generator(args, plot);
		    mg_add_area_generator(args, plot);
		    mg_add_flat_line_generator(args, plot);
		    mg_add_confidence_band_generator(args, plot, svg);
		  }

		  function mg_add_confidence_band_generator (args, plot, svg) {
		    plot.existing_band = svg.selectAll('.mg-confidence-band');
		    if (args.show_confidence_band) {
		      plot.confidence_area = d3.svg.area()
		        .defined(plot.line.defined())
		        .x(args.scalefns.xf)
		        .y0(function (d) {
		          var l = args.show_confidence_band[0];
		          return args.scales.Y(d[l]);
		        })
		        .y1(function (d) {
		          var u = args.show_confidence_band[1];
		          return args.scales.Y(d[u]);
		        })
		        .interpolate(args.interpolate)
		        .tension(args.interpolate_tension);
		    }
		  }

		  function mg_add_area_generator (args, plot) {
		    plot.area = d3.svg.area()
		      .defined(plot.line.defined())
		      .x(args.scalefns.xf)
		      .y0(args.scales.Y.range()[0])
		      .y1(args.scalefns.yf)
		      .interpolate(args.interpolate)
		      .tension(args.interpolate_tension);
		  }

		  function mg_add_flat_line_generator (args, plot) {
		    plot.flat_line = d3.svg.line()
		      .defined(function (d) {
		        return (d['_missing'] === undefined || d['_missing'] !== true)
		        && d[args.y_accessor] !== null;
		      })
		      .x(args.scalefns.xf)
		      .y(function () { return args.scales.Y(plot.data_median); })
		      .interpolate(args.interpolate)
		      .tension(args.interpolate_tension);
		  }

		  function mg_add_line_generator (args, plot) {
		    plot.line = d3.svg.line()
		      .x(args.scalefns.xf)
		      .y(args.scalefns.yf)
		      .interpolate(args.interpolate)
		      .tension(args.interpolate_tension);

		    // if missing_is_zero is not set, then hide data points that fall in missing
		    // data ranges or that have been explicitly identified as missing in the
		    // data source.
		    if (!args.missing_is_zero) {
		      // a line is defined if the _missing attrib is not set to true
		      // and the y-accessor is not null
		      plot.line = plot.line.defined(function (d) {
		        return (d['_missing'] === undefined || d['_missing'] !== true)
		        && d[args.y_accessor] !== null;
		      });
		    }
		  }

		  function mg_add_confidence_band (args, plot, svg, which_line) {
		    var confidenceBand;
		    if (args.show_confidence_band) {
		      if (!plot.existing_band.empty()) {
		        confidenceBand = plot.existing_band
		          .transition()
		          .duration(function () {
		            return (args.transition_on_update) ? 1000 : 0;
		          });
		      } else {
		        confidenceBand = svg.append('path')
		          .attr('class', 'mg-confidence-band');
		      }

		      confidenceBand
		        .attr('d', plot.confidence_area(args.data[which_line]))
		        .attr('clip-path', 'url(#mg-plot-window-' + mg_target_ref(args.target) + ')');
		    }
		  }

		  function mg_add_area (args, plot, svg, which_line, line_id) {
		    var areas = svg.selectAll('.mg-main-area.mg-area' + line_id);
		    if (plot.display_area) {
		      // if area already exists, transition it
		      if (!areas.empty()) {
		        svg.node().appendChild(areas.node());

		        areas.transition()
		          .duration(plot.update_transition_duration)
		          .attr('d', plot.area(args.data[which_line]))
		          .attr('clip-path', 'url(#mg-plot-window-' + mg_target_ref(args.target) + ')');
		      } else { // otherwise, add the area
		        svg.append('path')
		          .classed('mg-main-area', true)
		          .classed('mg-area' + line_id, true)
		          .classed('mg-area' + line_id + '-color', args.colors === null)
		          .attr('d', plot.area(args.data[which_line]))
		          .attr('fill', args.colors === null ? '' : args.colors[line_id - 1])
		          .attr('clip-path', 'url(#mg-plot-window-' + mg_target_ref(args.target) + ')');
		      }
		    } else if (!areas.empty()) {
		      areas.remove();
		    }
		  }

		  function mg_default_color_for_path (this_path, line_id) {
		    this_path.classed('mg-line' + (line_id) + '-color', true);
		  }

		  function mg_color_line (args, this_path, which_line, line_id) {
		    if (args.colors) {
		      // for now, if args.colors is not an array, then keep moving as if nothing happened.
		      // if args.colors is not long enough, default to the usual line_id color.
		      if (args.colors.constructor === Array) {
		        this_path.attr('stroke', args.colors[which_line]);
		        if (args.colors.length < which_line + 1) {
		          // Go with default coloring.
		          // this_path.classed('mg-line' + (line_id) + '-color', true);
		          mg_default_color_for_path(this_path, line_id);
		        }
		      } else {
		        // this_path.classed('mg-line' + (line_id) + '-color', true);
		        mg_default_color_for_path(this_path, line_id);
		      }
		    } else {
		      // this is the typical workflow
		      // this_path.classed('mg-line' + (line_id) + '-color', true);
		      mg_default_color_for_path(this_path, line_id);
		    }
		  }

		  function mg_add_line_element (args, plot, this_path, which_line) {
		    if (args.animate_on_load) {
		      plot.data_median = d3.median(args.data[which_line], function (d) { return d[args.y_accessor]; });
		      this_path.attr('d', plot.flat_line(args.data[which_line]))
		        .transition()
		        .duration(1000)
		        .attr('d', plot.line(args.data[which_line]))
		        .attr('clip-path', 'url(#mg-plot-window-' + mg_target_ref(args.target) + ')');
		    } else { // or just add the line
		      this_path.attr('d', plot.line(args.data[which_line]))
		        .attr('clip-path', 'url(#mg-plot-window-' + mg_target_ref(args.target) + ')');
		    }
		  }

		  function mg_add_line (args, plot, svg, existing_line, which_line, line_id) {
		    if (!existing_line.empty()) {
		      svg.node().appendChild(existing_line.node());

		      var lineTransition = existing_line.transition()
		        .duration(plot.update_transition_duration);

		      if (!plot.display_area && args.transition_on_update) {
		        lineTransition.attrTween('d', path_tween(plot.line(args.data[which_line]), 4));
		      } else {
		        lineTransition.attr('d', plot.line(args.data[which_line]));
		      }
		    } else { // otherwise...
		      // if we're animating on load, animate the line from its median value
		      var this_path = svg.append('path')
		        .attr('class', 'mg-main-line mg-line' + line_id);

		      mg_color_line(args, this_path, which_line, line_id);
		      mg_add_line_element(args, plot, this_path, which_line);
		    }
		  }

		  function mg_add_legend_element (args, plot, which_line, line_id) {
		    var this_legend;
		    if (args.legend) {
		      if (is_array(args.legend)) {
		        this_legend = args.legend[which_line];
		      } else if (is_function(args.legend)) {
		        this_legend = args.legend(args.data[which_line]);
		      }

		      if (args.legend_target) {
		        if (args.colors && args.colors.constructor === Array) {
		          plot.legend_text = "<span style='color:" + args.colors[which_line] + "'>&mdash; " +
		            this_legend + '&nbsp; </span>' + plot.legend_text;
		        } else {
		          plot.legend_text = "<span class='mg-line" + line_id + "-legend-color'>&mdash; " +
		            this_legend + '&nbsp; </span>' + plot.legend_text;
		        }
		      } else {
		        var last_point = args.data[which_line][args.data[which_line].length - 1];
		        var legend_text = plot.legend_group.append('svg:text')
		          .attr('x', args.scalefns.xf(last_point))
		          .attr('dx', args.buffer)
		          .attr('y', args.scalefns.yf(last_point))
		          .attr('dy', '.35em')
		          .attr('font-size', 10)
		          .attr('font-weight', '300')
		          .text(this_legend);

		        if (args.colors && args.colors.constructor === Array) {
		          if (args.colors.length < which_line + 1) {
		            legend_text.classed('mg-line' + (line_id) + '-legend-color', true);
		          } else {
		            legend_text.attr('fill', args.colors[which_line]);
		          }
		        } else {
		          legend_text.classed('mg-line' + (line_id) + '-legend-color', true);
		        }

		        mg_prevent_vertical_overlap(plot.legend_group.selectAll('.mg-line-legend text')[0], args);
		      }
		    }
		  }

		  function mg_plot_legend_if_legend_target (target, legend) {
		    if (target) {
		      d3.select(target).html(legend);
		    }
		  }

		  function mg_add_legend_group (args, plot, svg) {
		    if (args.legend) plot.legend_group = mg_add_g(svg, 'mg-line-legend');
		  }

		  function mg_remove_existing_line_rollover_elements (svg) {
		    // remove the old rollovers if they already exist
		    mg_selectAll_and_remove(svg, '.mg-rollover-rect');
		    mg_selectAll_and_remove(svg, '.mg-voronoi');

		    // remove the old rollover text and circle if they already exist
		    mg_selectAll_and_remove(svg, '.mg-active-datapoint');
		    mg_selectAll_and_remove(svg, '.mg-line-rollover-circle');
		    mg_selectAll_and_remove(svg, '.mg-active-datapoint-container');
		  }

		  function mg_add_line_active_datapoint_container(args, svg) {
		    var activeDatapointContainer = mg_add_g(svg, 'mg-active-datapoint-container')
		      .append('text')
		      .attr('class', 'mg-active-datapoint')
		      .attr('xml:space', 'preserve')
		      .attr('text-anchor', 'end');

		    // set the rollover text's position; if we have markers on two lines,
		    // nudge up the rollover text a bit
		    var activeDatapointYnudge = 0.75;
		    if (args.markers) {
		      var yPos;
		      svg.selectAll('.mg-marker-text')
		        .each(function () {
		          if (!yPos) {
		            yPos = d3.select(this).attr('y');
		          } else if (yPos !== d3.select(this).attr('y')) {
		            activeDatapointYnudge = 0.56;
		          }
		        });
		    }
		    activeDatapointContainer
		      .attr('transform', 'translate(' + (mg_get_plot_right(args)) + ',' + (mg_get_top(args) * activeDatapointYnudge) + ')');
		  }

		  function mg_add_rollover_circle (args, svg) {
		    // append circle
		    var circle = svg.selectAll('.mg-line-rollover-circle')
		      .data(args.data).enter()
		      .append('circle')
		      .attr({
		        'cx': 0,
		        'cy': 0,
		        'r': 0
		      });

		    if (args.colors && args.colors.constructor === Array) {
		      circle
		        .attr('class', function (d) {
		          return 'mg-line' + d.line_id;
		        })
		        .attr('fill', function (d, i) {
		          return args.colors[i];
		        })
		        .attr('stroke', function (d, i) {
		          return args.colors[i];
		        });
		    } else {
		      circle.attr('class', function (d, i) {
		        return [
		          'mg-line' + d.line_id,
		          'mg-line' + d.line_id + '-color',
		          'mg-area' + d.line_id + '-color'
		        ].join(' ');
		      });
		    }
		    circle.classed('mg-line-rollover-circle', true);
		  }

		  function mg_set_unique_line_id_for_each_series (args) {
		    // update our data by setting a unique line id for each series
		    // increment from 1... unless we have a custom increment series
		    var line_id = 1;
		    for (var i = 0; i < args.data.length; i++) {
		      for (var j = 0; j < args.data[i].length; j++) {
		        // if custom line-color map is set, use that instead of line_id
		        if (args.custom_line_color_map.length > 0) {
		          args.data[i][j].line_id = args.custom_line_color_map[i];
		        } else {
		          args.data[i][j].line_id = line_id;
		        }
		      }
		      line_id++;
		    }
		  }

		  function mg_nest_data_for_voronoi (args) {
		    return d3.nest()
		      .key(function (d) {
		        return args.scales.X(d[args.x_accessor]) + ',' + args.scales.Y(d[args.y_accessor]);
		      })
		      .rollup(function (v) { return v[0]; })
		      .entries(d3.merge(args.data.map(function (d) { return d; })))
		      .map(function (d) { return d.values; });
		  }

		  function mg_line_class_string (args) {
		    return function (d) {
		      var class_string;

		      if (args.linked) {
		        var v = d[args.x_accessor];
		        var formatter = MG.time_format(args.utc_time, args.linked_format);

		        // only format when x-axis is date
		        var id = (typeof v === 'number') ? (d.line_id - 1) : formatter(v);
		        class_string = 'roll_' + id + ' mg-line' + d.line_id;

		        if (args.color === null) {
		          class_string += ' mg-line' + d.line_id + '-color';
		        }
		        return class_string;

		      } else {
		        class_string = 'mg-line' + d.line_id;
		        if (args.color === null) class_string += ' mg-line' + d.line_id + '-color';
		        return class_string;
		      }
		    };
		  }

		  function mg_add_voronoi_rollover (args, svg, rollover_on, rollover_off, rollover_move) {
		    var voronoi = d3.geom.voronoi()
		      .x(function (d) { return args.scales.X(d[args.x_accessor]).toFixed(2); })
		      .y(function (d) { return args.scales.Y(d[args.y_accessor]).toFixed(2); })
		      .clipExtent([[args.buffer, args.buffer + args.title_y_position], [args.width - args.buffer, args.height - args.buffer]]);

		    var g = mg_add_g(svg, 'mg-voronoi');
		    g.selectAll('path')
		      .data(voronoi(mg_nest_data_for_voronoi(args)))
		      .enter()
		      .append('path')
		      .filter(function (d) { return d !== undefined && d.length > 0; })
		      .attr('d', function (d) { return 'M' + d.join('L') + 'Z'; })
		      .datum(function (d) { return d.point; }) // because of d3.nest, reassign d
		      .attr('class', mg_line_class_string(args))
		      .on('mouseover', rollover_on)
		      .on('mouseout', rollover_off)
		      .on('mousemove', rollover_move);

		    mg_configure_voronoi_rollover(args, svg);
		  }

		  function nest_data_for_aggregate_rollover (args) {
		    var data_nested = d3.nest()
		      .key(function (d) { return d[args.x_accessor]; })
		      .entries(d3.merge(args.data));
		    data_nested.forEach(function (entry) {
		      var datum = entry.values[0];
		      entry.key = datum[args.x_accessor];
		    });

		    if(args.x_sort) {
		        return data_nested.sort(function (a, b) { return new Date(a.key) - new Date(b.key); });
		    } else {
		        return data_nested;
		    }
		  }

		  function mg_add_aggregate_rollover (args, svg, rollover_on, rollover_off, rollover_move) {
		    // Undo the keys getting coerced to strings, by setting the keys from the values
		    // This is necessary for when we have X axis keys that are things like
		    var data_nested = nest_data_for_aggregate_rollover(args);

		    var xf = data_nested.map(function (di) {
		      return args.scales.X(di.key);
		    });

		    var g = svg.append('g')
		      .attr('class', 'mg-rollover-rect');

		    g.selectAll('.mg-rollover-rects')
		      .data(data_nested).enter()
		      .append('rect')
		      .attr('x', function (d, i) {
		        if (xf.length === 1) return mg_get_plot_left(args);
		        else if (i === 0)    return xf[i].toFixed(2);
		        else return ((xf[i - 1] + xf[i]) / 2).toFixed(2);
		      })
		      .attr('y', args.top)
		      .attr('width', function (d, i) {
		        if (xf.length === 1)         return mg_get_plot_right(args);
		        else if (i === 0)            return ((xf[i + 1] - xf[i]) / 2).toFixed(2);
		        else if (i === xf.length - 1) return ((xf[i] - xf[i - 1]) / 2).toFixed(2);
		        else return ((xf[i + 1] - xf[i - 1]) / 2).toFixed(2);
		      })
		      .attr('class', function (d) {
		        var line_classes = d.values.map(function (datum) {
		          var lc = mg_line_class(d.line_id);
		          if (args.colors === null) lc += ' ' + mg_line_color_class(datum.line_id);
		          return lc;
		        }).join(' ');
		        if (args.linked && d.values.length > 0) {
		          line_classes += ' ' + mg_rollover_id_class(mg_rollover_format_id(d.values[0], 0, args));
		        }
		        return line_classes;
		      })
		      .attr('height', args.height - args.bottom - args.top - args.buffer)
		      .attr('opacity', 0)
		      .on('mouseover', rollover_on)
		      .on('mouseout', rollover_off)
		      .on('mousemove', rollover_move);

		    mg_configure_aggregate_rollover(args, svg);
		  }

		  function mg_configure_singleton_rollover (args, svg) {
		    svg.select('.mg-rollover-rect rect')
		      .on('mouseover')(args.data[0][0], 0);
		  }

		  function mg_configure_voronoi_rollover (args, svg) {
		    for (var i = 0; i < args.data.length; i++) {
		      var j = i + 1;

		      if (args.custom_line_color_map.length > 0 &&
		        args.custom_line_color_map[i] !== undefined) {
		        j = args.custom_line_color_map[i];
		      }

		      if (args.data[i].length === 1 && !svg.selectAll('.mg-voronoi .mg-line' + j).empty()) {
		        svg.selectAll('.mg-voronoi .mg-line' + j)
		          .on('mouseover')(args.data[i][0], 0);

		        svg.selectAll('.mg-voronoi .mg-line' + j)
		          .on('mouseout')(args.data[i][0], 0);
		      }
		    }
		  }

		  function mg_line_class (line_id) { return 'mg-line' + line_id; }
		  function mg_line_color_class (line_id) { return 'mg-line' + line_id + '-color'; }
		  function mg_rollover_id_class (id) { return 'roll_' + id; }
		  function mg_rollover_format_id (d, i, args) {
		    var v = d[args.x_accessor];
		    var formatter = MG.time_format(args.utc_time, args.linked_format);
		    // only format when x-axis is date
		    var id = (typeof v === 'number')
		      ? i
		      : formatter(v);
		    return id;
		  }

		  function mg_add_single_line_rollover (args, svg, rollover_on, rollover_off, rollover_move) {
		    // set to 1 unless we have a custom increment series
		    var line_id = 1;
		    if (args.custom_line_color_map.length > 0) {
		      line_id = args.custom_line_color_map[0];
		    }

		    var g = svg.append('g')
		      .attr('class', 'mg-rollover-rect');

		    var xf = args.data[0].map(args.scalefns.xf);

		    g.selectAll('.mg-rollover-rects')
		      .data(args.data[0]).enter()
		      .append('rect')
		      .attr('class', function (d, i) {
		        var cl = mg_line_color_class(line_id) + ' ' + mg_line_class(d.line_id);
		        if (args.linked) cl += cl + ' ' + mg_rollover_id_class(mg_rollover_format_id(d, i, args));
		        return cl;
		      })
		      .attr('x', function (d, i) {
		        // if data set is of length 1
		        if (xf.length === 1)    return mg_get_plot_left(args);
		        else if (i === 0)       return xf[i].toFixed(2);
		        else return ((xf[i - 1] + xf[i]) / 2).toFixed(2);
		      })
		      .attr('y', function (d, i) {
		        return (args.data.length > 1)
		          ? args.scalefns.yf(d) - 6 // multi-line chart sensitivity
		          : args.top;
		      })
		      .attr('width', function (d, i) {
		        // if data set is of length 1
		        if (xf.length === 1)          return mg_get_plot_right(args);
		        else if (i === 0)             return ((xf[i + 1] - xf[i]) / 2).toFixed(2);
		        else if (i === xf.length - 1) return ((xf[i] - xf[i - 1]) / 2).toFixed(2);
		        else return ((xf[i + 1] - xf[i - 1]) / 2).toFixed(2);
		      })
		      .attr('height', function (d, i) {
		        return (args.data.length > 1)
		          ? 12 // multi-line chart sensitivity
		          : args.height - args.bottom - args.top - args.buffer;
		      })
		      .attr('opacity', 0)
		      .on('mouseover', rollover_on)
		      .on('mouseout', rollover_off)
		      .on('mousemove', rollover_move);

		    if (mg_is_singleton(args)) {
		      mg_configure_singleton_rollover(args, svg);
		    }
		  }

		  function mg_configure_aggregate_rollover (args, svg) {
		    var rect = svg.selectAll('.mg-rollover-rect rect');
		    if (args.data.filter(function (d) { return d.length === 1; }).length > 0) {
		      rect.on('mouseover')(rect[0][0].__data__, 0);
		    }
		  }

		  function mg_is_standard_multiline (args) {
		    return args.data.length > 1 && !args.aggregate_rollover;
		  }
		  function mg_is_aggregated_rollover (args) {
		    return args.data.length > 1 && args.aggregate_rollover;
		  }

		  function mg_is_singleton (args) {
		    return args.data.length === 1 && args.data[0].length === 1;
		  }

		  function mg_draw_all_line_elements (args, plot, svg) {
		    for (var i = args.data.length - 1; i >= 0; i--) {
		      var this_data = args.data[i];

		      // passing the data for the current line
		      MG.call_hook('line.before_each_series', [this_data, args]);

		      // override increment if we have a custom increment series
		      var line_id = i + 1;
		      if (args.custom_line_color_map.length > 0) {
		        line_id = args.custom_line_color_map[i];
		      }

		      args.data[i].line_id = line_id;

		      if (this_data.length === 0) {
		        continue;
		      }
		      var existing_line = svg.select('path.mg-main-line.mg-line' + (line_id));

		      mg_add_confidence_band(args, plot, svg, i);
		      mg_add_area(args, plot, svg, i, line_id);
		      mg_add_line(args, plot, svg, existing_line, i, line_id);
		      mg_add_legend_element(args, plot, i, line_id);
		      // passing the data for the current line
		      MG.call_hook('line.after_each_series', [this_data, existing_line, args]);
		    }
		  }

		  function mg_line_main_plot (args) {
		    var plot = {};
		    var svg = mg_get_svg_child_of(args.target);

		    // remove any old legends if they exist
		    mg_selectAll_and_remove(svg, '.mg-line-legend');
		    mg_add_legend_group(args, plot, svg);

		    plot.data_median = 0;
		    plot.update_transition_duration = (args.transition_on_update) ? 1000 : 0;
		    plot.display_area = args.area && !args.use_data_y_min && args.data.length <= 1;
		    plot.legend_text = '';
		    mg_line_graph_generators(args, plot, svg);
		    plot.existing_band = svg.selectAll('.mg-confidence-band');

		    // should we continue with the default line render? A `line.all_series` hook should return false to prevent the default.
		    var continueWithDefault = MG.call_hook('line.before_all_series', [args]);
		    if (continueWithDefault !== false) {
		      mg_draw_all_line_elements(args, plot, svg);
		    }

		    mg_plot_legend_if_legend_target(args.legend_target, plot.legend_text);
		  }

		  function mg_line_rollover_setup (args, graph) {
		    var svg = mg_get_svg_child_of(args.target);

		    mg_remove_existing_line_rollover_elements(svg);
		    mg_add_line_active_datapoint_container(args, svg);
		    mg_add_rollover_circle(args, svg);
		    mg_set_unique_line_id_for_each_series(args);

		    if (mg_is_standard_multiline(args)) {
		      mg_add_voronoi_rollover(args, svg, graph.rolloverOn(args), graph.rolloverOff(args), graph.rolloverMove(args));
		    } else if (mg_is_aggregated_rollover(args)) {
		      mg_add_aggregate_rollover(args, svg, graph.rolloverOn(args), graph.rolloverOff(args), graph.rolloverMove(args));
		    } else {
		      mg_add_single_line_rollover(args, svg, graph.rolloverOn(args), graph.rolloverOff(args), graph.rolloverMove(args));
		    }
		  }

		  function mg_update_rollover_circle (args, svg, d) {
		    if (args.aggregate_rollover && args.data.length > 1) {
		      // hide the circles in case a non-contiguous series is present
		      svg.selectAll('circle.mg-line-rollover-circle')
		        .style('opacity', 0);

		      d.values.forEach(function (datum) {
		        if (mg_data_in_plot_bounds(datum, args)) mg_update_aggregate_rollover_circle(args, svg, datum);
		      });
		    } else if ((args.missing_is_hidden && d['_missing']) || d[args.y_accessor] === null) {
		      // disable rollovers for hidden parts of the line
		      // recall that hidden parts are missing data ranges and possibly also
		      // data points that have been explicitly identified as missing
		      return;
		    } else {
		      // show circle on mouse-overed rect
		      if (mg_data_in_plot_bounds(d, args)) {
		        mg_update_generic_rollover_circle(args, svg, d);
		      }
		    }
		  }

		  function mg_update_aggregate_rollover_circle (args, svg, datum) {
		    svg.select('circle.mg-line-rollover-circle.mg-line' + datum.line_id)
		      .attr({
		        'cx': function () {
		          return args.scales.X(datum[args.x_accessor]).toFixed(2);
		        },
		        'cy': function () {
		          return args.scales.Y(datum[args.y_accessor]).toFixed(2);
		        },
		        'r': args.point_size
		      })
		      .style('opacity', 1);
		  }

		  function mg_update_generic_rollover_circle (args, svg, d) {
		    svg.selectAll('circle.mg-line-rollover-circle.mg-line' + d.line_id)
		      .classed('mg-line-rollover-circle', true)
		      .attr('cx', function () {
		        return args.scales.X(d[args.x_accessor]).toFixed(2);
		      })
		      .attr('cy', function () {
		        return args.scales.Y(d[args.y_accessor]).toFixed(2);
		      })
		      .attr('r', args.point_size)
		      .style('opacity', 1);
		  }

		  function mg_trigger_linked_mouseovers (args, d, i) {
		    if (args.linked && !MG.globals.link) {
		      MG.globals.link = true;
		      if (!args.aggregate_rollover || d.value !== undefined || d.values.length > 0) {
		        var datum = d.values ? d.values[0] : d;
		        var id = mg_rollover_format_id(datum, i, args);
		        // trigger mouseover on matching line in .linked charts
		        d3.selectAll('.' + mg_line_class(datum.line_id) + '.' + mg_rollover_id_class(id))
		          .each(function (d) {
		            d3.select(this).on('mouseover')(d, i);
		          });
		      }
		    }
		  }

		  function mg_trigger_linked_mouseouts (args, d, i) {
		    if (args.linked && MG.globals.link) {
		      MG.globals.link = false;

		      var formatter = MG.time_format(args.utc_time, args.linked_format);
		      var datums = d.values ? d.values : [d];
		      datums.forEach(function (datum) {
		        var v = datum[args.x_accessor];
		        var id = (typeof v === 'number') ? i : formatter(v);

		        // trigger mouseout on matching line in .linked charts
		        d3.selectAll('.roll_' + id)
		          .each(function (d) {
		            d3.select(this).on('mouseout')(d);
		          });
		      });
		    }
		  }

		  function mg_remove_active_data_points_for_aggregate_rollover (args, svg) {
		    svg.selectAll('circle.mg-line-rollover-circle').style('opacity', 0);
		  }

		  function mg_remove_active_data_points_for_generic_rollover (args, svg, d) {
		    svg.selectAll('circle.mg-line-rollover-circle.mg-line' + d.line_id)
		      .style('opacity', function () {
		        var id = d.line_id - 1;

		        if (args.custom_line_color_map.length > 0 &&
		          args.custom_line_color_map.indexOf(d.line_id) !== undefined
		        ) {
		          id = args.custom_line_color_map.indexOf(d.line_id);
		        }

		        if (args.data[id].length === 1) {
		          // if (args.data.length === 1 && args.data[0].length === 1) {
		          return 1;
		        } else {
		          return 0;
		        }
		      });
		  }

		  function mg_remove_active_text (svg) {
		    svg.select('.mg-active-datapoint').text('');
		  }

		  function lineChart (args) {
		    this.init = function (args) {
		      this.args = args;

		      if (!args.data || args.data.length === 0) {
		        args.internal_error = 'No data was supplied';
		        internal_error(args);
		        return this;
		      } else {
		        args.internal_error = undefined;
		      }

		      raw_data_transformation(args);

		      process_line(args);

		      init(args);
		      x_axis(args);
		      y_axis(args);

		      this.markers();
		      this.mainPlot();
		      this.rollover();
		      this.windowListeners();

		      MG.call_hook('line.after_init', this);

		      return this;
		    };

		    this.mainPlot = function () {
		      mg_line_main_plot(args);
		      return this;
		    };

		    this.markers = function () {
		      markers(args);
		      return this;
		    };

		    this.rollover = function () {
		      var that = this;
		      mg_line_rollover_setup(args, that);
		      MG.call_hook('line.after_rollover', args);

		      return this;
		    };

		    this.rolloverOn = function (args) {
		      var svg = mg_get_svg_child_of(args.target);
		      var fmt = mg_get_rollover_time_format(args);

		      return function (d, i) {
		        mg_update_rollover_circle(args, svg, d);
		        mg_trigger_linked_mouseovers(args, d, i);

		        svg.selectAll('text')
		          .filter(function (g, j) {
		            return d === g;
		          })
		          .attr('opacity', 0.3);

		        // update rollover text
		        if (args.show_rollover_text) {
		          mg_update_rollover_text(args, svg, fmt, '\u2014 ', d, i);
		        }

		        if (args.mouseover) {
		          args.mouseover(d, i);
		        }
		      };
		    };

		    this.rolloverOff = function (args) {
		      var svg = mg_get_svg_child_of(args.target);

		      return function (d, i) {
		        mg_trigger_linked_mouseouts(args, d, i);
		        if (args.aggregate_rollover) {
		          mg_remove_active_data_points_for_aggregate_rollover(args, svg);
		        } else {
		          mg_remove_active_data_points_for_generic_rollover(args, svg, d);
		        }

		        mg_remove_active_text(svg);

		        if (args.mouseout) {
		          args.mouseout(d, i);
		        }
		      };
		    };

		    this.rolloverMove = function (args) {
		      return function (d, i) {
		        if (args.mousemove) {
		          args.mousemove(d, i);
		        }
		      };
		    };

		    this.windowListeners = function () {
		      mg_window_listeners(this.args);
		      return this;
		    };

		    this.init(args);
		  }

		  MG.register('line', lineChart);
		}).call(this);

		(function() {
		  'use strict';

		  function histogram(args) {
		    this.init = function(args) {
		      this.args = args;

		      raw_data_transformation(args);
		      process_histogram(args);
		      init(args);
		      x_axis(args);
		      y_axis(args);

		      this.mainPlot();
		      this.markers();
		      this.rollover();
		      this.windowListeners();

		      return this;
		    };

		    this.mainPlot = function() {
		      var svg = mg_get_svg_child_of(args.target);

		      //remove the old histogram, add new one
		      svg.selectAll('.mg-histogram').remove();

		      var g = svg.append('g')
		        .attr('class', 'mg-histogram');

		      var bar = g.selectAll('.mg-bar')
		        .data(args.data[0])
		          .enter().append('g')
		            .attr('class', 'mg-bar')
		            .attr('transform', function(d) {
		              return "translate(" + args.scales.X(d[args.x_accessor]).toFixed(2)
		                + "," + args.scales.Y(d[args.y_accessor]).toFixed(2) + ")";
		            });

		      //draw bars
		      bar.append('rect')
		        .attr('x', 1)
		        .attr('width', function(d, i) {
		          if (args.data[0].length === 1) {
		              return (args.scalefns.xf(args.data[0][0])
		                - args.bar_margin).toFixed(2);
		          } else {
		            return (args.scalefns.xf(args.data[0][1])
		            - args.scalefns.xf(args.data[0][0])
		            - args.bar_margin).toFixed(2);
		          }
		        })
		        .attr('height', function(d) {
		          if (d[args.y_accessor] === 0) {
		            return 0;
		          }

		          return (args.height - args.bottom - args.buffer
		            - args.scales.Y(d[args.y_accessor])).toFixed(2);
		        });

		      return this;
		    };

		    this.markers = function() {
		      markers(args);
		      return this;
		    };

		    this.rollover = function() {
		      var svg = mg_get_svg_child_of(args.target);
		      var $svg = $($(args.target).find('svg').get(0));

		      //remove the old rollovers if they already exist
		      svg.selectAll('.mg-rollover-rect').remove();
		      svg.selectAll('.mg-active-datapoint').remove();

		      //rollover text
		      svg.append('text')
		        .attr('class', 'mg-active-datapoint')
		        .attr('xml:space', 'preserve')
		        .attr('x', args.width - args.right)
		        .attr('y', args.top * 0.75)
		        .attr('text-anchor', 'end');

		      var g = svg.append('g')
		        .attr('class', 'mg-rollover-rect');

		      //draw rollover bars
		      var bar = g.selectAll('.mg-bar')
		        .data(args.data[0])
		          .enter().append('g')
		            .attr('class', function(d, i) {
		              if (args.linked) {
		                return 'mg-rollover-rects roll_' + i;
		              } else {
		                return 'mg-rollover-rects';
		              }
		            })
		            .attr('transform', function(d) {
		              return "translate(" + (args.scales.X(d[args.x_accessor])) + "," + 0 + ")";
		            });

		      bar.append('rect')
		        .attr('x', 1)
		        .attr('y', args.buffer + args.title_y_position)
		        .attr('width', function(d, i) {
		          //if data set is of length 1
		          if (args.data[0].length === 1) {
		            return (args.scalefns.xf(args.data[0][0])
		              - args.bar_margin).toFixed(2);
		          } else if (i !== args.data[0].length - 1) {
		            return (args.scalefns.xf(args.data[0][i + 1])
		              - args.scalefns.xf(d)).toFixed(2);
		          } else {
		            return (args.scalefns.xf(args.data[0][1])
		              - args.scalefns.xf(args.data[0][0])).toFixed(2);
		          }
		        })
		        .attr('height', function(d) {
		          return args.height;
		        })
		        .attr('opacity', 0)
		        .on('mouseover', this.rolloverOn(args))
		        .on('mouseout', this.rolloverOff(args))
		        .on('mousemove', this.rolloverMove(args));

		      return this;
		    };

		    this.rolloverOn = function(args) {
		      var svg = mg_get_svg_child_of(args.target);

		      return function(d, i) {
		        svg.selectAll('text')
		          .filter(function(g, j) {
		            return d === g;
		          })
		          .attr('opacity', 0.3);

		        var fmt = args.processed.xax_format || MG.time_format(args.utc_time, '%b %e, %Y');
		        var num = format_rollover_number(args);

		        svg.selectAll('.mg-bar rect')
		          .filter(function(d, j) {
		            return j === i;
		          })
		          .classed('active', true);

		        //trigger mouseover on all matching bars
		        if (args.linked && !MG.globals.link) {
		          MG.globals.link = true;

		          //trigger mouseover on matching bars in .linked charts
		          d3.selectAll('.mg-rollover-rects.roll_' + i + ' rect')
		            .each(function(d) { //use existing i
		              d3.select(this).on('mouseover')(d,i);
		            });
		        }

		        //update rollover text
		        if (args.show_rollover_text) {
		          svg.select('.mg-active-datapoint')
		            .text(function() {
		              if (args.time_series) {
		                var dd = new Date(+d[args.x_accessor]);
		                dd.setDate(dd.getDate());

		                return fmt(dd) + '  ' + args.yax_units
		                  + num(d[args.y_accessor]);
		              }
		              else {
		                return args.x_accessor + ': ' + num(d[args.x_accessor])
		                  + ', ' + args.y_accessor + ': ' + args.yax_units
		                  + num(d[args.y_accessor]);
		              }
		            });
		        }

		        if (args.mouseover) {
		          args.mouseover(d, i);
		        }
		      };
		    };

		    this.rolloverOff = function(args) {
		      var svg = mg_get_svg_child_of(args.target);

		      return function(d, i) {
		        if (args.linked && MG.globals.link) {
		          MG.globals.link = false;

		          //trigger mouseout on matching bars in .linked charts
		          d3.selectAll('.mg-rollover-rects.roll_' + i + ' rect')
		            .each(function(d) { //use existing i
		              d3.select(this).on('mouseout')(d,i);
		            });
		        }

		        //reset active bar
		        svg.selectAll('.mg-bar rect')
		          .classed('active', false);

		        //reset active data point text
		        svg.select('.mg-active-datapoint')
		          .text('');

		        if (args.mouseout) {
		          args.mouseout(d, i);
		        }
		      };
		    };

		    this.rolloverMove = function(args) {
		      return function(d, i) {
		        if (args.mousemove) {
		          args.mousemove(d, i);
		        }
		      };
		    };

		    this.windowListeners = function() {
		      mg_window_listeners(this.args);
		      return this;
		    };

		    this.init(args);
		  }

		  var defaults = {
		    mouseover: function(d, i) {
		      d3.select('#histogram svg .mg-active-datapoint')
		        .text('Frequency Count: ' + d.y);
		    },
		    binned: false,
		    bins: null,
		    processed_x_accessor: 'x',
		    processed_y_accessor: 'y',
		    processed_dx_accessor: 'dx',
		    bar_margin: 1
		  };

		  MG.register('histogram', histogram, defaults);
		}).call(this);


		(function() {
		  'use strict';

		  function pointChart(args) {
		    this.init = function(args) {
		      this.args = args;

		      raw_data_transformation(args);
		      process_point(args);
		      init(args);
		      x_axis(args);
		      y_axis(args);

		      this.mainPlot();
		      this.markers();
		      this.rollover();
		      this.windowListeners();

		      return this;
		    };

		    this.markers = function() {
		      markers(args);
		      if (args.least_squares) {
		        add_ls(args);
		      }

		      return this;
		    };

		    this.mainPlot = function() {
		      var svg = mg_get_svg_child_of(args.target);
		      var g;

		      //remove the old points, add new one
		      svg.selectAll('.mg-points').remove();

		      // plot the points, pretty straight-forward
		      g = svg.append('g')
		        .classed('mg-points', true);

		      var pts = g.selectAll('circle')
		        .data(args.data[0])
		        .enter().append('svg:circle')
		          .attr('class', function(d, i) { return 'path-' + i; })
		          .attr('cx', args.scalefns.xf)
		          .attr('cy', args.scalefns.yf);

		      //are we coloring our points, or just using the default color?
		      if (args.color_accessor !== null) {
		        pts.attr('fill',   args.scalefns.color);
		        pts.attr('stroke', args.scalefns.color);
		      } else {
		        pts.classed('mg-points-mono', true);
		      }

		      if (args.size_accessor !== null) {
		        pts.attr('r', args.scalefns.size);
		      } else {
		        pts.attr('r', args.point_size);
		      }

		      return this;
		    };

		    this.rollover = function() {
		      var svg = mg_get_svg_child_of(args.target);

		      //remove the old rollovers if they already exist
		      svg.selectAll('.mg-voronoi').remove();

		      //remove the old rollover text and circle if they already exist
		      svg.selectAll('.mg-active-datapoint').remove();

		      //add rollover text
		      svg.append('text')
		        .attr('class', 'mg-active-datapoint')
		        .attr('xml:space', 'preserve')
		        .attr('x', args.width - args.right)
		        .attr('y', args.top * 0.75)
		        .attr('text-anchor', 'end');

		      //add rollover paths
		      var voronoi = d3.geom.voronoi()
		        .x(args.scalefns.xf)
		        .y(args.scalefns.yf)
		        .clipExtent([[args.buffer, args.buffer + args.title_y_position], [args.width - args.buffer, args.height - args.buffer]]);

		      var paths = svg.append('g')
		        .attr('class', 'mg-voronoi');

		      paths.selectAll('path')
		        .data(voronoi(args.data[0]))
		        .enter().append('path')
		          .attr('d', function(d) {
		            if (d === undefined) {
		              return;
		            }

		            return 'M' + d.join(',') + 'Z';
		          })
		          .attr('class', function(d,i) {
		            return 'path-' + i;
		          })
		          .style('fill-opacity', 0)
		          .on('mouseover', this.rolloverOn(args))
		          .on('mouseout', this.rolloverOff(args))
		          .on('mousemove', this.rolloverMove(args));

		      return this;
		    };

		    this.rolloverOn = function(args) {
		      var svg = mg_get_svg_child_of(args.target);

		      return function(d, i) {
		        svg.selectAll('.mg-points circle')
		          .classed('selected', false);

		        //highlight active point
		        var pts = svg.selectAll('.mg-points circle.path-' + i)
		          .classed('selected', true);

		        if (args.size_accessor) {
		          pts.attr('r', function(di) {
		            return args.scalefns.size(di) + args.active_point_size_increase;
		          });
		        } else {
		          pts.attr('r', args.point_size + args.active_point_size_increase);
		        }

		        //trigger mouseover on all points for this class name in .linked charts
		        if (args.linked && !MG.globals.link) {
		          MG.globals.link = true;

		          //trigger mouseover on matching point in .linked charts
		          d3.selectAll('.mg-voronoi .path-' + i)
		            .each(function() {
		              d3.select(this).on('mouseover')(d,i);
		            });
		        }

		        if (args.show_rollover_text) {
		          var fmt = MG.time_format(args.utc_time, '%b %e, %Y');
		          mg_update_rollover_text(args,svg,fmt, '\u2022', d.point, i);
		        }

		        if (args.mouseover) {
		          args.mouseover(d, i);
		        }
		      };
		    };

		    this.rolloverOff = function(args) {
		      var svg = mg_get_svg_child_of(args.target);

		      return function(d,i) {
		        if (args.linked && MG.globals.link) {
		          MG.globals.link = false;

		          d3.selectAll('.mg-voronoi .path-' + i)
		            .each(function() {
		              d3.select(this).on('mouseout')(d,i);
		            });
		        }

		        //reset active point
		        var pts = svg.selectAll('.mg-points circle')
		          .classed('unselected', false)
		          .classed('selected', false);

		        if (args.size_accessor) {
		          pts.attr('r', args.scalefns.size);
		        } else {
		          pts.attr('r', args.point_size);
		        }

		        //reset active data point text
		        svg.select('.mg-active-datapoint')
		          .text('');

		        if (args.mouseout) {
		          args.mouseout(d, i);
		        }
		      };
		    };

		    this.rolloverMove = function(args) {
		      return function(d, i) {
		        if (args.mousemove) {
		          args.mousemove(d, i);
		        }
		      };
		    };

		    this.update = function(args) {
		      return this;
		    };

		    this.windowListeners = function() {
		      mg_window_listeners(this.args);
		      return this;
		    };

		    this.init(args);
		  }

		  var defaults = {
		    buffer: 16,
		    ls: false,
		    lowess: false,
		    point_size: 2.5,
		    label_accessor: null,
		    size_accessor: null,
		    color_accessor: null,
		    size_range: null,        // when we set a size_accessor option, this array determines the size range, e.g. [1,5]
		    color_range: null,       // e.g. ['blue', 'red'] to color different groups of points
		    size_domain: null,
		    color_domain: null,
		    active_point_size_increase: 1,
		    color_type: 'number'       // can be either 'number' - the color scale is quantitative - or 'category' - the color scale is qualitative.
		  };

		  MG.register('point', pointChart, defaults);
		}).call(this);

		(function() {
		  'use strict';

		  // BARCHART:
		  // x - function that processes data
		  //   - pass in a feature name, get a count
		  //   - have raw feature: value function
		  // - need a way of changing the y axis and x axis
		  // - need to sort out rollovers
		  function barChart(args) {
		    this.args = args;

		    this.init = function(args) {
		      this.args = args;

		      raw_data_transformation(args);
		      process_categorical_variables(args);
		      init(args);

		      this.is_vertical = (args.bar_orientation === 'vertical');

		      if (this.is_vertical) {
		        x_axis_categorical(args);
		        y_axis(args);
		      } else {
		        x_axis(args);
		        y_axis_categorical(args);
		      }

		      this.mainPlot();
		      this.markers();
		      this.rollover();
		      this.windowListeners();

		      return this;
		    };

		    this.mainPlot = function() {
		      var svg = mg_get_svg_child_of(args.target);
		      var data = args.data[0];
		      var barplot = svg.select('g.mg-barplot');
		      var fresh_render = barplot.empty();

		      var bars;
		      var predictor_bars;
		      var pp, pp0;
		      var baseline_marks;

		      var perform_load_animation = fresh_render && args.animate_on_load;
		      var should_transition = perform_load_animation || args.transition_on_update;
		      var transition_duration = args.transition_duration || 1000;

		      // draw the plot on first render
		      if (fresh_render) {
		        barplot = svg.append('g')
		          .classed('mg-barplot', true);
		      }

		      bars = bars = barplot.selectAll('.mg-bar')
		        .data(data);

		      bars.exit().remove();

		      bars.enter().append('rect')
		        .classed('mg-bar', true);

		      if (args.predictor_accessor) {
		        predictor_bars = barplot.selectAll('.mg-bar-prediction')
		          .data(data);

		        predictor_bars.exit().remove();

		        predictor_bars.enter().append('rect')
		          .classed('mg-bar-prediction', true);
		      }

		      if (args.baseline_accessor) {
		        baseline_marks = barplot.selectAll('.mg-bar-baseline')
		          .data(data);

		        baseline_marks.exit().remove();

		        baseline_marks.enter().append('line')
		          .classed('mg-bar-baseline', true);
		      }

		      var appropriate_size;

		      // setup transitions
		      if (should_transition) {
		        bars = bars.transition()
		          .duration(transition_duration);

		        if (predictor_bars) {
		          predictor_bars = predictor_bars.transition()
		            .duration(transition_duration);
		        }

		        if (baseline_marks) {
		          baseline_marks = baseline_marks.transition()
		            .duration(transition_duration);
		        }
		      }

		      // move the barplot after the axes so it doesn't overlap
		      svg.select('.mg-y-axis').node().parentNode.appendChild(barplot.node());

		      if (this.is_vertical) {
		        appropriate_size = args.scales.X.rangeBand()/1.5;

		        if (perform_load_animation) {
		          bars.attr({
		            height: 0,
		            y: args.scales.Y(0)
		          });

		          if (predictor_bars) {
		            predictor_bars.attr({
		              height: 0,
		              y: args.scales.Y(0)
		            });
		          }

		          if (baseline_marks) {
		            baseline_marks.attr({
		              y1: args.scales.Y(0),
		              y2: args.scales.Y(0)
		            });
		          }
		        }

		        bars.attr('y', args.scalefns.yf)
		          .attr('x', function(d) {
		            return args.scalefns.xf(d) + appropriate_size/2;
		          })
		          .attr('width', appropriate_size)
		          .attr('height', function(d) {
		            return 0 - (args.scalefns.yf(d) - args.scales.Y(0));
		          });


		        if (args.predictor_accessor) {
		          pp = args.predictor_proportion;
		          pp0 = pp-1;

		          // thick line through bar;
		          predictor_bars
		            .attr('y', function(d) {
		              return args.scales.Y(0) - (args.scales.Y(0) - args.scales.Y(d[args.predictor_accessor]));
		            })
		            .attr('x', function(d) {
		              return args.scalefns.xf(d) + pp0*appropriate_size/(pp*2) + appropriate_size/2;
		            })
		            .attr('width', appropriate_size/pp)
		            .attr('height', function(d) {
		              return 0 - (args.scales.Y(d[args.predictor_accessor]) - args.scales.Y(0));
		            });
		        }

		        if (args.baseline_accessor) {
		          pp = args.predictor_proportion;

		          baseline_marks
		            .attr('x1', function(d) {
		              return args.scalefns.xf(d)+appropriate_size/2-appropriate_size/pp + appropriate_size/2;
		            })
		            .attr('x2', function(d) {
		              return args.scalefns.xf(d)+appropriate_size/2+appropriate_size/pp + appropriate_size/2;
		            })
		            .attr('y1', function(d) { return args.scales.Y(d[args.baseline_accessor]); })
		            .attr('y2', function(d) { return args.scales.Y(d[args.baseline_accessor]); });
		        }
		      } else {
		        appropriate_size = args.scales.Y.rangeBand()/1.5;

		        if (perform_load_animation) {
		          bars.attr('width', 0);

		          if (predictor_bars) {
		            predictor_bars.attr('width', 0);
		          }

		          if (baseline_marks) {
		            baseline_marks.attr({
		              x1: args.scales.X(0),
		              x2: args.scales.X(0)
		            });
		          }
		        }

		        bars.attr('x', args.scales.X(0))
		          .attr('y', function(d) {
		            return args.scalefns.yf(d) + appropriate_size/2;
		          })
		          .attr('height', appropriate_size)
		          .attr('width', function(d) {
		            return args.scalefns.xf(d) - args.scales.X(0);
		          });

		        if (args.predictor_accessor) {
		          pp = args.predictor_proportion;
		          pp0 = pp-1;

		          // thick line  through bar;
		          predictor_bars
		            .attr('x', args.scales.X(0))
		            .attr('y', function(d) {
		              return args.scalefns.yf(d) + pp0 * appropriate_size/(pp*2) + appropriate_size / 2;
		            })
		            .attr('height', appropriate_size / pp)
		            .attr('width', function(d) {
		              return args.scales.X(d[args.predictor_accessor]) - args.scales.X(0);
		            });
		        }

		        if (args.baseline_accessor) {
		          pp = args.predictor_proportion;

		          baseline_marks
		            .attr('x1', function(d) { return args.scales.X(d[args.baseline_accessor]); })
		            .attr('x2', function(d) { return args.scales.X(d[args.baseline_accessor]); })
		            .attr('y1', function(d) {
		              return args.scalefns.yf(d) + appropriate_size / 2 - appropriate_size / pp + appropriate_size / 2;
		            })
		            .attr('y2', function(d) {
		              return args.scalefns.yf(d) + appropriate_size / 2 + appropriate_size / pp + appropriate_size / 2;
		            });
		        }
		      }

		      return this;
		    };

		    this.markers = function() {
		      markers(args);
		      return this;
		    };

		    this.rollover = function() {
		      var svg = mg_get_svg_child_of(args.target);
		      var g;

		      //remove the old rollovers if they already exist
		      svg.selectAll('.mg-rollover-rect').remove();
		      svg.selectAll('.mg-active-datapoint').remove();

		      //rollover text
		      svg.append('text')
		        .attr('class', 'mg-active-datapoint')
		        .attr('xml:space', 'preserve')
		        .attr('x', args.width - args.right)
		        .attr('y', args.top * 0.75)
		        .attr('dy', '.35em')
		        .attr('text-anchor', 'end');

		      g = svg.append('g')
		        .attr('class', 'mg-rollover-rect');

		      //draw rollover bars
		      var bar = g.selectAll(".mg-bar-rollover")
		        .data(args.data[0]).enter()
		        .append("rect")
		          .attr('class', 'mg-bar-rollover');

		      if (this.is_vertical) {
		        bar.attr("x", args.scalefns.xf)
		          .attr("y", function() {
		            return args.scales.Y(0) - args.height;
		          })
		          .attr('width', args.scales.X.rangeBand())
		          .attr('height', args.height)
		          .attr('opacity', 0)
		          .on('mouseover', this.rolloverOn(args))
		          .on('mouseout', this.rolloverOff(args))
		          .on('mousemove', this.rolloverMove(args));
		      } else {
		        bar.attr("x", args.scales.X(0))
		          .attr("y", args.scalefns.yf)
		          .attr('width', args.width)
		          .attr('height', args.scales.Y.rangeBand()+2)
		          .attr('opacity', 0)
		          .on('mouseover', this.rolloverOn(args))
		          .on('mouseout', this.rolloverOff(args))
		          .on('mousemove', this.rolloverMove(args));
		      }
		      return this;
		    };

		    this.rolloverOn = function(args) {
		      var svg = mg_get_svg_child_of(args.target);
		      var label_accessor = this.is_vertical ? args.x_accessor : args.y_accessor;
		      var data_accessor = this.is_vertical ? args.y_accessor : args.x_accessor;
		      var label_units = this.is_vertical ? args.yax_units : args.xax_units;

		      return function(d, i) {
		        svg.selectAll('text')
		          .filter(function(g, j) {
		            return d === g;
		          })
		          .attr('opacity', 0.3);

		        var fmt = MG.time_format(args.utc_time, '%b %e, %Y');
		        var num = format_rollover_number(args);

		        //highlight active bar
		        svg.selectAll('g.mg-barplot .mg-bar')
		          .filter(function(d, j) {
		            return j === i;
		          })
		          .classed('active', true);

		        //update rollover text
		        if (args.show_rollover_text) {
		          svg.select('.mg-active-datapoint')
		            .text(function() {
		              if (args.time_series) {
		                var dd = new Date(+d[data_accessor]);
		                dd.setDate(dd.getDate());

		                return fmt(dd) + '  ' + label_units + num(d[label_accessor]);
		              } else {
		                return d[label_accessor] + ': ' + num(d[data_accessor]);
		              }
		            });
		        }

		        if (args.mouseover) {
		          args.mouseover(d, i);
		        }
		      };
		    };

		    this.rolloverOff = function(args) {
		      var svg = mg_get_svg_child_of(args.target);

		      return function(d, i) {
		        //reset active bar
		        svg.selectAll('g.mg-barplot .mg-bar')
		          .classed('active', false);

		        //reset active data point text
		        svg.select('.mg-active-datapoint')
		          .text('');

		        if (args.mouseout) {
		          args.mouseout(d, i);
		        }
		      };
		    };

		    this.rolloverMove = function(args) {
		      return function(d, i) {
		        if (args.mousemove) {
		          args.mousemove(d, i);
		        }
		      };
		    };

		    this.windowListeners = function() {
		      mg_window_listeners(this.args);
		      return this;
		    };

		    this.init(args);
		  }

		  var defaults = {
		    y_accessor: 'factor',
		    x_accessor: 'value',
		    baseline_accessor: null,
		    predictor_accessor: null,
		    predictor_proportion: 5,
		    dodge_accessor: null,
		    binned: true,
		    padding_percentage: 0,
		    outer_padding_percentage: 0.1,
		    height: 500,
		    bar_height: 20,
		    top: 45,
		    left: 70,
		    truncate_x_labels: true,
		    truncate_y_labels: true,
		    rotate_x_labels: 0,
		    rotate_y_labels: 0
		  };

		  MG.register('bar', barChart, defaults);

		}).call(this);

		/*
		Data Tables

		Along with histograms, bars, lines, and scatters, a simple data table can take you far.
		We often just want to look at numbers, organized as a table, where columns are variables,
		and rows are data points. Sometimes we want a cell to have a small graphic as the main
		column element, in which case we want small multiples. sometimes we want to

		var table = New data_table(data)
		        .target('div#data-table')
		        .title({accessor: 'point_name', align: 'left'})
		        .description({accessor: 'description'})
		        .number({accessor: ''})

		*/

		MG.data_table = function(args) {
		  'use strict';
		  this.args = args;
		  this.args.standard_col = { width: 150, font_size: 12, font_weight: 'normal' };
		  this.args.columns = [];
		  this.formatting_options = [['color', 'color'], ['font-weight', 'font_weight'], ['font-style', 'font_style'], ['font-size', 'font_size']];

		  this._strip_punctuation = function(s) {
		    var punctuationless = s.replace(/[^a-zA-Z0-9 _]+/g, '');
		    var finalString = punctuationless.replace(/ +?/g, '');
		    return finalString;
		  };

		  this._format_element = function(element, value, args) {
		    this.formatting_options.forEach(function(fo) {
		      var attr = fo[0];
		      var key = fo[1];
		      if (args[key]) element.style(attr,
		        typeof args[key] === 'string' ||
		        typeof args[key] === 'number' ?
		          args[key] : args[key](value));
		    });
		  };

		  this._add_column = function(_args, arg_type) {
		    var standard_column = this.args.standard_col;
		    var args = merge_with_defaults(MG.clone(_args), MG.clone(standard_column));
		    args.type = arg_type;
		    this.args.columns.push(args);
		  };

		  this.target = function() {
		    var target = arguments[0];
		    this.args.target = target;
		    return this;
		  };

		  this.title = function() {
		    this._add_column(arguments[0], 'title');
		    return this;
		  };

		  this.text = function() {
		    this._add_column(arguments[0], 'text');
		    return this;
		  };

		  this.bullet = function() {
		    /*
		    text label
		    main value
		    comparative measure
		    any number of ranges

		    additional args:
		    no title
		    xmin, xmax
		    format: percentage
		    xax_formatter
		    */
		    return this;
		  };

		  this.sparkline = function() {
		    return this;
		  };

		  this.number = function() {
		    this._add_column(arguments[0], 'number');
		    return this;
		  };

		  this.display = function() {
		    var args = this.args;

		    chart_title(args);

		    var target = args.target;
		    var table = d3.select(target).append('table').classed('mg-data-table', true);
		    var colgroup = table.append('colgroup');
		    var thead = table.append('thead');
		    var tbody = table.append('tbody');
		    var this_column;
		    var this_title;

		    var tr, th, td_accessor, td_type, td_value, th_text, td_text, td;
		    var col;
		    var h;

		    tr = thead.append('tr');

		    for (h = 0; h < args.columns.length; h++) {
		      var this_col = args.columns[h];
		      td_type = this_col.type;
		      th_text = this_col.label;
		      th_text = th_text === undefined ? '' : th_text;
		      th = tr.append('th')
		        .style('width', this_col.width)
		        .style('text-align', td_type === 'title' ? 'left' : 'right')
		        .text(th_text);

		      if (args.show_tooltips && this_col.description) {
		        th.append('i')
		          .classed('fa', true)
		          .classed('fa-question-circle', true)
		          .classed('fa-inverse', true);

		        $(th[0]).popover({
		          html: true,
		          animation: false,
		          content: this_col.description,
		          trigger: 'hover',
		          placement: 'top',
		          container: $(th[0])
		         });
		      }
		    }

		    for (h = 0; h < args.columns.length; h++) {
		      col = colgroup.append('col');
		      if (args.columns[h].type === 'number') {
		        col.attr('align', 'char').attr('char', '.');
		      }
		    }

		    for (var i=0; i < args.data.length; i++) {
		      tr = tbody.append('tr');
		      for (var j = 0; j < args.columns.length; j++) {
		        this_column = args.columns[j];
		        td_accessor = this_column.accessor;
		        td_value = td_text = args.data[i][td_accessor];
		        td_type   = this_column.type;

		        if (td_type === 'number') {
		          //td_text may need to be rounded
		          if (this_column.hasOwnProperty('round') && !this_column.hasOwnProperty('format')) {
		            // round according to the number value in this_column.round
		            td_text = d3.format('0,.'+this_column.round+'f')(td_text);
		          }

		          if (this_column.hasOwnProperty('value_formatter')) {
		            // provide a function that formats the text according to the function this_column.format.
		            td_text = this_column.value_formatter(td_text);
		          }

		          if (this_column.hasOwnProperty('format')) {
		            // this is a shorthand for percentage formatting, and others if need be.
		            // supported: 'percentage', 'count', 'temperature'

		            if (this_column.round) {
		              td_text = d3.round(td_text, this_column.round);
		            }

		            var this_format = this_column.format;
		            var formatter;

		            if (this_format === 'percentage')  formatter = d3.format('%p');
		            if (this_format === 'count')     formatter = d3.format("0,000");
		            if (this_format === 'temperature') formatter = function(t) { return t +'°'; };

		            td_text = formatter(td_text);
		          }

		          if (this_column.hasOwnProperty('currency')) {
		            // this is another shorthand for formatting according to a currency amount, which gets appended to front of number
		            td_text = this_column.currency + td_text;
		          }
		        }

		        td = tr.append('td')
		          .classed('table-' + td_type, true)
		          .classed('table-' + td_type + '-' + this._strip_punctuation(td_accessor), true)
		          .attr('data-value', td_value)
		          .style('width', this_column.width)
		          .style('text-align', td_type === 'title' || td_type === 'text' ? 'left' : 'right');

		        this._format_element(td, td_value, this_column);

		        if (td_type === 'title') {
		          this_title = td.append('div').text(td_text);
		          this._format_element(this_title, td_text, this_column);

		          if (args.columns[j].hasOwnProperty('secondary_accessor')) {
		            td.append('div')
		              .text(args.data[i][args.columns[j].secondary_accessor])
		              .classed("secondary-title", true);
		          }
		        } else {
		          td.text(td_text);
		        }
		      }
		    }

		    return this;
		  };

		  return this;
		};

		(function () {
		  'use strict';

		  function mg_missing_add_text (svg, args) {
		    svg.selectAll('.mg-missing-text').data([args.missing_text])
		      .enter().append('text')
		      .attr('class', 'mg-missing-text')
		      .attr('x', args.width / 2)
		      .attr('y', args.height / 2)
		      .attr('dy', '.50em')
		      .attr('text-anchor', 'middle')
		      .text(args.missing_text);
		  }

		  function mg_missing_x_scale (args) {
		    args.scales.X = d3.scale.linear()
		      .domain([0, args.data.length])
		      .range([mg_get_plot_left(args), mg_get_plot_right(args)]);
		    args.scalefns.yf = function (di) { return args.scales.Y(di.y); };
		  }

		  function mg_missing_y_scale (args) {
		    args.scales.Y = d3.scale.linear()
		      .domain([-2, 2])
		      .range([args.height - args.bottom - args.buffer * 2, args.top]);
		    args.scalefns.xf = function (di) { return args.scales.X(di.x); };
		  }

		  function mg_make_fake_data (args) {
		    var data = [];
		    for (var x = 1; x <= 50; x++) {
		      data.push({'x': x, 'y': Math.random() - (x * 0.03)});
		    }
		    args.data = data;
		  }

		  function mg_add_missing_background_rect (g, args) {
		    g.append('svg:rect')
		      .classed('mg-missing-background', true)
		      .attr('x', args.buffer)
		      .attr('y', args.buffer)
		      .attr('width', args.width - args.buffer * 2)
		      .attr('height', args.height - args.buffer * 2)
		      .attr('rx', 15)
		      .attr('ry', 15);
		  }

		  function mg_missing_add_line (g, args) {
		    var line = d3.svg.line()
		      .x(args.scalefns.xf)
		      .y(args.scalefns.yf)
		      .interpolate(args.interpolate);
		    g.append('path')
		      .attr('class', 'mg-main-line mg-line1-color')
		      .attr('d', line(args.data));
		  }

		  function mg_missing_add_area (g, args) {
		    var area = d3.svg.area()
		      .x(args.scalefns.xf)
		      .y0(args.scales.Y.range()[0])
		      .y1(args.scalefns.yf)
		      .interpolate(args.interpolate);
		    g.append('path')
		      .attr('class', 'mg-main-area mg-area1-color')
		      .attr('d', area(args.data));
		  }

		  function mg_remove_all_children (args) {
		    d3.select(args.target).selectAll('svg *').remove();
		  }

		  function mg_missing_remove_legend (args) {
		    if (args.legend_target) {
		      d3.select(args.legend_target).html('');
		    }
		  }

		  function missingData (args) {
		    this.init = function (args) {
		      this.args = args;

		      mg_init_compute_width(args);
		      mg_init_compute_height(args);

		      chart_title(args);

		      // create svg if one doesn't exist

		      var container = d3.select(args.target);
		      mg_raise_container_error(container, args);
		      var svg = container.selectAll('svg');
		      mg_remove_svg_if_chart_type_has_changed(svg, args);
		      svg = mg_add_svg_if_it_doesnt_exist(svg, args);
		      mg_adjust_width_and_height_if_changed(svg, args);
		      mg_set_viewbox_for_scaling(svg, args);
		      mg_remove_all_children(args);

		      svg.classed('mg-missing', true);
		      mg_missing_remove_legend(args);

		      // are we adding a background placeholder
		      if (args.show_missing_background) {
		        mg_make_fake_data(args);
		        mg_missing_x_scale(args);
		        mg_missing_y_scale(args);
		        var g = mg_add_g(svg, 'mg-missing-pane');

		        mg_add_missing_background_rect(g, args);
		        mg_missing_add_line(g, args);
		        mg_missing_add_area(g, args);
		      }

		      mg_missing_add_text(svg, args);

		      this.windowListeners();

		      return this;
		    };

		    this.windowListeners = function () {
		      mg_window_listeners(this.args);
		      return this;
		    };

		    this.init(args);
		  }

		  var defaults = {
		    top: 40, // the size of the top margin
		    bottom: 30, // the size of the bottom margin
		    right: 10, // size of the right margin
		    left: 10, // size of the left margin
		    buffer: 8, // the buffer between the actual chart area and the margins
		    legend_target: '',
		    width: 350,
		    height: 220,
		    missing_text: 'Data currently missing or unavailable',
		    scalefns: {},
		    scales: {},
		    show_tooltips: true,
		    show_missing_background: true,
		    interpolate: 'cardinal'
		  };

		  MG.register('missing-data', missingData, defaults);
		}).call(this);

		function raw_data_transformation(args) {
		  'use strict';

		  // dupe our data so we can modify it without adverse effect
		  args.data = MG.clone(args.data);

		  // we need to account for a few data format cases:
		  // #1 [{key:__, value:__}, ...]                               // unnested obj-arrays
		  // #2 [[{key:__, value:__}, ...], [{key:__, value:__}, ...]]  // nested obj-arrays
		  // #3 [[4323, 2343],..]                                       // unnested 2d array
		  // #4 [[[4323, 2343],..] , [[4323, 2343],..]]                 // nested 2d array

		  args.array_of_objects = false;
		  args.array_of_arrays = false;
		  args.nested_array_of_arrays = false;
		  args.nested_array_of_objects = false;

		  // is the data object a nested array?
		  if (is_array_of_arrays(args.data)) {
		    args.nested_array_of_objects = args.data.map(function(d) {
		      return is_array_of_objects_or_empty(d);
		    });                               // Case #2
		    args.nested_array_of_arrays = args.data.map(function(d) {
		      return is_array_of_arrays(d);
		    });                               // Case #4
		  } else {
		    args.array_of_objects = is_array_of_objects(args.data);     // Case #1
		    args.array_of_arrays = is_array_of_arrays(args.data);     // Case #3
		  }

		  if (args.chart_type === 'line') {
		    if (args.array_of_objects || args.array_of_arrays) {
		      args.data = [args.data];
		    }
		  } else {
		    if (!(args.data[0] instanceof Array)) {
		      args.data = [args.data];
		    }
		  }

		  // if the y_accessor is an array, break it up and store the result in args.data
		  mg_process_multiple_y_accessors(args);

		  // if user supplies keyword in args.color, change to arg.colors.
		  // this is so that the API remains fairly sensible and legible.
		  if (args.color !== undefined) {
		    args.colors = args.color;
		  }

		  // if user has supplied args.colors, and that value is a string, turn it into an array.
		  if (args.colors !== null && typeof args.colors === 'string') {
		    args.colors = [args.colors];
		  }

		  // sort x-axis data
		  if (args.chart_type === 'line' && args.x_sort === true) {
		    for (var i = 0; i < args.data.length; i++) {
		      args.data[i].sort(function(a, b) {
		        return a[args.x_accessor] - b[args.x_accessor];
		      });
		    }
		  }

		  return this;
		}

		function mg_process_multiple_y_accessors(args) {
		  if (args.y_accessor instanceof Array) {
		    args.data = args.data.map(function(_d) {
		      return args.y_accessor.map(function(ya) {
		        return _d.map(function(di) {
		          di = MG.clone(di);

		          if (di[ya] === undefined) {
		            return undefined;
		          }

		          di['multiline_y_accessor'] = di[ya];
		          return di;
		        }).filter(function(di) {
		          return di !== undefined;
		        });
		      });
		    })[0];

		    args.y_accessor = 'multiline_y_accessor';
		  }
		}

		MG.raw_data_transformation = raw_data_transformation;

		function process_line(args) {
		  'use strict';

		  var time_frame;

		  // do we have a time-series?
		  var is_time_series = d3.sum(args.data.map(function(series) {
		    return series.length > 0 && series[0][args.x_accessor] instanceof Date;
		  })) > 0;

		  // force linear interpolation when missing_is_hidden is enabled
		  if (args.missing_is_hidden) {
		    args.interpolate = 'linear';
		  }

		  // are we replacing missing y values with zeros?
		  if ((args.missing_is_zero || args.missing_is_hidden)
		      && args.chart_type === 'line'
		      && is_time_series
		    ) {
		    for (var i = 0; i < args.data.length; i++) {
		      // we need to have a dataset of length > 2, so if it's less than that, skip
		      if (args.data[i].length <= 1) {
		        continue;
		      }

		      var first = args.data[i][0];
		      var last = args.data[i][args.data[i].length-1];

		      // initialize our new array for storing the processed data
		      var processed_data = [];

		      // we'll be starting from the day after our first date
		      var start_date = MG.clone(first[args.x_accessor]).setDate(first[args.x_accessor].getDate() + 1);

		      // if we've set a max_x, add data points up to there
		      var from = (args.min_x) ? args.min_x : start_date;
		      var upto = (args.max_x) ? args.max_x : last[args.x_accessor];

		      time_frame = mg_get_time_frame((upto-from)/1000);

		      if (time_frame == 'default' && args.missing_is_hidden_accessor === null) {
		        for (var d = new Date(from); d <= upto; d.setDate(d.getDate() + 1)) {
		          var o = {};
		          d.setHours(0, 0, 0, 0);

		          // add the first date item, we'll be starting from the day after our first date
		          if (Date.parse(d) === Date.parse(new Date(start_date))) {
		            processed_data.push(MG.clone(args.data[i][0]));
		          }

		          // check to see if we already have this date in our data object
		          var existing_o = null;
		          args.data[i].forEach(function(val, i) {
		            if (Date.parse(val[args.x_accessor]) === Date.parse(new Date(d))) {
		              existing_o = val;

		              return false;
		            }
		          });

		          // if we don't have this date in our data object, add it and set it to zero
		          if (!existing_o) {
		            o[args.x_accessor] = new Date(d);
		            o[args.y_accessor] = 0;
		            o['_missing'] = true; //we want to distinguish between zero-value and missing observations
		            processed_data.push(o);
		          }

		          // if the data point has, say, a 'missing' attribute set or if its
		          // y-value is null identify it internally as missing
		          else if (existing_o[args.missing_is_hidden_accessor]
		              || existing_o[args.y_accessor] === null
		            ) {
		            existing_o['_missing'] = true;
		            processed_data.push(existing_o);
		          }

		          //otherwise, use the existing object for that date
		          else {
		            processed_data.push(existing_o);
		          }
		        }
		      } else {
		        for (var j = 0; j < args.data[i].length; j += 1) {
		          var obj = MG.clone(args.data[i][j]);
		          obj['_missing'] = args.data[i][j][args.missing_is_hidden_accessor];
		          processed_data.push(obj);
		        }
		      }

		      // update our date object
		      args.data[i] = processed_data;
		    }
		  }

		  return this;
		}

		MG.process_line = process_line;

		function process_histogram(args) {
		  'use strict';

		  // if args.binned == false, then we need to bin the data appropriately.
		  // if args.binned == true, then we need to make sure to compute the relevant computed data.
		  // the outcome of either of these should be something in args.computed_data.
		  // the histogram plotting function will be looking there for the data to plot.

		  // we need to compute an array of objects.
		  // each object has an x, y, and dx.

		  // histogram data is always single dimension
		  var our_data = args.data[0];

		  var extracted_data;
		  if (args.binned === false) {
		    // use d3's built-in layout.histogram functionality to compute what you need.

		    if (typeof(our_data[0]) === 'object') {
		      // we are dealing with an array of objects. Extract the data value of interest.
		      extracted_data = our_data
		        .map(function(d) {
		          return d[args.x_accessor];
		        });
		    } else if (typeof(our_data[0]) === 'number') {
		      // we are dealing with a simple array of numbers. No extraction needed.
		      extracted_data = our_data;
		    } else {
		      console.log('TypeError: expected an array of numbers, found ' + typeof(our_data[0]));
		      return;
		    }

		    var hist = d3.layout.histogram();
		    if (args.bins) {
		      hist = hist.bins(args.bins);
		    }

		    args.processed_data = hist(extracted_data)
		      .map(function(d) {
		        // extract only the data we need per data point.
		        return {'x': d.x, 'y': d.y, 'dx': d.dx};
		      });
		  } else {
		    // here, we just need to reconstruct the array of objects
		    // take the x accessor and y accessor.
		    // pull the data as x and y. y is count.

		    args.processed_data = our_data.map(function(d) {
		      return {'x': d[args.x_accessor], 'y': d[args.y_accessor]};
		    });

		    var this_pt;
		    var next_pt;

		    // we still need to compute the dx component for each data point
		    for (var i=0; i < args.processed_data.length; i++) {
		      this_pt = args.processed_data[i];
		      if (i === args.processed_data.length - 1) {
		        this_pt.dx = args.processed_data[i-1].dx;
		      } else {
		        next_pt = args.processed_data[i+1];
		        this_pt.dx = next_pt.x - this_pt.x;
		      }
		    }
		  }

		  // capture the original data and accessors before replacing args.data
		  if (!args.processed) {
		    args.processed = {};
		  }
		  args.processed.original_data = args.data;
		  args.processed.original_x_accessor = args.x_accessor;
		  args.processed.original_y_accessor = args.y_accessor;

		  args.data = [args.processed_data];
		  args.x_accessor = args.processed_x_accessor;
		  args.y_accessor = args.processed_y_accessor;

		  return this;
		}

		MG.process_histogram = process_histogram;

		// for use with bar charts, etc.
		function process_categorical_variables(args) {
		  'use strict';

		  var extracted_data, processed_data={}, pd=[];
		  var our_data = args.data[0];
		  var label_accessor = args.bar_orientation === 'vertical' ? args.x_accessor : args.y_accessor;
		  var data_accessor =  args.bar_orientation === 'vertical' ? args.y_accessor : args.x_accessor;

		  args.categorical_variables = [];
		  if (args.binned === false) {
		    if (typeof(our_data[0]) === 'object') {
		      // we are dealing with an array of objects, extract the data value of interest
		      extracted_data = our_data
		        .map(function(d) {
		          return d[label_accessor];
		        });
		    } else {
		      extracted_data = our_data;
		    }

		    var this_dp;

		    for (var i = 0; i < extracted_data.length; i++) {
		      this_dp=extracted_data[i];
		      if (args.categorical_variables.indexOf(this_dp) === -1) args.categorical_variables.push(this_dp);
		      if (!processed_data.hasOwnProperty(this_dp)) processed_data[this_dp] = 0;

		      processed_data[this_dp] += 1;
		    }

		    processed_data = Object.keys(processed_data).map(function(d) {
		      var obj = {};
		      obj[data_accessor] = processed_data[d];
		      obj[label_accessor] = d;
		      return obj;
		    });
		  } else {
		    // nothing needs to really happen here
		    processed_data = our_data;
		    args.categorical_variables = d3.set(processed_data.map(function(d) {
		      return d[label_accessor];
		    })).values();
		    args.categorical_variables.reverse();
		  }

		  args.data = [processed_data];
		  return this;
		}

		MG.process_categorical_variables = process_categorical_variables;

		function process_point(args) {
		  'use strict';

		  var data = args.data[0];
		  var x = data.map(function(d) { return d[args.x_accessor]; });
		  var y = data.map(function(d) { return d[args.y_accessor]; });

		  if (args.least_squares) {
		    args.ls_line = least_squares(x,y);
		  }

		  return this;
		}

		MG.process_point = process_point;

		function add_ls(args) {
		  var svg = mg_get_svg_child_of(args.target);
		  var data = args.data[0];
		  var min_x = d3.min(data, function(d) { return d[args.x_accessor]; });
		  var max_x = d3.max(data, function(d) { return d[args.x_accessor]; });

		  d3.select(args.target).selectAll('.mg-least-squares-line').remove();

		  svg.append('svg:line')
		    .attr('x1', args.scales.X(min_x))
		    .attr('x2', args.scales.X(max_x))
		    .attr('y1', args.scales.Y(args.ls_line.fit(min_x)) )
		    .attr('y2', args.scales.Y(args.ls_line.fit(max_x)) )
		    .attr('class', 'mg-least-squares-line');
		}

		MG.add_ls = add_ls;

		function add_lowess(args) {
		  var svg = d3.select($(args.target).find('svg').get(0));
		  var lowess = args.lowess_line;

		  var line = d3.svg.line()
		    .x(function(d) { return args.scales.X(d.x); })
		    .y(function(d) { return args.scales.Y(d.y); })
		      .interpolate(args.interpolate);

		  svg.append('path')
		    .attr('d', line(lowess))
		    .attr('class', 'mg-lowess-line');
		}

		MG.add_lowess = add_lowess;

		function lowess_robust(x, y, alpha, inc) {
		  // Used http://www.unc.edu/courses/2007spring/biol/145/001/docs/lectures/Oct27.html
		  // for the clear explanation of robust lowess.

		  // calculate the the first pass.
		  var _l;
		  var r = [];
		  var yhat = d3.mean(y);
		  var i;
		  for (i = 0; i < x.length; i += 1) { r.push(1); }
		  _l = _calculate_lowess_fit(x,y,alpha, inc, r);
		  var x_proto = _l.x;
		  var y_proto = _l.y;

		  // Now, take the fit, recalculate the weights, and re-run LOWESS using r*w instead of w.

		  for (i = 0; i < 100; i += 1) {
		    r = d3.zip(y_proto, y).map(function(yi) {
		      return Math.abs(yi[1] - yi[0]);
		    });

		    var q = d3.quantile(r.sort(), 0.5);

		    r = r.map(function(ri) {
		      return _bisquare_weight(ri / (6 * q));
		    });

		    _l = _calculate_lowess_fit(x,y,alpha,inc, r);
		    x_proto = _l.x;
		    y_proto = _l.y;
		  }

		  return d3.zip(x_proto, y_proto).map(function(d) {
		    var p = {};
		    p.x = d[0];
		    p.y = d[1];
		    return p;
		  });
		}

		MG.lowess_robust = lowess_robust;

		function lowess(x, y, alpha, inc) {
		  var r = [];
		  for (var i = 0; i < x.length; i += 1) { r.push(1); }
		  var _l = _calculate_lowess_fit(x, y, alpha, inc, r);
		}

		MG.lowess = lowess;

		function least_squares(x_, y_) {
		  var x, y, xi, yi,
		    _x  = 0,
		    _y  = 0,
		    _xy = 0,
		    _xx = 0;

		  var n = x_.length;
		  if (x_[0] instanceof Date) {
		    x = x_.map(function(d) {
		      return d.getTime();
		    });
		  } else {
		    x = x_;
		  }

		  if (y_[0] instanceof Date) {
		    y = y_.map(function(d) {
		      return d.getTime();
		    });
		  } else {
		    y = y_;
		  }

		  var xhat = d3.mean(x);
		  var yhat = d3.mean(y);
		  var numerator = 0, denominator = 0;

		  for (var i = 0; i < x.length; i++) {
		    xi = x[i];
		    yi = y[i];
		    numerator += (xi - xhat) * (yi - yhat);
		    denominator += (xi - xhat) * (xi - xhat);
		  }

		  var beta = numerator / denominator;
		  var x0 = yhat - beta * xhat;

		  return {
		    x0: x0,
		    beta: beta,
		    fit: function(x) {
		      return x0 + x * beta;
		    }
		  };
		}

		MG.least_squares = least_squares;

		function _pow_weight(u, w) {
		  if (u >= 0 && u <= 1) {
		    return Math.pow(1 - Math.pow(u,w), w);
		  } else {
		    return 0;
		  }
		}

		function _bisquare_weight(u) {
		  return _pow_weight(u, 2);
		}

		function _tricube_weight(u) {
		  return _pow_weight(u, 3);
		}

		function _neighborhood_width(x0, xis) {
		  return Array.max(xis.map(function(xi) {
		    return Math.abs(x0 - xi);
		  }));
		}

		function _manhattan(x1,x2) {
		  return Math.abs(x1 - x2);
		}

		function _weighted_means(wxy) {
		  var wsum = d3.sum(wxy.map(function(wxyi) { return wxyi.w; }));

		  return {
		    xbar: d3.sum(wxy.map(function(wxyi) {
		      return wxyi.w * wxyi.x;
		    })) / wsum,
		    ybar:d3.sum(wxy.map(function(wxyi) {
		      return wxyi.w * wxyi.y;
		    })) / wsum
		  };
		}

		function _weighted_beta(wxy, xbar, ybar) {
		  var num = d3.sum(wxy.map(function(wxyi) {
		    return Math.pow(wxyi.w, 2) * (wxyi.x - xbar) * (wxyi.y - ybar);
		  }));

		  var denom = d3.sum(wxy.map(function(wxyi) {
		    return Math.pow(wxyi.w, 2) * Math.pow(wxyi.x - xbar, 2);
		  }));

		  return num / denom;
		}

		function _weighted_least_squares(wxy) {
		  var ybar, xbar, beta_i, x0;

		  var _wm = _weighted_means(wxy);

		  xbar = _wm.xbar;
		  ybar = _wm.ybar;

		  var beta = _weighted_beta(wxy, xbar, ybar);

		  return {
		    beta : beta,
		    xbar : xbar,
		    ybar : ybar,
		    x0   : ybar - beta * xbar

		  };
		}

		function _calculate_lowess_fit(x, y, alpha, inc, residuals) {
		  // alpha - smoothing factor. 0 < alpha < 1/
		  //
		  //
		  var k = Math.floor(x.length * alpha);

		  var sorted_x = x.slice();

		  sorted_x.sort(function(a,b) {
		    if (a < b) { return -1; }
		    else if (a > b) { return 1; }

		    return 0;
		  });

		  var x_max = d3.quantile(sorted_x, 0.98);
		  var x_min = d3.quantile(sorted_x, 0.02);

		  var xy = d3.zip(x, y, residuals).sort();

		  var size = Math.abs(x_max - x_min) / inc;

		  var smallest = x_min;
		  var largest = x_max;
		  var x_proto = d3.range(smallest, largest, size);

		  var xi_neighbors;
		  var x_i, beta_i, x0_i, delta_i, xbar, ybar;

		  // for each prototype, find its fit.
		  var y_proto = [];

		  for (var i = 0; i < x_proto.length; i += 1) {
		    x_i = x_proto[i];

		    // get k closest neighbors.
		    xi_neighbors = xy.map(function(xyi) {
		      return [
		        Math.abs(xyi[0] - x_i),
		        xyi[0],
		        xyi[1],
		        xyi[2]];
		    }).sort().slice(0, k);

		    // Get the largest distance in the neighbor set.
		    delta_i = d3.max(xi_neighbors)[0];

		    // Prepare the weights for mean calculation and WLS.

		    xi_neighbors = xi_neighbors.map(function(wxy) {
		      return {
		        w : _tricube_weight(wxy[0] / delta_i) * wxy[3],
		        x : wxy[1],
		        y  :wxy[2]
		      };
		    });

		    // Find the weighted least squares, obviously.
		    var _output = _weighted_least_squares(xi_neighbors);

		    x0_i = _output.x0;
		    beta_i = _output.beta;

		    //
		    y_proto.push(x0_i + beta_i * x_i);
		  }

		  return {x: x_proto, y: y_proto};
		}

		function format_rollover_number(args) {
		  var num;
		  if (args.format === 'count') {
		    num = function(d_) {
		      var is_float = d_ % 1 !== 0;
		      var n = d3.format("0,000");
		      d_ = is_float ? d3.round(d_, args.decimals) : d_;
		      return n(d_);
		    };
		  } else {
		    num = function(d_) {
		      var fmt_string = (args.decimals ? '.' + args.decimals : '' ) + '%';
		      var n = d3.format(fmt_string);
		      return n(d_);
		    };
		  }
		  return num;
		}

		var time_rollover_format = function (f, d, accessor, utc) {
		  var fd;
		  if (typeof f === 'string') {
		    fd = MG.time_format(utc, f)(d[accessor]);
		  } else if (typeof f === 'function') {
		    fd = f(d);
		  } else {
		    fd = d[accessor];
		  }
		  return fd;
		};

		// define our rollover format for numbers
		var number_rollover_format = function (f, d, accessor) {
		  var fd;
		  if (typeof f === 'string') {
		    fd = d3.format(f)(d[accessor]);
		  } else if (typeof f === 'function') {
		    fd = f(d);
		  } else {
		    fd = d[accessor];
		  }
		  return fd;
		};

		function mg_format_y_rollover(args, num, d) {
		  var formatted_y;
		  if (args.y_mouseover !== null) {
		    if (args.aggregate_rollover) {
		      formatted_y = number_rollover_format(args.y_mouseover, d, args.y_accessor);
		    } else {
		      formatted_y = number_rollover_format(args.y_mouseover, d, args.y_accessor);
		    }
		  } else {
		    if (args.time_series) {
		      if (args.aggregate_rollover) {
		        formatted_y = num(d[args.y_accessor]);//number_rollover_format(args.y_rollover_format, d, args.y_accessor);
		      } else {
		        formatted_y = args.yax_units + num(d[args.y_accessor]);
		      }
		    }
		    else {
		      formatted_y = args.y_accessor + ': ' + args.yax_units + num(d[args.y_accessor]);
		    }
		  }
		  return formatted_y;
		}

		function mg_format_x_rollover(args, fmt, d) {
		  var formatted_x;
		  if (args.x_mouseover !== null) {
		    if (args.time_series) {
		      if (args.aggregate_rollover) {
		        formatted_x = time_rollover_format(args.x_mouseover, d, 'key', args.utc);
		      } else {
		        formatted_x = time_rollover_format(args.x_mouseover, d, args.x_accessor, args.utc);
		      }
		    } else {
		      formatted_x = number_rollover_format(args.x_mouseover, d, args.x_accessor);
		    }
		  } else {
		    if (args.time_series) {
		    var date;

		    if (args.aggregate_rollover && args.data.length > 1) {
		      date = new Date(d.key);
		    } else {
		      date = new Date(+d[args.x_accessor]);
		      date.setDate(date.getDate());
		    }

		    formatted_x = fmt(date) + '  ';
		    } else {
		      formatted_x = args.x_accessor + ': ' + d[args.x_accessor] + ', ';
		    }
		  }
		  return formatted_x;
		}

		MG.format_rollover_number = format_rollover_number;

		// http://bl.ocks.org/mbostock/3916621
		function path_tween(d1, precision) {
		  return function() {
		    var path0 = this,
		        path1 = path0.cloneNode(),
		        n0 = path0.getTotalLength() || 0,
		        n1 = (path1.setAttribute("d", d1), path1).getTotalLength() || 0;

		    // Uniform sampling of distance based on specified precision.
		    var distances = [0], i = 0, dt = precision / Math.max(n0, n1);
		    while ((i += dt) < 1) distances.push(i);
		    distances.push(1);

		    // Compute point-interpolators at each distance.
		    var points = distances.map(function(t) {
		      var p0 = path0.getPointAtLength(t * n0),
		          p1 = path1.getPointAtLength(t * n1);
		      return d3.interpolate([p0.x, p0.y], [p1.x, p1.y]);
		    });

		    return function(t) {
		      return t < 1 ? "M" + points.map(function(p) { return p(t); }).join("L") : d1;
		    };
		  };
		}

		MG.path_tween = path_tween;

		//a set of helper functions, some that we've written, others that we've borrowed

		MG.convert = {};

		MG.convert.date = function(data, accessor, time_format) {
		  time_format = (typeof time_format === "undefined") ? '%Y-%m-%d' : time_format;
		  data = data.map(function(d) {
		    var fff = d3.time.format(time_format);
		    d[accessor] = fff.parse(d[accessor]);
		    return d;
		  });

		  return data;
		};

		MG.convert.number = function(data, accessor) {
		  data = data.map(function(d) {
		    d[accessor] = Number(d[accessor]);
		    return d;
		  });

		  return data;
		};

		MG.time_format = function(utc, specifier) {
		  return utc ? d3.time.format.utc(specifier) : d3.time.format(specifier);
		};

		function mg_get_rollover_time_format(args) {
		  var fmt;
		  switch (args.processed.x_time_frame) {
		  case 'millis':
		    fmt = MG.time_format(args.utc_time, '%b %e, %Y  %H:%M:%S.%L');
		    break;
		  case 'seconds':
		    fmt = MG.time_format(args.utc_time, '%b %e, %Y  %H:%M:%S');
		    break;
		  case 'less-than-a-day':
		    fmt = MG.time_format(args.utc_time, '%b %e, %Y  %I:%M%p');
		    break;
		  case 'four-days':
		    fmt = MG.time_format(args.utc_time, '%b %e, %Y  %I:%M%p');
		    break;
		  default:
		    fmt = MG.time_format(args.utc_time, '%b %e, %Y');
		  }
		  return fmt;
		}

		function mg_data_in_plot_bounds (datum, args) {
		  return datum[args.x_accessor] >= args.processed.min_x &&
		      datum[args.x_accessor] <= args.processed.max_x &&
		      datum[args.y_accessor] >= args.processed.min_y &&
		      datum[args.y_accessor] <= args.processed.max_y;
		}

		function is_array(thing) {
		  return Object.prototype.toString.call(thing) === '[object Array]';
		}

		function is_function(thing) {
		  return Object.prototype.toString.call(thing) === '[object Function]';
		}

		function is_empty_array(thing) {
		  return is_array(thing) && thing.length === 0;
		}

		function is_object(thing) {
		  return Object.prototype.toString.call(thing) === '[object Object]';
		}

		function is_array_of_arrays(data) {
		  var all_elements = data.map(function(d) {
		    return is_array(d) === true && d.length > 0;
		  });

		  return d3.sum(all_elements) === data.length;
		}

		function is_array_of_objects(data) {
		  // is every element of data an object?
		  var all_elements = data.map(function(d) {
		    return is_object(d)===true;
		  });

		  return d3.sum(all_elements) === data.length;
		}

		function is_array_of_objects_or_empty(data) {
		  return is_empty_array(data) || is_array_of_objects(data);
		}


		function mg_get_bottom (args) {
		  return args.height - args.bottom;
		}

		function mg_get_plot_bottom (args) {
		  // returns the pixel location of the bottom side of the plot area.
		  return mg_get_bottom(args) - args.buffer;
		}

		function mg_get_top (args) {
		  return args.top;
		}

		function mg_get_plot_top (args) {
		  // returns the pixel location of the top side of the plot area.
		  return mg_get_top(args) + args.buffer;
		}

		function mg_get_left (args) {
		  return args.left;
		}

		function mg_get_plot_left (args) {
		  // returns the pixel location of the left side of the plot area.
		  return mg_get_left(args) + args.buffer;
		}

		function mg_get_right (args) {
		  return args.width - args.right;
		}

		function mg_get_plot_right (args) {
		  // returns the pixel location of the right side of the plot area.
		  return mg_get_right(args) - args.buffer;
		}

		//////// adding elements, removing elements /////////////

		function mg_exit_and_remove (elem) {
		  elem.exit().remove();
		}

		function mg_selectAll_and_remove (svg, cl) {
		  svg.selectAll(cl).remove();
		}

		function mg_add_g (svg, cl) {
		  return svg.append('g').classed(cl, true);
		}

		function mg_remove_element(svg, elem) {
		  svg.select(elem).remove();
		}


		//////// axis helper functions ////////////

		function mg_make_rug(args, rug_class) {
		  var svg = mg_get_svg_child_of(args.target);
		  var all_data = mg_flatten_array(args.data);
		  var rug = svg.selectAll('line.'+rug_class).data(all_data);

		  //set the attributes that do not change after initialization, per
		  rug.enter().append('svg:line').attr('class', rug_class).attr('opacity', 0.3);

		  //remove rug elements that are no longer in use
		  mg_exit_and_remove(rug);

		  //set coordinates of new rug elements
		  mg_exit_and_remove(rug);
		  return rug;
		}

		function mg_add_scale_function(args, scalefcn_name, scale, accessor) {
		  args.scalefns[scalefcn_name] = function(di) {
		    return args.scales[scale](di[accessor]);
		  };
		}

		function mg_add_color_accessor_to_rug (rug, args, rug_mono_class) {
		  if (args.color_accessor) {
		    rug.attr('stroke', args.scalefns.color);
		    rug.classed(rug_mono_class, false);
		  } else {
		    rug.attr('stroke', null);
		    rug.classed(rug_mono_class, true);
		  }
		}

		function mg_add_categorical_scale (args, scale_name, categorical_variables, low, high, padding, padding_percentage) {
		  args.scales[scale_name] = d3.scale.ordinal()
		    .domain(categorical_variables)
		    .rangeRoundBands([low, high], padding || 0, padding_percentage || 0);
		}

		function mg_rotate_labels (labels, rotation_degree) {
		  if (rotation_degree) {
		    labels.attr({
		      dy: 0,
		      transform: function() {
		        var elem = d3.select(this);
		        return 'rotate('+rotation_degree+' '+elem.attr('x')+','+elem.attr('y')+')';
		      }
		    });
		  }
		}

		//////////////////////////////////////////////////


		function mg_elements_are_overlapping(labels) {
		  labels = labels[0];
		  for (var i =0; i < labels.length; i++) {
		    if ( mg_is_horizontally_overlapping(labels[i], labels)) return true;
		  }

		  return false;
		}

		function mg_prevent_horizontal_overlap(labels, args) {
		  if (!labels || labels.length == 1) {
		    return;
		  }

		  //see if each of our labels overlaps any of the other labels
		  for (var i = 0; i < labels.length; i++) {
		    //if so, nudge it up a bit, if the label it intersects hasn't already been nudged
		    if (mg_is_horizontally_overlapping(labels[i], labels)) {
		      var node = d3.select(labels[i]);
		      var newY = +node.attr('y');
		      if (newY + 8 >= args.top) {
		        newY = args.top - 16;
		      }
		      node.attr('y', newY);
		    }
		  }
		}

		function mg_prevent_vertical_overlap(labels, args) {
		  if (!labels || labels.length == 1) {
		    return;
		  }

		  labels.sort(function(b,a) {
		    return d3.select(a).attr('y') - d3.select(b).attr('y');
		  });

		  labels.reverse();

		  var overlap_amount, label_i, label_j;

		  //see if each of our labels overlaps any of the other labels
		  for (var i = 0; i < labels.length; i++) {
		    //if so, nudge it up a bit, if the label it intersects hasn't already been nudged
		    label_i = d3.select(labels[i]).text();

		    for (var j = 0; j < labels.length; j ++) {
		      label_j = d3.select(labels[j]).text();
		      overlap_amount = mg_is_vertically_overlapping(labels[i], labels[j]);

		      if (overlap_amount !== false && label_i !== label_j) {
		        var node = d3.select(labels[i]);
		        var newY = +node.attr('y');
		        newY = newY + overlap_amount;
		        node.attr('y', newY);
		      }
		    }
		  }
		}

		function mg_is_vertically_overlapping(element, sibling) {
		  var element_bbox = element.getBoundingClientRect();
		  var sibling_bbox = sibling.getBoundingClientRect();

		  if (element_bbox.top <= sibling_bbox.bottom && element_bbox.top >= sibling_bbox.top) {
		    return sibling_bbox.bottom - element_bbox.top;
		  }

		  return false;
		}

		function mg_is_horiz_overlap(element, sibling) {
		  var element_bbox = element.getBoundingClientRect();
		  var sibling_bbox = sibling.getBoundingClientRect();

		  if (element_bbox.right >= sibling_bbox.left || element_bbox.top >= sibling_bbox.top) {
		    return sibling_bbox.bottom - element_bbox.top;
		  }
		  return false;
		}

		function mg_is_horizontally_overlapping(element, labels) {
		  var element_bbox = element.getBoundingClientRect();

		  for (var i = 0; i < labels.length; i++) {
		    if (labels[i] == element) {
		      continue;
		    }

		    //check to see if this label overlaps with any of the other labels
		    var sibling_bbox = labels[i].getBoundingClientRect();
		    if (element_bbox.top === sibling_bbox.top &&
		        !(sibling_bbox.left > element_bbox.right || sibling_bbox.right < element_bbox.left)
		      ) {
		      return true;
		    }
		  }

		  return false;
		}

		function mg_get_svg_child_of(selector_or_node) {
		  return d3.select(selector_or_node).select('svg');
		}

		function mg_flatten_array(arr) {
		  var flat_data = [];
		  return flat_data.concat.apply(flat_data, arr);
		}

		function mg_next_id() {
		  if (typeof MG._next_elem_id === 'undefined') {
		    MG._next_elem_id = 0;
		  }

		  return 'mg-'+(MG._next_elem_id++);
		}

		function mg_target_ref(target) {
		  if (typeof target === 'string') {
		    return mg_normalize(target);

		  } else if (target instanceof HTMLElement) {
		    target_ref = target.getAttribute('data-mg-uid');
		    if (!target_ref) {
		      target_ref = mg_next_id();
		      target.setAttribute('data-mg-uid', target_ref);
		    }

		    return target_ref;

		  } else {
		    console.warn('The specified target should be a string or an HTMLElement.', target);
		    return mg_normalize(target);
		  }
		}

		function mg_normalize(string) {
		  return string
		    .replace(/[^a-zA-Z0-9 _-]+/g, '')
		    .replace(/ +?/g, '');
		}

		function get_pixel_dimension(target, dimension) {
		  return Number(d3.select(target).style(dimension).replace(/px/g, ''));
		}

		function get_width(target) {
		  return get_pixel_dimension(target, 'width');
		}

		function get_height(target) {
		  return get_pixel_dimension(target, 'height');
		}

		function isNumeric(n) {
		  return !isNaN(parseFloat(n)) && isFinite(n);
		}

		var each = function(obj, iterator, context) {
		  // yanked out of underscore
		  var breaker = {};
		  if (obj === null) return obj;
		  if (Array.prototype.forEach && obj.forEach === Array.prototype.forEach) {
		    obj.forEach(iterator, context);
		  } else if (obj.length === +obj.length) {
		    for (var i = 0, length = obj.length; i < length; i++) {
		      if (iterator.call(context, obj[i], i, obj) === breaker) return;
		    }
		  } else {
		    for (var k in obj) {
		      if (iterator.call(context, obj[k], k, obj) === breaker) return;
		    }
		  }

		  return obj;
		};

		function merge_with_defaults(obj) {
		  // taken from underscore
		  each(Array.prototype.slice.call(arguments, 1), function(source) {
		    if (source) {
		    for (var prop in source) {
		      if (obj[prop] === void 0) obj[prop] = source[prop];
		    }
		    }
		  });

		  return obj;
		}

		MG.merge_with_defaults = merge_with_defaults;

		function number_of_values(data, accessor, value) {
		  var values = data.filter(function(d) {
		    return d[accessor] === value;
		  });

		  return values.length;
		}

		function has_values_below(data, accessor, value) {
		  var values = data.filter(function(d) {
		    return d[accessor] <= value;
		  });

		  return values.length > 0;
		}

		function has_too_many_zeros(data, accessor, zero_count) {
		  return number_of_values(data, accessor, 0) >= zero_count;
		}

		//deep copy
		//http://stackoverflow.com/questions/728360/most-elegant-way-to-clone-a-javascript-object
		MG.clone = function(obj) {
		  var copy;

		  // Handle the 3 simple types, and null or undefined
		  if (null === obj || "object" !== typeof obj) return obj;

		  // Handle Date
		  if (obj instanceof Date) {
		    copy = new Date();
		    copy.setTime(obj.getTime());
		    return copy;
		  }

		  // Handle Array
		  if (obj instanceof Array) {
		    copy = [];
		    for (var i = 0, len = obj.length; i < len; i++) {
		      copy[i] = MG.clone(obj[i]);
		    }
		    return copy;
		  }

		  // Handle Object
		  if (obj instanceof Object) {
		    copy = {};
		    for (var attr in obj) {
		      if (obj.hasOwnProperty(attr)) copy[attr] = MG.clone(obj[attr]);
		    }
		    return copy;
		  }

		  throw new Error("Unable to copy obj! Its type isn't supported.");
		};

		//give us the difference of two int arrays
		//http://radu.cotescu.com/javascript-diff-function/
		function arr_diff(a,b) {
		  var seen = [],
		    diff = [],
		    i;
		  for (i = 0; i < b.length; i++)
		    seen[b[i]] = true;
		  for (i = 0; i < a.length; i++)
		    if (!seen[a[i]])
		      diff.push(a[i]);
		  return diff;
		}

		MG.arr_diff = arr_diff;

		/**
		  Print warning message to the console when a feature has been scheduled for removal

		  @author Dan de Havilland (github.com/dandehavilland)
		  @date 2014-12
		*/
		function warn_deprecation(message, untilVersion) {
		  console.warn('Deprecation: ' + message + (untilVersion ? '. This feature will be removed in ' + untilVersion + '.' : ' the near future.'));
		  console.trace();
		}

		MG.warn_deprecation = warn_deprecation;

		/**
		  Truncate a string to fit within an SVG text node
		  CSS text-overlow doesn't apply to SVG <= 1.2

		  @author Dan de Havilland (github.com/dandehavilland)
		  @date 2014-12-02
		*/
		function truncate_text(textObj, textString, width) {
		  var bbox,
		  position = 0;

		  textObj.textContent = textString;
		  bbox = textObj.getBBox();

		  while (bbox.width > width) {
		    textObj.textContent = textString.slice(0, --position) + '...';
		    bbox = textObj.getBBox();

		    if (textObj.textContent === '...') {
		      break;
		    }
		  }
		}

		MG.truncate_text = truncate_text;

		/**
		  Wrap the contents of a text node to a specific width

		  Adapted from bl.ocks.org/mbostock/7555321

		  @author Mike Bostock
		  @author Dan de Havilland
		  @date 2015-01-14
		*/
		function wrap_text(text, width, token, tspanAttrs) {
		  text.each(function() {
		    var text = d3.select(this),
		      words = text.text().split(token || /\s+/).reverse(),
		      word,
		      line = [],
		      lineNumber = 0,
		      lineHeight = 1.1, // ems
		      y = text.attr("y"),
		      dy = 0,
		      tspan = text.text(null)
		        .append("tspan")
		        .attr("x", 0)
		        .attr("y", dy + "em")
		        .attr(tspanAttrs || {});

		    while (!!(word = words.pop())) {
		      line.push(word);
		      tspan.text(line.join(" "));
		      if (width === null || tspan.node().getComputedTextLength() > width) {
		        line.pop();
		        tspan.text(line.join(" "));
		        line = [word];
		        tspan = text
		          .append("tspan")
		          .attr("x", 0)
		          .attr("y", ++lineNumber * lineHeight + dy + "em")
		          .attr(tspanAttrs || {})
		          .text(word);
		      }
		    }
		  });
		}

		MG.wrap_text = wrap_text;

		// call this to add a warning icon to a graph and log an error to the console
		function error (args) {
		  console.log('ERROR : ', args.target, ' : ', args.error);

		  d3.select(args.target).select('.mg-chart-title')
		    .append('i')
		    .attr('class', 'fa fa-x fa-exclamation-circle warning');
		}

		function internal_error (args) {
		  console.log('INTERNAL ERROR : ', args.target, ' : ', args.internal_error);
		}

		MG.error = error;

		return MG;
		}));

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
		  var d3 = {
		    version: "3.5.15"
		  };
		  var d3_arraySlice = [].slice, d3_array = function(list) {
		    return d3_arraySlice.call(list);
		  };
		  var d3_document = this.document;
		  function d3_documentElement(node) {
		    return node && (node.ownerDocument || node.document || node).documentElement;
		  }
		  function d3_window(node) {
		    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
		  }
		  if (d3_document) {
		    try {
		      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
		    } catch (e) {
		      d3_array = function(list) {
		        var i = list.length, array = new Array(i);
		        while (i--) array[i] = list[i];
		        return array;
		      };
		    }
		  }
		  if (!Date.now) Date.now = function() {
		    return +new Date();
		  };
		  if (d3_document) {
		    try {
		      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
		    } catch (error) {
		      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
		      d3_element_prototype.setAttribute = function(name, value) {
		        d3_element_setAttribute.call(this, name, value + "");
		      };
		      d3_element_prototype.setAttributeNS = function(space, local, value) {
		        d3_element_setAttributeNS.call(this, space, local, value + "");
		      };
		      d3_style_prototype.setProperty = function(name, value, priority) {
		        d3_style_setProperty.call(this, name, value + "", priority);
		      };
		    }
		  }
		  d3.ascending = d3_ascending;
		  function d3_ascending(a, b) {
		    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
		  }
		  d3.descending = function(a, b) {
		    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
		  };
		  d3.min = function(array, f) {
		    var i = -1, n = array.length, a, b;
		    if (arguments.length === 1) {
		      while (++i < n) if ((b = array[i]) != null && b >= b) {
		        a = b;
		        break;
		      }
		      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
		    } else {
		      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
		        a = b;
		        break;
		      }
		      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
		    }
		    return a;
		  };
		  d3.max = function(array, f) {
		    var i = -1, n = array.length, a, b;
		    if (arguments.length === 1) {
		      while (++i < n) if ((b = array[i]) != null && b >= b) {
		        a = b;
		        break;
		      }
		      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
		    } else {
		      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
		        a = b;
		        break;
		      }
		      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
		    }
		    return a;
		  };
		  d3.extent = function(array, f) {
		    var i = -1, n = array.length, a, b, c;
		    if (arguments.length === 1) {
		      while (++i < n) if ((b = array[i]) != null && b >= b) {
		        a = c = b;
		        break;
		      }
		      while (++i < n) if ((b = array[i]) != null) {
		        if (a > b) a = b;
		        if (c < b) c = b;
		      }
		    } else {
		      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
		        a = c = b;
		        break;
		      }
		      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
		        if (a > b) a = b;
		        if (c < b) c = b;
		      }
		    }
		    return [ a, c ];
		  };
		  function d3_number(x) {
		    return x === null ? NaN : +x;
		  }
		  function d3_numeric(x) {
		    return !isNaN(x);
		  }
		  d3.sum = function(array, f) {
		    var s = 0, n = array.length, a, i = -1;
		    if (arguments.length === 1) {
		      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
		    } else {
		      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
		    }
		    return s;
		  };
		  d3.mean = function(array, f) {
		    var s = 0, n = array.length, a, i = -1, j = n;
		    if (arguments.length === 1) {
		      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
		    } else {
		      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
		    }
		    if (j) return s / j;
		  };
		  d3.quantile = function(values, p) {
		    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
		    return e ? v + e * (values[h] - v) : v;
		  };
		  d3.median = function(array, f) {
		    var numbers = [], n = array.length, a, i = -1;
		    if (arguments.length === 1) {
		      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
		    } else {
		      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
		    }
		    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
		  };
		  d3.variance = function(array, f) {
		    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
		    if (arguments.length === 1) {
		      while (++i < n) {
		        if (d3_numeric(a = d3_number(array[i]))) {
		          d = a - m;
		          m += d / ++j;
		          s += d * (a - m);
		        }
		      }
		    } else {
		      while (++i < n) {
		        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
		          d = a - m;
		          m += d / ++j;
		          s += d * (a - m);
		        }
		      }
		    }
		    if (j > 1) return s / (j - 1);
		  };
		  d3.deviation = function() {
		    var v = d3.variance.apply(this, arguments);
		    return v ? Math.sqrt(v) : v;
		  };
		  function d3_bisector(compare) {
		    return {
		      left: function(a, x, lo, hi) {
		        if (arguments.length < 3) lo = 0;
		        if (arguments.length < 4) hi = a.length;
		        while (lo < hi) {
		          var mid = lo + hi >>> 1;
		          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
		        }
		        return lo;
		      },
		      right: function(a, x, lo, hi) {
		        if (arguments.length < 3) lo = 0;
		        if (arguments.length < 4) hi = a.length;
		        while (lo < hi) {
		          var mid = lo + hi >>> 1;
		          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
		        }
		        return lo;
		      }
		    };
		  }
		  var d3_bisect = d3_bisector(d3_ascending);
		  d3.bisectLeft = d3_bisect.left;
		  d3.bisect = d3.bisectRight = d3_bisect.right;
		  d3.bisector = function(f) {
		    return d3_bisector(f.length === 1 ? function(d, x) {
		      return d3_ascending(f(d), x);
		    } : f);
		  };
		  d3.shuffle = function(array, i0, i1) {
		    if ((m = arguments.length) < 3) {
		      i1 = array.length;
		      if (m < 2) i0 = 0;
		    }
		    var m = i1 - i0, t, i;
		    while (m) {
		      i = Math.random() * m-- | 0;
		      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
		    }
		    return array;
		  };
		  d3.permute = function(array, indexes) {
		    var i = indexes.length, permutes = new Array(i);
		    while (i--) permutes[i] = array[indexes[i]];
		    return permutes;
		  };
		  d3.pairs = function(array) {
		    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
		    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
		    return pairs;
		  };
		  d3.transpose = function(matrix) {
		    if (!(n = matrix.length)) return [];
		    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
		      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
		        row[j] = matrix[j][i];
		      }
		    }
		    return transpose;
		  };
		  function d3_transposeLength(d) {
		    return d.length;
		  }
		  d3.zip = function() {
		    return d3.transpose(arguments);
		  };
		  d3.keys = function(map) {
		    var keys = [];
		    for (var key in map) keys.push(key);
		    return keys;
		  };
		  d3.values = function(map) {
		    var values = [];
		    for (var key in map) values.push(map[key]);
		    return values;
		  };
		  d3.entries = function(map) {
		    var entries = [];
		    for (var key in map) entries.push({
		      key: key,
		      value: map[key]
		    });
		    return entries;
		  };
		  d3.merge = function(arrays) {
		    var n = arrays.length, m, i = -1, j = 0, merged, array;
		    while (++i < n) j += arrays[i].length;
		    merged = new Array(j);
		    while (--n >= 0) {
		      array = arrays[n];
		      m = array.length;
		      while (--m >= 0) {
		        merged[--j] = array[m];
		      }
		    }
		    return merged;
		  };
		  var abs = Math.abs;
		  d3.range = function(start, stop, step) {
		    if (arguments.length < 3) {
		      step = 1;
		      if (arguments.length < 2) {
		        stop = start;
		        start = 0;
		      }
		    }
		    if ((stop - start) / step === Infinity) throw new Error("infinite range");
		    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
		    start *= k, stop *= k, step *= k;
		    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
		    return range;
		  };
		  function d3_range_integerScale(x) {
		    var k = 1;
		    while (x * k % 1) k *= 10;
		    return k;
		  }
		  function d3_class(ctor, properties) {
		    for (var key in properties) {
		      Object.defineProperty(ctor.prototype, key, {
		        value: properties[key],
		        enumerable: false
		      });
		    }
		  }
		  d3.map = function(object, f) {
		    var map = new d3_Map();
		    if (object instanceof d3_Map) {
		      object.forEach(function(key, value) {
		        map.set(key, value);
		      });
		    } else if (Array.isArray(object)) {
		      var i = -1, n = object.length, o;
		      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
		    } else {
		      for (var key in object) map.set(key, object[key]);
		    }
		    return map;
		  };
		  function d3_Map() {
		    this._ = Object.create(null);
		  }
		  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
		  d3_class(d3_Map, {
		    has: d3_map_has,
		    get: function(key) {
		      return this._[d3_map_escape(key)];
		    },
		    set: function(key, value) {
		      return this._[d3_map_escape(key)] = value;
		    },
		    remove: d3_map_remove,
		    keys: d3_map_keys,
		    values: function() {
		      var values = [];
		      for (var key in this._) values.push(this._[key]);
		      return values;
		    },
		    entries: function() {
		      var entries = [];
		      for (var key in this._) entries.push({
		        key: d3_map_unescape(key),
		        value: this._[key]
		      });
		      return entries;
		    },
		    size: d3_map_size,
		    empty: d3_map_empty,
		    forEach: function(f) {
		      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
		    }
		  });
		  function d3_map_escape(key) {
		    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
		  }
		  function d3_map_unescape(key) {
		    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
		  }
		  function d3_map_has(key) {
		    return d3_map_escape(key) in this._;
		  }
		  function d3_map_remove(key) {
		    return (key = d3_map_escape(key)) in this._ && delete this._[key];
		  }
		  function d3_map_keys() {
		    var keys = [];
		    for (var key in this._) keys.push(d3_map_unescape(key));
		    return keys;
		  }
		  function d3_map_size() {
		    var size = 0;
		    for (var key in this._) ++size;
		    return size;
		  }
		  function d3_map_empty() {
		    for (var key in this._) return false;
		    return true;
		  }
		  d3.nest = function() {
		    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
		    function map(mapType, array, depth) {
		      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
		      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
		      while (++i < n) {
		        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
		          values.push(object);
		        } else {
		          valuesByKey.set(keyValue, [ object ]);
		        }
		      }
		      if (mapType) {
		        object = mapType();
		        setter = function(keyValue, values) {
		          object.set(keyValue, map(mapType, values, depth));
		        };
		      } else {
		        object = {};
		        setter = function(keyValue, values) {
		          object[keyValue] = map(mapType, values, depth);
		        };
		      }
		      valuesByKey.forEach(setter);
		      return object;
		    }
		    function entries(map, depth) {
		      if (depth >= keys.length) return map;
		      var array = [], sortKey = sortKeys[depth++];
		      map.forEach(function(key, keyMap) {
		        array.push({
		          key: key,
		          values: entries(keyMap, depth)
		        });
		      });
		      return sortKey ? array.sort(function(a, b) {
		        return sortKey(a.key, b.key);
		      }) : array;
		    }
		    nest.map = function(array, mapType) {
		      return map(mapType, array, 0);
		    };
		    nest.entries = function(array) {
		      return entries(map(d3.map, array, 0), 0);
		    };
		    nest.key = function(d) {
		      keys.push(d);
		      return nest;
		    };
		    nest.sortKeys = function(order) {
		      sortKeys[keys.length - 1] = order;
		      return nest;
		    };
		    nest.sortValues = function(order) {
		      sortValues = order;
		      return nest;
		    };
		    nest.rollup = function(f) {
		      rollup = f;
		      return nest;
		    };
		    return nest;
		  };
		  d3.set = function(array) {
		    var set = new d3_Set();
		    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
		    return set;
		  };
		  function d3_Set() {
		    this._ = Object.create(null);
		  }
		  d3_class(d3_Set, {
		    has: d3_map_has,
		    add: function(key) {
		      this._[d3_map_escape(key += "")] = true;
		      return key;
		    },
		    remove: d3_map_remove,
		    values: d3_map_keys,
		    size: d3_map_size,
		    empty: d3_map_empty,
		    forEach: function(f) {
		      for (var key in this._) f.call(this, d3_map_unescape(key));
		    }
		  });
		  d3.behavior = {};
		  function d3_identity(d) {
		    return d;
		  }
		  d3.rebind = function(target, source) {
		    var i = 1, n = arguments.length, method;
		    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
		    return target;
		  };
		  function d3_rebind(target, source, method) {
		    return function() {
		      var value = method.apply(source, arguments);
		      return value === source ? target : value;
		    };
		  }
		  function d3_vendorSymbol(object, name) {
		    if (name in object) return name;
		    name = name.charAt(0).toUpperCase() + name.slice(1);
		    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
		      var prefixName = d3_vendorPrefixes[i] + name;
		      if (prefixName in object) return prefixName;
		    }
		  }
		  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
		  function d3_noop() {}
		  d3.dispatch = function() {
		    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
		    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
		    return dispatch;
		  };
		  function d3_dispatch() {}
		  d3_dispatch.prototype.on = function(type, listener) {
		    var i = type.indexOf("."), name = "";
		    if (i >= 0) {
		      name = type.slice(i + 1);
		      type = type.slice(0, i);
		    }
		    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
		    if (arguments.length === 2) {
		      if (listener == null) for (type in this) {
		        if (this.hasOwnProperty(type)) this[type].on(name, null);
		      }
		      return this;
		    }
		  };
		  function d3_dispatch_event(dispatch) {
		    var listeners = [], listenerByName = new d3_Map();
		    function event() {
		      var z = listeners, i = -1, n = z.length, l;
		      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
		      return dispatch;
		    }
		    event.on = function(name, listener) {
		      var l = listenerByName.get(name), i;
		      if (arguments.length < 2) return l && l.on;
		      if (l) {
		        l.on = null;
		        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
		        listenerByName.remove(name);
		      }
		      if (listener) listeners.push(listenerByName.set(name, {
		        on: listener
		      }));
		      return dispatch;
		    };
		    return event;
		  }
		  d3.event = null;
		  function d3_eventPreventDefault() {
		    d3.event.preventDefault();
		  }
		  function d3_eventSource() {
		    var e = d3.event, s;
		    while (s = e.sourceEvent) e = s;
		    return e;
		  }
		  function d3_eventDispatch(target) {
		    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
		    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
		    dispatch.of = function(thiz, argumentz) {
		      return function(e1) {
		        try {
		          var e0 = e1.sourceEvent = d3.event;
		          e1.target = target;
		          d3.event = e1;
		          dispatch[e1.type].apply(thiz, argumentz);
		        } finally {
		          d3.event = e0;
		        }
		      };
		    };
		    return dispatch;
		  }
		  d3.requote = function(s) {
		    return s.replace(d3_requote_re, "\\$&");
		  };
		  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
		  var d3_subclass = {}.__proto__ ? function(object, prototype) {
		    object.__proto__ = prototype;
		  } : function(object, prototype) {
		    for (var property in prototype) object[property] = prototype[property];
		  };
		  function d3_selection(groups) {
		    d3_subclass(groups, d3_selectionPrototype);
		    return groups;
		  }
		  var d3_select = function(s, n) {
		    return n.querySelector(s);
		  }, d3_selectAll = function(s, n) {
		    return n.querySelectorAll(s);
		  }, d3_selectMatches = function(n, s) {
		    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
		    d3_selectMatches = function(n, s) {
		      return d3_selectMatcher.call(n, s);
		    };
		    return d3_selectMatches(n, s);
		  };
		  if (typeof Sizzle === "function") {
		    d3_select = function(s, n) {
		      return Sizzle(s, n)[0] || null;
		    };
		    d3_selectAll = Sizzle;
		    d3_selectMatches = Sizzle.matchesSelector;
		  }
		  d3.selection = function() {
		    return d3.select(d3_document.documentElement);
		  };
		  var d3_selectionPrototype = d3.selection.prototype = [];
		  d3_selectionPrototype.select = function(selector) {
		    var subgroups = [], subgroup, subnode, group, node;
		    selector = d3_selection_selector(selector);
		    for (var j = -1, m = this.length; ++j < m; ) {
		      subgroups.push(subgroup = []);
		      subgroup.parentNode = (group = this[j]).parentNode;
		      for (var i = -1, n = group.length; ++i < n; ) {
		        if (node = group[i]) {
		          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
		          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
		        } else {
		          subgroup.push(null);
		        }
		      }
		    }
		    return d3_selection(subgroups);
		  };
		  function d3_selection_selector(selector) {
		    return typeof selector === "function" ? selector : function() {
		      return d3_select(selector, this);
		    };
		  }
		  d3_selectionPrototype.selectAll = function(selector) {
		    var subgroups = [], subgroup, node;
		    selector = d3_selection_selectorAll(selector);
		    for (var j = -1, m = this.length; ++j < m; ) {
		      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
		        if (node = group[i]) {
		          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
		          subgroup.parentNode = node;
		        }
		      }
		    }
		    return d3_selection(subgroups);
		  };
		  function d3_selection_selectorAll(selector) {
		    return typeof selector === "function" ? selector : function() {
		      return d3_selectAll(selector, this);
		    };
		  }
		  var d3_nsPrefix = {
		    svg: "http://www.w3.org/2000/svg",
		    xhtml: "http://www.w3.org/1999/xhtml",
		    xlink: "http://www.w3.org/1999/xlink",
		    xml: "http://www.w3.org/XML/1998/namespace",
		    xmlns: "http://www.w3.org/2000/xmlns/"
		  };
		  d3.ns = {
		    prefix: d3_nsPrefix,
		    qualify: function(name) {
		      var i = name.indexOf(":"), prefix = name;
		      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
		      return d3_nsPrefix.hasOwnProperty(prefix) ? {
		        space: d3_nsPrefix[prefix],
		        local: name
		      } : name;
		    }
		  };
		  d3_selectionPrototype.attr = function(name, value) {
		    if (arguments.length < 2) {
		      if (typeof name === "string") {
		        var node = this.node();
		        name = d3.ns.qualify(name);
		        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
		      }
		      for (value in name) this.each(d3_selection_attr(value, name[value]));
		      return this;
		    }
		    return this.each(d3_selection_attr(name, value));
		  };
		  function d3_selection_attr(name, value) {
		    name = d3.ns.qualify(name);
		    function attrNull() {
		      this.removeAttribute(name);
		    }
		    function attrNullNS() {
		      this.removeAttributeNS(name.space, name.local);
		    }
		    function attrConstant() {
		      this.setAttribute(name, value);
		    }
		    function attrConstantNS() {
		      this.setAttributeNS(name.space, name.local, value);
		    }
		    function attrFunction() {
		      var x = value.apply(this, arguments);
		      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
		    }
		    function attrFunctionNS() {
		      var x = value.apply(this, arguments);
		      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
		    }
		    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
		  }
		  function d3_collapse(s) {
		    return s.trim().replace(/\s+/g, " ");
		  }
		  d3_selectionPrototype.classed = function(name, value) {
		    if (arguments.length < 2) {
		      if (typeof name === "string") {
		        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
		        if (value = node.classList) {
		          while (++i < n) if (!value.contains(name[i])) return false;
		        } else {
		          value = node.getAttribute("class");
		          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
		        }
		        return true;
		      }
		      for (value in name) this.each(d3_selection_classed(value, name[value]));
		      return this;
		    }
		    return this.each(d3_selection_classed(name, value));
		  };
		  function d3_selection_classedRe(name) {
		    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
		  }
		  function d3_selection_classes(name) {
		    return (name + "").trim().split(/^|\s+/);
		  }
		  function d3_selection_classed(name, value) {
		    name = d3_selection_classes(name).map(d3_selection_classedName);
		    var n = name.length;
		    function classedConstant() {
		      var i = -1;
		      while (++i < n) name[i](this, value);
		    }
		    function classedFunction() {
		      var i = -1, x = value.apply(this, arguments);
		      while (++i < n) name[i](this, x);
		    }
		    return typeof value === "function" ? classedFunction : classedConstant;
		  }
		  function d3_selection_classedName(name) {
		    var re = d3_selection_classedRe(name);
		    return function(node, value) {
		      if (c = node.classList) return value ? c.add(name) : c.remove(name);
		      var c = node.getAttribute("class") || "";
		      if (value) {
		        re.lastIndex = 0;
		        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
		      } else {
		        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
		      }
		    };
		  }
		  d3_selectionPrototype.style = function(name, value, priority) {
		    var n = arguments.length;
		    if (n < 3) {
		      if (typeof name !== "string") {
		        if (n < 2) value = "";
		        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
		        return this;
		      }
		      if (n < 2) {
		        var node = this.node();
		        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
		      }
		      priority = "";
		    }
		    return this.each(d3_selection_style(name, value, priority));
		  };
		  function d3_selection_style(name, value, priority) {
		    function styleNull() {
		      this.style.removeProperty(name);
		    }
		    function styleConstant() {
		      this.style.setProperty(name, value, priority);
		    }
		    function styleFunction() {
		      var x = value.apply(this, arguments);
		      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
		    }
		    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
		  }
		  d3_selectionPrototype.property = function(name, value) {
		    if (arguments.length < 2) {
		      if (typeof name === "string") return this.node()[name];
		      for (value in name) this.each(d3_selection_property(value, name[value]));
		      return this;
		    }
		    return this.each(d3_selection_property(name, value));
		  };
		  function d3_selection_property(name, value) {
		    function propertyNull() {
		      delete this[name];
		    }
		    function propertyConstant() {
		      this[name] = value;
		    }
		    function propertyFunction() {
		      var x = value.apply(this, arguments);
		      if (x == null) delete this[name]; else this[name] = x;
		    }
		    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
		  }
		  d3_selectionPrototype.text = function(value) {
		    return arguments.length ? this.each(typeof value === "function" ? function() {
		      var v = value.apply(this, arguments);
		      this.textContent = v == null ? "" : v;
		    } : value == null ? function() {
		      this.textContent = "";
		    } : function() {
		      this.textContent = value;
		    }) : this.node().textContent;
		  };
		  d3_selectionPrototype.html = function(value) {
		    return arguments.length ? this.each(typeof value === "function" ? function() {
		      var v = value.apply(this, arguments);
		      this.innerHTML = v == null ? "" : v;
		    } : value == null ? function() {
		      this.innerHTML = "";
		    } : function() {
		      this.innerHTML = value;
		    }) : this.node().innerHTML;
		  };
		  d3_selectionPrototype.append = function(name) {
		    name = d3_selection_creator(name);
		    return this.select(function() {
		      return this.appendChild(name.apply(this, arguments));
		    });
		  };
		  function d3_selection_creator(name) {
		    function create() {
		      var document = this.ownerDocument, namespace = this.namespaceURI;
		      return namespace && namespace !== document.documentElement.namespaceURI ? document.createElementNS(namespace, name) : document.createElement(name);
		    }
		    function createNS() {
		      return this.ownerDocument.createElementNS(name.space, name.local);
		    }
		    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
		  }
		  d3_selectionPrototype.insert = function(name, before) {
		    name = d3_selection_creator(name);
		    before = d3_selection_selector(before);
		    return this.select(function() {
		      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
		    });
		  };
		  d3_selectionPrototype.remove = function() {
		    return this.each(d3_selectionRemove);
		  };
		  function d3_selectionRemove() {
		    var parent = this.parentNode;
		    if (parent) parent.removeChild(this);
		  }
		  d3_selectionPrototype.data = function(value, key) {
		    var i = -1, n = this.length, group, node;
		    if (!arguments.length) {
		      value = new Array(n = (group = this[0]).length);
		      while (++i < n) {
		        if (node = group[i]) {
		          value[i] = node.__data__;
		        }
		      }
		      return value;
		    }
		    function bind(group, groupData) {
		      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
		      if (key) {
		        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
		        for (i = -1; ++i < n; ) {
		          if (node = group[i]) {
		            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
		              exitNodes[i] = node;
		            } else {
		              nodeByKeyValue.set(keyValue, node);
		            }
		            keyValues[i] = keyValue;
		          }
		        }
		        for (i = -1; ++i < m; ) {
		          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
		            enterNodes[i] = d3_selection_dataNode(nodeData);
		          } else if (node !== true) {
		            updateNodes[i] = node;
		            node.__data__ = nodeData;
		          }
		          nodeByKeyValue.set(keyValue, true);
		        }
		        for (i = -1; ++i < n; ) {
		          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
		            exitNodes[i] = group[i];
		          }
		        }
		      } else {
		        for (i = -1; ++i < n0; ) {
		          node = group[i];
		          nodeData = groupData[i];
		          if (node) {
		            node.__data__ = nodeData;
		            updateNodes[i] = node;
		          } else {
		            enterNodes[i] = d3_selection_dataNode(nodeData);
		          }
		        }
		        for (;i < m; ++i) {
		          enterNodes[i] = d3_selection_dataNode(groupData[i]);
		        }
		        for (;i < n; ++i) {
		          exitNodes[i] = group[i];
		        }
		      }
		      enterNodes.update = updateNodes;
		      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
		      enter.push(enterNodes);
		      update.push(updateNodes);
		      exit.push(exitNodes);
		    }
		    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
		    if (typeof value === "function") {
		      while (++i < n) {
		        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
		      }
		    } else {
		      while (++i < n) {
		        bind(group = this[i], value);
		      }
		    }
		    update.enter = function() {
		      return enter;
		    };
		    update.exit = function() {
		      return exit;
		    };
		    return update;
		  };
		  function d3_selection_dataNode(data) {
		    return {
		      __data__: data
		    };
		  }
		  d3_selectionPrototype.datum = function(value) {
		    return arguments.length ? this.property("__data__", value) : this.property("__data__");
		  };
		  d3_selectionPrototype.filter = function(filter) {
		    var subgroups = [], subgroup, group, node;
		    if (typeof filter !== "function") filter = d3_selection_filter(filter);
		    for (var j = 0, m = this.length; j < m; j++) {
		      subgroups.push(subgroup = []);
		      subgroup.parentNode = (group = this[j]).parentNode;
		      for (var i = 0, n = group.length; i < n; i++) {
		        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
		          subgroup.push(node);
		        }
		      }
		    }
		    return d3_selection(subgroups);
		  };
		  function d3_selection_filter(selector) {
		    return function() {
		      return d3_selectMatches(this, selector);
		    };
		  }
		  d3_selectionPrototype.order = function() {
		    for (var j = -1, m = this.length; ++j < m; ) {
		      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
		        if (node = group[i]) {
		          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
		          next = node;
		        }
		      }
		    }
		    return this;
		  };
		  d3_selectionPrototype.sort = function(comparator) {
		    comparator = d3_selection_sortComparator.apply(this, arguments);
		    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
		    return this.order();
		  };
		  function d3_selection_sortComparator(comparator) {
		    if (!arguments.length) comparator = d3_ascending;
		    return function(a, b) {
		      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
		    };
		  }
		  d3_selectionPrototype.each = function(callback) {
		    return d3_selection_each(this, function(node, i, j) {
		      callback.call(node, node.__data__, i, j);
		    });
		  };
		  function d3_selection_each(groups, callback) {
		    for (var j = 0, m = groups.length; j < m; j++) {
		      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
		        if (node = group[i]) callback(node, i, j);
		      }
		    }
		    return groups;
		  }
		  d3_selectionPrototype.call = function(callback) {
		    var args = d3_array(arguments);
		    callback.apply(args[0] = this, args);
		    return this;
		  };
		  d3_selectionPrototype.empty = function() {
		    return !this.node();
		  };
		  d3_selectionPrototype.node = function() {
		    for (var j = 0, m = this.length; j < m; j++) {
		      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
		        var node = group[i];
		        if (node) return node;
		      }
		    }
		    return null;
		  };
		  d3_selectionPrototype.size = function() {
		    var n = 0;
		    d3_selection_each(this, function() {
		      ++n;
		    });
		    return n;
		  };
		  function d3_selection_enter(selection) {
		    d3_subclass(selection, d3_selection_enterPrototype);
		    return selection;
		  }
		  var d3_selection_enterPrototype = [];
		  d3.selection.enter = d3_selection_enter;
		  d3.selection.enter.prototype = d3_selection_enterPrototype;
		  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
		  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
		  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
		  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
		  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
		  d3_selection_enterPrototype.select = function(selector) {
		    var subgroups = [], subgroup, subnode, upgroup, group, node;
		    for (var j = -1, m = this.length; ++j < m; ) {
		      upgroup = (group = this[j]).update;
		      subgroups.push(subgroup = []);
		      subgroup.parentNode = group.parentNode;
		      for (var i = -1, n = group.length; ++i < n; ) {
		        if (node = group[i]) {
		          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
		          subnode.__data__ = node.__data__;
		        } else {
		          subgroup.push(null);
		        }
		      }
		    }
		    return d3_selection(subgroups);
		  };
		  d3_selection_enterPrototype.insert = function(name, before) {
		    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
		    return d3_selectionPrototype.insert.call(this, name, before);
		  };
		  function d3_selection_enterInsertBefore(enter) {
		    var i0, j0;
		    return function(d, i, j) {
		      var group = enter[j].update, n = group.length, node;
		      if (j != j0) j0 = j, i0 = 0;
		      if (i >= i0) i0 = i + 1;
		      while (!(node = group[i0]) && ++i0 < n) ;
		      return node;
		    };
		  }
		  d3.select = function(node) {
		    var group;
		    if (typeof node === "string") {
		      group = [ d3_select(node, d3_document) ];
		      group.parentNode = d3_document.documentElement;
		    } else {
		      group = [ node ];
		      group.parentNode = d3_documentElement(node);
		    }
		    return d3_selection([ group ]);
		  };
		  d3.selectAll = function(nodes) {
		    var group;
		    if (typeof nodes === "string") {
		      group = d3_array(d3_selectAll(nodes, d3_document));
		      group.parentNode = d3_document.documentElement;
		    } else {
		      group = d3_array(nodes);
		      group.parentNode = null;
		    }
		    return d3_selection([ group ]);
		  };
		  d3_selectionPrototype.on = function(type, listener, capture) {
		    var n = arguments.length;
		    if (n < 3) {
		      if (typeof type !== "string") {
		        if (n < 2) listener = false;
		        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
		        return this;
		      }
		      if (n < 2) return (n = this.node()["__on" + type]) && n._;
		      capture = false;
		    }
		    return this.each(d3_selection_on(type, listener, capture));
		  };
		  function d3_selection_on(type, listener, capture) {
		    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
		    if (i > 0) type = type.slice(0, i);
		    var filter = d3_selection_onFilters.get(type);
		    if (filter) type = filter, wrap = d3_selection_onFilter;
		    function onRemove() {
		      var l = this[name];
		      if (l) {
		        this.removeEventListener(type, l, l.$);
		        delete this[name];
		      }
		    }
		    function onAdd() {
		      var l = wrap(listener, d3_array(arguments));
		      onRemove.call(this);
		      this.addEventListener(type, this[name] = l, l.$ = capture);
		      l._ = listener;
		    }
		    function removeAll() {
		      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
		      for (var name in this) {
		        if (match = name.match(re)) {
		          var l = this[name];
		          this.removeEventListener(match[1], l, l.$);
		          delete this[name];
		        }
		      }
		    }
		    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
		  }
		  var d3_selection_onFilters = d3.map({
		    mouseenter: "mouseover",
		    mouseleave: "mouseout"
		  });
		  if (d3_document) {
		    d3_selection_onFilters.forEach(function(k) {
		      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
		    });
		  }
		  function d3_selection_onListener(listener, argumentz) {
		    return function(e) {
		      var o = d3.event;
		      d3.event = e;
		      argumentz[0] = this.__data__;
		      try {
		        listener.apply(this, argumentz);
		      } finally {
		        d3.event = o;
		      }
		    };
		  }
		  function d3_selection_onFilter(listener, argumentz) {
		    var l = d3_selection_onListener(listener, argumentz);
		    return function(e) {
		      var target = this, related = e.relatedTarget;
		      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
		        l.call(target, e);
		      }
		    };
		  }
		  var d3_event_dragSelect, d3_event_dragId = 0;
		  function d3_event_dragSuppress(node) {
		    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
		    if (d3_event_dragSelect == null) {
		      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
		    }
		    if (d3_event_dragSelect) {
		      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
		      style[d3_event_dragSelect] = "none";
		    }
		    return function(suppressClick) {
		      w.on(name, null);
		      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
		      if (suppressClick) {
		        var off = function() {
		          w.on(click, null);
		        };
		        w.on(click, function() {
		          d3_eventPreventDefault();
		          off();
		        }, true);
		        setTimeout(off, 0);
		      }
		    };
		  }
		  d3.mouse = function(container) {
		    return d3_mousePoint(container, d3_eventSource());
		  };
		  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
		  function d3_mousePoint(container, e) {
		    if (e.changedTouches) e = e.changedTouches[0];
		    var svg = container.ownerSVGElement || container;
		    if (svg.createSVGPoint) {
		      var point = svg.createSVGPoint();
		      if (d3_mouse_bug44083 < 0) {
		        var window = d3_window(container);
		        if (window.scrollX || window.scrollY) {
		          svg = d3.select("body").append("svg").style({
		            position: "absolute",
		            top: 0,
		            left: 0,
		            margin: 0,
		            padding: 0,
		            border: "none"
		          }, "important");
		          var ctm = svg[0][0].getScreenCTM();
		          d3_mouse_bug44083 = !(ctm.f || ctm.e);
		          svg.remove();
		        }
		      }
		      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
		      point.y = e.clientY;
		      point = point.matrixTransform(container.getScreenCTM().inverse());
		      return [ point.x, point.y ];
		    }
		    var rect = container.getBoundingClientRect();
		    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
		  }
		  d3.touch = function(container, touches, identifier) {
		    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
		    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
		      if ((touch = touches[i]).identifier === identifier) {
		        return d3_mousePoint(container, touch);
		      }
		    }
		  };
		  d3.behavior.drag = function() {
		    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
		    function drag() {
		      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
		    }
		    function dragstart(id, position, subject, move, end) {
		      return function() {
		        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
		        if (origin) {
		          dragOffset = origin.apply(that, arguments);
		          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
		        } else {
		          dragOffset = [ 0, 0 ];
		        }
		        dispatch({
		          type: "dragstart"
		        });
		        function moved() {
		          var position1 = position(parent, dragId), dx, dy;
		          if (!position1) return;
		          dx = position1[0] - position0[0];
		          dy = position1[1] - position0[1];
		          dragged |= dx | dy;
		          position0 = position1;
		          dispatch({
		            type: "drag",
		            x: position1[0] + dragOffset[0],
		            y: position1[1] + dragOffset[1],
		            dx: dx,
		            dy: dy
		          });
		        }
		        function ended() {
		          if (!position(parent, dragId)) return;
		          dragSubject.on(move + dragName, null).on(end + dragName, null);
		          dragRestore(dragged);
		          dispatch({
		            type: "dragend"
		          });
		        }
		      };
		    }
		    drag.origin = function(x) {
		      if (!arguments.length) return origin;
		      origin = x;
		      return drag;
		    };
		    return d3.rebind(drag, event, "on");
		  };
		  function d3_behavior_dragTouchId() {
		    return d3.event.changedTouches[0].identifier;
		  }
		  d3.touches = function(container, touches) {
		    if (arguments.length < 2) touches = d3_eventSource().touches;
		    return touches ? d3_array(touches).map(function(touch) {
		      var point = d3_mousePoint(container, touch);
		      point.identifier = touch.identifier;
		      return point;
		    }) : [];
		  };
		  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
		  function d3_sgn(x) {
		    return x > 0 ? 1 : x < 0 ? -1 : 0;
		  }
		  function d3_cross2d(a, b, c) {
		    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
		  }
		  function d3_acos(x) {
		    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
		  }
		  function d3_asin(x) {
		    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
		  }
		  function d3_sinh(x) {
		    return ((x = Math.exp(x)) - 1 / x) / 2;
		  }
		  function d3_cosh(x) {
		    return ((x = Math.exp(x)) + 1 / x) / 2;
		  }
		  function d3_tanh(x) {
		    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
		  }
		  function d3_haversin(x) {
		    return (x = Math.sin(x / 2)) * x;
		  }
		  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
		  d3.interpolateZoom = function(p0, p1) {
		    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
		    if (d2 < ε2) {
		      S = Math.log(w1 / w0) / ρ;
		      i = function(t) {
		        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
		      };
		    } else {
		      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
		      S = (r1 - r0) / ρ;
		      i = function(t) {
		        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
		        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
		      };
		    }
		    i.duration = S * 1e3;
		    return i;
		  };
		  d3.behavior.zoom = function() {
		    var view = {
		      x: 0,
		      y: 0,
		      k: 1
		    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
		    if (!d3_behavior_zoomWheel) {
		      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
		        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
		      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
		        return d3.event.wheelDelta;
		      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
		        return -d3.event.detail;
		      }, "MozMousePixelScroll");
		    }
		    function zoom(g) {
		      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
		    }
		    zoom.event = function(g) {
		      g.each(function() {
		        var dispatch = event.of(this, arguments), view1 = view;
		        if (d3_transitionInheritId) {
		          d3.select(this).transition().each("start.zoom", function() {
		            view = this.__chart__ || {
		              x: 0,
		              y: 0,
		              k: 1
		            };
		            zoomstarted(dispatch);
		          }).tween("zoom:zoom", function() {
		            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
		            return function(t) {
		              var l = i(t), k = dx / l[2];
		              this.__chart__ = view = {
		                x: cx - l[0] * k,
		                y: cy - l[1] * k,
		                k: k
		              };
		              zoomed(dispatch);
		            };
		          }).each("interrupt.zoom", function() {
		            zoomended(dispatch);
		          }).each("end.zoom", function() {
		            zoomended(dispatch);
		          });
		        } else {
		          this.__chart__ = view;
		          zoomstarted(dispatch);
		          zoomed(dispatch);
		          zoomended(dispatch);
		        }
		      });
		    };
		    zoom.translate = function(_) {
		      if (!arguments.length) return [ view.x, view.y ];
		      view = {
		        x: +_[0],
		        y: +_[1],
		        k: view.k
		      };
		      rescale();
		      return zoom;
		    };
		    zoom.scale = function(_) {
		      if (!arguments.length) return view.k;
		      view = {
		        x: view.x,
		        y: view.y,
		        k: null
		      };
		      scaleTo(+_);
		      rescale();
		      return zoom;
		    };
		    zoom.scaleExtent = function(_) {
		      if (!arguments.length) return scaleExtent;
		      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
		      return zoom;
		    };
		    zoom.center = function(_) {
		      if (!arguments.length) return center;
		      center = _ && [ +_[0], +_[1] ];
		      return zoom;
		    };
		    zoom.size = function(_) {
		      if (!arguments.length) return size;
		      size = _ && [ +_[0], +_[1] ];
		      return zoom;
		    };
		    zoom.duration = function(_) {
		      if (!arguments.length) return duration;
		      duration = +_;
		      return zoom;
		    };
		    zoom.x = function(z) {
		      if (!arguments.length) return x1;
		      x1 = z;
		      x0 = z.copy();
		      view = {
		        x: 0,
		        y: 0,
		        k: 1
		      };
		      return zoom;
		    };
		    zoom.y = function(z) {
		      if (!arguments.length) return y1;
		      y1 = z;
		      y0 = z.copy();
		      view = {
		        x: 0,
		        y: 0,
		        k: 1
		      };
		      return zoom;
		    };
		    function location(p) {
		      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
		    }
		    function point(l) {
		      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
		    }
		    function scaleTo(s) {
		      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
		    }
		    function translateTo(p, l) {
		      l = point(l);
		      view.x += p[0] - l[0];
		      view.y += p[1] - l[1];
		    }
		    function zoomTo(that, p, l, k) {
		      that.__chart__ = {
		        x: view.x,
		        y: view.y,
		        k: view.k
		      };
		      scaleTo(Math.pow(2, k));
		      translateTo(center0 = p, l);
		      that = d3.select(that);
		      if (duration > 0) that = that.transition().duration(duration);
		      that.call(zoom.event);
		    }
		    function rescale() {
		      if (x1) x1.domain(x0.range().map(function(x) {
		        return (x - view.x) / view.k;
		      }).map(x0.invert));
		      if (y1) y1.domain(y0.range().map(function(y) {
		        return (y - view.y) / view.k;
		      }).map(y0.invert));
		    }
		    function zoomstarted(dispatch) {
		      if (!zooming++) dispatch({
		        type: "zoomstart"
		      });
		    }
		    function zoomed(dispatch) {
		      rescale();
		      dispatch({
		        type: "zoom",
		        scale: view.k,
		        translate: [ view.x, view.y ]
		      });
		    }
		    function zoomended(dispatch) {
		      if (!--zooming) dispatch({
		        type: "zoomend"
		      }), center0 = null;
		    }
		    function mousedowned() {
		      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
		      d3_selection_interrupt.call(that);
		      zoomstarted(dispatch);
		      function moved() {
		        dragged = 1;
		        translateTo(d3.mouse(that), location0);
		        zoomed(dispatch);
		      }
		      function ended() {
		        subject.on(mousemove, null).on(mouseup, null);
		        dragRestore(dragged);
		        zoomended(dispatch);
		      }
		    }
		    function touchstarted() {
		      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
		      started();
		      zoomstarted(dispatch);
		      subject.on(mousedown, null).on(touchstart, started);
		      function relocate() {
		        var touches = d3.touches(that);
		        scale0 = view.k;
		        touches.forEach(function(t) {
		          if (t.identifier in locations0) locations0[t.identifier] = location(t);
		        });
		        return touches;
		      }
		      function started() {
		        var target = d3.event.target;
		        d3.select(target).on(touchmove, moved).on(touchend, ended);
		        targets.push(target);
		        var changed = d3.event.changedTouches;
		        for (var i = 0, n = changed.length; i < n; ++i) {
		          locations0[changed[i].identifier] = null;
		        }
		        var touches = relocate(), now = Date.now();
		        if (touches.length === 1) {
		          if (now - touchtime < 500) {
		            var p = touches[0];
		            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
		            d3_eventPreventDefault();
		          }
		          touchtime = now;
		        } else if (touches.length > 1) {
		          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
		          distance0 = dx * dx + dy * dy;
		        }
		      }
		      function moved() {
		        var touches = d3.touches(that), p0, l0, p1, l1;
		        d3_selection_interrupt.call(that);
		        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
		          p1 = touches[i];
		          if (l1 = locations0[p1.identifier]) {
		            if (l0) break;
		            p0 = p1, l0 = l1;
		          }
		        }
		        if (l1) {
		          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
		          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
		          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
		          scaleTo(scale1 * scale0);
		        }
		        touchtime = null;
		        translateTo(p0, l0);
		        zoomed(dispatch);
		      }
		      function ended() {
		        if (d3.event.touches.length) {
		          var changed = d3.event.changedTouches;
		          for (var i = 0, n = changed.length; i < n; ++i) {
		            delete locations0[changed[i].identifier];
		          }
		          for (var identifier in locations0) {
		            return void relocate();
		          }
		        }
		        d3.selectAll(targets).on(zoomName, null);
		        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
		        dragRestore();
		        zoomended(dispatch);
		      }
		    }
		    function mousewheeled() {
		      var dispatch = event.of(this, arguments);
		      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
		      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
		      mousewheelTimer = setTimeout(function() {
		        mousewheelTimer = null;
		        zoomended(dispatch);
		      }, 50);
		      d3_eventPreventDefault();
		      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
		      translateTo(center0, translate0);
		      zoomed(dispatch);
		    }
		    function dblclicked() {
		      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
		      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
		    }
		    return d3.rebind(zoom, event, "on");
		  };
		  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
		  d3.color = d3_color;
		  function d3_color() {}
		  d3_color.prototype.toString = function() {
		    return this.rgb() + "";
		  };
		  d3.hsl = d3_hsl;
		  function d3_hsl(h, s, l) {
		    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
		  }
		  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
		  d3_hslPrototype.brighter = function(k) {
		    k = Math.pow(.7, arguments.length ? k : 1);
		    return new d3_hsl(this.h, this.s, this.l / k);
		  };
		  d3_hslPrototype.darker = function(k) {
		    k = Math.pow(.7, arguments.length ? k : 1);
		    return new d3_hsl(this.h, this.s, k * this.l);
		  };
		  d3_hslPrototype.rgb = function() {
		    return d3_hsl_rgb(this.h, this.s, this.l);
		  };
		  function d3_hsl_rgb(h, s, l) {
		    var m1, m2;
		    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
		    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
		    l = l < 0 ? 0 : l > 1 ? 1 : l;
		    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
		    m1 = 2 * l - m2;
		    function v(h) {
		      if (h > 360) h -= 360; else if (h < 0) h += 360;
		      if (h < 60) return m1 + (m2 - m1) * h / 60;
		      if (h < 180) return m2;
		      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
		      return m1;
		    }
		    function vv(h) {
		      return Math.round(v(h) * 255);
		    }
		    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
		  }
		  d3.hcl = d3_hcl;
		  function d3_hcl(h, c, l) {
		    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
		  }
		  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
		  d3_hclPrototype.brighter = function(k) {
		    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
		  };
		  d3_hclPrototype.darker = function(k) {
		    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
		  };
		  d3_hclPrototype.rgb = function() {
		    return d3_hcl_lab(this.h, this.c, this.l).rgb();
		  };
		  function d3_hcl_lab(h, c, l) {
		    if (isNaN(h)) h = 0;
		    if (isNaN(c)) c = 0;
		    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
		  }
		  d3.lab = d3_lab;
		  function d3_lab(l, a, b) {
		    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
		  }
		  var d3_lab_K = 18;
		  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
		  var d3_labPrototype = d3_lab.prototype = new d3_color();
		  d3_labPrototype.brighter = function(k) {
		    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
		  };
		  d3_labPrototype.darker = function(k) {
		    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
		  };
		  d3_labPrototype.rgb = function() {
		    return d3_lab_rgb(this.l, this.a, this.b);
		  };
		  function d3_lab_rgb(l, a, b) {
		    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
		    x = d3_lab_xyz(x) * d3_lab_X;
		    y = d3_lab_xyz(y) * d3_lab_Y;
		    z = d3_lab_xyz(z) * d3_lab_Z;
		    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
		  }
		  function d3_lab_hcl(l, a, b) {
		    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
		  }
		  function d3_lab_xyz(x) {
		    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
		  }
		  function d3_xyz_lab(x) {
		    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
		  }
		  function d3_xyz_rgb(r) {
		    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
		  }
		  d3.rgb = d3_rgb;
		  function d3_rgb(r, g, b) {
		    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
		  }
		  function d3_rgbNumber(value) {
		    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
		  }
		  function d3_rgbString(value) {
		    return d3_rgbNumber(value) + "";
		  }
		  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
		  d3_rgbPrototype.brighter = function(k) {
		    k = Math.pow(.7, arguments.length ? k : 1);
		    var r = this.r, g = this.g, b = this.b, i = 30;
		    if (!r && !g && !b) return new d3_rgb(i, i, i);
		    if (r && r < i) r = i;
		    if (g && g < i) g = i;
		    if (b && b < i) b = i;
		    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
		  };
		  d3_rgbPrototype.darker = function(k) {
		    k = Math.pow(.7, arguments.length ? k : 1);
		    return new d3_rgb(k * this.r, k * this.g, k * this.b);
		  };
		  d3_rgbPrototype.hsl = function() {
		    return d3_rgb_hsl(this.r, this.g, this.b);
		  };
		  d3_rgbPrototype.toString = function() {
		    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
		  };
		  function d3_rgb_hex(v) {
		    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
		  }
		  function d3_rgb_parse(format, rgb, hsl) {
		    var r = 0, g = 0, b = 0, m1, m2, color;
		    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
		    if (m1) {
		      m2 = m1[2].split(",");
		      switch (m1[1]) {
		       case "hsl":
		        {
		          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
		        }

		       case "rgb":
		        {
		          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
		        }
		      }
		    }
		    if (color = d3_rgb_names.get(format)) {
		      return rgb(color.r, color.g, color.b);
		    }
		    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
		      if (format.length === 4) {
		        r = (color & 3840) >> 4;
		        r = r >> 4 | r;
		        g = color & 240;
		        g = g >> 4 | g;
		        b = color & 15;
		        b = b << 4 | b;
		      } else if (format.length === 7) {
		        r = (color & 16711680) >> 16;
		        g = (color & 65280) >> 8;
		        b = color & 255;
		      }
		    }
		    return rgb(r, g, b);
		  }
		  function d3_rgb_hsl(r, g, b) {
		    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
		    if (d) {
		      s = l < .5 ? d / (max + min) : d / (2 - max - min);
		      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
		      h *= 60;
		    } else {
		      h = NaN;
		      s = l > 0 && l < 1 ? 0 : h;
		    }
		    return new d3_hsl(h, s, l);
		  }
		  function d3_rgb_lab(r, g, b) {
		    r = d3_rgb_xyz(r);
		    g = d3_rgb_xyz(g);
		    b = d3_rgb_xyz(b);
		    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
		    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
		  }
		  function d3_rgb_xyz(r) {
		    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
		  }
		  function d3_rgb_parseNumber(c) {
		    var f = parseFloat(c);
		    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
		  }
		  var d3_rgb_names = d3.map({
		    aliceblue: 15792383,
		    antiquewhite: 16444375,
		    aqua: 65535,
		    aquamarine: 8388564,
		    azure: 15794175,
		    beige: 16119260,
		    bisque: 16770244,
		    black: 0,
		    blanchedalmond: 16772045,
		    blue: 255,
		    blueviolet: 9055202,
		    brown: 10824234,
		    burlywood: 14596231,
		    cadetblue: 6266528,
		    chartreuse: 8388352,
		    chocolate: 13789470,
		    coral: 16744272,
		    cornflowerblue: 6591981,
		    cornsilk: 16775388,
		    crimson: 14423100,
		    cyan: 65535,
		    darkblue: 139,
		    darkcyan: 35723,
		    darkgoldenrod: 12092939,
		    darkgray: 11119017,
		    darkgreen: 25600,
		    darkgrey: 11119017,
		    darkkhaki: 12433259,
		    darkmagenta: 9109643,
		    darkolivegreen: 5597999,
		    darkorange: 16747520,
		    darkorchid: 10040012,
		    darkred: 9109504,
		    darksalmon: 15308410,
		    darkseagreen: 9419919,
		    darkslateblue: 4734347,
		    darkslategray: 3100495,
		    darkslategrey: 3100495,
		    darkturquoise: 52945,
		    darkviolet: 9699539,
		    deeppink: 16716947,
		    deepskyblue: 49151,
		    dimgray: 6908265,
		    dimgrey: 6908265,
		    dodgerblue: 2003199,
		    firebrick: 11674146,
		    floralwhite: 16775920,
		    forestgreen: 2263842,
		    fuchsia: 16711935,
		    gainsboro: 14474460,
		    ghostwhite: 16316671,
		    gold: 16766720,
		    goldenrod: 14329120,
		    gray: 8421504,
		    green: 32768,
		    greenyellow: 11403055,
		    grey: 8421504,
		    honeydew: 15794160,
		    hotpink: 16738740,
		    indianred: 13458524,
		    indigo: 4915330,
		    ivory: 16777200,
		    khaki: 15787660,
		    lavender: 15132410,
		    lavenderblush: 16773365,
		    lawngreen: 8190976,
		    lemonchiffon: 16775885,
		    lightblue: 11393254,
		    lightcoral: 15761536,
		    lightcyan: 14745599,
		    lightgoldenrodyellow: 16448210,
		    lightgray: 13882323,
		    lightgreen: 9498256,
		    lightgrey: 13882323,
		    lightpink: 16758465,
		    lightsalmon: 16752762,
		    lightseagreen: 2142890,
		    lightskyblue: 8900346,
		    lightslategray: 7833753,
		    lightslategrey: 7833753,
		    lightsteelblue: 11584734,
		    lightyellow: 16777184,
		    lime: 65280,
		    limegreen: 3329330,
		    linen: 16445670,
		    magenta: 16711935,
		    maroon: 8388608,
		    mediumaquamarine: 6737322,
		    mediumblue: 205,
		    mediumorchid: 12211667,
		    mediumpurple: 9662683,
		    mediumseagreen: 3978097,
		    mediumslateblue: 8087790,
		    mediumspringgreen: 64154,
		    mediumturquoise: 4772300,
		    mediumvioletred: 13047173,
		    midnightblue: 1644912,
		    mintcream: 16121850,
		    mistyrose: 16770273,
		    moccasin: 16770229,
		    navajowhite: 16768685,
		    navy: 128,
		    oldlace: 16643558,
		    olive: 8421376,
		    olivedrab: 7048739,
		    orange: 16753920,
		    orangered: 16729344,
		    orchid: 14315734,
		    palegoldenrod: 15657130,
		    palegreen: 10025880,
		    paleturquoise: 11529966,
		    palevioletred: 14381203,
		    papayawhip: 16773077,
		    peachpuff: 16767673,
		    peru: 13468991,
		    pink: 16761035,
		    plum: 14524637,
		    powderblue: 11591910,
		    purple: 8388736,
		    rebeccapurple: 6697881,
		    red: 16711680,
		    rosybrown: 12357519,
		    royalblue: 4286945,
		    saddlebrown: 9127187,
		    salmon: 16416882,
		    sandybrown: 16032864,
		    seagreen: 3050327,
		    seashell: 16774638,
		    sienna: 10506797,
		    silver: 12632256,
		    skyblue: 8900331,
		    slateblue: 6970061,
		    slategray: 7372944,
		    slategrey: 7372944,
		    snow: 16775930,
		    springgreen: 65407,
		    steelblue: 4620980,
		    tan: 13808780,
		    teal: 32896,
		    thistle: 14204888,
		    tomato: 16737095,
		    turquoise: 4251856,
		    violet: 15631086,
		    wheat: 16113331,
		    white: 16777215,
		    whitesmoke: 16119285,
		    yellow: 16776960,
		    yellowgreen: 10145074
		  });
		  d3_rgb_names.forEach(function(key, value) {
		    d3_rgb_names.set(key, d3_rgbNumber(value));
		  });
		  function d3_functor(v) {
		    return typeof v === "function" ? v : function() {
		      return v;
		    };
		  }
		  d3.functor = d3_functor;
		  d3.xhr = d3_xhrType(d3_identity);
		  function d3_xhrType(response) {
		    return function(url, mimeType, callback) {
		      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
		      mimeType = null;
		      return d3_xhr(url, mimeType, response, callback);
		    };
		  }
		  function d3_xhr(url, mimeType, response, callback) {
		    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
		    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
		    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
		      request.readyState > 3 && respond();
		    };
		    function respond() {
		      var status = request.status, result;
		      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
		        try {
		          result = response.call(xhr, request);
		        } catch (e) {
		          dispatch.error.call(xhr, e);
		          return;
		        }
		        dispatch.load.call(xhr, result);
		      } else {
		        dispatch.error.call(xhr, request);
		      }
		    }
		    request.onprogress = function(event) {
		      var o = d3.event;
		      d3.event = event;
		      try {
		        dispatch.progress.call(xhr, request);
		      } finally {
		        d3.event = o;
		      }
		    };
		    xhr.header = function(name, value) {
		      name = (name + "").toLowerCase();
		      if (arguments.length < 2) return headers[name];
		      if (value == null) delete headers[name]; else headers[name] = value + "";
		      return xhr;
		    };
		    xhr.mimeType = function(value) {
		      if (!arguments.length) return mimeType;
		      mimeType = value == null ? null : value + "";
		      return xhr;
		    };
		    xhr.responseType = function(value) {
		      if (!arguments.length) return responseType;
		      responseType = value;
		      return xhr;
		    };
		    xhr.response = function(value) {
		      response = value;
		      return xhr;
		    };
		    [ "get", "post" ].forEach(function(method) {
		      xhr[method] = function() {
		        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
		      };
		    });
		    xhr.send = function(method, data, callback) {
		      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
		      request.open(method, url, true);
		      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
		      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
		      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
		      if (responseType != null) request.responseType = responseType;
		      if (callback != null) xhr.on("error", callback).on("load", function(request) {
		        callback(null, request);
		      });
		      dispatch.beforesend.call(xhr, request);
		      request.send(data == null ? null : data);
		      return xhr;
		    };
		    xhr.abort = function() {
		      request.abort();
		      return xhr;
		    };
		    d3.rebind(xhr, dispatch, "on");
		    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
		  }
		  function d3_xhr_fixCallback(callback) {
		    return callback.length === 1 ? function(error, request) {
		      callback(error == null ? request : null);
		    } : callback;
		  }
		  function d3_xhrHasResponse(request) {
		    var type = request.responseType;
		    return type && type !== "text" ? request.response : request.responseText;
		  }
		  d3.dsv = function(delimiter, mimeType) {
		    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
		    function dsv(url, row, callback) {
		      if (arguments.length < 3) callback = row, row = null;
		      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
		      xhr.row = function(_) {
		        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
		      };
		      return xhr;
		    }
		    function response(request) {
		      return dsv.parse(request.responseText);
		    }
		    function typedResponse(f) {
		      return function(request) {
		        return dsv.parse(request.responseText, f);
		      };
		    }
		    dsv.parse = function(text, f) {
		      var o;
		      return dsv.parseRows(text, function(row, i) {
		        if (o) return o(row, i - 1);
		        var a = new Function("d", "return {" + row.map(function(name, i) {
		          return JSON.stringify(name) + ": d[" + i + "]";
		        }).join(",") + "}");
		        o = f ? function(row, i) {
		          return f(a(row), i);
		        } : a;
		      });
		    };
		    dsv.parseRows = function(text, f) {
		      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
		      function token() {
		        if (I >= N) return EOF;
		        if (eol) return eol = false, EOL;
		        var j = I;
		        if (text.charCodeAt(j) === 34) {
		          var i = j;
		          while (i++ < N) {
		            if (text.charCodeAt(i) === 34) {
		              if (text.charCodeAt(i + 1) !== 34) break;
		              ++i;
		            }
		          }
		          I = i + 2;
		          var c = text.charCodeAt(i + 1);
		          if (c === 13) {
		            eol = true;
		            if (text.charCodeAt(i + 2) === 10) ++I;
		          } else if (c === 10) {
		            eol = true;
		          }
		          return text.slice(j + 1, i).replace(/""/g, '"');
		        }
		        while (I < N) {
		          var c = text.charCodeAt(I++), k = 1;
		          if (c === 10) eol = true; else if (c === 13) {
		            eol = true;
		            if (text.charCodeAt(I) === 10) ++I, ++k;
		          } else if (c !== delimiterCode) continue;
		          return text.slice(j, I - k);
		        }
		        return text.slice(j);
		      }
		      while ((t = token()) !== EOF) {
		        var a = [];
		        while (t !== EOL && t !== EOF) {
		          a.push(t);
		          t = token();
		        }
		        if (f && (a = f(a, n++)) == null) continue;
		        rows.push(a);
		      }
		      return rows;
		    };
		    dsv.format = function(rows) {
		      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
		      var fieldSet = new d3_Set(), fields = [];
		      rows.forEach(function(row) {
		        for (var field in row) {
		          if (!fieldSet.has(field)) {
		            fields.push(fieldSet.add(field));
		          }
		        }
		      });
		      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
		        return fields.map(function(field) {
		          return formatValue(row[field]);
		        }).join(delimiter);
		      })).join("\n");
		    };
		    dsv.formatRows = function(rows) {
		      return rows.map(formatRow).join("\n");
		    };
		    function formatRow(row) {
		      return row.map(formatValue).join(delimiter);
		    }
		    function formatValue(text) {
		      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
		    }
		    return dsv;
		  };
		  d3.csv = d3.dsv(",", "text/csv");
		  d3.tsv = d3.dsv("	", "text/tab-separated-values");
		  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
		    setTimeout(callback, 17);
		  };
		  d3.timer = function() {
		    d3_timer.apply(this, arguments);
		  };
		  function d3_timer(callback, delay, then) {
		    var n = arguments.length;
		    if (n < 2) delay = 0;
		    if (n < 3) then = Date.now();
		    var time = then + delay, timer = {
		      c: callback,
		      t: time,
		      n: null
		    };
		    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
		    d3_timer_queueTail = timer;
		    if (!d3_timer_interval) {
		      d3_timer_timeout = clearTimeout(d3_timer_timeout);
		      d3_timer_interval = 1;
		      d3_timer_frame(d3_timer_step);
		    }
		    return timer;
		  }
		  function d3_timer_step() {
		    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
		    if (delay > 24) {
		      if (isFinite(delay)) {
		        clearTimeout(d3_timer_timeout);
		        d3_timer_timeout = setTimeout(d3_timer_step, delay);
		      }
		      d3_timer_interval = 0;
		    } else {
		      d3_timer_interval = 1;
		      d3_timer_frame(d3_timer_step);
		    }
		  }
		  d3.timer.flush = function() {
		    d3_timer_mark();
		    d3_timer_sweep();
		  };
		  function d3_timer_mark() {
		    var now = Date.now(), timer = d3_timer_queueHead;
		    while (timer) {
		      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
		      timer = timer.n;
		    }
		    return now;
		  }
		  function d3_timer_sweep() {
		    var t0, t1 = d3_timer_queueHead, time = Infinity;
		    while (t1) {
		      if (t1.c) {
		        if (t1.t < time) time = t1.t;
		        t1 = (t0 = t1).n;
		      } else {
		        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
		      }
		    }
		    d3_timer_queueTail = t0;
		    return time;
		  }
		  function d3_format_precision(x, p) {
		    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
		  }
		  d3.round = function(x, n) {
		    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
		  };
		  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
		  d3.formatPrefix = function(value, precision) {
		    var i = 0;
		    if (value = +value) {
		      if (value < 0) value *= -1;
		      if (precision) value = d3.round(value, d3_format_precision(value, precision));
		      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
		      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
		    }
		    return d3_formatPrefixes[8 + i / 3];
		  };
		  function d3_formatPrefix(d, i) {
		    var k = Math.pow(10, abs(8 - i) * 3);
		    return {
		      scale: i > 8 ? function(d) {
		        return d / k;
		      } : function(d) {
		        return d * k;
		      },
		      symbol: d
		    };
		  }
		  function d3_locale_numberFormat(locale) {
		    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
		      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
		      while (i > 0 && g > 0) {
		        if (length + g + 1 > width) g = Math.max(1, width - length);
		        t.push(value.substring(i -= g, i + g));
		        if ((length += g + 1) > width) break;
		        g = locale_grouping[j = (j + 1) % locale_grouping.length];
		      }
		      return t.reverse().join(locale_thousands);
		    } : d3_identity;
		    return function(specifier) {
		      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
		      if (precision) precision = +precision.substring(1);
		      if (zfill || fill === "0" && align === "=") {
		        zfill = fill = "0";
		        align = "=";
		      }
		      switch (type) {
		       case "n":
		        comma = true;
		        type = "g";
		        break;

		       case "%":
		        scale = 100;
		        suffix = "%";
		        type = "f";
		        break;

		       case "p":
		        scale = 100;
		        suffix = "%";
		        type = "r";
		        break;

		       case "b":
		       case "o":
		       case "x":
		       case "X":
		        if (symbol === "#") prefix = "0" + type.toLowerCase();

		       case "c":
		        exponent = false;

		       case "d":
		        integer = true;
		        precision = 0;
		        break;

		       case "s":
		        scale = -1;
		        type = "r";
		        break;
		      }
		      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
		      if (type == "r" && !precision) type = "g";
		      if (precision != null) {
		        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
		      }
		      type = d3_format_types.get(type) || d3_format_typeDefault;
		      var zcomma = zfill && comma;
		      return function(value) {
		        var fullSuffix = suffix;
		        if (integer && value % 1) return "";
		        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
		        if (scale < 0) {
		          var unit = d3.formatPrefix(value, precision);
		          value = unit.scale(value);
		          fullSuffix = unit.symbol + suffix;
		        } else {
		          value *= scale;
		        }
		        value = type(value, precision);
		        var i = value.lastIndexOf("."), before, after;
		        if (i < 0) {
		          var j = exponent ? value.lastIndexOf("e") : -1;
		          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
		        } else {
		          before = value.substring(0, i);
		          after = locale_decimal + value.substring(i + 1);
		        }
		        if (!zfill && comma) before = formatGroup(before, Infinity);
		        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
		        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
		        negative += prefix;
		        value = before + after;
		        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
		      };
		    };
		  }
		  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
		  var d3_format_types = d3.map({
		    b: function(x) {
		      return x.toString(2);
		    },
		    c: function(x) {
		      return String.fromCharCode(x);
		    },
		    o: function(x) {
		      return x.toString(8);
		    },
		    x: function(x) {
		      return x.toString(16);
		    },
		    X: function(x) {
		      return x.toString(16).toUpperCase();
		    },
		    g: function(x, p) {
		      return x.toPrecision(p);
		    },
		    e: function(x, p) {
		      return x.toExponential(p);
		    },
		    f: function(x, p) {
		      return x.toFixed(p);
		    },
		    r: function(x, p) {
		      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
		    }
		  });
		  function d3_format_typeDefault(x) {
		    return x + "";
		  }
		  var d3_time = d3.time = {}, d3_date = Date;
		  function d3_date_utc() {
		    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
		  }
		  d3_date_utc.prototype = {
		    getDate: function() {
		      return this._.getUTCDate();
		    },
		    getDay: function() {
		      return this._.getUTCDay();
		    },
		    getFullYear: function() {
		      return this._.getUTCFullYear();
		    },
		    getHours: function() {
		      return this._.getUTCHours();
		    },
		    getMilliseconds: function() {
		      return this._.getUTCMilliseconds();
		    },
		    getMinutes: function() {
		      return this._.getUTCMinutes();
		    },
		    getMonth: function() {
		      return this._.getUTCMonth();
		    },
		    getSeconds: function() {
		      return this._.getUTCSeconds();
		    },
		    getTime: function() {
		      return this._.getTime();
		    },
		    getTimezoneOffset: function() {
		      return 0;
		    },
		    valueOf: function() {
		      return this._.valueOf();
		    },
		    setDate: function() {
		      d3_time_prototype.setUTCDate.apply(this._, arguments);
		    },
		    setDay: function() {
		      d3_time_prototype.setUTCDay.apply(this._, arguments);
		    },
		    setFullYear: function() {
		      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
		    },
		    setHours: function() {
		      d3_time_prototype.setUTCHours.apply(this._, arguments);
		    },
		    setMilliseconds: function() {
		      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
		    },
		    setMinutes: function() {
		      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
		    },
		    setMonth: function() {
		      d3_time_prototype.setUTCMonth.apply(this._, arguments);
		    },
		    setSeconds: function() {
		      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
		    },
		    setTime: function() {
		      d3_time_prototype.setTime.apply(this._, arguments);
		    }
		  };
		  var d3_time_prototype = Date.prototype;
		  function d3_time_interval(local, step, number) {
		    function round(date) {
		      var d0 = local(date), d1 = offset(d0, 1);
		      return date - d0 < d1 - date ? d0 : d1;
		    }
		    function ceil(date) {
		      step(date = local(new d3_date(date - 1)), 1);
		      return date;
		    }
		    function offset(date, k) {
		      step(date = new d3_date(+date), k);
		      return date;
		    }
		    function range(t0, t1, dt) {
		      var time = ceil(t0), times = [];
		      if (dt > 1) {
		        while (time < t1) {
		          if (!(number(time) % dt)) times.push(new Date(+time));
		          step(time, 1);
		        }
		      } else {
		        while (time < t1) times.push(new Date(+time)), step(time, 1);
		      }
		      return times;
		    }
		    function range_utc(t0, t1, dt) {
		      try {
		        d3_date = d3_date_utc;
		        var utc = new d3_date_utc();
		        utc._ = t0;
		        return range(utc, t1, dt);
		      } finally {
		        d3_date = Date;
		      }
		    }
		    local.floor = local;
		    local.round = round;
		    local.ceil = ceil;
		    local.offset = offset;
		    local.range = range;
		    var utc = local.utc = d3_time_interval_utc(local);
		    utc.floor = utc;
		    utc.round = d3_time_interval_utc(round);
		    utc.ceil = d3_time_interval_utc(ceil);
		    utc.offset = d3_time_interval_utc(offset);
		    utc.range = range_utc;
		    return local;
		  }
		  function d3_time_interval_utc(method) {
		    return function(date, k) {
		      try {
		        d3_date = d3_date_utc;
		        var utc = new d3_date_utc();
		        utc._ = date;
		        return method(utc, k)._;
		      } finally {
		        d3_date = Date;
		      }
		    };
		  }
		  d3_time.year = d3_time_interval(function(date) {
		    date = d3_time.day(date);
		    date.setMonth(0, 1);
		    return date;
		  }, function(date, offset) {
		    date.setFullYear(date.getFullYear() + offset);
		  }, function(date) {
		    return date.getFullYear();
		  });
		  d3_time.years = d3_time.year.range;
		  d3_time.years.utc = d3_time.year.utc.range;
		  d3_time.day = d3_time_interval(function(date) {
		    var day = new d3_date(2e3, 0);
		    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
		    return day;
		  }, function(date, offset) {
		    date.setDate(date.getDate() + offset);
		  }, function(date) {
		    return date.getDate() - 1;
		  });
		  d3_time.days = d3_time.day.range;
		  d3_time.days.utc = d3_time.day.utc.range;
		  d3_time.dayOfYear = function(date) {
		    var year = d3_time.year(date);
		    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
		  };
		  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
		    i = 7 - i;
		    var interval = d3_time[day] = d3_time_interval(function(date) {
		      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
		      return date;
		    }, function(date, offset) {
		      date.setDate(date.getDate() + Math.floor(offset) * 7);
		    }, function(date) {
		      var day = d3_time.year(date).getDay();
		      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
		    });
		    d3_time[day + "s"] = interval.range;
		    d3_time[day + "s"].utc = interval.utc.range;
		    d3_time[day + "OfYear"] = function(date) {
		      var day = d3_time.year(date).getDay();
		      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
		    };
		  });
		  d3_time.week = d3_time.sunday;
		  d3_time.weeks = d3_time.sunday.range;
		  d3_time.weeks.utc = d3_time.sunday.utc.range;
		  d3_time.weekOfYear = d3_time.sundayOfYear;
		  function d3_locale_timeFormat(locale) {
		    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
		    function d3_time_format(template) {
		      var n = template.length;
		      function format(date) {
		        var string = [], i = -1, j = 0, c, p, f;
		        while (++i < n) {
		          if (template.charCodeAt(i) === 37) {
		            string.push(template.slice(j, i));
		            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
		            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
		            string.push(c);
		            j = i + 1;
		          }
		        }
		        string.push(template.slice(j, i));
		        return string.join("");
		      }
		      format.parse = function(string) {
		        var d = {
		          y: 1900,
		          m: 0,
		          d: 1,
		          H: 0,
		          M: 0,
		          S: 0,
		          L: 0,
		          Z: null
		        }, i = d3_time_parse(d, template, string, 0);
		        if (i != string.length) return null;
		        if ("p" in d) d.H = d.H % 12 + d.p * 12;
		        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
		        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
		          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
		          date.setFullYear(d.y, 0, 1);
		          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
		        } else date.setFullYear(d.y, d.m, d.d);
		        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
		        return localZ ? date._ : date;
		      };
		      format.toString = function() {
		        return template;
		      };
		      return format;
		    }
		    function d3_time_parse(date, template, string, j) {
		      var c, p, t, i = 0, n = template.length, m = string.length;
		      while (i < n) {
		        if (j >= m) return -1;
		        c = template.charCodeAt(i++);
		        if (c === 37) {
		          t = template.charAt(i++);
		          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
		          if (!p || (j = p(date, string, j)) < 0) return -1;
		        } else if (c != string.charCodeAt(j++)) {
		          return -1;
		        }
		      }
		      return j;
		    }
		    d3_time_format.utc = function(template) {
		      var local = d3_time_format(template);
		      function format(date) {
		        try {
		          d3_date = d3_date_utc;
		          var utc = new d3_date();
		          utc._ = date;
		          return local(utc);
		        } finally {
		          d3_date = Date;
		        }
		      }
		      format.parse = function(string) {
		        try {
		          d3_date = d3_date_utc;
		          var date = local.parse(string);
		          return date && date._;
		        } finally {
		          d3_date = Date;
		        }
		      };
		      format.toString = local.toString;
		      return format;
		    };
		    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
		    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
		    locale_periods.forEach(function(p, i) {
		      d3_time_periodLookup.set(p.toLowerCase(), i);
		    });
		    var d3_time_formats = {
		      a: function(d) {
		        return locale_shortDays[d.getDay()];
		      },
		      A: function(d) {
		        return locale_days[d.getDay()];
		      },
		      b: function(d) {
		        return locale_shortMonths[d.getMonth()];
		      },
		      B: function(d) {
		        return locale_months[d.getMonth()];
		      },
		      c: d3_time_format(locale_dateTime),
		      d: function(d, p) {
		        return d3_time_formatPad(d.getDate(), p, 2);
		      },
		      e: function(d, p) {
		        return d3_time_formatPad(d.getDate(), p, 2);
		      },
		      H: function(d, p) {
		        return d3_time_formatPad(d.getHours(), p, 2);
		      },
		      I: function(d, p) {
		        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
		      },
		      j: function(d, p) {
		        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
		      },
		      L: function(d, p) {
		        return d3_time_formatPad(d.getMilliseconds(), p, 3);
		      },
		      m: function(d, p) {
		        return d3_time_formatPad(d.getMonth() + 1, p, 2);
		      },
		      M: function(d, p) {
		        return d3_time_formatPad(d.getMinutes(), p, 2);
		      },
		      p: function(d) {
		        return locale_periods[+(d.getHours() >= 12)];
		      },
		      S: function(d, p) {
		        return d3_time_formatPad(d.getSeconds(), p, 2);
		      },
		      U: function(d, p) {
		        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
		      },
		      w: function(d) {
		        return d.getDay();
		      },
		      W: function(d, p) {
		        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
		      },
		      x: d3_time_format(locale_date),
		      X: d3_time_format(locale_time),
		      y: function(d, p) {
		        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
		      },
		      Y: function(d, p) {
		        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
		      },
		      Z: d3_time_zone,
		      "%": function() {
		        return "%";
		      }
		    };
		    var d3_time_parsers = {
		      a: d3_time_parseWeekdayAbbrev,
		      A: d3_time_parseWeekday,
		      b: d3_time_parseMonthAbbrev,
		      B: d3_time_parseMonth,
		      c: d3_time_parseLocaleFull,
		      d: d3_time_parseDay,
		      e: d3_time_parseDay,
		      H: d3_time_parseHour24,
		      I: d3_time_parseHour24,
		      j: d3_time_parseDayOfYear,
		      L: d3_time_parseMilliseconds,
		      m: d3_time_parseMonthNumber,
		      M: d3_time_parseMinutes,
		      p: d3_time_parseAmPm,
		      S: d3_time_parseSeconds,
		      U: d3_time_parseWeekNumberSunday,
		      w: d3_time_parseWeekdayNumber,
		      W: d3_time_parseWeekNumberMonday,
		      x: d3_time_parseLocaleDate,
		      X: d3_time_parseLocaleTime,
		      y: d3_time_parseYear,
		      Y: d3_time_parseFullYear,
		      Z: d3_time_parseZone,
		      "%": d3_time_parseLiteralPercent
		    };
		    function d3_time_parseWeekdayAbbrev(date, string, i) {
		      d3_time_dayAbbrevRe.lastIndex = 0;
		      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
		      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
		    }
		    function d3_time_parseWeekday(date, string, i) {
		      d3_time_dayRe.lastIndex = 0;
		      var n = d3_time_dayRe.exec(string.slice(i));
		      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
		    }
		    function d3_time_parseMonthAbbrev(date, string, i) {
		      d3_time_monthAbbrevRe.lastIndex = 0;
		      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
		      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
		    }
		    function d3_time_parseMonth(date, string, i) {
		      d3_time_monthRe.lastIndex = 0;
		      var n = d3_time_monthRe.exec(string.slice(i));
		      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
		    }
		    function d3_time_parseLocaleFull(date, string, i) {
		      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
		    }
		    function d3_time_parseLocaleDate(date, string, i) {
		      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
		    }
		    function d3_time_parseLocaleTime(date, string, i) {
		      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
		    }
		    function d3_time_parseAmPm(date, string, i) {
		      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
		      return n == null ? -1 : (date.p = n, i);
		    }
		    return d3_time_format;
		  }
		  var d3_time_formatPads = {
		    "-": "",
		    _: " ",
		    "0": "0"
		  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
		  function d3_time_formatPad(value, fill, width) {
		    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
		    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
		  }
		  function d3_time_formatRe(names) {
		    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
		  }
		  function d3_time_formatLookup(names) {
		    var map = new d3_Map(), i = -1, n = names.length;
		    while (++i < n) map.set(names[i].toLowerCase(), i);
		    return map;
		  }
		  function d3_time_parseWeekdayNumber(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
		    return n ? (date.w = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseWeekNumberSunday(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i));
		    return n ? (date.U = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseWeekNumberMonday(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i));
		    return n ? (date.W = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseFullYear(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
		    return n ? (date.y = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseYear(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
		    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
		  }
		  function d3_time_parseZone(date, string, i) {
		    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
		    i + 5) : -1;
		  }
		  function d3_time_expandYear(d) {
		    return d + (d > 68 ? 1900 : 2e3);
		  }
		  function d3_time_parseMonthNumber(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
		    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
		  }
		  function d3_time_parseDay(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
		    return n ? (date.d = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseDayOfYear(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
		    return n ? (date.j = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseHour24(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
		    return n ? (date.H = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseMinutes(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
		    return n ? (date.M = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseSeconds(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
		    return n ? (date.S = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_parseMilliseconds(date, string, i) {
		    d3_time_numberRe.lastIndex = 0;
		    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
		    return n ? (date.L = +n[0], i + n[0].length) : -1;
		  }
		  function d3_time_zone(d) {
		    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
		    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
		  }
		  function d3_time_parseLiteralPercent(date, string, i) {
		    d3_time_percentRe.lastIndex = 0;
		    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
		    return n ? i + n[0].length : -1;
		  }
		  function d3_time_formatMulti(formats) {
		    var n = formats.length, i = -1;
		    while (++i < n) formats[i][0] = this(formats[i][0]);
		    return function(date) {
		      var i = 0, f = formats[i];
		      while (!f[1](date)) f = formats[++i];
		      return f[0](date);
		    };
		  }
		  d3.locale = function(locale) {
		    return {
		      numberFormat: d3_locale_numberFormat(locale),
		      timeFormat: d3_locale_timeFormat(locale)
		    };
		  };
		  var d3_locale_enUS = d3.locale({
		    decimal: ".",
		    thousands: ",",
		    grouping: [ 3 ],
		    currency: [ "$", "" ],
		    dateTime: "%a %b %e %X %Y",
		    date: "%m/%d/%Y",
		    time: "%H:%M:%S",
		    periods: [ "AM", "PM" ],
		    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
		    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
		    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
		    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
		  });
		  d3.format = d3_locale_enUS.numberFormat;
		  d3.geo = {};
		  function d3_adder() {}
		  d3_adder.prototype = {
		    s: 0,
		    t: 0,
		    add: function(y) {
		      d3_adderSum(y, this.t, d3_adderTemp);
		      d3_adderSum(d3_adderTemp.s, this.s, this);
		      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
		    },
		    reset: function() {
		      this.s = this.t = 0;
		    },
		    valueOf: function() {
		      return this.s;
		    }
		  };
		  var d3_adderTemp = new d3_adder();
		  function d3_adderSum(a, b, o) {
		    var x = o.s = a + b, bv = x - a, av = x - bv;
		    o.t = a - av + (b - bv);
		  }
		  d3.geo.stream = function(object, listener) {
		    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
		      d3_geo_streamObjectType[object.type](object, listener);
		    } else {
		      d3_geo_streamGeometry(object, listener);
		    }
		  };
		  function d3_geo_streamGeometry(geometry, listener) {
		    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
		      d3_geo_streamGeometryType[geometry.type](geometry, listener);
		    }
		  }
		  var d3_geo_streamObjectType = {
		    Feature: function(feature, listener) {
		      d3_geo_streamGeometry(feature.geometry, listener);
		    },
		    FeatureCollection: function(object, listener) {
		      var features = object.features, i = -1, n = features.length;
		      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
		    }
		  };
		  var d3_geo_streamGeometryType = {
		    Sphere: function(object, listener) {
		      listener.sphere();
		    },
		    Point: function(object, listener) {
		      object = object.coordinates;
		      listener.point(object[0], object[1], object[2]);
		    },
		    MultiPoint: function(object, listener) {
		      var coordinates = object.coordinates, i = -1, n = coordinates.length;
		      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
		    },
		    LineString: function(object, listener) {
		      d3_geo_streamLine(object.coordinates, listener, 0);
		    },
		    MultiLineString: function(object, listener) {
		      var coordinates = object.coordinates, i = -1, n = coordinates.length;
		      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
		    },
		    Polygon: function(object, listener) {
		      d3_geo_streamPolygon(object.coordinates, listener);
		    },
		    MultiPolygon: function(object, listener) {
		      var coordinates = object.coordinates, i = -1, n = coordinates.length;
		      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
		    },
		    GeometryCollection: function(object, listener) {
		      var geometries = object.geometries, i = -1, n = geometries.length;
		      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
		    }
		  };
		  function d3_geo_streamLine(coordinates, listener, closed) {
		    var i = -1, n = coordinates.length - closed, coordinate;
		    listener.lineStart();
		    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
		    listener.lineEnd();
		  }
		  function d3_geo_streamPolygon(coordinates, listener) {
		    var i = -1, n = coordinates.length;
		    listener.polygonStart();
		    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
		    listener.polygonEnd();
		  }
		  d3.geo.area = function(object) {
		    d3_geo_areaSum = 0;
		    d3.geo.stream(object, d3_geo_area);
		    return d3_geo_areaSum;
		  };
		  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
		  var d3_geo_area = {
		    sphere: function() {
		      d3_geo_areaSum += 4 * π;
		    },
		    point: d3_noop,
		    lineStart: d3_noop,
		    lineEnd: d3_noop,
		    polygonStart: function() {
		      d3_geo_areaRingSum.reset();
		      d3_geo_area.lineStart = d3_geo_areaRingStart;
		    },
		    polygonEnd: function() {
		      var area = 2 * d3_geo_areaRingSum;
		      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
		      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
		    }
		  };
		  function d3_geo_areaRingStart() {
		    var λ00, φ00, λ0, cosφ0, sinφ0;
		    d3_geo_area.point = function(λ, φ) {
		      d3_geo_area.point = nextPoint;
		      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
		      sinφ0 = Math.sin(φ);
		    };
		    function nextPoint(λ, φ) {
		      λ *= d3_radians;
		      φ = φ * d3_radians / 2 + π / 4;
		      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
		      d3_geo_areaRingSum.add(Math.atan2(v, u));
		      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
		    }
		    d3_geo_area.lineEnd = function() {
		      nextPoint(λ00, φ00);
		    };
		  }
		  function d3_geo_cartesian(spherical) {
		    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
		    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
		  }
		  function d3_geo_cartesianDot(a, b) {
		    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
		  }
		  function d3_geo_cartesianCross(a, b) {
		    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
		  }
		  function d3_geo_cartesianAdd(a, b) {
		    a[0] += b[0];
		    a[1] += b[1];
		    a[2] += b[2];
		  }
		  function d3_geo_cartesianScale(vector, k) {
		    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
		  }
		  function d3_geo_cartesianNormalize(d) {
		    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
		    d[0] /= l;
		    d[1] /= l;
		    d[2] /= l;
		  }
		  function d3_geo_spherical(cartesian) {
		    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
		  }
		  function d3_geo_sphericalEqual(a, b) {
		    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
		  }
		  d3.geo.bounds = function() {
		    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
		    var bound = {
		      point: point,
		      lineStart: lineStart,
		      lineEnd: lineEnd,
		      polygonStart: function() {
		        bound.point = ringPoint;
		        bound.lineStart = ringStart;
		        bound.lineEnd = ringEnd;
		        dλSum = 0;
		        d3_geo_area.polygonStart();
		      },
		      polygonEnd: function() {
		        d3_geo_area.polygonEnd();
		        bound.point = point;
		        bound.lineStart = lineStart;
		        bound.lineEnd = lineEnd;
		        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
		        range[0] = λ0, range[1] = λ1;
		      }
		    };
		    function point(λ, φ) {
		      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
		      if (φ < φ0) φ0 = φ;
		      if (φ > φ1) φ1 = φ;
		    }
		    function linePoint(λ, φ) {
		      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
		      if (p0) {
		        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
		        d3_geo_cartesianNormalize(inflection);
		        inflection = d3_geo_spherical(inflection);
		        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
		        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
		          var φi = inflection[1] * d3_degrees;
		          if (φi > φ1) φ1 = φi;
		        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
		          var φi = -inflection[1] * d3_degrees;
		          if (φi < φ0) φ0 = φi;
		        } else {
		          if (φ < φ0) φ0 = φ;
		          if (φ > φ1) φ1 = φ;
		        }
		        if (antimeridian) {
		          if (λ < λ_) {
		            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
		          } else {
		            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
		          }
		        } else {
		          if (λ1 >= λ0) {
		            if (λ < λ0) λ0 = λ;
		            if (λ > λ1) λ1 = λ;
		          } else {
		            if (λ > λ_) {
		              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
		            } else {
		              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
		            }
		          }
		        }
		      } else {
		        point(λ, φ);
		      }
		      p0 = p, λ_ = λ;
		    }
		    function lineStart() {
		      bound.point = linePoint;
		    }
		    function lineEnd() {
		      range[0] = λ0, range[1] = λ1;
		      bound.point = point;
		      p0 = null;
		    }
		    function ringPoint(λ, φ) {
		      if (p0) {
		        var dλ = λ - λ_;
		        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
		      } else λ__ = λ, φ__ = φ;
		      d3_geo_area.point(λ, φ);
		      linePoint(λ, φ);
		    }
		    function ringStart() {
		      d3_geo_area.lineStart();
		    }
		    function ringEnd() {
		      ringPoint(λ__, φ__);
		      d3_geo_area.lineEnd();
		      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
		      range[0] = λ0, range[1] = λ1;
		      p0 = null;
		    }
		    function angle(λ0, λ1) {
		      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
		    }
		    function compareRanges(a, b) {
		      return a[0] - b[0];
		    }
		    function withinRange(x, range) {
		      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
		    }
		    return function(feature) {
		      φ1 = λ1 = -(λ0 = φ0 = Infinity);
		      ranges = [];
		      d3.geo.stream(feature, bound);
		      var n = ranges.length;
		      if (n) {
		        ranges.sort(compareRanges);
		        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
		          b = ranges[i];
		          if (withinRange(b[0], a) || withinRange(b[1], a)) {
		            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
		            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
		          } else {
		            merged.push(a = b);
		          }
		        }
		        var best = -Infinity, dλ;
		        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
		          b = merged[i];
		          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
		        }
		      }
		      ranges = range = null;
		      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
		    };
		  }();
		  d3.geo.centroid = function(object) {
		    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
		    d3.geo.stream(object, d3_geo_centroid);
		    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
		    if (m < ε2) {
		      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
		      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
		      m = x * x + y * y + z * z;
		      if (m < ε2) return [ NaN, NaN ];
		    }
		    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
		  };
		  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
		  var d3_geo_centroid = {
		    sphere: d3_noop,
		    point: d3_geo_centroidPoint,
		    lineStart: d3_geo_centroidLineStart,
		    lineEnd: d3_geo_centroidLineEnd,
		    polygonStart: function() {
		      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
		    },
		    polygonEnd: function() {
		      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
		    }
		  };
		  function d3_geo_centroidPoint(λ, φ) {
		    λ *= d3_radians;
		    var cosφ = Math.cos(φ *= d3_radians);
		    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
		  }
		  function d3_geo_centroidPointXYZ(x, y, z) {
		    ++d3_geo_centroidW0;
		    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
		    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
		    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
		  }
		  function d3_geo_centroidLineStart() {
		    var x0, y0, z0;
		    d3_geo_centroid.point = function(λ, φ) {
		      λ *= d3_radians;
		      var cosφ = Math.cos(φ *= d3_radians);
		      x0 = cosφ * Math.cos(λ);
		      y0 = cosφ * Math.sin(λ);
		      z0 = Math.sin(φ);
		      d3_geo_centroid.point = nextPoint;
		      d3_geo_centroidPointXYZ(x0, y0, z0);
		    };
		    function nextPoint(λ, φ) {
		      λ *= d3_radians;
		      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
		      d3_geo_centroidW1 += w;
		      d3_geo_centroidX1 += w * (x0 + (x0 = x));
		      d3_geo_centroidY1 += w * (y0 + (y0 = y));
		      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
		      d3_geo_centroidPointXYZ(x0, y0, z0);
		    }
		  }
		  function d3_geo_centroidLineEnd() {
		    d3_geo_centroid.point = d3_geo_centroidPoint;
		  }
		  function d3_geo_centroidRingStart() {
		    var λ00, φ00, x0, y0, z0;
		    d3_geo_centroid.point = function(λ, φ) {
		      λ00 = λ, φ00 = φ;
		      d3_geo_centroid.point = nextPoint;
		      λ *= d3_radians;
		      var cosφ = Math.cos(φ *= d3_radians);
		      x0 = cosφ * Math.cos(λ);
		      y0 = cosφ * Math.sin(λ);
		      z0 = Math.sin(φ);
		      d3_geo_centroidPointXYZ(x0, y0, z0);
		    };
		    d3_geo_centroid.lineEnd = function() {
		      nextPoint(λ00, φ00);
		      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
		      d3_geo_centroid.point = d3_geo_centroidPoint;
		    };
		    function nextPoint(λ, φ) {
		      λ *= d3_radians;
		      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
		      d3_geo_centroidX2 += v * cx;
		      d3_geo_centroidY2 += v * cy;
		      d3_geo_centroidZ2 += v * cz;
		      d3_geo_centroidW1 += w;
		      d3_geo_centroidX1 += w * (x0 + (x0 = x));
		      d3_geo_centroidY1 += w * (y0 + (y0 = y));
		      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
		      d3_geo_centroidPointXYZ(x0, y0, z0);
		    }
		  }
		  function d3_geo_compose(a, b) {
		    function compose(x, y) {
		      return x = a(x, y), b(x[0], x[1]);
		    }
		    if (a.invert && b.invert) compose.invert = function(x, y) {
		      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
		    };
		    return compose;
		  }
		  function d3_true() {
		    return true;
		  }
		  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
		    var subject = [], clip = [];
		    segments.forEach(function(segment) {
		      if ((n = segment.length - 1) <= 0) return;
		      var n, p0 = segment[0], p1 = segment[n];
		      if (d3_geo_sphericalEqual(p0, p1)) {
		        listener.lineStart();
		        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
		        listener.lineEnd();
		        return;
		      }
		      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
		      a.o = b;
		      subject.push(a);
		      clip.push(b);
		      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
		      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
		      a.o = b;
		      subject.push(a);
		      clip.push(b);
		    });
		    clip.sort(compare);
		    d3_geo_clipPolygonLinkCircular(subject);
		    d3_geo_clipPolygonLinkCircular(clip);
		    if (!subject.length) return;
		    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
		      clip[i].e = entry = !entry;
		    }
		    var start = subject[0], points, point;
		    while (1) {
		      var current = start, isSubject = true;
		      while (current.v) if ((current = current.n) === start) return;
		      points = current.z;
		      listener.lineStart();
		      do {
		        current.v = current.o.v = true;
		        if (current.e) {
		          if (isSubject) {
		            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
		          } else {
		            interpolate(current.x, current.n.x, 1, listener);
		          }
		          current = current.n;
		        } else {
		          if (isSubject) {
		            points = current.p.z;
		            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
		          } else {
		            interpolate(current.x, current.p.x, -1, listener);
		          }
		          current = current.p;
		        }
		        current = current.o;
		        points = current.z;
		        isSubject = !isSubject;
		      } while (!current.v);
		      listener.lineEnd();
		    }
		  }
		  function d3_geo_clipPolygonLinkCircular(array) {
		    if (!(n = array.length)) return;
		    var n, i = 0, a = array[0], b;
		    while (++i < n) {
		      a.n = b = array[i];
		      b.p = a;
		      a = b;
		    }
		    a.n = b = array[0];
		    b.p = a;
		  }
		  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
		    this.x = point;
		    this.z = points;
		    this.o = other;
		    this.e = entry;
		    this.v = false;
		    this.n = this.p = null;
		  }
		  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
		    return function(rotate, listener) {
		      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
		      var clip = {
		        point: point,
		        lineStart: lineStart,
		        lineEnd: lineEnd,
		        polygonStart: function() {
		          clip.point = pointRing;
		          clip.lineStart = ringStart;
		          clip.lineEnd = ringEnd;
		          segments = [];
		          polygon = [];
		        },
		        polygonEnd: function() {
		          clip.point = point;
		          clip.lineStart = lineStart;
		          clip.lineEnd = lineEnd;
		          segments = d3.merge(segments);
		          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
		          if (segments.length) {
		            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
		            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
		          } else if (clipStartInside) {
		            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
		            listener.lineStart();
		            interpolate(null, null, 1, listener);
		            listener.lineEnd();
		          }
		          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
		          segments = polygon = null;
		        },
		        sphere: function() {
		          listener.polygonStart();
		          listener.lineStart();
		          interpolate(null, null, 1, listener);
		          listener.lineEnd();
		          listener.polygonEnd();
		        }
		      };
		      function point(λ, φ) {
		        var point = rotate(λ, φ);
		        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
		      }
		      function pointLine(λ, φ) {
		        var point = rotate(λ, φ);
		        line.point(point[0], point[1]);
		      }
		      function lineStart() {
		        clip.point = pointLine;
		        line.lineStart();
		      }
		      function lineEnd() {
		        clip.point = point;
		        line.lineEnd();
		      }
		      var segments;
		      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
		      function pointRing(λ, φ) {
		        ring.push([ λ, φ ]);
		        var point = rotate(λ, φ);
		        ringListener.point(point[0], point[1]);
		      }
		      function ringStart() {
		        ringListener.lineStart();
		        ring = [];
		      }
		      function ringEnd() {
		        pointRing(ring[0][0], ring[0][1]);
		        ringListener.lineEnd();
		        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
		        ring.pop();
		        polygon.push(ring);
		        ring = null;
		        if (!n) return;
		        if (clean & 1) {
		          segment = ringSegments[0];
		          var n = segment.length - 1, i = -1, point;
		          if (n > 0) {
		            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
		            listener.lineStart();
		            while (++i < n) listener.point((point = segment[i])[0], point[1]);
		            listener.lineEnd();
		          }
		          return;
		        }
		        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
		        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
		      }
		      return clip;
		    };
		  }
		  function d3_geo_clipSegmentLength1(segment) {
		    return segment.length > 1;
		  }
		  function d3_geo_clipBufferListener() {
		    var lines = [], line;
		    return {
		      lineStart: function() {
		        lines.push(line = []);
		      },
		      point: function(λ, φ) {
		        line.push([ λ, φ ]);
		      },
		      lineEnd: d3_noop,
		      buffer: function() {
		        var buffer = lines;
		        lines = [];
		        line = null;
		        return buffer;
		      },
		      rejoin: function() {
		        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
		      }
		    };
		  }
		  function d3_geo_clipSort(a, b) {
		    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
		  }
		  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
		  function d3_geo_clipAntimeridianLine(listener) {
		    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
		    return {
		      lineStart: function() {
		        listener.lineStart();
		        clean = 1;
		      },
		      point: function(λ1, φ1) {
		        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
		        if (abs(dλ - π) < ε) {
		          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
		          listener.point(sλ0, φ0);
		          listener.lineEnd();
		          listener.lineStart();
		          listener.point(sλ1, φ0);
		          listener.point(λ1, φ0);
		          clean = 0;
		        } else if (sλ0 !== sλ1 && dλ >= π) {
		          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
		          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
		          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
		          listener.point(sλ0, φ0);
		          listener.lineEnd();
		          listener.lineStart();
		          listener.point(sλ1, φ0);
		          clean = 0;
		        }
		        listener.point(λ0 = λ1, φ0 = φ1);
		        sλ0 = sλ1;
		      },
		      lineEnd: function() {
		        listener.lineEnd();
		        λ0 = φ0 = NaN;
		      },
		      clean: function() {
		        return 2 - clean;
		      }
		    };
		  }
		  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
		    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
		    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
		  }
		  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
		    var φ;
		    if (from == null) {
		      φ = direction * halfπ;
		      listener.point(-π, φ);
		      listener.point(0, φ);
		      listener.point(π, φ);
		      listener.point(π, 0);
		      listener.point(π, -φ);
		      listener.point(0, -φ);
		      listener.point(-π, -φ);
		      listener.point(-π, 0);
		      listener.point(-π, φ);
		    } else if (abs(from[0] - to[0]) > ε) {
		      var s = from[0] < to[0] ? π : -π;
		      φ = direction * s / 2;
		      listener.point(-s, φ);
		      listener.point(0, φ);
		      listener.point(s, φ);
		    } else {
		      listener.point(to[0], to[1]);
		    }
		  }
		  function d3_geo_pointInPolygon(point, polygon) {
		    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
		    d3_geo_areaRingSum.reset();
		    for (var i = 0, n = polygon.length; i < n; ++i) {
		      var ring = polygon[i], m = ring.length;
		      if (!m) continue;
		      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
		      while (true) {
		        if (j === m) j = 0;
		        point = ring[j];
		        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
		        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
		        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
		        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
		          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
		          d3_geo_cartesianNormalize(arc);
		          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
		          d3_geo_cartesianNormalize(intersection);
		          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
		          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
		            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
		          }
		        }
		        if (!j++) break;
		        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
		      }
		    }
		    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
		  }
		  function d3_geo_clipCircle(radius) {
		    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
		    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
		    function visible(λ, φ) {
		      return Math.cos(λ) * Math.cos(φ) > cr;
		    }
		    function clipLine(listener) {
		      var point0, c0, v0, v00, clean;
		      return {
		        lineStart: function() {
		          v00 = v0 = false;
		          clean = 1;
		        },
		        point: function(λ, φ) {
		          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
		          if (!point0 && (v00 = v0 = v)) listener.lineStart();
		          if (v !== v0) {
		            point2 = intersect(point0, point1);
		            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
		              point1[0] += ε;
		              point1[1] += ε;
		              v = visible(point1[0], point1[1]);
		            }
		          }
		          if (v !== v0) {
		            clean = 0;
		            if (v) {
		              listener.lineStart();
		              point2 = intersect(point1, point0);
		              listener.point(point2[0], point2[1]);
		            } else {
		              point2 = intersect(point0, point1);
		              listener.point(point2[0], point2[1]);
		              listener.lineEnd();
		            }
		            point0 = point2;
		          } else if (notHemisphere && point0 && smallRadius ^ v) {
		            var t;
		            if (!(c & c0) && (t = intersect(point1, point0, true))) {
		              clean = 0;
		              if (smallRadius) {
		                listener.lineStart();
		                listener.point(t[0][0], t[0][1]);
		                listener.point(t[1][0], t[1][1]);
		                listener.lineEnd();
		              } else {
		                listener.point(t[1][0], t[1][1]);
		                listener.lineEnd();
		                listener.lineStart();
		                listener.point(t[0][0], t[0][1]);
		              }
		            }
		          }
		          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
		            listener.point(point1[0], point1[1]);
		          }
		          point0 = point1, v0 = v, c0 = c;
		        },
		        lineEnd: function() {
		          if (v0) listener.lineEnd();
		          point0 = null;
		        },
		        clean: function() {
		          return clean | (v00 && v0) << 1;
		        }
		      };
		    }
		    function intersect(a, b, two) {
		      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
		      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
		      if (!determinant) return !two && a;
		      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
		      d3_geo_cartesianAdd(A, B);
		      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
		      if (t2 < 0) return;
		      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
		      d3_geo_cartesianAdd(q, A);
		      q = d3_geo_spherical(q);
		      if (!two) return q;
		      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
		      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
		      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
		      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
		      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
		        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
		        d3_geo_cartesianAdd(q1, A);
		        return [ q, d3_geo_spherical(q1) ];
		      }
		    }
		    function code(λ, φ) {
		      var r = smallRadius ? radius : π - radius, code = 0;
		      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
		      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
		      return code;
		    }
		  }
		  function d3_geom_clipLine(x0, y0, x1, y1) {
		    return function(line) {
		      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
		      r = x0 - ax;
		      if (!dx && r > 0) return;
		      r /= dx;
		      if (dx < 0) {
		        if (r < t0) return;
		        if (r < t1) t1 = r;
		      } else if (dx > 0) {
		        if (r > t1) return;
		        if (r > t0) t0 = r;
		      }
		      r = x1 - ax;
		      if (!dx && r < 0) return;
		      r /= dx;
		      if (dx < 0) {
		        if (r > t1) return;
		        if (r > t0) t0 = r;
		      } else if (dx > 0) {
		        if (r < t0) return;
		        if (r < t1) t1 = r;
		      }
		      r = y0 - ay;
		      if (!dy && r > 0) return;
		      r /= dy;
		      if (dy < 0) {
		        if (r < t0) return;
		        if (r < t1) t1 = r;
		      } else if (dy > 0) {
		        if (r > t1) return;
		        if (r > t0) t0 = r;
		      }
		      r = y1 - ay;
		      if (!dy && r < 0) return;
		      r /= dy;
		      if (dy < 0) {
		        if (r > t1) return;
		        if (r > t0) t0 = r;
		      } else if (dy > 0) {
		        if (r < t0) return;
		        if (r < t1) t1 = r;
		      }
		      if (t0 > 0) line.a = {
		        x: ax + t0 * dx,
		        y: ay + t0 * dy
		      };
		      if (t1 < 1) line.b = {
		        x: ax + t1 * dx,
		        y: ay + t1 * dy
		      };
		      return line;
		    };
		  }
		  var d3_geo_clipExtentMAX = 1e9;
		  d3.geo.clipExtent = function() {
		    var x0, y0, x1, y1, stream, clip, clipExtent = {
		      stream: function(output) {
		        if (stream) stream.valid = false;
		        stream = clip(output);
		        stream.valid = true;
		        return stream;
		      },
		      extent: function(_) {
		        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
		        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
		        if (stream) stream.valid = false, stream = null;
		        return clipExtent;
		      }
		    };
		    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
		  };
		  function d3_geo_clipExtent(x0, y0, x1, y1) {
		    return function(listener) {
		      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
		      var clip = {
		        point: point,
		        lineStart: lineStart,
		        lineEnd: lineEnd,
		        polygonStart: function() {
		          listener = bufferListener;
		          segments = [];
		          polygon = [];
		          clean = true;
		        },
		        polygonEnd: function() {
		          listener = listener_;
		          segments = d3.merge(segments);
		          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
		          if (inside || visible) {
		            listener.polygonStart();
		            if (inside) {
		              listener.lineStart();
		              interpolate(null, null, 1, listener);
		              listener.lineEnd();
		            }
		            if (visible) {
		              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
		            }
		            listener.polygonEnd();
		          }
		          segments = polygon = ring = null;
		        }
		      };
		      function insidePolygon(p) {
		        var wn = 0, n = polygon.length, y = p[1];
		        for (var i = 0; i < n; ++i) {
		          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
		            b = v[j];
		            if (a[1] <= y) {
		              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
		            } else {
		              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
		            }
		            a = b;
		          }
		        }
		        return wn !== 0;
		      }
		      function interpolate(from, to, direction, listener) {
		        var a = 0, a1 = 0;
		        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
		          do {
		            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
		          } while ((a = (a + direction + 4) % 4) !== a1);
		        } else {
		          listener.point(to[0], to[1]);
		        }
		      }
		      function pointVisible(x, y) {
		        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
		      }
		      function point(x, y) {
		        if (pointVisible(x, y)) listener.point(x, y);
		      }
		      var x__, y__, v__, x_, y_, v_, first, clean;
		      function lineStart() {
		        clip.point = linePoint;
		        if (polygon) polygon.push(ring = []);
		        first = true;
		        v_ = false;
		        x_ = y_ = NaN;
		      }
		      function lineEnd() {
		        if (segments) {
		          linePoint(x__, y__);
		          if (v__ && v_) bufferListener.rejoin();
		          segments.push(bufferListener.buffer());
		        }
		        clip.point = point;
		        if (v_) listener.lineEnd();
		      }
		      function linePoint(x, y) {
		        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
		        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
		        var v = pointVisible(x, y);
		        if (polygon) ring.push([ x, y ]);
		        if (first) {
		          x__ = x, y__ = y, v__ = v;
		          first = false;
		          if (v) {
		            listener.lineStart();
		            listener.point(x, y);
		          }
		        } else {
		          if (v && v_) listener.point(x, y); else {
		            var l = {
		              a: {
		                x: x_,
		                y: y_
		              },
		              b: {
		                x: x,
		                y: y
		              }
		            };
		            if (clipLine(l)) {
		              if (!v_) {
		                listener.lineStart();
		                listener.point(l.a.x, l.a.y);
		              }
		              listener.point(l.b.x, l.b.y);
		              if (!v) listener.lineEnd();
		              clean = false;
		            } else if (v) {
		              listener.lineStart();
		              listener.point(x, y);
		              clean = false;
		            }
		          }
		        }
		        x_ = x, y_ = y, v_ = v;
		      }
		      return clip;
		    };
		    function corner(p, direction) {
		      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
		    }
		    function compare(a, b) {
		      return comparePoints(a.x, b.x);
		    }
		    function comparePoints(a, b) {
		      var ca = corner(a, 1), cb = corner(b, 1);
		      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
		    }
		  }
		  function d3_geo_conic(projectAt) {
		    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
		    p.parallels = function(_) {
		      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
		      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
		    };
		    return p;
		  }
		  function d3_geo_conicEqualArea(φ0, φ1) {
		    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
		    function forward(λ, φ) {
		      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
		      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
		    }
		    forward.invert = function(x, y) {
		      var ρ0_y = ρ0 - y;
		      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
		    };
		    return forward;
		  }
		  (d3.geo.conicEqualArea = function() {
		    return d3_geo_conic(d3_geo_conicEqualArea);
		  }).raw = d3_geo_conicEqualArea;
		  d3.geo.albers = function() {
		    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
		  };
		  d3.geo.albersUsa = function() {
		    var lower48 = d3.geo.albers();
		    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
		    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
		    var point, pointStream = {
		      point: function(x, y) {
		        point = [ x, y ];
		      }
		    }, lower48Point, alaskaPoint, hawaiiPoint;
		    function albersUsa(coordinates) {
		      var x = coordinates[0], y = coordinates[1];
		      point = null;
		      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
		      return point;
		    }
		    albersUsa.invert = function(coordinates) {
		      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
		      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
		    };
		    albersUsa.stream = function(stream) {
		      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
		      return {
		        point: function(x, y) {
		          lower48Stream.point(x, y);
		          alaskaStream.point(x, y);
		          hawaiiStream.point(x, y);
		        },
		        sphere: function() {
		          lower48Stream.sphere();
		          alaskaStream.sphere();
		          hawaiiStream.sphere();
		        },
		        lineStart: function() {
		          lower48Stream.lineStart();
		          alaskaStream.lineStart();
		          hawaiiStream.lineStart();
		        },
		        lineEnd: function() {
		          lower48Stream.lineEnd();
		          alaskaStream.lineEnd();
		          hawaiiStream.lineEnd();
		        },
		        polygonStart: function() {
		          lower48Stream.polygonStart();
		          alaskaStream.polygonStart();
		          hawaiiStream.polygonStart();
		        },
		        polygonEnd: function() {
		          lower48Stream.polygonEnd();
		          alaskaStream.polygonEnd();
		          hawaiiStream.polygonEnd();
		        }
		      };
		    };
		    albersUsa.precision = function(_) {
		      if (!arguments.length) return lower48.precision();
		      lower48.precision(_);
		      alaska.precision(_);
		      hawaii.precision(_);
		      return albersUsa;
		    };
		    albersUsa.scale = function(_) {
		      if (!arguments.length) return lower48.scale();
		      lower48.scale(_);
		      alaska.scale(_ * .35);
		      hawaii.scale(_);
		      return albersUsa.translate(lower48.translate());
		    };
		    albersUsa.translate = function(_) {
		      if (!arguments.length) return lower48.translate();
		      var k = lower48.scale(), x = +_[0], y = +_[1];
		      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
		      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
		      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
		      return albersUsa;
		    };
		    return albersUsa.scale(1070);
		  };
		  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
		    point: d3_noop,
		    lineStart: d3_noop,
		    lineEnd: d3_noop,
		    polygonStart: function() {
		      d3_geo_pathAreaPolygon = 0;
		      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
		    },
		    polygonEnd: function() {
		      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
		      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
		    }
		  };
		  function d3_geo_pathAreaRingStart() {
		    var x00, y00, x0, y0;
		    d3_geo_pathArea.point = function(x, y) {
		      d3_geo_pathArea.point = nextPoint;
		      x00 = x0 = x, y00 = y0 = y;
		    };
		    function nextPoint(x, y) {
		      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
		      x0 = x, y0 = y;
		    }
		    d3_geo_pathArea.lineEnd = function() {
		      nextPoint(x00, y00);
		    };
		  }
		  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
		  var d3_geo_pathBounds = {
		    point: d3_geo_pathBoundsPoint,
		    lineStart: d3_noop,
		    lineEnd: d3_noop,
		    polygonStart: d3_noop,
		    polygonEnd: d3_noop
		  };
		  function d3_geo_pathBoundsPoint(x, y) {
		    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
		    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
		    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
		    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
		  }
		  function d3_geo_pathBuffer() {
		    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
		    var stream = {
		      point: point,
		      lineStart: function() {
		        stream.point = pointLineStart;
		      },
		      lineEnd: lineEnd,
		      polygonStart: function() {
		        stream.lineEnd = lineEndPolygon;
		      },
		      polygonEnd: function() {
		        stream.lineEnd = lineEnd;
		        stream.point = point;
		      },
		      pointRadius: function(_) {
		        pointCircle = d3_geo_pathBufferCircle(_);
		        return stream;
		      },
		      result: function() {
		        if (buffer.length) {
		          var result = buffer.join("");
		          buffer = [];
		          return result;
		        }
		      }
		    };
		    function point(x, y) {
		      buffer.push("M", x, ",", y, pointCircle);
		    }
		    function pointLineStart(x, y) {
		      buffer.push("M", x, ",", y);
		      stream.point = pointLine;
		    }
		    function pointLine(x, y) {
		      buffer.push("L", x, ",", y);
		    }
		    function lineEnd() {
		      stream.point = point;
		    }
		    function lineEndPolygon() {
		      buffer.push("Z");
		    }
		    return stream;
		  }
		  function d3_geo_pathBufferCircle(radius) {
		    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
		  }
		  var d3_geo_pathCentroid = {
		    point: d3_geo_pathCentroidPoint,
		    lineStart: d3_geo_pathCentroidLineStart,
		    lineEnd: d3_geo_pathCentroidLineEnd,
		    polygonStart: function() {
		      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
		    },
		    polygonEnd: function() {
		      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
		      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
		      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
		    }
		  };
		  function d3_geo_pathCentroidPoint(x, y) {
		    d3_geo_centroidX0 += x;
		    d3_geo_centroidY0 += y;
		    ++d3_geo_centroidZ0;
		  }
		  function d3_geo_pathCentroidLineStart() {
		    var x0, y0;
		    d3_geo_pathCentroid.point = function(x, y) {
		      d3_geo_pathCentroid.point = nextPoint;
		      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
		    };
		    function nextPoint(x, y) {
		      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
		      d3_geo_centroidX1 += z * (x0 + x) / 2;
		      d3_geo_centroidY1 += z * (y0 + y) / 2;
		      d3_geo_centroidZ1 += z;
		      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
		    }
		  }
		  function d3_geo_pathCentroidLineEnd() {
		    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
		  }
		  function d3_geo_pathCentroidRingStart() {
		    var x00, y00, x0, y0;
		    d3_geo_pathCentroid.point = function(x, y) {
		      d3_geo_pathCentroid.point = nextPoint;
		      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
		    };
		    function nextPoint(x, y) {
		      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
		      d3_geo_centroidX1 += z * (x0 + x) / 2;
		      d3_geo_centroidY1 += z * (y0 + y) / 2;
		      d3_geo_centroidZ1 += z;
		      z = y0 * x - x0 * y;
		      d3_geo_centroidX2 += z * (x0 + x);
		      d3_geo_centroidY2 += z * (y0 + y);
		      d3_geo_centroidZ2 += z * 3;
		      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
		    }
		    d3_geo_pathCentroid.lineEnd = function() {
		      nextPoint(x00, y00);
		    };
		  }
		  function d3_geo_pathContext(context) {
		    var pointRadius = 4.5;
		    var stream = {
		      point: point,
		      lineStart: function() {
		        stream.point = pointLineStart;
		      },
		      lineEnd: lineEnd,
		      polygonStart: function() {
		        stream.lineEnd = lineEndPolygon;
		      },
		      polygonEnd: function() {
		        stream.lineEnd = lineEnd;
		        stream.point = point;
		      },
		      pointRadius: function(_) {
		        pointRadius = _;
		        return stream;
		      },
		      result: d3_noop
		    };
		    function point(x, y) {
		      context.moveTo(x + pointRadius, y);
		      context.arc(x, y, pointRadius, 0, τ);
		    }
		    function pointLineStart(x, y) {
		      context.moveTo(x, y);
		      stream.point = pointLine;
		    }
		    function pointLine(x, y) {
		      context.lineTo(x, y);
		    }
		    function lineEnd() {
		      stream.point = point;
		    }
		    function lineEndPolygon() {
		      context.closePath();
		    }
		    return stream;
		  }
		  function d3_geo_resample(project) {
		    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
		    function resample(stream) {
		      return (maxDepth ? resampleRecursive : resampleNone)(stream);
		    }
		    function resampleNone(stream) {
		      return d3_geo_transformPoint(stream, function(x, y) {
		        x = project(x, y);
		        stream.point(x[0], x[1]);
		      });
		    }
		    function resampleRecursive(stream) {
		      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
		      var resample = {
		        point: point,
		        lineStart: lineStart,
		        lineEnd: lineEnd,
		        polygonStart: function() {
		          stream.polygonStart();
		          resample.lineStart = ringStart;
		        },
		        polygonEnd: function() {
		          stream.polygonEnd();
		          resample.lineStart = lineStart;
		        }
		      };
		      function point(x, y) {
		        x = project(x, y);
		        stream.point(x[0], x[1]);
		      }
		      function lineStart() {
		        x0 = NaN;
		        resample.point = linePoint;
		        stream.lineStart();
		      }
		      function linePoint(λ, φ) {
		        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
		        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
		        stream.point(x0, y0);
		      }
		      function lineEnd() {
		        resample.point = point;
		        stream.lineEnd();
		      }
		      function ringStart() {
		        lineStart();
		        resample.point = ringPoint;
		        resample.lineEnd = ringEnd;
		      }
		      function ringPoint(λ, φ) {
		        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
		        resample.point = linePoint;
		      }
		      function ringEnd() {
		        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
		        resample.lineEnd = lineEnd;
		        lineEnd();
		      }
		      return resample;
		    }
		    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
		      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
		      if (d2 > 4 * δ2 && depth--) {
		        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
		        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
		          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
		          stream.point(x2, y2);
		          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
		        }
		      }
		    }
		    resample.precision = function(_) {
		      if (!arguments.length) return Math.sqrt(δ2);
		      maxDepth = (δ2 = _ * _) > 0 && 16;
		      return resample;
		    };
		    return resample;
		  }
		  d3.geo.path = function() {
		    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
		    function path(object) {
		      if (object) {
		        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
		        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
		        d3.geo.stream(object, cacheStream);
		      }
		      return contextStream.result();
		    }
		    path.area = function(object) {
		      d3_geo_pathAreaSum = 0;
		      d3.geo.stream(object, projectStream(d3_geo_pathArea));
		      return d3_geo_pathAreaSum;
		    };
		    path.centroid = function(object) {
		      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
		      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
		      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
		    };
		    path.bounds = function(object) {
		      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
		      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
		      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
		    };
		    path.projection = function(_) {
		      if (!arguments.length) return projection;
		      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
		      return reset();
		    };
		    path.context = function(_) {
		      if (!arguments.length) return context;
		      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
		      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
		      return reset();
		    };
		    path.pointRadius = function(_) {
		      if (!arguments.length) return pointRadius;
		      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
		      return path;
		    };
		    function reset() {
		      cacheStream = null;
		      return path;
		    }
		    return path.projection(d3.geo.albersUsa()).context(null);
		  };
		  function d3_geo_pathProjectStream(project) {
		    var resample = d3_geo_resample(function(x, y) {
		      return project([ x * d3_degrees, y * d3_degrees ]);
		    });
		    return function(stream) {
		      return d3_geo_projectionRadians(resample(stream));
		    };
		  }
		  d3.geo.transform = function(methods) {
		    return {
		      stream: function(stream) {
		        var transform = new d3_geo_transform(stream);
		        for (var k in methods) transform[k] = methods[k];
		        return transform;
		      }
		    };
		  };
		  function d3_geo_transform(stream) {
		    this.stream = stream;
		  }
		  d3_geo_transform.prototype = {
		    point: function(x, y) {
		      this.stream.point(x, y);
		    },
		    sphere: function() {
		      this.stream.sphere();
		    },
		    lineStart: function() {
		      this.stream.lineStart();
		    },
		    lineEnd: function() {
		      this.stream.lineEnd();
		    },
		    polygonStart: function() {
		      this.stream.polygonStart();
		    },
		    polygonEnd: function() {
		      this.stream.polygonEnd();
		    }
		  };
		  function d3_geo_transformPoint(stream, point) {
		    return {
		      point: point,
		      sphere: function() {
		        stream.sphere();
		      },
		      lineStart: function() {
		        stream.lineStart();
		      },
		      lineEnd: function() {
		        stream.lineEnd();
		      },
		      polygonStart: function() {
		        stream.polygonStart();
		      },
		      polygonEnd: function() {
		        stream.polygonEnd();
		      }
		    };
		  }
		  d3.geo.projection = d3_geo_projection;
		  d3.geo.projectionMutator = d3_geo_projectionMutator;
		  function d3_geo_projection(project) {
		    return d3_geo_projectionMutator(function() {
		      return project;
		    })();
		  }
		  function d3_geo_projectionMutator(projectAt) {
		    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
		      x = project(x, y);
		      return [ x[0] * k + δx, δy - x[1] * k ];
		    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
		    function projection(point) {
		      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
		      return [ point[0] * k + δx, δy - point[1] * k ];
		    }
		    function invert(point) {
		      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
		      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
		    }
		    projection.stream = function(output) {
		      if (stream) stream.valid = false;
		      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
		      stream.valid = true;
		      return stream;
		    };
		    projection.clipAngle = function(_) {
		      if (!arguments.length) return clipAngle;
		      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
		      return invalidate();
		    };
		    projection.clipExtent = function(_) {
		      if (!arguments.length) return clipExtent;
		      clipExtent = _;
		      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
		      return invalidate();
		    };
		    projection.scale = function(_) {
		      if (!arguments.length) return k;
		      k = +_;
		      return reset();
		    };
		    projection.translate = function(_) {
		      if (!arguments.length) return [ x, y ];
		      x = +_[0];
		      y = +_[1];
		      return reset();
		    };
		    projection.center = function(_) {
		      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
		      λ = _[0] % 360 * d3_radians;
		      φ = _[1] % 360 * d3_radians;
		      return reset();
		    };
		    projection.rotate = function(_) {
		      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
		      δλ = _[0] % 360 * d3_radians;
		      δφ = _[1] % 360 * d3_radians;
		      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
		      return reset();
		    };
		    d3.rebind(projection, projectResample, "precision");
		    function reset() {
		      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
		      var center = project(λ, φ);
		      δx = x - center[0] * k;
		      δy = y + center[1] * k;
		      return invalidate();
		    }
		    function invalidate() {
		      if (stream) stream.valid = false, stream = null;
		      return projection;
		    }
		    return function() {
		      project = projectAt.apply(this, arguments);
		      projection.invert = project.invert && invert;
		      return reset();
		    };
		  }
		  function d3_geo_projectionRadians(stream) {
		    return d3_geo_transformPoint(stream, function(x, y) {
		      stream.point(x * d3_radians, y * d3_radians);
		    });
		  }
		  function d3_geo_equirectangular(λ, φ) {
		    return [ λ, φ ];
		  }
		  (d3.geo.equirectangular = function() {
		    return d3_geo_projection(d3_geo_equirectangular);
		  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
		  d3.geo.rotation = function(rotate) {
		    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
		    function forward(coordinates) {
		      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
		      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
		    }
		    forward.invert = function(coordinates) {
		      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
		      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
		    };
		    return forward;
		  };
		  function d3_geo_identityRotation(λ, φ) {
		    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
		  }
		  d3_geo_identityRotation.invert = d3_geo_equirectangular;
		  function d3_geo_rotation(δλ, δφ, δγ) {
		    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
		  }
		  function d3_geo_forwardRotationλ(δλ) {
		    return function(λ, φ) {
		      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
		    };
		  }
		  function d3_geo_rotationλ(δλ) {
		    var rotation = d3_geo_forwardRotationλ(δλ);
		    rotation.invert = d3_geo_forwardRotationλ(-δλ);
		    return rotation;
		  }
		  function d3_geo_rotationφγ(δφ, δγ) {
		    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
		    function rotation(λ, φ) {
		      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
		      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
		    }
		    rotation.invert = function(λ, φ) {
		      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
		      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
		    };
		    return rotation;
		  }
		  d3.geo.circle = function() {
		    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
		    function circle() {
		      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
		      interpolate(null, null, 1, {
		        point: function(x, y) {
		          ring.push(x = rotate(x, y));
		          x[0] *= d3_degrees, x[1] *= d3_degrees;
		        }
		      });
		      return {
		        type: "Polygon",
		        coordinates: [ ring ]
		      };
		    }
		    circle.origin = function(x) {
		      if (!arguments.length) return origin;
		      origin = x;
		      return circle;
		    };
		    circle.angle = function(x) {
		      if (!arguments.length) return angle;
		      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
		      return circle;
		    };
		    circle.precision = function(_) {
		      if (!arguments.length) return precision;
		      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
		      return circle;
		    };
		    return circle.angle(90);
		  };
		  function d3_geo_circleInterpolate(radius, precision) {
		    var cr = Math.cos(radius), sr = Math.sin(radius);
		    return function(from, to, direction, listener) {
		      var step = direction * precision;
		      if (from != null) {
		        from = d3_geo_circleAngle(cr, from);
		        to = d3_geo_circleAngle(cr, to);
		        if (direction > 0 ? from < to : from > to) from += direction * τ;
		      } else {
		        from = radius + direction * τ;
		        to = radius - .5 * step;
		      }
		      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
		        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
		      }
		    };
		  }
		  function d3_geo_circleAngle(cr, point) {
		    var a = d3_geo_cartesian(point);
		    a[0] -= cr;
		    d3_geo_cartesianNormalize(a);
		    var angle = d3_acos(-a[1]);
		    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
		  }
		  d3.geo.distance = function(a, b) {
		    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
		    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
		  };
		  d3.geo.graticule = function() {
		    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
		    function graticule() {
		      return {
		        type: "MultiLineString",
		        coordinates: lines()
		      };
		    }
		    function lines() {
		      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
		        return abs(x % DX) > ε;
		      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
		        return abs(y % DY) > ε;
		      }).map(y));
		    }
		    graticule.lines = function() {
		      return lines().map(function(coordinates) {
		        return {
		          type: "LineString",
		          coordinates: coordinates
		        };
		      });
		    };
		    graticule.outline = function() {
		      return {
		        type: "Polygon",
		        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
		      };
		    };
		    graticule.extent = function(_) {
		      if (!arguments.length) return graticule.minorExtent();
		      return graticule.majorExtent(_).minorExtent(_);
		    };
		    graticule.majorExtent = function(_) {
		      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
		      X0 = +_[0][0], X1 = +_[1][0];
		      Y0 = +_[0][1], Y1 = +_[1][1];
		      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
		      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
		      return graticule.precision(precision);
		    };
		    graticule.minorExtent = function(_) {
		      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
		      x0 = +_[0][0], x1 = +_[1][0];
		      y0 = +_[0][1], y1 = +_[1][1];
		      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
		      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
		      return graticule.precision(precision);
		    };
		    graticule.step = function(_) {
		      if (!arguments.length) return graticule.minorStep();
		      return graticule.majorStep(_).minorStep(_);
		    };
		    graticule.majorStep = function(_) {
		      if (!arguments.length) return [ DX, DY ];
		      DX = +_[0], DY = +_[1];
		      return graticule;
		    };
		    graticule.minorStep = function(_) {
		      if (!arguments.length) return [ dx, dy ];
		      dx = +_[0], dy = +_[1];
		      return graticule;
		    };
		    graticule.precision = function(_) {
		      if (!arguments.length) return precision;
		      precision = +_;
		      x = d3_geo_graticuleX(y0, y1, 90);
		      y = d3_geo_graticuleY(x0, x1, precision);
		      X = d3_geo_graticuleX(Y0, Y1, 90);
		      Y = d3_geo_graticuleY(X0, X1, precision);
		      return graticule;
		    };
		    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
		  };
		  function d3_geo_graticuleX(y0, y1, dy) {
		    var y = d3.range(y0, y1 - ε, dy).concat(y1);
		    return function(x) {
		      return y.map(function(y) {
		        return [ x, y ];
		      });
		    };
		  }
		  function d3_geo_graticuleY(x0, x1, dx) {
		    var x = d3.range(x0, x1 - ε, dx).concat(x1);
		    return function(y) {
		      return x.map(function(x) {
		        return [ x, y ];
		      });
		    };
		  }
		  function d3_source(d) {
		    return d.source;
		  }
		  function d3_target(d) {
		    return d.target;
		  }
		  d3.geo.greatArc = function() {
		    var source = d3_source, source_, target = d3_target, target_;
		    function greatArc() {
		      return {
		        type: "LineString",
		        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
		      };
		    }
		    greatArc.distance = function() {
		      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
		    };
		    greatArc.source = function(_) {
		      if (!arguments.length) return source;
		      source = _, source_ = typeof _ === "function" ? null : _;
		      return greatArc;
		    };
		    greatArc.target = function(_) {
		      if (!arguments.length) return target;
		      target = _, target_ = typeof _ === "function" ? null : _;
		      return greatArc;
		    };
		    greatArc.precision = function() {
		      return arguments.length ? greatArc : 0;
		    };
		    return greatArc;
		  };
		  d3.geo.interpolate = function(source, target) {
		    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
		  };
		  function d3_geo_interpolate(x0, y0, x1, y1) {
		    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
		    var interpolate = d ? function(t) {
		      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
		      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
		    } : function() {
		      return [ x0 * d3_degrees, y0 * d3_degrees ];
		    };
		    interpolate.distance = d;
		    return interpolate;
		  }
		  d3.geo.length = function(object) {
		    d3_geo_lengthSum = 0;
		    d3.geo.stream(object, d3_geo_length);
		    return d3_geo_lengthSum;
		  };
		  var d3_geo_lengthSum;
		  var d3_geo_length = {
		    sphere: d3_noop,
		    point: d3_noop,
		    lineStart: d3_geo_lengthLineStart,
		    lineEnd: d3_noop,
		    polygonStart: d3_noop,
		    polygonEnd: d3_noop
		  };
		  function d3_geo_lengthLineStart() {
		    var λ0, sinφ0, cosφ0;
		    d3_geo_length.point = function(λ, φ) {
		      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
		      d3_geo_length.point = nextPoint;
		    };
		    d3_geo_length.lineEnd = function() {
		      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
		    };
		    function nextPoint(λ, φ) {
		      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
		      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
		      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
		    }
		  }
		  function d3_geo_azimuthal(scale, angle) {
		    function azimuthal(λ, φ) {
		      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
		      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
		    }
		    azimuthal.invert = function(x, y) {
		      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
		      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
		    };
		    return azimuthal;
		  }
		  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
		    return Math.sqrt(2 / (1 + cosλcosφ));
		  }, function(ρ) {
		    return 2 * Math.asin(ρ / 2);
		  });
		  (d3.geo.azimuthalEqualArea = function() {
		    return d3_geo_projection(d3_geo_azimuthalEqualArea);
		  }).raw = d3_geo_azimuthalEqualArea;
		  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
		    var c = Math.acos(cosλcosφ);
		    return c && c / Math.sin(c);
		  }, d3_identity);
		  (d3.geo.azimuthalEquidistant = function() {
		    return d3_geo_projection(d3_geo_azimuthalEquidistant);
		  }).raw = d3_geo_azimuthalEquidistant;
		  function d3_geo_conicConformal(φ0, φ1) {
		    var cosφ0 = Math.cos(φ0), t = function(φ) {
		      return Math.tan(π / 4 + φ / 2);
		    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
		    if (!n) return d3_geo_mercator;
		    function forward(λ, φ) {
		      if (F > 0) {
		        if (φ < -halfπ + ε) φ = -halfπ + ε;
		      } else {
		        if (φ > halfπ - ε) φ = halfπ - ε;
		      }
		      var ρ = F / Math.pow(t(φ), n);
		      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
		    }
		    forward.invert = function(x, y) {
		      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
		      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
		    };
		    return forward;
		  }
		  (d3.geo.conicConformal = function() {
		    return d3_geo_conic(d3_geo_conicConformal);
		  }).raw = d3_geo_conicConformal;
		  function d3_geo_conicEquidistant(φ0, φ1) {
		    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
		    if (abs(n) < ε) return d3_geo_equirectangular;
		    function forward(λ, φ) {
		      var ρ = G - φ;
		      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
		    }
		    forward.invert = function(x, y) {
		      var ρ0_y = G - y;
		      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
		    };
		    return forward;
		  }
		  (d3.geo.conicEquidistant = function() {
		    return d3_geo_conic(d3_geo_conicEquidistant);
		  }).raw = d3_geo_conicEquidistant;
		  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
		    return 1 / cosλcosφ;
		  }, Math.atan);
		  (d3.geo.gnomonic = function() {
		    return d3_geo_projection(d3_geo_gnomonic);
		  }).raw = d3_geo_gnomonic;
		  function d3_geo_mercator(λ, φ) {
		    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
		  }
		  d3_geo_mercator.invert = function(x, y) {
		    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
		  };
		  function d3_geo_mercatorProjection(project) {
		    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
		    m.scale = function() {
		      var v = scale.apply(m, arguments);
		      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
		    };
		    m.translate = function() {
		      var v = translate.apply(m, arguments);
		      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
		    };
		    m.clipExtent = function(_) {
		      var v = clipExtent.apply(m, arguments);
		      if (v === m) {
		        if (clipAuto = _ == null) {
		          var k = π * scale(), t = translate();
		          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
		        }
		      } else if (clipAuto) {
		        v = null;
		      }
		      return v;
		    };
		    return m.clipExtent(null);
		  }
		  (d3.geo.mercator = function() {
		    return d3_geo_mercatorProjection(d3_geo_mercator);
		  }).raw = d3_geo_mercator;
		  var d3_geo_orthographic = d3_geo_azimuthal(function() {
		    return 1;
		  }, Math.asin);
		  (d3.geo.orthographic = function() {
		    return d3_geo_projection(d3_geo_orthographic);
		  }).raw = d3_geo_orthographic;
		  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
		    return 1 / (1 + cosλcosφ);
		  }, function(ρ) {
		    return 2 * Math.atan(ρ);
		  });
		  (d3.geo.stereographic = function() {
		    return d3_geo_projection(d3_geo_stereographic);
		  }).raw = d3_geo_stereographic;
		  function d3_geo_transverseMercator(λ, φ) {
		    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
		  }
		  d3_geo_transverseMercator.invert = function(x, y) {
		    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
		  };
		  (d3.geo.transverseMercator = function() {
		    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
		    projection.center = function(_) {
		      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
		    };
		    projection.rotate = function(_) {
		      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
		      [ _[0], _[1], _[2] - 90 ]);
		    };
		    return rotate([ 0, 0, 90 ]);
		  }).raw = d3_geo_transverseMercator;
		  d3.geom = {};
		  function d3_geom_pointX(d) {
		    return d[0];
		  }
		  function d3_geom_pointY(d) {
		    return d[1];
		  }
		  d3.geom.hull = function(vertices) {
		    var x = d3_geom_pointX, y = d3_geom_pointY;
		    if (arguments.length) return hull(vertices);
		    function hull(data) {
		      if (data.length < 3) return [];
		      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
		      for (i = 0; i < n; i++) {
		        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
		      }
		      points.sort(d3_geom_hullOrder);
		      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
		      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
		      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
		      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
		      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
		      return polygon;
		    }
		    hull.x = function(_) {
		      return arguments.length ? (x = _, hull) : x;
		    };
		    hull.y = function(_) {
		      return arguments.length ? (y = _, hull) : y;
		    };
		    return hull;
		  };
		  function d3_geom_hullUpper(points) {
		    var n = points.length, hull = [ 0, 1 ], hs = 2;
		    for (var i = 2; i < n; i++) {
		      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
		      hull[hs++] = i;
		    }
		    return hull.slice(0, hs);
		  }
		  function d3_geom_hullOrder(a, b) {
		    return a[0] - b[0] || a[1] - b[1];
		  }
		  d3.geom.polygon = function(coordinates) {
		    d3_subclass(coordinates, d3_geom_polygonPrototype);
		    return coordinates;
		  };
		  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
		  d3_geom_polygonPrototype.area = function() {
		    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
		    while (++i < n) {
		      a = b;
		      b = this[i];
		      area += a[1] * b[0] - a[0] * b[1];
		    }
		    return area * .5;
		  };
		  d3_geom_polygonPrototype.centroid = function(k) {
		    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
		    if (!arguments.length) k = -1 / (6 * this.area());
		    while (++i < n) {
		      a = b;
		      b = this[i];
		      c = a[0] * b[1] - b[0] * a[1];
		      x += (a[0] + b[0]) * c;
		      y += (a[1] + b[1]) * c;
		    }
		    return [ x * k, y * k ];
		  };
		  d3_geom_polygonPrototype.clip = function(subject) {
		    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
		    while (++i < n) {
		      input = subject.slice();
		      subject.length = 0;
		      b = this[i];
		      c = input[(m = input.length - closed) - 1];
		      j = -1;
		      while (++j < m) {
		        d = input[j];
		        if (d3_geom_polygonInside(d, a, b)) {
		          if (!d3_geom_polygonInside(c, a, b)) {
		            subject.push(d3_geom_polygonIntersect(c, d, a, b));
		          }
		          subject.push(d);
		        } else if (d3_geom_polygonInside(c, a, b)) {
		          subject.push(d3_geom_polygonIntersect(c, d, a, b));
		        }
		        c = d;
		      }
		      if (closed) subject.push(subject[0]);
		      a = b;
		    }
		    return subject;
		  };
		  function d3_geom_polygonInside(p, a, b) {
		    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
		  }
		  function d3_geom_polygonIntersect(c, d, a, b) {
		    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
		    return [ x1 + ua * x21, y1 + ua * y21 ];
		  }
		  function d3_geom_polygonClosed(coordinates) {
		    var a = coordinates[0], b = coordinates[coordinates.length - 1];
		    return !(a[0] - b[0] || a[1] - b[1]);
		  }
		  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
		  function d3_geom_voronoiBeach() {
		    d3_geom_voronoiRedBlackNode(this);
		    this.edge = this.site = this.circle = null;
		  }
		  function d3_geom_voronoiCreateBeach(site) {
		    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
		    beach.site = site;
		    return beach;
		  }
		  function d3_geom_voronoiDetachBeach(beach) {
		    d3_geom_voronoiDetachCircle(beach);
		    d3_geom_voronoiBeaches.remove(beach);
		    d3_geom_voronoiBeachPool.push(beach);
		    d3_geom_voronoiRedBlackNode(beach);
		  }
		  function d3_geom_voronoiRemoveBeach(beach) {
		    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
		      x: x,
		      y: y
		    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
		    d3_geom_voronoiDetachBeach(beach);
		    var lArc = previous;
		    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
		      previous = lArc.P;
		      disappearing.unshift(lArc);
		      d3_geom_voronoiDetachBeach(lArc);
		      lArc = previous;
		    }
		    disappearing.unshift(lArc);
		    d3_geom_voronoiDetachCircle(lArc);
		    var rArc = next;
		    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
		      next = rArc.N;
		      disappearing.push(rArc);
		      d3_geom_voronoiDetachBeach(rArc);
		      rArc = next;
		    }
		    disappearing.push(rArc);
		    d3_geom_voronoiDetachCircle(rArc);
		    var nArcs = disappearing.length, iArc;
		    for (iArc = 1; iArc < nArcs; ++iArc) {
		      rArc = disappearing[iArc];
		      lArc = disappearing[iArc - 1];
		      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
		    }
		    lArc = disappearing[0];
		    rArc = disappearing[nArcs - 1];
		    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
		    d3_geom_voronoiAttachCircle(lArc);
		    d3_geom_voronoiAttachCircle(rArc);
		  }
		  function d3_geom_voronoiAddBeach(site) {
		    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
		    while (node) {
		      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
		      if (dxl > ε) node = node.L; else {
		        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
		        if (dxr > ε) {
		          if (!node.R) {
		            lArc = node;
		            break;
		          }
		          node = node.R;
		        } else {
		          if (dxl > -ε) {
		            lArc = node.P;
		            rArc = node;
		          } else if (dxr > -ε) {
		            lArc = node;
		            rArc = node.N;
		          } else {
		            lArc = rArc = node;
		          }
		          break;
		        }
		      }
		    }
		    var newArc = d3_geom_voronoiCreateBeach(site);
		    d3_geom_voronoiBeaches.insert(lArc, newArc);
		    if (!lArc && !rArc) return;
		    if (lArc === rArc) {
		      d3_geom_voronoiDetachCircle(lArc);
		      rArc = d3_geom_voronoiCreateBeach(lArc.site);
		      d3_geom_voronoiBeaches.insert(newArc, rArc);
		      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
		      d3_geom_voronoiAttachCircle(lArc);
		      d3_geom_voronoiAttachCircle(rArc);
		      return;
		    }
		    if (!rArc) {
		      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
		      return;
		    }
		    d3_geom_voronoiDetachCircle(lArc);
		    d3_geom_voronoiDetachCircle(rArc);
		    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
		      x: (cy * hb - by * hc) / d + ax,
		      y: (bx * hc - cx * hb) / d + ay
		    };
		    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
		    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
		    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
		    d3_geom_voronoiAttachCircle(lArc);
		    d3_geom_voronoiAttachCircle(rArc);
		  }
		  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
		    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
		    if (!pby2) return rfocx;
		    var lArc = arc.P;
		    if (!lArc) return -Infinity;
		    site = lArc.site;
		    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
		    if (!plby2) return lfocx;
		    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
		    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
		    return (rfocx + lfocx) / 2;
		  }
		  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
		    var rArc = arc.N;
		    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
		    var site = arc.site;
		    return site.y === directrix ? site.x : Infinity;
		  }
		  function d3_geom_voronoiCell(site) {
		    this.site = site;
		    this.edges = [];
		  }
		  d3_geom_voronoiCell.prototype.prepare = function() {
		    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
		    while (iHalfEdge--) {
		      edge = halfEdges[iHalfEdge].edge;
		      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
		    }
		    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
		    return halfEdges.length;
		  };
		  function d3_geom_voronoiCloseCells(extent) {
		    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
		    while (iCell--) {
		      cell = cells[iCell];
		      if (!cell || !cell.prepare()) continue;
		      halfEdges = cell.edges;
		      nHalfEdges = halfEdges.length;
		      iHalfEdge = 0;
		      while (iHalfEdge < nHalfEdges) {
		        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
		        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
		        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
		          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
		            x: x0,
		            y: abs(x2 - x0) < ε ? y2 : y1
		          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
		            x: abs(y2 - y1) < ε ? x2 : x1,
		            y: y1
		          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
		            x: x1,
		            y: abs(x2 - x1) < ε ? y2 : y0
		          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
		            x: abs(y2 - y0) < ε ? x2 : x0,
		            y: y0
		          } : null), cell.site, null));
		          ++nHalfEdges;
		        }
		      }
		    }
		  }
		  function d3_geom_voronoiHalfEdgeOrder(a, b) {
		    return b.angle - a.angle;
		  }
		  function d3_geom_voronoiCircle() {
		    d3_geom_voronoiRedBlackNode(this);
		    this.x = this.y = this.arc = this.site = this.cy = null;
		  }
		  function d3_geom_voronoiAttachCircle(arc) {
		    var lArc = arc.P, rArc = arc.N;
		    if (!lArc || !rArc) return;
		    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
		    if (lSite === rSite) return;
		    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
		    var d = 2 * (ax * cy - ay * cx);
		    if (d >= -ε2) return;
		    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
		    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
		    circle.arc = arc;
		    circle.site = cSite;
		    circle.x = x + bx;
		    circle.y = cy + Math.sqrt(x * x + y * y);
		    circle.cy = cy;
		    arc.circle = circle;
		    var before = null, node = d3_geom_voronoiCircles._;
		    while (node) {
		      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
		        if (node.L) node = node.L; else {
		          before = node.P;
		          break;
		        }
		      } else {
		        if (node.R) node = node.R; else {
		          before = node;
		          break;
		        }
		      }
		    }
		    d3_geom_voronoiCircles.insert(before, circle);
		    if (!before) d3_geom_voronoiFirstCircle = circle;
		  }
		  function d3_geom_voronoiDetachCircle(arc) {
		    var circle = arc.circle;
		    if (circle) {
		      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
		      d3_geom_voronoiCircles.remove(circle);
		      d3_geom_voronoiCirclePool.push(circle);
		      d3_geom_voronoiRedBlackNode(circle);
		      arc.circle = null;
		    }
		  }
		  function d3_geom_voronoiClipEdges(extent) {
		    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
		    while (i--) {
		      e = edges[i];
		      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
		        e.a = e.b = null;
		        edges.splice(i, 1);
		      }
		    }
		  }
		  function d3_geom_voronoiConnectEdge(edge, extent) {
		    var vb = edge.b;
		    if (vb) return true;
		    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
		    if (ry === ly) {
		      if (fx < x0 || fx >= x1) return;
		      if (lx > rx) {
		        if (!va) va = {
		          x: fx,
		          y: y0
		        }; else if (va.y >= y1) return;
		        vb = {
		          x: fx,
		          y: y1
		        };
		      } else {
		        if (!va) va = {
		          x: fx,
		          y: y1
		        }; else if (va.y < y0) return;
		        vb = {
		          x: fx,
		          y: y0
		        };
		      }
		    } else {
		      fm = (lx - rx) / (ry - ly);
		      fb = fy - fm * fx;
		      if (fm < -1 || fm > 1) {
		        if (lx > rx) {
		          if (!va) va = {
		            x: (y0 - fb) / fm,
		            y: y0
		          }; else if (va.y >= y1) return;
		          vb = {
		            x: (y1 - fb) / fm,
		            y: y1
		          };
		        } else {
		          if (!va) va = {
		            x: (y1 - fb) / fm,
		            y: y1
		          }; else if (va.y < y0) return;
		          vb = {
		            x: (y0 - fb) / fm,
		            y: y0
		          };
		        }
		      } else {
		        if (ly < ry) {
		          if (!va) va = {
		            x: x0,
		            y: fm * x0 + fb
		          }; else if (va.x >= x1) return;
		          vb = {
		            x: x1,
		            y: fm * x1 + fb
		          };
		        } else {
		          if (!va) va = {
		            x: x1,
		            y: fm * x1 + fb
		          }; else if (va.x < x0) return;
		          vb = {
		            x: x0,
		            y: fm * x0 + fb
		          };
		        }
		      }
		    }
		    edge.a = va;
		    edge.b = vb;
		    return true;
		  }
		  function d3_geom_voronoiEdge(lSite, rSite) {
		    this.l = lSite;
		    this.r = rSite;
		    this.a = this.b = null;
		  }
		  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
		    var edge = new d3_geom_voronoiEdge(lSite, rSite);
		    d3_geom_voronoiEdges.push(edge);
		    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
		    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
		    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
		    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
		    return edge;
		  }
		  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
		    var edge = new d3_geom_voronoiEdge(lSite, null);
		    edge.a = va;
		    edge.b = vb;
		    d3_geom_voronoiEdges.push(edge);
		    return edge;
		  }
		  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
		    if (!edge.a && !edge.b) {
		      edge.a = vertex;
		      edge.l = lSite;
		      edge.r = rSite;
		    } else if (edge.l === rSite) {
		      edge.b = vertex;
		    } else {
		      edge.a = vertex;
		    }
		  }
		  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
		    var va = edge.a, vb = edge.b;
		    this.edge = edge;
		    this.site = lSite;
		    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
		  }
		  d3_geom_voronoiHalfEdge.prototype = {
		    start: function() {
		      return this.edge.l === this.site ? this.edge.a : this.edge.b;
		    },
		    end: function() {
		      return this.edge.l === this.site ? this.edge.b : this.edge.a;
		    }
		  };
		  function d3_geom_voronoiRedBlackTree() {
		    this._ = null;
		  }
		  function d3_geom_voronoiRedBlackNode(node) {
		    node.U = node.C = node.L = node.R = node.P = node.N = null;
		  }
		  d3_geom_voronoiRedBlackTree.prototype = {
		    insert: function(after, node) {
		      var parent, grandpa, uncle;
		      if (after) {
		        node.P = after;
		        node.N = after.N;
		        if (after.N) after.N.P = node;
		        after.N = node;
		        if (after.R) {
		          after = after.R;
		          while (after.L) after = after.L;
		          after.L = node;
		        } else {
		          after.R = node;
		        }
		        parent = after;
		      } else if (this._) {
		        after = d3_geom_voronoiRedBlackFirst(this._);
		        node.P = null;
		        node.N = after;
		        after.P = after.L = node;
		        parent = after;
		      } else {
		        node.P = node.N = null;
		        this._ = node;
		        parent = null;
		      }
		      node.L = node.R = null;
		      node.U = parent;
		      node.C = true;
		      after = node;
		      while (parent && parent.C) {
		        grandpa = parent.U;
		        if (parent === grandpa.L) {
		          uncle = grandpa.R;
		          if (uncle && uncle.C) {
		            parent.C = uncle.C = false;
		            grandpa.C = true;
		            after = grandpa;
		          } else {
		            if (after === parent.R) {
		              d3_geom_voronoiRedBlackRotateLeft(this, parent);
		              after = parent;
		              parent = after.U;
		            }
		            parent.C = false;
		            grandpa.C = true;
		            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
		          }
		        } else {
		          uncle = grandpa.L;
		          if (uncle && uncle.C) {
		            parent.C = uncle.C = false;
		            grandpa.C = true;
		            after = grandpa;
		          } else {
		            if (after === parent.L) {
		              d3_geom_voronoiRedBlackRotateRight(this, parent);
		              after = parent;
		              parent = after.U;
		            }
		            parent.C = false;
		            grandpa.C = true;
		            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
		          }
		        }
		        parent = after.U;
		      }
		      this._.C = false;
		    },
		    remove: function(node) {
		      if (node.N) node.N.P = node.P;
		      if (node.P) node.P.N = node.N;
		      node.N = node.P = null;
		      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
		      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
		      if (parent) {
		        if (parent.L === node) parent.L = next; else parent.R = next;
		      } else {
		        this._ = next;
		      }
		      if (left && right) {
		        red = next.C;
		        next.C = node.C;
		        next.L = left;
		        left.U = next;
		        if (next !== right) {
		          parent = next.U;
		          next.U = node.U;
		          node = next.R;
		          parent.L = node;
		          next.R = right;
		          right.U = next;
		        } else {
		          next.U = parent;
		          parent = next;
		          node = next.R;
		        }
		      } else {
		        red = node.C;
		        node = next;
		      }
		      if (node) node.U = parent;
		      if (red) return;
		      if (node && node.C) {
		        node.C = false;
		        return;
		      }
		      do {
		        if (node === this._) break;
		        if (node === parent.L) {
		          sibling = parent.R;
		          if (sibling.C) {
		            sibling.C = false;
		            parent.C = true;
		            d3_geom_voronoiRedBlackRotateLeft(this, parent);
		            sibling = parent.R;
		          }
		          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
		            if (!sibling.R || !sibling.R.C) {
		              sibling.L.C = false;
		              sibling.C = true;
		              d3_geom_voronoiRedBlackRotateRight(this, sibling);
		              sibling = parent.R;
		            }
		            sibling.C = parent.C;
		            parent.C = sibling.R.C = false;
		            d3_geom_voronoiRedBlackRotateLeft(this, parent);
		            node = this._;
		            break;
		          }
		        } else {
		          sibling = parent.L;
		          if (sibling.C) {
		            sibling.C = false;
		            parent.C = true;
		            d3_geom_voronoiRedBlackRotateRight(this, parent);
		            sibling = parent.L;
		          }
		          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
		            if (!sibling.L || !sibling.L.C) {
		              sibling.R.C = false;
		              sibling.C = true;
		              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
		              sibling = parent.L;
		            }
		            sibling.C = parent.C;
		            parent.C = sibling.L.C = false;
		            d3_geom_voronoiRedBlackRotateRight(this, parent);
		            node = this._;
		            break;
		          }
		        }
		        sibling.C = true;
		        node = parent;
		        parent = parent.U;
		      } while (!node.C);
		      if (node) node.C = false;
		    }
		  };
		  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
		    var p = node, q = node.R, parent = p.U;
		    if (parent) {
		      if (parent.L === p) parent.L = q; else parent.R = q;
		    } else {
		      tree._ = q;
		    }
		    q.U = parent;
		    p.U = q;
		    p.R = q.L;
		    if (p.R) p.R.U = p;
		    q.L = p;
		  }
		  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
		    var p = node, q = node.L, parent = p.U;
		    if (parent) {
		      if (parent.L === p) parent.L = q; else parent.R = q;
		    } else {
		      tree._ = q;
		    }
		    q.U = parent;
		    p.U = q;
		    p.L = q.R;
		    if (p.L) p.L.U = p;
		    q.R = p;
		  }
		  function d3_geom_voronoiRedBlackFirst(node) {
		    while (node.L) node = node.L;
		    return node;
		  }
		  function d3_geom_voronoi(sites, bbox) {
		    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
		    d3_geom_voronoiEdges = [];
		    d3_geom_voronoiCells = new Array(sites.length);
		    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
		    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
		    while (true) {
		      circle = d3_geom_voronoiFirstCircle;
		      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
		        if (site.x !== x0 || site.y !== y0) {
		          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
		          d3_geom_voronoiAddBeach(site);
		          x0 = site.x, y0 = site.y;
		        }
		        site = sites.pop();
		      } else if (circle) {
		        d3_geom_voronoiRemoveBeach(circle.arc);
		      } else {
		        break;
		      }
		    }
		    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
		    var diagram = {
		      cells: d3_geom_voronoiCells,
		      edges: d3_geom_voronoiEdges
		    };
		    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
		    return diagram;
		  }
		  function d3_geom_voronoiVertexOrder(a, b) {
		    return b.y - a.y || b.x - a.x;
		  }
		  d3.geom.voronoi = function(points) {
		    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
		    if (points) return voronoi(points);
		    function voronoi(data) {
		      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
		      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
		        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
		          var s = e.start();
		          return [ s.x, s.y ];
		        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
		        polygon.point = data[i];
		      });
		      return polygons;
		    }
		    function sites(data) {
		      return data.map(function(d, i) {
		        return {
		          x: Math.round(fx(d, i) / ε) * ε,
		          y: Math.round(fy(d, i) / ε) * ε,
		          i: i
		        };
		      });
		    }
		    voronoi.links = function(data) {
		      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
		        return edge.l && edge.r;
		      }).map(function(edge) {
		        return {
		          source: data[edge.l.i],
		          target: data[edge.r.i]
		        };
		      });
		    };
		    voronoi.triangles = function(data) {
		      var triangles = [];
		      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
		        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
		        while (++j < m) {
		          e0 = e1;
		          s0 = s1;
		          e1 = edges[j].edge;
		          s1 = e1.l === site ? e1.r : e1.l;
		          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
		            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
		          }
		        }
		      });
		      return triangles;
		    };
		    voronoi.x = function(_) {
		      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
		    };
		    voronoi.y = function(_) {
		      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
		    };
		    voronoi.clipExtent = function(_) {
		      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
		      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
		      return voronoi;
		    };
		    voronoi.size = function(_) {
		      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
		      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
		    };
		    return voronoi;
		  };
		  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
		  function d3_geom_voronoiTriangleArea(a, b, c) {
		    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
		  }
		  d3.geom.delaunay = function(vertices) {
		    return d3.geom.voronoi().triangles(vertices);
		  };
		  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
		    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
		    if (compat = arguments.length) {
		      x = d3_geom_quadtreeCompatX;
		      y = d3_geom_quadtreeCompatY;
		      if (compat === 3) {
		        y2 = y1;
		        x2 = x1;
		        y1 = x1 = 0;
		      }
		      return quadtree(points);
		    }
		    function quadtree(data) {
		      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
		      if (x1 != null) {
		        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
		      } else {
		        x2_ = y2_ = -(x1_ = y1_ = Infinity);
		        xs = [], ys = [];
		        n = data.length;
		        if (compat) for (i = 0; i < n; ++i) {
		          d = data[i];
		          if (d.x < x1_) x1_ = d.x;
		          if (d.y < y1_) y1_ = d.y;
		          if (d.x > x2_) x2_ = d.x;
		          if (d.y > y2_) y2_ = d.y;
		          xs.push(d.x);
		          ys.push(d.y);
		        } else for (i = 0; i < n; ++i) {
		          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
		          if (x_ < x1_) x1_ = x_;
		          if (y_ < y1_) y1_ = y_;
		          if (x_ > x2_) x2_ = x_;
		          if (y_ > y2_) y2_ = y_;
		          xs.push(x_);
		          ys.push(y_);
		        }
		      }
		      var dx = x2_ - x1_, dy = y2_ - y1_;
		      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
		      function insert(n, d, x, y, x1, y1, x2, y2) {
		        if (isNaN(x) || isNaN(y)) return;
		        if (n.leaf) {
		          var nx = n.x, ny = n.y;
		          if (nx != null) {
		            if (abs(nx - x) + abs(ny - y) < .01) {
		              insertChild(n, d, x, y, x1, y1, x2, y2);
		            } else {
		              var nPoint = n.point;
		              n.x = n.y = n.point = null;
		              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
		              insertChild(n, d, x, y, x1, y1, x2, y2);
		            }
		          } else {
		            n.x = x, n.y = y, n.point = d;
		          }
		        } else {
		          insertChild(n, d, x, y, x1, y1, x2, y2);
		        }
		      }
		      function insertChild(n, d, x, y, x1, y1, x2, y2) {
		        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
		        n.leaf = false;
		        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
		        if (right) x1 = xm; else x2 = xm;
		        if (below) y1 = ym; else y2 = ym;
		        insert(n, d, x, y, x1, y1, x2, y2);
		      }
		      var root = d3_geom_quadtreeNode();
		      root.add = function(d) {
		        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
		      };
		      root.visit = function(f) {
		        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
		      };
		      root.find = function(point) {
		        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
		      };
		      i = -1;
		      if (x1 == null) {
		        while (++i < n) {
		          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
		        }
		        --i;
		      } else data.forEach(root.add);
		      xs = ys = data = d = null;
		      return root;
		    }
		    quadtree.x = function(_) {
		      return arguments.length ? (x = _, quadtree) : x;
		    };
		    quadtree.y = function(_) {
		      return arguments.length ? (y = _, quadtree) : y;
		    };
		    quadtree.extent = function(_) {
		      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
		      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
		      y2 = +_[1][1];
		      return quadtree;
		    };
		    quadtree.size = function(_) {
		      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
		      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
		      return quadtree;
		    };
		    return quadtree;
		  };
		  function d3_geom_quadtreeCompatX(d) {
		    return d.x;
		  }
		  function d3_geom_quadtreeCompatY(d) {
		    return d.y;
		  }
		  function d3_geom_quadtreeNode() {
		    return {
		      leaf: true,
		      nodes: [],
		      point: null,
		      x: null,
		      y: null
		    };
		  }
		  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
		    if (!f(node, x1, y1, x2, y2)) {
		      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
		      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
		      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
		      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
		      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
		    }
		  }
		  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
		    var minDistance2 = Infinity, closestPoint;
		    (function find(node, x1, y1, x2, y2) {
		      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
		      if (point = node.point) {
		        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
		        if (distance2 < minDistance2) {
		          var distance = Math.sqrt(minDistance2 = distance2);
		          x0 = x - distance, y0 = y - distance;
		          x3 = x + distance, y3 = y + distance;
		          closestPoint = point;
		        }
		      }
		      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
		      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
		        if (node = children[i & 3]) switch (i & 3) {
		         case 0:
		          find(node, x1, y1, xm, ym);
		          break;

		         case 1:
		          find(node, xm, y1, x2, ym);
		          break;

		         case 2:
		          find(node, x1, ym, xm, y2);
		          break;

		         case 3:
		          find(node, xm, ym, x2, y2);
		          break;
		        }
		      }
		    })(root, x0, y0, x3, y3);
		    return closestPoint;
		  }
		  d3.interpolateRgb = d3_interpolateRgb;
		  function d3_interpolateRgb(a, b) {
		    a = d3.rgb(a);
		    b = d3.rgb(b);
		    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
		    return function(t) {
		      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
		    };
		  }
		  d3.interpolateObject = d3_interpolateObject;
		  function d3_interpolateObject(a, b) {
		    var i = {}, c = {}, k;
		    for (k in a) {
		      if (k in b) {
		        i[k] = d3_interpolate(a[k], b[k]);
		      } else {
		        c[k] = a[k];
		      }
		    }
		    for (k in b) {
		      if (!(k in a)) {
		        c[k] = b[k];
		      }
		    }
		    return function(t) {
		      for (k in i) c[k] = i[k](t);
		      return c;
		    };
		  }
		  d3.interpolateNumber = d3_interpolateNumber;
		  function d3_interpolateNumber(a, b) {
		    a = +a, b = +b;
		    return function(t) {
		      return a * (1 - t) + b * t;
		    };
		  }
		  d3.interpolateString = d3_interpolateString;
		  function d3_interpolateString(a, b) {
		    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
		    a = a + "", b = b + "";
		    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
		      if ((bs = bm.index) > bi) {
		        bs = b.slice(bi, bs);
		        if (s[i]) s[i] += bs; else s[++i] = bs;
		      }
		      if ((am = am[0]) === (bm = bm[0])) {
		        if (s[i]) s[i] += bm; else s[++i] = bm;
		      } else {
		        s[++i] = null;
		        q.push({
		          i: i,
		          x: d3_interpolateNumber(am, bm)
		        });
		      }
		      bi = d3_interpolate_numberB.lastIndex;
		    }
		    if (bi < b.length) {
		      bs = b.slice(bi);
		      if (s[i]) s[i] += bs; else s[++i] = bs;
		    }
		    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
		      return b(t) + "";
		    }) : function() {
		      return b;
		    } : (b = q.length, function(t) {
		      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
		      return s.join("");
		    });
		  }
		  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
		  d3.interpolate = d3_interpolate;
		  function d3_interpolate(a, b) {
		    var i = d3.interpolators.length, f;
		    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
		    return f;
		  }
		  d3.interpolators = [ function(a, b) {
		    var t = typeof b;
		    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
		  } ];
		  d3.interpolateArray = d3_interpolateArray;
		  function d3_interpolateArray(a, b) {
		    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
		    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
		    for (;i < na; ++i) c[i] = a[i];
		    for (;i < nb; ++i) c[i] = b[i];
		    return function(t) {
		      for (i = 0; i < n0; ++i) c[i] = x[i](t);
		      return c;
		    };
		  }
		  var d3_ease_default = function() {
		    return d3_identity;
		  };
		  var d3_ease = d3.map({
		    linear: d3_ease_default,
		    poly: d3_ease_poly,
		    quad: function() {
		      return d3_ease_quad;
		    },
		    cubic: function() {
		      return d3_ease_cubic;
		    },
		    sin: function() {
		      return d3_ease_sin;
		    },
		    exp: function() {
		      return d3_ease_exp;
		    },
		    circle: function() {
		      return d3_ease_circle;
		    },
		    elastic: d3_ease_elastic,
		    back: d3_ease_back,
		    bounce: function() {
		      return d3_ease_bounce;
		    }
		  });
		  var d3_ease_mode = d3.map({
		    "in": d3_identity,
		    out: d3_ease_reverse,
		    "in-out": d3_ease_reflect,
		    "out-in": function(f) {
		      return d3_ease_reflect(d3_ease_reverse(f));
		    }
		  });
		  d3.ease = function(name) {
		    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
		    t = d3_ease.get(t) || d3_ease_default;
		    m = d3_ease_mode.get(m) || d3_identity;
		    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
		  };
		  function d3_ease_clamp(f) {
		    return function(t) {
		      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
		    };
		  }
		  function d3_ease_reverse(f) {
		    return function(t) {
		      return 1 - f(1 - t);
		    };
		  }
		  function d3_ease_reflect(f) {
		    return function(t) {
		      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
		    };
		  }
		  function d3_ease_quad(t) {
		    return t * t;
		  }
		  function d3_ease_cubic(t) {
		    return t * t * t;
		  }
		  function d3_ease_cubicInOut(t) {
		    if (t <= 0) return 0;
		    if (t >= 1) return 1;
		    var t2 = t * t, t3 = t2 * t;
		    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
		  }
		  function d3_ease_poly(e) {
		    return function(t) {
		      return Math.pow(t, e);
		    };
		  }
		  function d3_ease_sin(t) {
		    return 1 - Math.cos(t * halfπ);
		  }
		  function d3_ease_exp(t) {
		    return Math.pow(2, 10 * (t - 1));
		  }
		  function d3_ease_circle(t) {
		    return 1 - Math.sqrt(1 - t * t);
		  }
		  function d3_ease_elastic(a, p) {
		    var s;
		    if (arguments.length < 2) p = .45;
		    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
		    return function(t) {
		      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
		    };
		  }
		  function d3_ease_back(s) {
		    if (!s) s = 1.70158;
		    return function(t) {
		      return t * t * ((s + 1) * t - s);
		    };
		  }
		  function d3_ease_bounce(t) {
		    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
		  }
		  d3.interpolateHcl = d3_interpolateHcl;
		  function d3_interpolateHcl(a, b) {
		    a = d3.hcl(a);
		    b = d3.hcl(b);
		    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
		    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
		    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
		    return function(t) {
		      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
		    };
		  }
		  d3.interpolateHsl = d3_interpolateHsl;
		  function d3_interpolateHsl(a, b) {
		    a = d3.hsl(a);
		    b = d3.hsl(b);
		    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
		    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
		    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
		    return function(t) {
		      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
		    };
		  }
		  d3.interpolateLab = d3_interpolateLab;
		  function d3_interpolateLab(a, b) {
		    a = d3.lab(a);
		    b = d3.lab(b);
		    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
		    return function(t) {
		      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
		    };
		  }
		  d3.interpolateRound = d3_interpolateRound;
		  function d3_interpolateRound(a, b) {
		    b -= a;
		    return function(t) {
		      return Math.round(a + b * t);
		    };
		  }
		  d3.transform = function(string) {
		    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
		    return (d3.transform = function(string) {
		      if (string != null) {
		        g.setAttribute("transform", string);
		        var t = g.transform.baseVal.consolidate();
		      }
		      return new d3_transform(t ? t.matrix : d3_transformIdentity);
		    })(string);
		  };
		  function d3_transform(m) {
		    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
		    if (r0[0] * r1[1] < r1[0] * r0[1]) {
		      r0[0] *= -1;
		      r0[1] *= -1;
		      kx *= -1;
		      kz *= -1;
		    }
		    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
		    this.translate = [ m.e, m.f ];
		    this.scale = [ kx, ky ];
		    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
		  }
		  d3_transform.prototype.toString = function() {
		    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
		  };
		  function d3_transformDot(a, b) {
		    return a[0] * b[0] + a[1] * b[1];
		  }
		  function d3_transformNormalize(a) {
		    var k = Math.sqrt(d3_transformDot(a, a));
		    if (k) {
		      a[0] /= k;
		      a[1] /= k;
		    }
		    return k;
		  }
		  function d3_transformCombine(a, b, k) {
		    a[0] += k * b[0];
		    a[1] += k * b[1];
		    return a;
		  }
		  var d3_transformIdentity = {
		    a: 1,
		    b: 0,
		    c: 0,
		    d: 1,
		    e: 0,
		    f: 0
		  };
		  d3.interpolateTransform = d3_interpolateTransform;
		  function d3_interpolateTransformPop(s) {
		    return s.length ? s.pop() + "," : "";
		  }
		  function d3_interpolateTranslate(ta, tb, s, q) {
		    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
		      var i = s.push("translate(", null, ",", null, ")");
		      q.push({
		        i: i - 4,
		        x: d3_interpolateNumber(ta[0], tb[0])
		      }, {
		        i: i - 2,
		        x: d3_interpolateNumber(ta[1], tb[1])
		      });
		    } else if (tb[0] || tb[1]) {
		      s.push("translate(" + tb + ")");
		    }
		  }
		  function d3_interpolateRotate(ra, rb, s, q) {
		    if (ra !== rb) {
		      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
		      q.push({
		        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
		        x: d3_interpolateNumber(ra, rb)
		      });
		    } else if (rb) {
		      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
		    }
		  }
		  function d3_interpolateSkew(wa, wb, s, q) {
		    if (wa !== wb) {
		      q.push({
		        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
		        x: d3_interpolateNumber(wa, wb)
		      });
		    } else if (wb) {
		      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
		    }
		  }
		  function d3_interpolateScale(ka, kb, s, q) {
		    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
		      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
		      q.push({
		        i: i - 4,
		        x: d3_interpolateNumber(ka[0], kb[0])
		      }, {
		        i: i - 2,
		        x: d3_interpolateNumber(ka[1], kb[1])
		      });
		    } else if (kb[0] !== 1 || kb[1] !== 1) {
		      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
		    }
		  }
		  function d3_interpolateTransform(a, b) {
		    var s = [], q = [];
		    a = d3.transform(a), b = d3.transform(b);
		    d3_interpolateTranslate(a.translate, b.translate, s, q);
		    d3_interpolateRotate(a.rotate, b.rotate, s, q);
		    d3_interpolateSkew(a.skew, b.skew, s, q);
		    d3_interpolateScale(a.scale, b.scale, s, q);
		    a = b = null;
		    return function(t) {
		      var i = -1, n = q.length, o;
		      while (++i < n) s[(o = q[i]).i] = o.x(t);
		      return s.join("");
		    };
		  }
		  function d3_uninterpolateNumber(a, b) {
		    b = (b -= a = +a) || 1 / b;
		    return function(x) {
		      return (x - a) / b;
		    };
		  }
		  function d3_uninterpolateClamp(a, b) {
		    b = (b -= a = +a) || 1 / b;
		    return function(x) {
		      return Math.max(0, Math.min(1, (x - a) / b));
		    };
		  }
		  d3.layout = {};
		  d3.layout.bundle = function() {
		    return function(links) {
		      var paths = [], i = -1, n = links.length;
		      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
		      return paths;
		    };
		  };
		  function d3_layout_bundlePath(link) {
		    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
		    while (start !== lca) {
		      start = start.parent;
		      points.push(start);
		    }
		    var k = points.length;
		    while (end !== lca) {
		      points.splice(k, 0, end);
		      end = end.parent;
		    }
		    return points;
		  }
		  function d3_layout_bundleAncestors(node) {
		    var ancestors = [], parent = node.parent;
		    while (parent != null) {
		      ancestors.push(node);
		      node = parent;
		      parent = parent.parent;
		    }
		    ancestors.push(node);
		    return ancestors;
		  }
		  function d3_layout_bundleLeastCommonAncestor(a, b) {
		    if (a === b) return a;
		    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
		    while (aNode === bNode) {
		      sharedNode = aNode;
		      aNode = aNodes.pop();
		      bNode = bNodes.pop();
		    }
		    return sharedNode;
		  }
		  d3.layout.chord = function() {
		    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
		    function relayout() {
		      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
		      chords = [];
		      groups = [];
		      k = 0, i = -1;
		      while (++i < n) {
		        x = 0, j = -1;
		        while (++j < n) {
		          x += matrix[i][j];
		        }
		        groupSums.push(x);
		        subgroupIndex.push(d3.range(n));
		        k += x;
		      }
		      if (sortGroups) {
		        groupIndex.sort(function(a, b) {
		          return sortGroups(groupSums[a], groupSums[b]);
		        });
		      }
		      if (sortSubgroups) {
		        subgroupIndex.forEach(function(d, i) {
		          d.sort(function(a, b) {
		            return sortSubgroups(matrix[i][a], matrix[i][b]);
		          });
		        });
		      }
		      k = (τ - padding * n) / k;
		      x = 0, i = -1;
		      while (++i < n) {
		        x0 = x, j = -1;
		        while (++j < n) {
		          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
		          subgroups[di + "-" + dj] = {
		            index: di,
		            subindex: dj,
		            startAngle: a0,
		            endAngle: a1,
		            value: v
		          };
		        }
		        groups[di] = {
		          index: di,
		          startAngle: x0,
		          endAngle: x,
		          value: groupSums[di]
		        };
		        x += padding;
		      }
		      i = -1;
		      while (++i < n) {
		        j = i - 1;
		        while (++j < n) {
		          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
		          if (source.value || target.value) {
		            chords.push(source.value < target.value ? {
		              source: target,
		              target: source
		            } : {
		              source: source,
		              target: target
		            });
		          }
		        }
		      }
		      if (sortChords) resort();
		    }
		    function resort() {
		      chords.sort(function(a, b) {
		        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
		      });
		    }
		    chord.matrix = function(x) {
		      if (!arguments.length) return matrix;
		      n = (matrix = x) && matrix.length;
		      chords = groups = null;
		      return chord;
		    };
		    chord.padding = function(x) {
		      if (!arguments.length) return padding;
		      padding = x;
		      chords = groups = null;
		      return chord;
		    };
		    chord.sortGroups = function(x) {
		      if (!arguments.length) return sortGroups;
		      sortGroups = x;
		      chords = groups = null;
		      return chord;
		    };
		    chord.sortSubgroups = function(x) {
		      if (!arguments.length) return sortSubgroups;
		      sortSubgroups = x;
		      chords = null;
		      return chord;
		    };
		    chord.sortChords = function(x) {
		      if (!arguments.length) return sortChords;
		      sortChords = x;
		      if (chords) resort();
		      return chord;
		    };
		    chord.chords = function() {
		      if (!chords) relayout();
		      return chords;
		    };
		    chord.groups = function() {
		      if (!groups) relayout();
		      return groups;
		    };
		    return chord;
		  };
		  d3.layout.force = function() {
		    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
		    function repulse(node) {
		      return function(quad, x1, _, x2) {
		        if (quad.point !== node) {
		          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
		          if (dw * dw / theta2 < dn) {
		            if (dn < chargeDistance2) {
		              var k = quad.charge / dn;
		              node.px -= dx * k;
		              node.py -= dy * k;
		            }
		            return true;
		          }
		          if (quad.point && dn && dn < chargeDistance2) {
		            var k = quad.pointCharge / dn;
		            node.px -= dx * k;
		            node.py -= dy * k;
		          }
		        }
		        return !quad.charge;
		      };
		    }
		    force.tick = function() {
		      if ((alpha *= .99) < .005) {
		        timer = null;
		        event.end({
		          type: "end",
		          alpha: alpha = 0
		        });
		        return true;
		      }
		      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
		      for (i = 0; i < m; ++i) {
		        o = links[i];
		        s = o.source;
		        t = o.target;
		        x = t.x - s.x;
		        y = t.y - s.y;
		        if (l = x * x + y * y) {
		          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
		          x *= l;
		          y *= l;
		          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
		          t.y -= y * k;
		          s.x += x * (k = 1 - k);
		          s.y += y * k;
		        }
		      }
		      if (k = alpha * gravity) {
		        x = size[0] / 2;
		        y = size[1] / 2;
		        i = -1;
		        if (k) while (++i < n) {
		          o = nodes[i];
		          o.x += (x - o.x) * k;
		          o.y += (y - o.y) * k;
		        }
		      }
		      if (charge) {
		        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
		        i = -1;
		        while (++i < n) {
		          if (!(o = nodes[i]).fixed) {
		            q.visit(repulse(o));
		          }
		        }
		      }
		      i = -1;
		      while (++i < n) {
		        o = nodes[i];
		        if (o.fixed) {
		          o.x = o.px;
		          o.y = o.py;
		        } else {
		          o.x -= (o.px - (o.px = o.x)) * friction;
		          o.y -= (o.py - (o.py = o.y)) * friction;
		        }
		      }
		      event.tick({
		        type: "tick",
		        alpha: alpha
		      });
		    };
		    force.nodes = function(x) {
		      if (!arguments.length) return nodes;
		      nodes = x;
		      return force;
		    };
		    force.links = function(x) {
		      if (!arguments.length) return links;
		      links = x;
		      return force;
		    };
		    force.size = function(x) {
		      if (!arguments.length) return size;
		      size = x;
		      return force;
		    };
		    force.linkDistance = function(x) {
		      if (!arguments.length) return linkDistance;
		      linkDistance = typeof x === "function" ? x : +x;
		      return force;
		    };
		    force.distance = force.linkDistance;
		    force.linkStrength = function(x) {
		      if (!arguments.length) return linkStrength;
		      linkStrength = typeof x === "function" ? x : +x;
		      return force;
		    };
		    force.friction = function(x) {
		      if (!arguments.length) return friction;
		      friction = +x;
		      return force;
		    };
		    force.charge = function(x) {
		      if (!arguments.length) return charge;
		      charge = typeof x === "function" ? x : +x;
		      return force;
		    };
		    force.chargeDistance = function(x) {
		      if (!arguments.length) return Math.sqrt(chargeDistance2);
		      chargeDistance2 = x * x;
		      return force;
		    };
		    force.gravity = function(x) {
		      if (!arguments.length) return gravity;
		      gravity = +x;
		      return force;
		    };
		    force.theta = function(x) {
		      if (!arguments.length) return Math.sqrt(theta2);
		      theta2 = x * x;
		      return force;
		    };
		    force.alpha = function(x) {
		      if (!arguments.length) return alpha;
		      x = +x;
		      if (alpha) {
		        if (x > 0) {
		          alpha = x;
		        } else {
		          timer.c = null, timer.t = NaN, timer = null;
		          event.end({
		            type: "end",
		            alpha: alpha = 0
		          });
		        }
		      } else if (x > 0) {
		        event.start({
		          type: "start",
		          alpha: alpha = x
		        });
		        timer = d3_timer(force.tick);
		      }
		      return force;
		    };
		    force.start = function() {
		      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
		      for (i = 0; i < n; ++i) {
		        (o = nodes[i]).index = i;
		        o.weight = 0;
		      }
		      for (i = 0; i < m; ++i) {
		        o = links[i];
		        if (typeof o.source == "number") o.source = nodes[o.source];
		        if (typeof o.target == "number") o.target = nodes[o.target];
		        ++o.source.weight;
		        ++o.target.weight;
		      }
		      for (i = 0; i < n; ++i) {
		        o = nodes[i];
		        if (isNaN(o.x)) o.x = position("x", w);
		        if (isNaN(o.y)) o.y = position("y", h);
		        if (isNaN(o.px)) o.px = o.x;
		        if (isNaN(o.py)) o.py = o.y;
		      }
		      distances = [];
		      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
		      strengths = [];
		      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
		      charges = [];
		      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
		      function position(dimension, size) {
		        if (!neighbors) {
		          neighbors = new Array(n);
		          for (j = 0; j < n; ++j) {
		            neighbors[j] = [];
		          }
		          for (j = 0; j < m; ++j) {
		            var o = links[j];
		            neighbors[o.source.index].push(o.target);
		            neighbors[o.target.index].push(o.source);
		          }
		        }
		        var candidates = neighbors[i], j = -1, l = candidates.length, x;
		        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
		        return Math.random() * size;
		      }
		      return force.resume();
		    };
		    force.resume = function() {
		      return force.alpha(.1);
		    };
		    force.stop = function() {
		      return force.alpha(0);
		    };
		    force.drag = function() {
		      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
		      if (!arguments.length) return drag;
		      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
		    };
		    function dragmove(d) {
		      d.px = d3.event.x, d.py = d3.event.y;
		      force.resume();
		    }
		    return d3.rebind(force, event, "on");
		  };
		  function d3_layout_forceDragstart(d) {
		    d.fixed |= 2;
		  }
		  function d3_layout_forceDragend(d) {
		    d.fixed &= ~6;
		  }
		  function d3_layout_forceMouseover(d) {
		    d.fixed |= 4;
		    d.px = d.x, d.py = d.y;
		  }
		  function d3_layout_forceMouseout(d) {
		    d.fixed &= ~4;
		  }
		  function d3_layout_forceAccumulate(quad, alpha, charges) {
		    var cx = 0, cy = 0;
		    quad.charge = 0;
		    if (!quad.leaf) {
		      var nodes = quad.nodes, n = nodes.length, i = -1, c;
		      while (++i < n) {
		        c = nodes[i];
		        if (c == null) continue;
		        d3_layout_forceAccumulate(c, alpha, charges);
		        quad.charge += c.charge;
		        cx += c.charge * c.cx;
		        cy += c.charge * c.cy;
		      }
		    }
		    if (quad.point) {
		      if (!quad.leaf) {
		        quad.point.x += Math.random() - .5;
		        quad.point.y += Math.random() - .5;
		      }
		      var k = alpha * charges[quad.point.index];
		      quad.charge += quad.pointCharge = k;
		      cx += k * quad.point.x;
		      cy += k * quad.point.y;
		    }
		    quad.cx = cx / quad.charge;
		    quad.cy = cy / quad.charge;
		  }
		  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
		  d3.layout.hierarchy = function() {
		    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
		    function hierarchy(root) {
		      var stack = [ root ], nodes = [], node;
		      root.depth = 0;
		      while ((node = stack.pop()) != null) {
		        nodes.push(node);
		        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
		          var n, childs, child;
		          while (--n >= 0) {
		            stack.push(child = childs[n]);
		            child.parent = node;
		            child.depth = node.depth + 1;
		          }
		          if (value) node.value = 0;
		          node.children = childs;
		        } else {
		          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
		          delete node.children;
		        }
		      }
		      d3_layout_hierarchyVisitAfter(root, function(node) {
		        var childs, parent;
		        if (sort && (childs = node.children)) childs.sort(sort);
		        if (value && (parent = node.parent)) parent.value += node.value;
		      });
		      return nodes;
		    }
		    hierarchy.sort = function(x) {
		      if (!arguments.length) return sort;
		      sort = x;
		      return hierarchy;
		    };
		    hierarchy.children = function(x) {
		      if (!arguments.length) return children;
		      children = x;
		      return hierarchy;
		    };
		    hierarchy.value = function(x) {
		      if (!arguments.length) return value;
		      value = x;
		      return hierarchy;
		    };
		    hierarchy.revalue = function(root) {
		      if (value) {
		        d3_layout_hierarchyVisitBefore(root, function(node) {
		          if (node.children) node.value = 0;
		        });
		        d3_layout_hierarchyVisitAfter(root, function(node) {
		          var parent;
		          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
		          if (parent = node.parent) parent.value += node.value;
		        });
		      }
		      return root;
		    };
		    return hierarchy;
		  };
		  function d3_layout_hierarchyRebind(object, hierarchy) {
		    d3.rebind(object, hierarchy, "sort", "children", "value");
		    object.nodes = object;
		    object.links = d3_layout_hierarchyLinks;
		    return object;
		  }
		  function d3_layout_hierarchyVisitBefore(node, callback) {
		    var nodes = [ node ];
		    while ((node = nodes.pop()) != null) {
		      callback(node);
		      if ((children = node.children) && (n = children.length)) {
		        var n, children;
		        while (--n >= 0) nodes.push(children[n]);
		      }
		    }
		  }
		  function d3_layout_hierarchyVisitAfter(node, callback) {
		    var nodes = [ node ], nodes2 = [];
		    while ((node = nodes.pop()) != null) {
		      nodes2.push(node);
		      if ((children = node.children) && (n = children.length)) {
		        var i = -1, n, children;
		        while (++i < n) nodes.push(children[i]);
		      }
		    }
		    while ((node = nodes2.pop()) != null) {
		      callback(node);
		    }
		  }
		  function d3_layout_hierarchyChildren(d) {
		    return d.children;
		  }
		  function d3_layout_hierarchyValue(d) {
		    return d.value;
		  }
		  function d3_layout_hierarchySort(a, b) {
		    return b.value - a.value;
		  }
		  function d3_layout_hierarchyLinks(nodes) {
		    return d3.merge(nodes.map(function(parent) {
		      return (parent.children || []).map(function(child) {
		        return {
		          source: parent,
		          target: child
		        };
		      });
		    }));
		  }
		  d3.layout.partition = function() {
		    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
		    function position(node, x, dx, dy) {
		      var children = node.children;
		      node.x = x;
		      node.y = node.depth * dy;
		      node.dx = dx;
		      node.dy = dy;
		      if (children && (n = children.length)) {
		        var i = -1, n, c, d;
		        dx = node.value ? dx / node.value : 0;
		        while (++i < n) {
		          position(c = children[i], x, d = c.value * dx, dy);
		          x += d;
		        }
		      }
		    }
		    function depth(node) {
		      var children = node.children, d = 0;
		      if (children && (n = children.length)) {
		        var i = -1, n;
		        while (++i < n) d = Math.max(d, depth(children[i]));
		      }
		      return 1 + d;
		    }
		    function partition(d, i) {
		      var nodes = hierarchy.call(this, d, i);
		      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
		      return nodes;
		    }
		    partition.size = function(x) {
		      if (!arguments.length) return size;
		      size = x;
		      return partition;
		    };
		    return d3_layout_hierarchyRebind(partition, hierarchy);
		  };
		  d3.layout.pie = function() {
		    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
		    function pie(data) {
		      var n = data.length, values = data.map(function(d, i) {
		        return +value.call(pie, d, i);
		      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
		      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
		        return values[j] - values[i];
		      } : function(i, j) {
		        return sort(data[i], data[j]);
		      });
		      index.forEach(function(i) {
		        arcs[i] = {
		          data: data[i],
		          value: v = values[i],
		          startAngle: a,
		          endAngle: a += v * k + pa,
		          padAngle: p
		        };
		      });
		      return arcs;
		    }
		    pie.value = function(_) {
		      if (!arguments.length) return value;
		      value = _;
		      return pie;
		    };
		    pie.sort = function(_) {
		      if (!arguments.length) return sort;
		      sort = _;
		      return pie;
		    };
		    pie.startAngle = function(_) {
		      if (!arguments.length) return startAngle;
		      startAngle = _;
		      return pie;
		    };
		    pie.endAngle = function(_) {
		      if (!arguments.length) return endAngle;
		      endAngle = _;
		      return pie;
		    };
		    pie.padAngle = function(_) {
		      if (!arguments.length) return padAngle;
		      padAngle = _;
		      return pie;
		    };
		    return pie;
		  };
		  var d3_layout_pieSortByValue = {};
		  d3.layout.stack = function() {
		    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
		    function stack(data, index) {
		      if (!(n = data.length)) return data;
		      var series = data.map(function(d, i) {
		        return values.call(stack, d, i);
		      });
		      var points = series.map(function(d) {
		        return d.map(function(v, i) {
		          return [ x.call(stack, v, i), y.call(stack, v, i) ];
		        });
		      });
		      var orders = order.call(stack, points, index);
		      series = d3.permute(series, orders);
		      points = d3.permute(points, orders);
		      var offsets = offset.call(stack, points, index);
		      var m = series[0].length, n, i, j, o;
		      for (j = 0; j < m; ++j) {
		        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
		        for (i = 1; i < n; ++i) {
		          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
		        }
		      }
		      return data;
		    }
		    stack.values = function(x) {
		      if (!arguments.length) return values;
		      values = x;
		      return stack;
		    };
		    stack.order = function(x) {
		      if (!arguments.length) return order;
		      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
		      return stack;
		    };
		    stack.offset = function(x) {
		      if (!arguments.length) return offset;
		      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
		      return stack;
		    };
		    stack.x = function(z) {
		      if (!arguments.length) return x;
		      x = z;
		      return stack;
		    };
		    stack.y = function(z) {
		      if (!arguments.length) return y;
		      y = z;
		      return stack;
		    };
		    stack.out = function(z) {
		      if (!arguments.length) return out;
		      out = z;
		      return stack;
		    };
		    return stack;
		  };
		  function d3_layout_stackX(d) {
		    return d.x;
		  }
		  function d3_layout_stackY(d) {
		    return d.y;
		  }
		  function d3_layout_stackOut(d, y0, y) {
		    d.y0 = y0;
		    d.y = y;
		  }
		  var d3_layout_stackOrders = d3.map({
		    "inside-out": function(data) {
		      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
		        return max[a] - max[b];
		      }), top = 0, bottom = 0, tops = [], bottoms = [];
		      for (i = 0; i < n; ++i) {
		        j = index[i];
		        if (top < bottom) {
		          top += sums[j];
		          tops.push(j);
		        } else {
		          bottom += sums[j];
		          bottoms.push(j);
		        }
		      }
		      return bottoms.reverse().concat(tops);
		    },
		    reverse: function(data) {
		      return d3.range(data.length).reverse();
		    },
		    "default": d3_layout_stackOrderDefault
		  });
		  var d3_layout_stackOffsets = d3.map({
		    silhouette: function(data) {
		      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
		      for (j = 0; j < m; ++j) {
		        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
		        if (o > max) max = o;
		        sums.push(o);
		      }
		      for (j = 0; j < m; ++j) {
		        y0[j] = (max - sums[j]) / 2;
		      }
		      return y0;
		    },
		    wiggle: function(data) {
		      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
		      y0[0] = o = o0 = 0;
		      for (j = 1; j < m; ++j) {
		        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
		        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
		          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
		            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
		          }
		          s2 += s3 * data[i][j][1];
		        }
		        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
		        if (o < o0) o0 = o;
		      }
		      for (j = 0; j < m; ++j) y0[j] -= o0;
		      return y0;
		    },
		    expand: function(data) {
		      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
		      for (j = 0; j < m; ++j) {
		        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
		        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
		      }
		      for (j = 0; j < m; ++j) y0[j] = 0;
		      return y0;
		    },
		    zero: d3_layout_stackOffsetZero
		  });
		  function d3_layout_stackOrderDefault(data) {
		    return d3.range(data.length);
		  }
		  function d3_layout_stackOffsetZero(data) {
		    var j = -1, m = data[0].length, y0 = [];
		    while (++j < m) y0[j] = 0;
		    return y0;
		  }
		  function d3_layout_stackMaxIndex(array) {
		    var i = 1, j = 0, v = array[0][1], k, n = array.length;
		    for (;i < n; ++i) {
		      if ((k = array[i][1]) > v) {
		        j = i;
		        v = k;
		      }
		    }
		    return j;
		  }
		  function d3_layout_stackReduceSum(d) {
		    return d.reduce(d3_layout_stackSum, 0);
		  }
		  function d3_layout_stackSum(p, d) {
		    return p + d[1];
		  }
		  d3.layout.histogram = function() {
		    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
		    function histogram(data, i) {
		      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
		      while (++i < m) {
		        bin = bins[i] = [];
		        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
		        bin.y = 0;
		      }
		      if (m > 0) {
		        i = -1;
		        while (++i < n) {
		          x = values[i];
		          if (x >= range[0] && x <= range[1]) {
		            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
		            bin.y += k;
		            bin.push(data[i]);
		          }
		        }
		      }
		      return bins;
		    }
		    histogram.value = function(x) {
		      if (!arguments.length) return valuer;
		      valuer = x;
		      return histogram;
		    };
		    histogram.range = function(x) {
		      if (!arguments.length) return ranger;
		      ranger = d3_functor(x);
		      return histogram;
		    };
		    histogram.bins = function(x) {
		      if (!arguments.length) return binner;
		      binner = typeof x === "number" ? function(range) {
		        return d3_layout_histogramBinFixed(range, x);
		      } : d3_functor(x);
		      return histogram;
		    };
		    histogram.frequency = function(x) {
		      if (!arguments.length) return frequency;
		      frequency = !!x;
		      return histogram;
		    };
		    return histogram;
		  };
		  function d3_layout_histogramBinSturges(range, values) {
		    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
		  }
		  function d3_layout_histogramBinFixed(range, n) {
		    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
		    while (++x <= n) f[x] = m * x + b;
		    return f;
		  }
		  function d3_layout_histogramRange(values) {
		    return [ d3.min(values), d3.max(values) ];
		  }
		  d3.layout.pack = function() {
		    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
		    function pack(d, i) {
		      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
		        return radius;
		      };
		      root.x = root.y = 0;
		      d3_layout_hierarchyVisitAfter(root, function(d) {
		        d.r = +r(d.value);
		      });
		      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
		      if (padding) {
		        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
		        d3_layout_hierarchyVisitAfter(root, function(d) {
		          d.r += dr;
		        });
		        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
		        d3_layout_hierarchyVisitAfter(root, function(d) {
		          d.r -= dr;
		        });
		      }
		      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
		      return nodes;
		    }
		    pack.size = function(_) {
		      if (!arguments.length) return size;
		      size = _;
		      return pack;
		    };
		    pack.radius = function(_) {
		      if (!arguments.length) return radius;
		      radius = _ == null || typeof _ === "function" ? _ : +_;
		      return pack;
		    };
		    pack.padding = function(_) {
		      if (!arguments.length) return padding;
		      padding = +_;
		      return pack;
		    };
		    return d3_layout_hierarchyRebind(pack, hierarchy);
		  };
		  function d3_layout_packSort(a, b) {
		    return a.value - b.value;
		  }
		  function d3_layout_packInsert(a, b) {
		    var c = a._pack_next;
		    a._pack_next = b;
		    b._pack_prev = a;
		    b._pack_next = c;
		    c._pack_prev = b;
		  }
		  function d3_layout_packSplice(a, b) {
		    a._pack_next = b;
		    b._pack_prev = a;
		  }
		  function d3_layout_packIntersects(a, b) {
		    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
		    return .999 * dr * dr > dx * dx + dy * dy;
		  }
		  function d3_layout_packSiblings(node) {
		    if (!(nodes = node.children) || !(n = nodes.length)) return;
		    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
		    function bound(node) {
		      xMin = Math.min(node.x - node.r, xMin);
		      xMax = Math.max(node.x + node.r, xMax);
		      yMin = Math.min(node.y - node.r, yMin);
		      yMax = Math.max(node.y + node.r, yMax);
		    }
		    nodes.forEach(d3_layout_packLink);
		    a = nodes[0];
		    a.x = -a.r;
		    a.y = 0;
		    bound(a);
		    if (n > 1) {
		      b = nodes[1];
		      b.x = b.r;
		      b.y = 0;
		      bound(b);
		      if (n > 2) {
		        c = nodes[2];
		        d3_layout_packPlace(a, b, c);
		        bound(c);
		        d3_layout_packInsert(a, c);
		        a._pack_prev = c;
		        d3_layout_packInsert(c, b);
		        b = a._pack_next;
		        for (i = 3; i < n; i++) {
		          d3_layout_packPlace(a, b, c = nodes[i]);
		          var isect = 0, s1 = 1, s2 = 1;
		          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
		            if (d3_layout_packIntersects(j, c)) {
		              isect = 1;
		              break;
		            }
		          }
		          if (isect == 1) {
		            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
		              if (d3_layout_packIntersects(k, c)) {
		                break;
		              }
		            }
		          }
		          if (isect) {
		            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
		            i--;
		          } else {
		            d3_layout_packInsert(a, c);
		            b = c;
		            bound(c);
		          }
		        }
		      }
		    }
		    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
		    for (i = 0; i < n; i++) {
		      c = nodes[i];
		      c.x -= cx;
		      c.y -= cy;
		      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
		    }
		    node.r = cr;
		    nodes.forEach(d3_layout_packUnlink);
		  }
		  function d3_layout_packLink(node) {
		    node._pack_next = node._pack_prev = node;
		  }
		  function d3_layout_packUnlink(node) {
		    delete node._pack_next;
		    delete node._pack_prev;
		  }
		  function d3_layout_packTransform(node, x, y, k) {
		    var children = node.children;
		    node.x = x += k * node.x;
		    node.y = y += k * node.y;
		    node.r *= k;
		    if (children) {
		      var i = -1, n = children.length;
		      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
		    }
		  }
		  function d3_layout_packPlace(a, b, c) {
		    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
		    if (db && (dx || dy)) {
		      var da = b.r + c.r, dc = dx * dx + dy * dy;
		      da *= da;
		      db *= db;
		      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
		      c.x = a.x + x * dx + y * dy;
		      c.y = a.y + x * dy - y * dx;
		    } else {
		      c.x = a.x + db;
		      c.y = a.y;
		    }
		  }
		  d3.layout.tree = function() {
		    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
		    function tree(d, i) {
		      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
		      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
		      d3_layout_hierarchyVisitBefore(root1, secondWalk);
		      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
		        var left = root0, right = root0, bottom = root0;
		        d3_layout_hierarchyVisitBefore(root0, function(node) {
		          if (node.x < left.x) left = node;
		          if (node.x > right.x) right = node;
		          if (node.depth > bottom.depth) bottom = node;
		        });
		        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
		        d3_layout_hierarchyVisitBefore(root0, function(node) {
		          node.x = (node.x + tx) * kx;
		          node.y = node.depth * ky;
		        });
		      }
		      return nodes;
		    }
		    function wrapTree(root0) {
		      var root1 = {
		        A: null,
		        children: [ root0 ]
		      }, queue = [ root1 ], node1;
		      while ((node1 = queue.pop()) != null) {
		        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
		          queue.push((children[i] = child = {
		            _: children[i],
		            parent: node1,
		            children: (child = children[i].children) && child.slice() || [],
		            A: null,
		            a: null,
		            z: 0,
		            m: 0,
		            c: 0,
		            s: 0,
		            t: null,
		            i: i
		          }).a = child);
		        }
		      }
		      return root1.children[0];
		    }
		    function firstWalk(v) {
		      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
		      if (children.length) {
		        d3_layout_treeShift(v);
		        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
		        if (w) {
		          v.z = w.z + separation(v._, w._);
		          v.m = v.z - midpoint;
		        } else {
		          v.z = midpoint;
		        }
		      } else if (w) {
		        v.z = w.z + separation(v._, w._);
		      }
		      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
		    }
		    function secondWalk(v) {
		      v._.x = v.z + v.parent.m;
		      v.m += v.parent.m;
		    }
		    function apportion(v, w, ancestor) {
		      if (w) {
		        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
		        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
		          vom = d3_layout_treeLeft(vom);
		          vop = d3_layout_treeRight(vop);
		          vop.a = v;
		          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
		          if (shift > 0) {
		            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
		            sip += shift;
		            sop += shift;
		          }
		          sim += vim.m;
		          sip += vip.m;
		          som += vom.m;
		          sop += vop.m;
		        }
		        if (vim && !d3_layout_treeRight(vop)) {
		          vop.t = vim;
		          vop.m += sim - sop;
		        }
		        if (vip && !d3_layout_treeLeft(vom)) {
		          vom.t = vip;
		          vom.m += sip - som;
		          ancestor = v;
		        }
		      }
		      return ancestor;
		    }
		    function sizeNode(node) {
		      node.x *= size[0];
		      node.y = node.depth * size[1];
		    }
		    tree.separation = function(x) {
		      if (!arguments.length) return separation;
		      separation = x;
		      return tree;
		    };
		    tree.size = function(x) {
		      if (!arguments.length) return nodeSize ? null : size;
		      nodeSize = (size = x) == null ? sizeNode : null;
		      return tree;
		    };
		    tree.nodeSize = function(x) {
		      if (!arguments.length) return nodeSize ? size : null;
		      nodeSize = (size = x) == null ? null : sizeNode;
		      return tree;
		    };
		    return d3_layout_hierarchyRebind(tree, hierarchy);
		  };
		  function d3_layout_treeSeparation(a, b) {
		    return a.parent == b.parent ? 1 : 2;
		  }
		  function d3_layout_treeLeft(v) {
		    var children = v.children;
		    return children.length ? children[0] : v.t;
		  }
		  function d3_layout_treeRight(v) {
		    var children = v.children, n;
		    return (n = children.length) ? children[n - 1] : v.t;
		  }
		  function d3_layout_treeMove(wm, wp, shift) {
		    var change = shift / (wp.i - wm.i);
		    wp.c -= change;
		    wp.s += shift;
		    wm.c += change;
		    wp.z += shift;
		    wp.m += shift;
		  }
		  function d3_layout_treeShift(v) {
		    var shift = 0, change = 0, children = v.children, i = children.length, w;
		    while (--i >= 0) {
		      w = children[i];
		      w.z += shift;
		      w.m += shift;
		      shift += w.s + (change += w.c);
		    }
		  }
		  function d3_layout_treeAncestor(vim, v, ancestor) {
		    return vim.a.parent === v.parent ? vim.a : ancestor;
		  }
		  d3.layout.cluster = function() {
		    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
		    function cluster(d, i) {
		      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
		      d3_layout_hierarchyVisitAfter(root, function(node) {
		        var children = node.children;
		        if (children && children.length) {
		          node.x = d3_layout_clusterX(children);
		          node.y = d3_layout_clusterY(children);
		        } else {
		          node.x = previousNode ? x += separation(node, previousNode) : 0;
		          node.y = 0;
		          previousNode = node;
		        }
		      });
		      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
		      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
		        node.x = (node.x - root.x) * size[0];
		        node.y = (root.y - node.y) * size[1];
		      } : function(node) {
		        node.x = (node.x - x0) / (x1 - x0) * size[0];
		        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
		      });
		      return nodes;
		    }
		    cluster.separation = function(x) {
		      if (!arguments.length) return separation;
		      separation = x;
		      return cluster;
		    };
		    cluster.size = function(x) {
		      if (!arguments.length) return nodeSize ? null : size;
		      nodeSize = (size = x) == null;
		      return cluster;
		    };
		    cluster.nodeSize = function(x) {
		      if (!arguments.length) return nodeSize ? size : null;
		      nodeSize = (size = x) != null;
		      return cluster;
		    };
		    return d3_layout_hierarchyRebind(cluster, hierarchy);
		  };
		  function d3_layout_clusterY(children) {
		    return 1 + d3.max(children, function(child) {
		      return child.y;
		    });
		  }
		  function d3_layout_clusterX(children) {
		    return children.reduce(function(x, child) {
		      return x + child.x;
		    }, 0) / children.length;
		  }
		  function d3_layout_clusterLeft(node) {
		    var children = node.children;
		    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
		  }
		  function d3_layout_clusterRight(node) {
		    var children = node.children, n;
		    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
		  }
		  d3.layout.treemap = function() {
		    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
		    function scale(children, k) {
		      var i = -1, n = children.length, child, area;
		      while (++i < n) {
		        area = (child = children[i]).value * (k < 0 ? 0 : k);
		        child.area = isNaN(area) || area <= 0 ? 0 : area;
		      }
		    }
		    function squarify(node) {
		      var children = node.children;
		      if (children && children.length) {
		        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
		        scale(remaining, rect.dx * rect.dy / node.value);
		        row.area = 0;
		        while ((n = remaining.length) > 0) {
		          row.push(child = remaining[n - 1]);
		          row.area += child.area;
		          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
		            remaining.pop();
		            best = score;
		          } else {
		            row.area -= row.pop().area;
		            position(row, u, rect, false);
		            u = Math.min(rect.dx, rect.dy);
		            row.length = row.area = 0;
		            best = Infinity;
		          }
		        }
		        if (row.length) {
		          position(row, u, rect, true);
		          row.length = row.area = 0;
		        }
		        children.forEach(squarify);
		      }
		    }
		    function stickify(node) {
		      var children = node.children;
		      if (children && children.length) {
		        var rect = pad(node), remaining = children.slice(), child, row = [];
		        scale(remaining, rect.dx * rect.dy / node.value);
		        row.area = 0;
		        while (child = remaining.pop()) {
		          row.push(child);
		          row.area += child.area;
		          if (child.z != null) {
		            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
		            row.length = row.area = 0;
		          }
		        }
		        children.forEach(stickify);
		      }
		    }
		    function worst(row, u) {
		      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
		      while (++i < n) {
		        if (!(r = row[i].area)) continue;
		        if (r < rmin) rmin = r;
		        if (r > rmax) rmax = r;
		      }
		      s *= s;
		      u *= u;
		      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
		    }
		    function position(row, u, rect, flush) {
		      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
		      if (u == rect.dx) {
		        if (flush || v > rect.dy) v = rect.dy;
		        while (++i < n) {
		          o = row[i];
		          o.x = x;
		          o.y = y;
		          o.dy = v;
		          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
		        }
		        o.z = true;
		        o.dx += rect.x + rect.dx - x;
		        rect.y += v;
		        rect.dy -= v;
		      } else {
		        if (flush || v > rect.dx) v = rect.dx;
		        while (++i < n) {
		          o = row[i];
		          o.x = x;
		          o.y = y;
		          o.dx = v;
		          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
		        }
		        o.z = false;
		        o.dy += rect.y + rect.dy - y;
		        rect.x += v;
		        rect.dx -= v;
		      }
		    }
		    function treemap(d) {
		      var nodes = stickies || hierarchy(d), root = nodes[0];
		      root.x = root.y = 0;
		      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
		      if (stickies) hierarchy.revalue(root);
		      scale([ root ], root.dx * root.dy / root.value);
		      (stickies ? stickify : squarify)(root);
		      if (sticky) stickies = nodes;
		      return nodes;
		    }
		    treemap.size = function(x) {
		      if (!arguments.length) return size;
		      size = x;
		      return treemap;
		    };
		    treemap.padding = function(x) {
		      if (!arguments.length) return padding;
		      function padFunction(node) {
		        var p = x.call(treemap, node, node.depth);
		        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
		      }
		      function padConstant(node) {
		        return d3_layout_treemapPad(node, x);
		      }
		      var type;
		      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
		      padConstant) : padConstant;
		      return treemap;
		    };
		    treemap.round = function(x) {
		      if (!arguments.length) return round != Number;
		      round = x ? Math.round : Number;
		      return treemap;
		    };
		    treemap.sticky = function(x) {
		      if (!arguments.length) return sticky;
		      sticky = x;
		      stickies = null;
		      return treemap;
		    };
		    treemap.ratio = function(x) {
		      if (!arguments.length) return ratio;
		      ratio = x;
		      return treemap;
		    };
		    treemap.mode = function(x) {
		      if (!arguments.length) return mode;
		      mode = x + "";
		      return treemap;
		    };
		    return d3_layout_hierarchyRebind(treemap, hierarchy);
		  };
		  function d3_layout_treemapPadNull(node) {
		    return {
		      x: node.x,
		      y: node.y,
		      dx: node.dx,
		      dy: node.dy
		    };
		  }
		  function d3_layout_treemapPad(node, padding) {
		    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
		    if (dx < 0) {
		      x += dx / 2;
		      dx = 0;
		    }
		    if (dy < 0) {
		      y += dy / 2;
		      dy = 0;
		    }
		    return {
		      x: x,
		      y: y,
		      dx: dx,
		      dy: dy
		    };
		  }
		  d3.random = {
		    normal: function(µ, σ) {
		      var n = arguments.length;
		      if (n < 2) σ = 1;
		      if (n < 1) µ = 0;
		      return function() {
		        var x, y, r;
		        do {
		          x = Math.random() * 2 - 1;
		          y = Math.random() * 2 - 1;
		          r = x * x + y * y;
		        } while (!r || r > 1);
		        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
		      };
		    },
		    logNormal: function() {
		      var random = d3.random.normal.apply(d3, arguments);
		      return function() {
		        return Math.exp(random());
		      };
		    },
		    bates: function(m) {
		      var random = d3.random.irwinHall(m);
		      return function() {
		        return random() / m;
		      };
		    },
		    irwinHall: function(m) {
		      return function() {
		        for (var s = 0, j = 0; j < m; j++) s += Math.random();
		        return s;
		      };
		    }
		  };
		  d3.scale = {};
		  function d3_scaleExtent(domain) {
		    var start = domain[0], stop = domain[domain.length - 1];
		    return start < stop ? [ start, stop ] : [ stop, start ];
		  }
		  function d3_scaleRange(scale) {
		    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
		  }
		  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
		    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
		    return function(x) {
		      return i(u(x));
		    };
		  }
		  function d3_scale_nice(domain, nice) {
		    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
		    if (x1 < x0) {
		      dx = i0, i0 = i1, i1 = dx;
		      dx = x0, x0 = x1, x1 = dx;
		    }
		    domain[i0] = nice.floor(x0);
		    domain[i1] = nice.ceil(x1);
		    return domain;
		  }
		  function d3_scale_niceStep(step) {
		    return step ? {
		      floor: function(x) {
		        return Math.floor(x / step) * step;
		      },
		      ceil: function(x) {
		        return Math.ceil(x / step) * step;
		      }
		    } : d3_scale_niceIdentity;
		  }
		  var d3_scale_niceIdentity = {
		    floor: d3_identity,
		    ceil: d3_identity
		  };
		  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
		    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
		    if (domain[k] < domain[0]) {
		      domain = domain.slice().reverse();
		      range = range.slice().reverse();
		    }
		    while (++j <= k) {
		      u.push(uninterpolate(domain[j - 1], domain[j]));
		      i.push(interpolate(range[j - 1], range[j]));
		    }
		    return function(x) {
		      var j = d3.bisect(domain, x, 1, k) - 1;
		      return i[j](u[j](x));
		    };
		  }
		  d3.scale.linear = function() {
		    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
		  };
		  function d3_scale_linear(domain, range, interpolate, clamp) {
		    var output, input;
		    function rescale() {
		      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
		      output = linear(domain, range, uninterpolate, interpolate);
		      input = linear(range, domain, uninterpolate, d3_interpolate);
		      return scale;
		    }
		    function scale(x) {
		      return output(x);
		    }
		    scale.invert = function(y) {
		      return input(y);
		    };
		    scale.domain = function(x) {
		      if (!arguments.length) return domain;
		      domain = x.map(Number);
		      return rescale();
		    };
		    scale.range = function(x) {
		      if (!arguments.length) return range;
		      range = x;
		      return rescale();
		    };
		    scale.rangeRound = function(x) {
		      return scale.range(x).interpolate(d3_interpolateRound);
		    };
		    scale.clamp = function(x) {
		      if (!arguments.length) return clamp;
		      clamp = x;
		      return rescale();
		    };
		    scale.interpolate = function(x) {
		      if (!arguments.length) return interpolate;
		      interpolate = x;
		      return rescale();
		    };
		    scale.ticks = function(m) {
		      return d3_scale_linearTicks(domain, m);
		    };
		    scale.tickFormat = function(m, format) {
		      return d3_scale_linearTickFormat(domain, m, format);
		    };
		    scale.nice = function(m) {
		      d3_scale_linearNice(domain, m);
		      return rescale();
		    };
		    scale.copy = function() {
		      return d3_scale_linear(domain, range, interpolate, clamp);
		    };
		    return rescale();
		  }
		  function d3_scale_linearRebind(scale, linear) {
		    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
		  }
		  function d3_scale_linearNice(domain, m) {
		    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
		    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
		    return domain;
		  }
		  function d3_scale_linearTickRange(domain, m) {
		    if (m == null) m = 10;
		    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
		    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
		    extent[0] = Math.ceil(extent[0] / step) * step;
		    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
		    extent[2] = step;
		    return extent;
		  }
		  function d3_scale_linearTicks(domain, m) {
		    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
		  }
		  function d3_scale_linearTickFormat(domain, m, format) {
		    var range = d3_scale_linearTickRange(domain, m);
		    if (format) {
		      var match = d3_format_re.exec(format);
		      match.shift();
		      if (match[8] === "s") {
		        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
		        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
		        match[8] = "f";
		        format = d3.format(match.join(""));
		        return function(d) {
		          return format(prefix.scale(d)) + prefix.symbol;
		        };
		      }
		      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
		      format = match.join("");
		    } else {
		      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
		    }
		    return d3.format(format);
		  }
		  var d3_scale_linearFormatSignificant = {
		    s: 1,
		    g: 1,
		    p: 1,
		    r: 1,
		    e: 1
		  };
		  function d3_scale_linearPrecision(value) {
		    return -Math.floor(Math.log(value) / Math.LN10 + .01);
		  }
		  function d3_scale_linearFormatPrecision(type, range) {
		    var p = d3_scale_linearPrecision(range[2]);
		    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
		  }
		  d3.scale.log = function() {
		    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
		  };
		  function d3_scale_log(linear, base, positive, domain) {
		    function log(x) {
		      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
		    }
		    function pow(x) {
		      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
		    }
		    function scale(x) {
		      return linear(log(x));
		    }
		    scale.invert = function(x) {
		      return pow(linear.invert(x));
		    };
		    scale.domain = function(x) {
		      if (!arguments.length) return domain;
		      positive = x[0] >= 0;
		      linear.domain((domain = x.map(Number)).map(log));
		      return scale;
		    };
		    scale.base = function(_) {
		      if (!arguments.length) return base;
		      base = +_;
		      linear.domain(domain.map(log));
		      return scale;
		    };
		    scale.nice = function() {
		      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
		      linear.domain(niced);
		      domain = niced.map(pow);
		      return scale;
		    };
		    scale.ticks = function() {
		      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
		      if (isFinite(j - i)) {
		        if (positive) {
		          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
		          ticks.push(pow(i));
		        } else {
		          ticks.push(pow(i));
		          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
		        }
		        for (i = 0; ticks[i] < u; i++) {}
		        for (j = ticks.length; ticks[j - 1] > v; j--) {}
		        ticks = ticks.slice(i, j);
		      }
		      return ticks;
		    };
		    scale.tickFormat = function(n, format) {
		      if (!arguments.length) return d3_scale_logFormat;
		      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
		      var k = Math.max(1, base * n / scale.ticks().length);
		      return function(d) {
		        var i = d / pow(Math.round(log(d)));
		        if (i * base < base - .5) i *= base;
		        return i <= k ? format(d) : "";
		      };
		    };
		    scale.copy = function() {
		      return d3_scale_log(linear.copy(), base, positive, domain);
		    };
		    return d3_scale_linearRebind(scale, linear);
		  }
		  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
		    floor: function(x) {
		      return -Math.ceil(-x);
		    },
		    ceil: function(x) {
		      return -Math.floor(-x);
		    }
		  };
		  d3.scale.pow = function() {
		    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
		  };
		  function d3_scale_pow(linear, exponent, domain) {
		    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
		    function scale(x) {
		      return linear(powp(x));
		    }
		    scale.invert = function(x) {
		      return powb(linear.invert(x));
		    };
		    scale.domain = function(x) {
		      if (!arguments.length) return domain;
		      linear.domain((domain = x.map(Number)).map(powp));
		      return scale;
		    };
		    scale.ticks = function(m) {
		      return d3_scale_linearTicks(domain, m);
		    };
		    scale.tickFormat = function(m, format) {
		      return d3_scale_linearTickFormat(domain, m, format);
		    };
		    scale.nice = function(m) {
		      return scale.domain(d3_scale_linearNice(domain, m));
		    };
		    scale.exponent = function(x) {
		      if (!arguments.length) return exponent;
		      powp = d3_scale_powPow(exponent = x);
		      powb = d3_scale_powPow(1 / exponent);
		      linear.domain(domain.map(powp));
		      return scale;
		    };
		    scale.copy = function() {
		      return d3_scale_pow(linear.copy(), exponent, domain);
		    };
		    return d3_scale_linearRebind(scale, linear);
		  }
		  function d3_scale_powPow(e) {
		    return function(x) {
		      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
		    };
		  }
		  d3.scale.sqrt = function() {
		    return d3.scale.pow().exponent(.5);
		  };
		  d3.scale.ordinal = function() {
		    return d3_scale_ordinal([], {
		      t: "range",
		      a: [ [] ]
		    });
		  };
		  function d3_scale_ordinal(domain, ranger) {
		    var index, range, rangeBand;
		    function scale(x) {
		      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
		    }
		    function steps(start, step) {
		      return d3.range(domain.length).map(function(i) {
		        return start + step * i;
		      });
		    }
		    scale.domain = function(x) {
		      if (!arguments.length) return domain;
		      domain = [];
		      index = new d3_Map();
		      var i = -1, n = x.length, xi;
		      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
		      return scale[ranger.t].apply(scale, ranger.a);
		    };
		    scale.range = function(x) {
		      if (!arguments.length) return range;
		      range = x;
		      rangeBand = 0;
		      ranger = {
		        t: "range",
		        a: arguments
		      };
		      return scale;
		    };
		    scale.rangePoints = function(x, padding) {
		      if (arguments.length < 2) padding = 0;
		      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
		      0) : (stop - start) / (domain.length - 1 + padding);
		      range = steps(start + step * padding / 2, step);
		      rangeBand = 0;
		      ranger = {
		        t: "rangePoints",
		        a: arguments
		      };
		      return scale;
		    };
		    scale.rangeRoundPoints = function(x, padding) {
		      if (arguments.length < 2) padding = 0;
		      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
		      0) : (stop - start) / (domain.length - 1 + padding) | 0;
		      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
		      rangeBand = 0;
		      ranger = {
		        t: "rangeRoundPoints",
		        a: arguments
		      };
		      return scale;
		    };
		    scale.rangeBands = function(x, padding, outerPadding) {
		      if (arguments.length < 2) padding = 0;
		      if (arguments.length < 3) outerPadding = padding;
		      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
		      range = steps(start + step * outerPadding, step);
		      if (reverse) range.reverse();
		      rangeBand = step * (1 - padding);
		      ranger = {
		        t: "rangeBands",
		        a: arguments
		      };
		      return scale;
		    };
		    scale.rangeRoundBands = function(x, padding, outerPadding) {
		      if (arguments.length < 2) padding = 0;
		      if (arguments.length < 3) outerPadding = padding;
		      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
		      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
		      if (reverse) range.reverse();
		      rangeBand = Math.round(step * (1 - padding));
		      ranger = {
		        t: "rangeRoundBands",
		        a: arguments
		      };
		      return scale;
		    };
		    scale.rangeBand = function() {
		      return rangeBand;
		    };
		    scale.rangeExtent = function() {
		      return d3_scaleExtent(ranger.a[0]);
		    };
		    scale.copy = function() {
		      return d3_scale_ordinal(domain, ranger);
		    };
		    return scale.domain(domain);
		  }
		  d3.scale.category10 = function() {
		    return d3.scale.ordinal().range(d3_category10);
		  };
		  d3.scale.category20 = function() {
		    return d3.scale.ordinal().range(d3_category20);
		  };
		  d3.scale.category20b = function() {
		    return d3.scale.ordinal().range(d3_category20b);
		  };
		  d3.scale.category20c = function() {
		    return d3.scale.ordinal().range(d3_category20c);
		  };
		  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
		  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
		  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
		  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
		  d3.scale.quantile = function() {
		    return d3_scale_quantile([], []);
		  };
		  function d3_scale_quantile(domain, range) {
		    var thresholds;
		    function rescale() {
		      var k = 0, q = range.length;
		      thresholds = [];
		      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
		      return scale;
		    }
		    function scale(x) {
		      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
		    }
		    scale.domain = function(x) {
		      if (!arguments.length) return domain;
		      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
		      return rescale();
		    };
		    scale.range = function(x) {
		      if (!arguments.length) return range;
		      range = x;
		      return rescale();
		    };
		    scale.quantiles = function() {
		      return thresholds;
		    };
		    scale.invertExtent = function(y) {
		      y = range.indexOf(y);
		      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
		    };
		    scale.copy = function() {
		      return d3_scale_quantile(domain, range);
		    };
		    return rescale();
		  }
		  d3.scale.quantize = function() {
		    return d3_scale_quantize(0, 1, [ 0, 1 ]);
		  };
		  function d3_scale_quantize(x0, x1, range) {
		    var kx, i;
		    function scale(x) {
		      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
		    }
		    function rescale() {
		      kx = range.length / (x1 - x0);
		      i = range.length - 1;
		      return scale;
		    }
		    scale.domain = function(x) {
		      if (!arguments.length) return [ x0, x1 ];
		      x0 = +x[0];
		      x1 = +x[x.length - 1];
		      return rescale();
		    };
		    scale.range = function(x) {
		      if (!arguments.length) return range;
		      range = x;
		      return rescale();
		    };
		    scale.invertExtent = function(y) {
		      y = range.indexOf(y);
		      y = y < 0 ? NaN : y / kx + x0;
		      return [ y, y + 1 / kx ];
		    };
		    scale.copy = function() {
		      return d3_scale_quantize(x0, x1, range);
		    };
		    return rescale();
		  }
		  d3.scale.threshold = function() {
		    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
		  };
		  function d3_scale_threshold(domain, range) {
		    function scale(x) {
		      if (x <= x) return range[d3.bisect(domain, x)];
		    }
		    scale.domain = function(_) {
		      if (!arguments.length) return domain;
		      domain = _;
		      return scale;
		    };
		    scale.range = function(_) {
		      if (!arguments.length) return range;
		      range = _;
		      return scale;
		    };
		    scale.invertExtent = function(y) {
		      y = range.indexOf(y);
		      return [ domain[y - 1], domain[y] ];
		    };
		    scale.copy = function() {
		      return d3_scale_threshold(domain, range);
		    };
		    return scale;
		  }
		  d3.scale.identity = function() {
		    return d3_scale_identity([ 0, 1 ]);
		  };
		  function d3_scale_identity(domain) {
		    function identity(x) {
		      return +x;
		    }
		    identity.invert = identity;
		    identity.domain = identity.range = function(x) {
		      if (!arguments.length) return domain;
		      domain = x.map(identity);
		      return identity;
		    };
		    identity.ticks = function(m) {
		      return d3_scale_linearTicks(domain, m);
		    };
		    identity.tickFormat = function(m, format) {
		      return d3_scale_linearTickFormat(domain, m, format);
		    };
		    identity.copy = function() {
		      return d3_scale_identity(domain);
		    };
		    return identity;
		  }
		  d3.svg = {};
		  function d3_zero() {
		    return 0;
		  }
		  d3.svg.arc = function() {
		    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
		    function arc() {
		      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
		      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
		      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
		      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
		      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
		        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
		        if (!cw) p1 *= -1;
		        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
		        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
		      }
		      if (r1) {
		        x0 = r1 * Math.cos(a0 + p1);
		        y0 = r1 * Math.sin(a0 + p1);
		        x1 = r1 * Math.cos(a1 - p1);
		        y1 = r1 * Math.sin(a1 - p1);
		        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
		        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
		          var h1 = (a0 + a1) / 2;
		          x0 = r1 * Math.cos(h1);
		          y0 = r1 * Math.sin(h1);
		          x1 = y1 = null;
		        }
		      } else {
		        x0 = y0 = 0;
		      }
		      if (r0) {
		        x2 = r0 * Math.cos(a1 - p0);
		        y2 = r0 * Math.sin(a1 - p0);
		        x3 = r0 * Math.cos(a0 + p0);
		        y3 = r0 * Math.sin(a0 + p0);
		        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
		        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
		          var h0 = (a0 + a1) / 2;
		          x2 = r0 * Math.cos(h0);
		          y2 = r0 * Math.sin(h0);
		          x3 = y3 = null;
		        }
		      } else {
		        x2 = y2 = 0;
		      }
		      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
		        cr = r0 < r1 ^ cw ? 0 : 1;
		        var rc1 = rc, rc0 = rc;
		        if (da < π) {
		          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
		          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
		          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
		        }
		        if (x1 != null) {
		          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
		          if (rc === rc1) {
		            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
		          } else {
		            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
		          }
		        } else {
		          path.push("M", x0, ",", y0);
		        }
		        if (x3 != null) {
		          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
		          if (rc === rc0) {
		            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
		          } else {
		            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
		          }
		        } else {
		          path.push("L", x2, ",", y2);
		        }
		      } else {
		        path.push("M", x0, ",", y0);
		        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
		        path.push("L", x2, ",", y2);
		        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
		      }
		      path.push("Z");
		      return path.join("");
		    }
		    function circleSegment(r1, cw) {
		      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
		    }
		    arc.innerRadius = function(v) {
		      if (!arguments.length) return innerRadius;
		      innerRadius = d3_functor(v);
		      return arc;
		    };
		    arc.outerRadius = function(v) {
		      if (!arguments.length) return outerRadius;
		      outerRadius = d3_functor(v);
		      return arc;
		    };
		    arc.cornerRadius = function(v) {
		      if (!arguments.length) return cornerRadius;
		      cornerRadius = d3_functor(v);
		      return arc;
		    };
		    arc.padRadius = function(v) {
		      if (!arguments.length) return padRadius;
		      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
		      return arc;
		    };
		    arc.startAngle = function(v) {
		      if (!arguments.length) return startAngle;
		      startAngle = d3_functor(v);
		      return arc;
		    };
		    arc.endAngle = function(v) {
		      if (!arguments.length) return endAngle;
		      endAngle = d3_functor(v);
		      return arc;
		    };
		    arc.padAngle = function(v) {
		      if (!arguments.length) return padAngle;
		      padAngle = d3_functor(v);
		      return arc;
		    };
		    arc.centroid = function() {
		      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
		      return [ Math.cos(a) * r, Math.sin(a) * r ];
		    };
		    return arc;
		  };
		  var d3_svg_arcAuto = "auto";
		  function d3_svg_arcInnerRadius(d) {
		    return d.innerRadius;
		  }
		  function d3_svg_arcOuterRadius(d) {
		    return d.outerRadius;
		  }
		  function d3_svg_arcStartAngle(d) {
		    return d.startAngle;
		  }
		  function d3_svg_arcEndAngle(d) {
		    return d.endAngle;
		  }
		  function d3_svg_arcPadAngle(d) {
		    return d && d.padAngle;
		  }
		  function d3_svg_arcSweep(x0, y0, x1, y1) {
		    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
		  }
		  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
		    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
		    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
		    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
		  }
		  function d3_svg_line(projection) {
		    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
		    function line(data) {
		      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
		      function segment() {
		        segments.push("M", interpolate(projection(points), tension));
		      }
		      while (++i < n) {
		        if (defined.call(this, d = data[i], i)) {
		          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
		        } else if (points.length) {
		          segment();
		          points = [];
		        }
		      }
		      if (points.length) segment();
		      return segments.length ? segments.join("") : null;
		    }
		    line.x = function(_) {
		      if (!arguments.length) return x;
		      x = _;
		      return line;
		    };
		    line.y = function(_) {
		      if (!arguments.length) return y;
		      y = _;
		      return line;
		    };
		    line.defined = function(_) {
		      if (!arguments.length) return defined;
		      defined = _;
		      return line;
		    };
		    line.interpolate = function(_) {
		      if (!arguments.length) return interpolateKey;
		      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
		      return line;
		    };
		    line.tension = function(_) {
		      if (!arguments.length) return tension;
		      tension = _;
		      return line;
		    };
		    return line;
		  }
		  d3.svg.line = function() {
		    return d3_svg_line(d3_identity);
		  };
		  var d3_svg_lineInterpolators = d3.map({
		    linear: d3_svg_lineLinear,
		    "linear-closed": d3_svg_lineLinearClosed,
		    step: d3_svg_lineStep,
		    "step-before": d3_svg_lineStepBefore,
		    "step-after": d3_svg_lineStepAfter,
		    basis: d3_svg_lineBasis,
		    "basis-open": d3_svg_lineBasisOpen,
		    "basis-closed": d3_svg_lineBasisClosed,
		    bundle: d3_svg_lineBundle,
		    cardinal: d3_svg_lineCardinal,
		    "cardinal-open": d3_svg_lineCardinalOpen,
		    "cardinal-closed": d3_svg_lineCardinalClosed,
		    monotone: d3_svg_lineMonotone
		  });
		  d3_svg_lineInterpolators.forEach(function(key, value) {
		    value.key = key;
		    value.closed = /-closed$/.test(key);
		  });
		  function d3_svg_lineLinear(points) {
		    return points.length > 1 ? points.join("L") : points + "Z";
		  }
		  function d3_svg_lineLinearClosed(points) {
		    return points.join("L") + "Z";
		  }
		  function d3_svg_lineStep(points) {
		    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
		    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
		    if (n > 1) path.push("H", p[0]);
		    return path.join("");
		  }
		  function d3_svg_lineStepBefore(points) {
		    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
		    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
		    return path.join("");
		  }
		  function d3_svg_lineStepAfter(points) {
		    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
		    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
		    return path.join("");
		  }
		  function d3_svg_lineCardinalOpen(points, tension) {
		    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
		  }
		  function d3_svg_lineCardinalClosed(points, tension) {
		    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
		    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
		  }
		  function d3_svg_lineCardinal(points, tension) {
		    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
		  }
		  function d3_svg_lineHermite(points, tangents) {
		    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
		      return d3_svg_lineLinear(points);
		    }
		    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
		    if (quad) {
		      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
		      p0 = points[1];
		      pi = 2;
		    }
		    if (tangents.length > 1) {
		      t = tangents[1];
		      p = points[pi];
		      pi++;
		      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
		      for (var i = 2; i < tangents.length; i++, pi++) {
		        p = points[pi];
		        t = tangents[i];
		        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
		      }
		    }
		    if (quad) {
		      var lp = points[pi];
		      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
		    }
		    return path;
		  }
		  function d3_svg_lineCardinalTangents(points, tension) {
		    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
		    while (++i < n) {
		      p0 = p1;
		      p1 = p2;
		      p2 = points[i];
		      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
		    }
		    return tangents;
		  }
		  function d3_svg_lineBasis(points) {
		    if (points.length < 3) return d3_svg_lineLinear(points);
		    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
		    points.push(points[n - 1]);
		    while (++i <= n) {
		      pi = points[i];
		      px.shift();
		      px.push(pi[0]);
		      py.shift();
		      py.push(pi[1]);
		      d3_svg_lineBasisBezier(path, px, py);
		    }
		    points.pop();
		    path.push("L", pi);
		    return path.join("");
		  }
		  function d3_svg_lineBasisOpen(points) {
		    if (points.length < 4) return d3_svg_lineLinear(points);
		    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
		    while (++i < 3) {
		      pi = points[i];
		      px.push(pi[0]);
		      py.push(pi[1]);
		    }
		    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
		    --i;
		    while (++i < n) {
		      pi = points[i];
		      px.shift();
		      px.push(pi[0]);
		      py.shift();
		      py.push(pi[1]);
		      d3_svg_lineBasisBezier(path, px, py);
		    }
		    return path.join("");
		  }
		  function d3_svg_lineBasisClosed(points) {
		    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
		    while (++i < 4) {
		      pi = points[i % n];
		      px.push(pi[0]);
		      py.push(pi[1]);
		    }
		    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
		    --i;
		    while (++i < m) {
		      pi = points[i % n];
		      px.shift();
		      px.push(pi[0]);
		      py.shift();
		      py.push(pi[1]);
		      d3_svg_lineBasisBezier(path, px, py);
		    }
		    return path.join("");
		  }
		  function d3_svg_lineBundle(points, tension) {
		    var n = points.length - 1;
		    if (n) {
		      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
		      while (++i <= n) {
		        p = points[i];
		        t = i / n;
		        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
		        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
		      }
		    }
		    return d3_svg_lineBasis(points);
		  }
		  function d3_svg_lineDot4(a, b) {
		    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
		  }
		  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
		  function d3_svg_lineBasisBezier(path, x, y) {
		    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
		  }
		  function d3_svg_lineSlope(p0, p1) {
		    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
		  }
		  function d3_svg_lineFiniteDifferences(points) {
		    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
		    while (++i < j) {
		      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
		    }
		    m[i] = d;
		    return m;
		  }
		  function d3_svg_lineMonotoneTangents(points) {
		    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
		    while (++i < j) {
		      d = d3_svg_lineSlope(points[i], points[i + 1]);
		      if (abs(d) < ε) {
		        m[i] = m[i + 1] = 0;
		      } else {
		        a = m[i] / d;
		        b = m[i + 1] / d;
		        s = a * a + b * b;
		        if (s > 9) {
		          s = d * 3 / Math.sqrt(s);
		          m[i] = s * a;
		          m[i + 1] = s * b;
		        }
		      }
		    }
		    i = -1;
		    while (++i <= j) {
		      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
		      tangents.push([ s || 0, m[i] * s || 0 ]);
		    }
		    return tangents;
		  }
		  function d3_svg_lineMonotone(points) {
		    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
		  }
		  d3.svg.line.radial = function() {
		    var line = d3_svg_line(d3_svg_lineRadial);
		    line.radius = line.x, delete line.x;
		    line.angle = line.y, delete line.y;
		    return line;
		  };
		  function d3_svg_lineRadial(points) {
		    var point, i = -1, n = points.length, r, a;
		    while (++i < n) {
		      point = points[i];
		      r = point[0];
		      a = point[1] - halfπ;
		      point[0] = r * Math.cos(a);
		      point[1] = r * Math.sin(a);
		    }
		    return points;
		  }
		  function d3_svg_area(projection) {
		    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
		    function area(data) {
		      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
		        return x;
		      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
		        return y;
		      } : d3_functor(y1), x, y;
		      function segment() {
		        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
		      }
		      while (++i < n) {
		        if (defined.call(this, d = data[i], i)) {
		          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
		          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
		        } else if (points0.length) {
		          segment();
		          points0 = [];
		          points1 = [];
		        }
		      }
		      if (points0.length) segment();
		      return segments.length ? segments.join("") : null;
		    }
		    area.x = function(_) {
		      if (!arguments.length) return x1;
		      x0 = x1 = _;
		      return area;
		    };
		    area.x0 = function(_) {
		      if (!arguments.length) return x0;
		      x0 = _;
		      return area;
		    };
		    area.x1 = function(_) {
		      if (!arguments.length) return x1;
		      x1 = _;
		      return area;
		    };
		    area.y = function(_) {
		      if (!arguments.length) return y1;
		      y0 = y1 = _;
		      return area;
		    };
		    area.y0 = function(_) {
		      if (!arguments.length) return y0;
		      y0 = _;
		      return area;
		    };
		    area.y1 = function(_) {
		      if (!arguments.length) return y1;
		      y1 = _;
		      return area;
		    };
		    area.defined = function(_) {
		      if (!arguments.length) return defined;
		      defined = _;
		      return area;
		    };
		    area.interpolate = function(_) {
		      if (!arguments.length) return interpolateKey;
		      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
		      interpolateReverse = interpolate.reverse || interpolate;
		      L = interpolate.closed ? "M" : "L";
		      return area;
		    };
		    area.tension = function(_) {
		      if (!arguments.length) return tension;
		      tension = _;
		      return area;
		    };
		    return area;
		  }
		  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
		  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
		  d3.svg.area = function() {
		    return d3_svg_area(d3_identity);
		  };
		  d3.svg.area.radial = function() {
		    var area = d3_svg_area(d3_svg_lineRadial);
		    area.radius = area.x, delete area.x;
		    area.innerRadius = area.x0, delete area.x0;
		    area.outerRadius = area.x1, delete area.x1;
		    area.angle = area.y, delete area.y;
		    area.startAngle = area.y0, delete area.y0;
		    area.endAngle = area.y1, delete area.y1;
		    return area;
		  };
		  d3.svg.chord = function() {
		    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
		    function chord(d, i) {
		      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
		      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
		    }
		    function subgroup(self, f, d, i) {
		      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
		      return {
		        r: r,
		        a0: a0,
		        a1: a1,
		        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
		        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
		      };
		    }
		    function equals(a, b) {
		      return a.a0 == b.a0 && a.a1 == b.a1;
		    }
		    function arc(r, p, a) {
		      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
		    }
		    function curve(r0, p0, r1, p1) {
		      return "Q 0,0 " + p1;
		    }
		    chord.radius = function(v) {
		      if (!arguments.length) return radius;
		      radius = d3_functor(v);
		      return chord;
		    };
		    chord.source = function(v) {
		      if (!arguments.length) return source;
		      source = d3_functor(v);
		      return chord;
		    };
		    chord.target = function(v) {
		      if (!arguments.length) return target;
		      target = d3_functor(v);
		      return chord;
		    };
		    chord.startAngle = function(v) {
		      if (!arguments.length) return startAngle;
		      startAngle = d3_functor(v);
		      return chord;
		    };
		    chord.endAngle = function(v) {
		      if (!arguments.length) return endAngle;
		      endAngle = d3_functor(v);
		      return chord;
		    };
		    return chord;
		  };
		  function d3_svg_chordRadius(d) {
		    return d.radius;
		  }
		  d3.svg.diagonal = function() {
		    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
		    function diagonal(d, i) {
		      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
		        x: p0.x,
		        y: m
		      }, {
		        x: p3.x,
		        y: m
		      }, p3 ];
		      p = p.map(projection);
		      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
		    }
		    diagonal.source = function(x) {
		      if (!arguments.length) return source;
		      source = d3_functor(x);
		      return diagonal;
		    };
		    diagonal.target = function(x) {
		      if (!arguments.length) return target;
		      target = d3_functor(x);
		      return diagonal;
		    };
		    diagonal.projection = function(x) {
		      if (!arguments.length) return projection;
		      projection = x;
		      return diagonal;
		    };
		    return diagonal;
		  };
		  function d3_svg_diagonalProjection(d) {
		    return [ d.x, d.y ];
		  }
		  d3.svg.diagonal.radial = function() {
		    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
		    diagonal.projection = function(x) {
		      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
		    };
		    return diagonal;
		  };
		  function d3_svg_diagonalRadialProjection(projection) {
		    return function() {
		      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
		      return [ r * Math.cos(a), r * Math.sin(a) ];
		    };
		  }
		  d3.svg.symbol = function() {
		    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
		    function symbol(d, i) {
		      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
		    }
		    symbol.type = function(x) {
		      if (!arguments.length) return type;
		      type = d3_functor(x);
		      return symbol;
		    };
		    symbol.size = function(x) {
		      if (!arguments.length) return size;
		      size = d3_functor(x);
		      return symbol;
		    };
		    return symbol;
		  };
		  function d3_svg_symbolSize() {
		    return 64;
		  }
		  function d3_svg_symbolType() {
		    return "circle";
		  }
		  function d3_svg_symbolCircle(size) {
		    var r = Math.sqrt(size / π);
		    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
		  }
		  var d3_svg_symbols = d3.map({
		    circle: d3_svg_symbolCircle,
		    cross: function(size) {
		      var r = Math.sqrt(size / 5) / 2;
		      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
		    },
		    diamond: function(size) {
		      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
		      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
		    },
		    square: function(size) {
		      var r = Math.sqrt(size) / 2;
		      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
		    },
		    "triangle-down": function(size) {
		      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
		      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
		    },
		    "triangle-up": function(size) {
		      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
		      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
		    }
		  });
		  d3.svg.symbolTypes = d3_svg_symbols.keys();
		  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
		  d3_selectionPrototype.transition = function(name) {
		    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
		      time: Date.now(),
		      ease: d3_ease_cubicInOut,
		      delay: 0,
		      duration: 250
		    };
		    for (var j = -1, m = this.length; ++j < m; ) {
		      subgroups.push(subgroup = []);
		      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
		        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
		        subgroup.push(node);
		      }
		    }
		    return d3_transition(subgroups, ns, id);
		  };
		  d3_selectionPrototype.interrupt = function(name) {
		    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
		  };
		  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
		  function d3_selection_interruptNS(ns) {
		    return function() {
		      var lock, activeId, active;
		      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
		        active.timer.c = null;
		        active.timer.t = NaN;
		        if (--lock.count) delete lock[activeId]; else delete this[ns];
		        lock.active += .5;
		        active.event && active.event.interrupt.call(this, this.__data__, active.index);
		      }
		    };
		  }
		  function d3_transition(groups, ns, id) {
		    d3_subclass(groups, d3_transitionPrototype);
		    groups.namespace = ns;
		    groups.id = id;
		    return groups;
		  }
		  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
		  d3_transitionPrototype.call = d3_selectionPrototype.call;
		  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
		  d3_transitionPrototype.node = d3_selectionPrototype.node;
		  d3_transitionPrototype.size = d3_selectionPrototype.size;
		  d3.transition = function(selection, name) {
		    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
		  };
		  d3.transition.prototype = d3_transitionPrototype;
		  d3_transitionPrototype.select = function(selector) {
		    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
		    selector = d3_selection_selector(selector);
		    for (var j = -1, m = this.length; ++j < m; ) {
		      subgroups.push(subgroup = []);
		      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
		        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
		          if ("__data__" in node) subnode.__data__ = node.__data__;
		          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
		          subgroup.push(subnode);
		        } else {
		          subgroup.push(null);
		        }
		      }
		    }
		    return d3_transition(subgroups, ns, id);
		  };
		  d3_transitionPrototype.selectAll = function(selector) {
		    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
		    selector = d3_selection_selectorAll(selector);
		    for (var j = -1, m = this.length; ++j < m; ) {
		      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
		        if (node = group[i]) {
		          transition = node[ns][id];
		          subnodes = selector.call(node, node.__data__, i, j);
		          subgroups.push(subgroup = []);
		          for (var k = -1, o = subnodes.length; ++k < o; ) {
		            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
		            subgroup.push(subnode);
		          }
		        }
		      }
		    }
		    return d3_transition(subgroups, ns, id);
		  };
		  d3_transitionPrototype.filter = function(filter) {
		    var subgroups = [], subgroup, group, node;
		    if (typeof filter !== "function") filter = d3_selection_filter(filter);
		    for (var j = 0, m = this.length; j < m; j++) {
		      subgroups.push(subgroup = []);
		      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
		        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
		          subgroup.push(node);
		        }
		      }
		    }
		    return d3_transition(subgroups, this.namespace, this.id);
		  };
		  d3_transitionPrototype.tween = function(name, tween) {
		    var id = this.id, ns = this.namespace;
		    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
		    return d3_selection_each(this, tween == null ? function(node) {
		      node[ns][id].tween.remove(name);
		    } : function(node) {
		      node[ns][id].tween.set(name, tween);
		    });
		  };
		  function d3_transition_tween(groups, name, value, tween) {
		    var id = groups.id, ns = groups.namespace;
		    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
		      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
		    } : (value = tween(value), function(node) {
		      node[ns][id].tween.set(name, value);
		    }));
		  }
		  d3_transitionPrototype.attr = function(nameNS, value) {
		    if (arguments.length < 2) {
		      for (value in nameNS) this.attr(value, nameNS[value]);
		      return this;
		    }
		    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
		    function attrNull() {
		      this.removeAttribute(name);
		    }
		    function attrNullNS() {
		      this.removeAttributeNS(name.space, name.local);
		    }
		    function attrTween(b) {
		      return b == null ? attrNull : (b += "", function() {
		        var a = this.getAttribute(name), i;
		        return a !== b && (i = interpolate(a, b), function(t) {
		          this.setAttribute(name, i(t));
		        });
		      });
		    }
		    function attrTweenNS(b) {
		      return b == null ? attrNullNS : (b += "", function() {
		        var a = this.getAttributeNS(name.space, name.local), i;
		        return a !== b && (i = interpolate(a, b), function(t) {
		          this.setAttributeNS(name.space, name.local, i(t));
		        });
		      });
		    }
		    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
		  };
		  d3_transitionPrototype.attrTween = function(nameNS, tween) {
		    var name = d3.ns.qualify(nameNS);
		    function attrTween(d, i) {
		      var f = tween.call(this, d, i, this.getAttribute(name));
		      return f && function(t) {
		        this.setAttribute(name, f(t));
		      };
		    }
		    function attrTweenNS(d, i) {
		      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
		      return f && function(t) {
		        this.setAttributeNS(name.space, name.local, f(t));
		      };
		    }
		    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
		  };
		  d3_transitionPrototype.style = function(name, value, priority) {
		    var n = arguments.length;
		    if (n < 3) {
		      if (typeof name !== "string") {
		        if (n < 2) value = "";
		        for (priority in name) this.style(priority, name[priority], value);
		        return this;
		      }
		      priority = "";
		    }
		    function styleNull() {
		      this.style.removeProperty(name);
		    }
		    function styleString(b) {
		      return b == null ? styleNull : (b += "", function() {
		        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
		        return a !== b && (i = d3_interpolate(a, b), function(t) {
		          this.style.setProperty(name, i(t), priority);
		        });
		      });
		    }
		    return d3_transition_tween(this, "style." + name, value, styleString);
		  };
		  d3_transitionPrototype.styleTween = function(name, tween, priority) {
		    if (arguments.length < 3) priority = "";
		    function styleTween(d, i) {
		      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
		      return f && function(t) {
		        this.style.setProperty(name, f(t), priority);
		      };
		    }
		    return this.tween("style." + name, styleTween);
		  };
		  d3_transitionPrototype.text = function(value) {
		    return d3_transition_tween(this, "text", value, d3_transition_text);
		  };
		  function d3_transition_text(b) {
		    if (b == null) b = "";
		    return function() {
		      this.textContent = b;
		    };
		  }
		  d3_transitionPrototype.remove = function() {
		    var ns = this.namespace;
		    return this.each("end.transition", function() {
		      var p;
		      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
		    });
		  };
		  d3_transitionPrototype.ease = function(value) {
		    var id = this.id, ns = this.namespace;
		    if (arguments.length < 1) return this.node()[ns][id].ease;
		    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
		    return d3_selection_each(this, function(node) {
		      node[ns][id].ease = value;
		    });
		  };
		  d3_transitionPrototype.delay = function(value) {
		    var id = this.id, ns = this.namespace;
		    if (arguments.length < 1) return this.node()[ns][id].delay;
		    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
		      node[ns][id].delay = +value.call(node, node.__data__, i, j);
		    } : (value = +value, function(node) {
		      node[ns][id].delay = value;
		    }));
		  };
		  d3_transitionPrototype.duration = function(value) {
		    var id = this.id, ns = this.namespace;
		    if (arguments.length < 1) return this.node()[ns][id].duration;
		    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
		      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
		    } : (value = Math.max(1, value), function(node) {
		      node[ns][id].duration = value;
		    }));
		  };
		  d3_transitionPrototype.each = function(type, listener) {
		    var id = this.id, ns = this.namespace;
		    if (arguments.length < 2) {
		      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
		      try {
		        d3_transitionInheritId = id;
		        d3_selection_each(this, function(node, i, j) {
		          d3_transitionInherit = node[ns][id];
		          type.call(node, node.__data__, i, j);
		        });
		      } finally {
		        d3_transitionInherit = inherit;
		        d3_transitionInheritId = inheritId;
		      }
		    } else {
		      d3_selection_each(this, function(node) {
		        var transition = node[ns][id];
		        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
		      });
		    }
		    return this;
		  };
		  d3_transitionPrototype.transition = function() {
		    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
		    for (var j = 0, m = this.length; j < m; j++) {
		      subgroups.push(subgroup = []);
		      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
		        if (node = group[i]) {
		          transition = node[ns][id0];
		          d3_transitionNode(node, i, ns, id1, {
		            time: transition.time,
		            ease: transition.ease,
		            delay: transition.delay + transition.duration,
		            duration: transition.duration
		          });
		        }
		        subgroup.push(node);
		      }
		    }
		    return d3_transition(subgroups, ns, id1);
		  };
		  function d3_transitionNamespace(name) {
		    return name == null ? "__transition__" : "__transition_" + name + "__";
		  }
		  function d3_transitionNode(node, i, ns, id, inherit) {
		    var lock = node[ns] || (node[ns] = {
		      active: 0,
		      count: 0
		    }), transition = lock[id], time, timer, duration, ease, tweens;
		    function schedule(elapsed) {
		      var delay = transition.delay;
		      timer.t = delay + time;
		      if (delay <= elapsed) return start(elapsed - delay);
		      timer.c = start;
		    }
		    function start(elapsed) {
		      var activeId = lock.active, active = lock[activeId];
		      if (active) {
		        active.timer.c = null;
		        active.timer.t = NaN;
		        --lock.count;
		        delete lock[activeId];
		        active.event && active.event.interrupt.call(node, node.__data__, active.index);
		      }
		      for (var cancelId in lock) {
		        if (+cancelId < id) {
		          var cancel = lock[cancelId];
		          cancel.timer.c = null;
		          cancel.timer.t = NaN;
		          --lock.count;
		          delete lock[cancelId];
		        }
		      }
		      timer.c = tick;
		      d3_timer(function() {
		        if (timer.c && tick(elapsed || 1)) {
		          timer.c = null;
		          timer.t = NaN;
		        }
		        return 1;
		      }, 0, time);
		      lock.active = id;
		      transition.event && transition.event.start.call(node, node.__data__, i);
		      tweens = [];
		      transition.tween.forEach(function(key, value) {
		        if (value = value.call(node, node.__data__, i)) {
		          tweens.push(value);
		        }
		      });
		      ease = transition.ease;
		      duration = transition.duration;
		    }
		    function tick(elapsed) {
		      var t = elapsed / duration, e = ease(t), n = tweens.length;
		      while (n > 0) {
		        tweens[--n].call(node, e);
		      }
		      if (t >= 1) {
		        transition.event && transition.event.end.call(node, node.__data__, i);
		        if (--lock.count) delete lock[id]; else delete node[ns];
		        return 1;
		      }
		    }
		    if (!transition) {
		      time = inherit.time;
		      timer = d3_timer(schedule, 0, time);
		      transition = lock[id] = {
		        tween: new d3_Map(),
		        time: time,
		        timer: timer,
		        delay: inherit.delay,
		        duration: inherit.duration,
		        ease: inherit.ease,
		        index: i
		      };
		      inherit = null;
		      ++lock.count;
		    }
		  }
		  d3.svg.axis = function() {
		    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
		    function axis(g) {
		      g.each(function() {
		        var g = d3.select(this);
		        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
		        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
		        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
		        d3.transition(path));
		        tickEnter.append("line");
		        tickEnter.append("text");
		        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
		        if (orient === "bottom" || orient === "top") {
		          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
		          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
		          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
		        } else {
		          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
		          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
		          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
		        }
		        lineEnter.attr(y2, sign * innerTickSize);
		        textEnter.attr(y1, sign * tickSpacing);
		        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
		        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
		        if (scale1.rangeBand) {
		          var x = scale1, dx = x.rangeBand() / 2;
		          scale0 = scale1 = function(d) {
		            return x(d) + dx;
		          };
		        } else if (scale0.rangeBand) {
		          scale0 = scale1;
		        } else {
		          tickExit.call(tickTransform, scale1, scale0);
		        }
		        tickEnter.call(tickTransform, scale0, scale1);
		        tickUpdate.call(tickTransform, scale1, scale1);
		      });
		    }
		    axis.scale = function(x) {
		      if (!arguments.length) return scale;
		      scale = x;
		      return axis;
		    };
		    axis.orient = function(x) {
		      if (!arguments.length) return orient;
		      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
		      return axis;
		    };
		    axis.ticks = function() {
		      if (!arguments.length) return tickArguments_;
		      tickArguments_ = d3_array(arguments);
		      return axis;
		    };
		    axis.tickValues = function(x) {
		      if (!arguments.length) return tickValues;
		      tickValues = x;
		      return axis;
		    };
		    axis.tickFormat = function(x) {
		      if (!arguments.length) return tickFormat_;
		      tickFormat_ = x;
		      return axis;
		    };
		    axis.tickSize = function(x) {
		      var n = arguments.length;
		      if (!n) return innerTickSize;
		      innerTickSize = +x;
		      outerTickSize = +arguments[n - 1];
		      return axis;
		    };
		    axis.innerTickSize = function(x) {
		      if (!arguments.length) return innerTickSize;
		      innerTickSize = +x;
		      return axis;
		    };
		    axis.outerTickSize = function(x) {
		      if (!arguments.length) return outerTickSize;
		      outerTickSize = +x;
		      return axis;
		    };
		    axis.tickPadding = function(x) {
		      if (!arguments.length) return tickPadding;
		      tickPadding = +x;
		      return axis;
		    };
		    axis.tickSubdivide = function() {
		      return arguments.length && axis;
		    };
		    return axis;
		  };
		  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
		    top: 1,
		    right: 1,
		    bottom: 1,
		    left: 1
		  };
		  function d3_svg_axisX(selection, x0, x1) {
		    selection.attr("transform", function(d) {
		      var v0 = x0(d);
		      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
		    });
		  }
		  function d3_svg_axisY(selection, y0, y1) {
		    selection.attr("transform", function(d) {
		      var v0 = y0(d);
		      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
		    });
		  }
		  d3.svg.brush = function() {
		    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
		    function brush(g) {
		      g.each(function() {
		        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
		        var background = g.selectAll(".background").data([ 0 ]);
		        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
		        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
		        var resize = g.selectAll(".resize").data(resizes, d3_identity);
		        resize.exit().remove();
		        resize.enter().append("g").attr("class", function(d) {
		          return "resize " + d;
		        }).style("cursor", function(d) {
		          return d3_svg_brushCursor[d];
		        }).append("rect").attr("x", function(d) {
		          return /[ew]$/.test(d) ? -3 : null;
		        }).attr("y", function(d) {
		          return /^[ns]/.test(d) ? -3 : null;
		        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
		        resize.style("display", brush.empty() ? "none" : null);
		        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
		        if (x) {
		          range = d3_scaleRange(x);
		          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
		          redrawX(gUpdate);
		        }
		        if (y) {
		          range = d3_scaleRange(y);
		          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
		          redrawY(gUpdate);
		        }
		        redraw(gUpdate);
		      });
		    }
		    brush.event = function(g) {
		      g.each(function() {
		        var event_ = event.of(this, arguments), extent1 = {
		          x: xExtent,
		          y: yExtent,
		          i: xExtentDomain,
		          j: yExtentDomain
		        }, extent0 = this.__chart__ || extent1;
		        this.__chart__ = extent1;
		        if (d3_transitionInheritId) {
		          d3.select(this).transition().each("start.brush", function() {
		            xExtentDomain = extent0.i;
		            yExtentDomain = extent0.j;
		            xExtent = extent0.x;
		            yExtent = extent0.y;
		            event_({
		              type: "brushstart"
		            });
		          }).tween("brush:brush", function() {
		            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
		            xExtentDomain = yExtentDomain = null;
		            return function(t) {
		              xExtent = extent1.x = xi(t);
		              yExtent = extent1.y = yi(t);
		              event_({
		                type: "brush",
		                mode: "resize"
		              });
		            };
		          }).each("end.brush", function() {
		            xExtentDomain = extent1.i;
		            yExtentDomain = extent1.j;
		            event_({
		              type: "brush",
		              mode: "resize"
		            });
		            event_({
		              type: "brushend"
		            });
		          });
		        } else {
		          event_({
		            type: "brushstart"
		          });
		          event_({
		            type: "brush",
		            mode: "resize"
		          });
		          event_({
		            type: "brushend"
		          });
		        }
		      });
		    };
		    function redraw(g) {
		      g.selectAll(".resize").attr("transform", function(d) {
		        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
		      });
		    }
		    function redrawX(g) {
		      g.select(".extent").attr("x", xExtent[0]);
		      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
		    }
		    function redrawY(g) {
		      g.select(".extent").attr("y", yExtent[0]);
		      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
		    }
		    function brushstart() {
		      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
		      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
		      if (d3.event.changedTouches) {
		        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
		      } else {
		        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
		      }
		      g.interrupt().selectAll("*").interrupt();
		      if (dragging) {
		        origin[0] = xExtent[0] - origin[0];
		        origin[1] = yExtent[0] - origin[1];
		      } else if (resizing) {
		        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
		        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
		        origin[0] = xExtent[ex];
		        origin[1] = yExtent[ey];
		      } else if (d3.event.altKey) center = origin.slice();
		      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
		      d3.select("body").style("cursor", eventTarget.style("cursor"));
		      event_({
		        type: "brushstart"
		      });
		      brushmove();
		      function keydown() {
		        if (d3.event.keyCode == 32) {
		          if (!dragging) {
		            center = null;
		            origin[0] -= xExtent[1];
		            origin[1] -= yExtent[1];
		            dragging = 2;
		          }
		          d3_eventPreventDefault();
		        }
		      }
		      function keyup() {
		        if (d3.event.keyCode == 32 && dragging == 2) {
		          origin[0] += xExtent[1];
		          origin[1] += yExtent[1];
		          dragging = 0;
		          d3_eventPreventDefault();
		        }
		      }
		      function brushmove() {
		        var point = d3.mouse(target), moved = false;
		        if (offset) {
		          point[0] += offset[0];
		          point[1] += offset[1];
		        }
		        if (!dragging) {
		          if (d3.event.altKey) {
		            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
		            origin[0] = xExtent[+(point[0] < center[0])];
		            origin[1] = yExtent[+(point[1] < center[1])];
		          } else center = null;
		        }
		        if (resizingX && move1(point, x, 0)) {
		          redrawX(g);
		          moved = true;
		        }
		        if (resizingY && move1(point, y, 1)) {
		          redrawY(g);
		          moved = true;
		        }
		        if (moved) {
		          redraw(g);
		          event_({
		            type: "brush",
		            mode: dragging ? "move" : "resize"
		          });
		        }
		      }
		      function move1(point, scale, i) {
		        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
		        if (dragging) {
		          r0 -= position;
		          r1 -= size + position;
		        }
		        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
		        if (dragging) {
		          max = (min += position) + size;
		        } else {
		          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
		          if (position < min) {
		            max = min;
		            min = position;
		          } else {
		            max = position;
		          }
		        }
		        if (extent[0] != min || extent[1] != max) {
		          if (i) yExtentDomain = null; else xExtentDomain = null;
		          extent[0] = min;
		          extent[1] = max;
		          return true;
		        }
		      }
		      function brushend() {
		        brushmove();
		        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
		        d3.select("body").style("cursor", null);
		        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
		        dragRestore();
		        event_({
		          type: "brushend"
		        });
		      }
		    }
		    brush.x = function(z) {
		      if (!arguments.length) return x;
		      x = z;
		      resizes = d3_svg_brushResizes[!x << 1 | !y];
		      return brush;
		    };
		    brush.y = function(z) {
		      if (!arguments.length) return y;
		      y = z;
		      resizes = d3_svg_brushResizes[!x << 1 | !y];
		      return brush;
		    };
		    brush.clamp = function(z) {
		      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
		      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
		      return brush;
		    };
		    brush.extent = function(z) {
		      var x0, x1, y0, y1, t;
		      if (!arguments.length) {
		        if (x) {
		          if (xExtentDomain) {
		            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
		          } else {
		            x0 = xExtent[0], x1 = xExtent[1];
		            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
		            if (x1 < x0) t = x0, x0 = x1, x1 = t;
		          }
		        }
		        if (y) {
		          if (yExtentDomain) {
		            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
		          } else {
		            y0 = yExtent[0], y1 = yExtent[1];
		            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
		            if (y1 < y0) t = y0, y0 = y1, y1 = t;
		          }
		        }
		        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
		      }
		      if (x) {
		        x0 = z[0], x1 = z[1];
		        if (y) x0 = x0[0], x1 = x1[0];
		        xExtentDomain = [ x0, x1 ];
		        if (x.invert) x0 = x(x0), x1 = x(x1);
		        if (x1 < x0) t = x0, x0 = x1, x1 = t;
		        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
		      }
		      if (y) {
		        y0 = z[0], y1 = z[1];
		        if (x) y0 = y0[1], y1 = y1[1];
		        yExtentDomain = [ y0, y1 ];
		        if (y.invert) y0 = y(y0), y1 = y(y1);
		        if (y1 < y0) t = y0, y0 = y1, y1 = t;
		        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
		      }
		      return brush;
		    };
		    brush.clear = function() {
		      if (!brush.empty()) {
		        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
		        xExtentDomain = yExtentDomain = null;
		      }
		      return brush;
		    };
		    brush.empty = function() {
		      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
		    };
		    return d3.rebind(brush, event, "on");
		  };
		  var d3_svg_brushCursor = {
		    n: "ns-resize",
		    e: "ew-resize",
		    s: "ns-resize",
		    w: "ew-resize",
		    nw: "nwse-resize",
		    ne: "nesw-resize",
		    se: "nwse-resize",
		    sw: "nesw-resize"
		  };
		  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
		  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
		  var d3_time_formatUtc = d3_time_format.utc;
		  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
		  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
		  function d3_time_formatIsoNative(date) {
		    return date.toISOString();
		  }
		  d3_time_formatIsoNative.parse = function(string) {
		    var date = new Date(string);
		    return isNaN(date) ? null : date;
		  };
		  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
		  d3_time.second = d3_time_interval(function(date) {
		    return new d3_date(Math.floor(date / 1e3) * 1e3);
		  }, function(date, offset) {
		    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
		  }, function(date) {
		    return date.getSeconds();
		  });
		  d3_time.seconds = d3_time.second.range;
		  d3_time.seconds.utc = d3_time.second.utc.range;
		  d3_time.minute = d3_time_interval(function(date) {
		    return new d3_date(Math.floor(date / 6e4) * 6e4);
		  }, function(date, offset) {
		    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
		  }, function(date) {
		    return date.getMinutes();
		  });
		  d3_time.minutes = d3_time.minute.range;
		  d3_time.minutes.utc = d3_time.minute.utc.range;
		  d3_time.hour = d3_time_interval(function(date) {
		    var timezone = date.getTimezoneOffset() / 60;
		    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
		  }, function(date, offset) {
		    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
		  }, function(date) {
		    return date.getHours();
		  });
		  d3_time.hours = d3_time.hour.range;
		  d3_time.hours.utc = d3_time.hour.utc.range;
		  d3_time.month = d3_time_interval(function(date) {
		    date = d3_time.day(date);
		    date.setDate(1);
		    return date;
		  }, function(date, offset) {
		    date.setMonth(date.getMonth() + offset);
		  }, function(date) {
		    return date.getMonth();
		  });
		  d3_time.months = d3_time.month.range;
		  d3_time.months.utc = d3_time.month.utc.range;
		  function d3_time_scale(linear, methods, format) {
		    function scale(x) {
		      return linear(x);
		    }
		    scale.invert = function(x) {
		      return d3_time_scaleDate(linear.invert(x));
		    };
		    scale.domain = function(x) {
		      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
		      linear.domain(x);
		      return scale;
		    };
		    function tickMethod(extent, count) {
		      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
		      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
		        return d / 31536e6;
		      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
		    }
		    scale.nice = function(interval, skip) {
		      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
		      if (method) interval = method[0], skip = method[1];
		      function skipped(date) {
		        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
		      }
		      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
		        floor: function(date) {
		          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
		          return date;
		        },
		        ceil: function(date) {
		          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
		          return date;
		        }
		      } : interval));
		    };
		    scale.ticks = function(interval, skip) {
		      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
		        range: interval
		      }, skip ];
		      if (method) interval = method[0], skip = method[1];
		      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
		    };
		    scale.tickFormat = function() {
		      return format;
		    };
		    scale.copy = function() {
		      return d3_time_scale(linear.copy(), methods, format);
		    };
		    return d3_scale_linearRebind(scale, linear);
		  }
		  function d3_time_scaleDate(t) {
		    return new Date(t);
		  }
		  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
		  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
		  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
		    return d.getMilliseconds();
		  } ], [ ":%S", function(d) {
		    return d.getSeconds();
		  } ], [ "%I:%M", function(d) {
		    return d.getMinutes();
		  } ], [ "%I %p", function(d) {
		    return d.getHours();
		  } ], [ "%a %d", function(d) {
		    return d.getDay() && d.getDate() != 1;
		  } ], [ "%b %d", function(d) {
		    return d.getDate() != 1;
		  } ], [ "%B", function(d) {
		    return d.getMonth();
		  } ], [ "%Y", d3_true ] ]);
		  var d3_time_scaleMilliseconds = {
		    range: function(start, stop, step) {
		      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
		    },
		    floor: d3_identity,
		    ceil: d3_identity
		  };
		  d3_time_scaleLocalMethods.year = d3_time.year;
		  d3_time.scale = function() {
		    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
		  };
		  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
		    return [ m[0].utc, m[1] ];
		  });
		  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
		    return d.getUTCMilliseconds();
		  } ], [ ":%S", function(d) {
		    return d.getUTCSeconds();
		  } ], [ "%I:%M", function(d) {
		    return d.getUTCMinutes();
		  } ], [ "%I %p", function(d) {
		    return d.getUTCHours();
		  } ], [ "%a %d", function(d) {
		    return d.getUTCDay() && d.getUTCDate() != 1;
		  } ], [ "%b %d", function(d) {
		    return d.getUTCDate() != 1;
		  } ], [ "%B", function(d) {
		    return d.getUTCMonth();
		  } ], [ "%Y", d3_true ] ]);
		  d3_time_scaleUtcMethods.year = d3_time.year.utc;
		  d3_time.scale.utc = function() {
		    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
		  };
		  d3.text = d3_xhrType(function(request) {
		    return request.responseText;
		  });
		  d3.json = function(url, callback) {
		    return d3_xhr(url, "application/json", d3_json, callback);
		  };
		  function d3_json(request) {
		    return JSON.parse(request.responseText);
		  }
		  d3.html = function(url, callback) {
		    return d3_xhr(url, "text/html", d3_html, callback);
		  };
		  function d3_html(request) {
		    var range = d3_document.createRange();
		    range.selectNode(d3_document.body);
		    return range.createContextualFragment(request.responseText);
		  }
		  d3.xml = d3_xhrType(function(request) {
		    return request.responseXML;
		  });
		  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
		}();

	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.NVD3Chart = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _twoAxisFocus = __webpack_require__(8);

		var _twoAxisFocus2 = _interopRequireDefault(_twoAxisFocus);

		var _pieChart = __webpack_require__(10);

		var _pieChart2 = _interopRequireDefault(_pieChart);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var NVD3Factory = function NVD3Factory(type, options) {
		    var chart;

		    if (typeof NVD3Factory[type] != 'function') {
		        throw new Error(type + ' is not a valid NVD3 type.');
		    }
		    NVD3Factory.prototype = NVD3Factory[type].prototype;
		    chart = new NVD3Factory[type]();
		    chart.initialize(options);
		    return chart;
		};
		NVD3Factory.TwoAxisFocus = _twoAxisFocus2.default;
		NVD3Factory.PieChart = _pieChart2.default;

		var NVD3Chart = exports.NVD3Chart = function (_React$Component) {
		    _inherits(NVD3Chart, _React$Component);

		    function NVD3Chart(props) {
		        _classCallCheck(this, NVD3Chart);

		        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NVD3Chart).call(this, props));

		        _this.state = {
		            chart: null
		        };
		        return _this;
		    }

		    _createClass(NVD3Chart, [{
		        key: 'componentWillMount',
		        value: function componentWillMount() {
		            this.setState({
		                chart: this._initialize(this.state.chart)
		            });
		        }
		    }, {
		        key: '_initialize',
		        value: function _initialize(chart) {
		            chart = NVD3Factory(this.props.options.type, this.props.options);

		            chart.get(this.props.options.chartid, this.props.options.url, this.props.options.init_params);

		            return chart;
		        }
		    }, {
		        key: '_update',
		        value: function _update(params) {
		            this.state.chart.get(this.props.options.chartid, this.props.options.url, params);
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            return _react2.default.createElement(
		                'div',
		                { id: this.props.options.chartid },
		                _react2.default.createElement('svg', null)
		            );
		        }
		    }]);

		    return NVD3Chart;
		}(_react2.default.Component);

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});

		var _d = __webpack_require__(6);

		var _d2 = _interopRequireDefault(_d);

		var _nvd = __webpack_require__(9);

		var _nvd2 = _interopRequireDefault(_nvd);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// Adapted from nvd3.org Line With View Finder
		// http://nvd3.org/examples/lineWithFocus.html
		// and multichart http://nvd3.org/examples/linePlusBar.html


		var twoAxisFocusChart = function twoAxisFocusChart() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var yScale1 = _d2.default.scale.linear(),
		        yScale2 = _d2.default.scale.linear(),
		        yScaleC = _d2.default.scale.linear(),
		        lines1 = _nvd2.default.models.line().yScale(yScale1),
		        lines2 = _nvd2.default.models.line().yScale(yScale2),
		        linesC = _nvd2.default.models.line().yScale(yScaleC),
		        xAxis = _nvd2.default.models.axis().orient('bottom').tickPadding(5),
		        y1Axis = _nvd2.default.models.axis().scale(yScale1).orient('left'),
		        y2Axis = _nvd2.default.models.axis().scale(yScale2).orient('right'),
		        xCAxis = _nvd2.default.models.axis().orient('bottom').tickPadding(5),
		        yCAxis = _nvd2.default.models.axis().scale(yScaleC).orient('left'),
		        legend = _nvd2.default.models.legend(),
		        brush = _d2.default.svg.brush();

		    var margin = { top: 30, right: 30, bottom: 30, left: 60 },
		        margin2 = { top: 10, right: 30, bottom: 20, left: 60 },
		        color = _nvd2.default.utils.defaultColor(),
		        width = null,
		        height = null,
		        height2 = 100,
		        x,
		        y1,
		        y2,
		        xC,
		        yC,
		        showLegend = true,
		        brushExtent = null,
		        tooltips = true,
		        tooltip = _nvd2.default.models.tooltip()
		    // , tooltip = function(key, x, y, e, graph) {
		    //     return '<h3>' + key + '</h3>' +
		    //         '<p>' +  y + ' at ' + x + '</p>'
		    // }
		    ,
		        noData = "No Data Available.",
		        dispatch = _d2.default.dispatch('tooltipShow', 'tooltipHide', 'brush', 'stateChange', 'changeState'),
		        transitionDuration = 250,
		        state = _nvd2.default.utils.state(),
		        defaultState = null,
		        yDomain1,
		        yDomain2,
		        yDomainC;

		    lines1.clipEdge(true);
		    lines2.clipEdge(true);
		    linesC.interactive(false).clipEdge(true);

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var showTooltip = function showTooltip(e, offsetElement) {
		        var left = e.pos[0] + (offsetElement.offsetLeft || 0),
		            top = e.pos[1] + (offsetElement.offsetTop || 0),
		            x = xAxis.tickFormat()(lines1.x()(e.point, e.pointIndex)),
		            y = y1Axis.tickFormat()(lines1.y()(e.point, e.pointIndex)),
		            content = tooltip(e.series.key, x, y, e, chart);
		    };

		    var stateGetter = function stateGetter(data) {
		        return function () {
		            return {
		                active: data.map(function (d) {
		                    return !d.disabled;
		                })
		            };
		        };
		    };

		    var stateSetter = function stateSetter(data) {
		        return function (state) {
		            if (state.active !== undefined) data.forEach(function (series, i) {
		                series.disabled = !state.active[i];
		            });
		        };
		    };

		    function chart(selection) {
		        selection.each(function (data) {

		            var container = _d2.default.select(this),
		                that = this;
		            _nvd2.default.utils.initSVG(container);
		            var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right,
		                availableHeight1 = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom - height2,
		                availableHeight2 = height2 - margin2.top - margin2.bottom;

		            var dataLines1 = data.filter(function (d) {
		                return d.yAxis == 1;
		            });
		            var dataLines2 = data.filter(function (d) {
		                return d.yAxis == 2;
		            });

		            chart.update = function () {
		                container.transition().duration(transitionDuration).call(chart);
		            };
		            chart.container = this;

		            state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();

		            // DEPRECATED set state.disableddisabled
		            state.disabled = data.map(function (d) {
		                return !!d.disabled;
		            });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array) defaultState[key] = state[key].slice(0);else defaultState[key] = state[key];
		                }
		            }

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function (d) {
		                return d.values.length;
		            }).length) {
		                var noDataText = container.selectAll('.nv-noData').data([noData]);

		                noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');

		                noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight1 / 2).text(function (d) {
		                    return d;
		                });

		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            var series1 = data.filter(function (d) {
		                return !d.disabled && d.yAxis == 1;
		            }).map(function (d) {
		                return d.values.map(function (d, i) {
		                    return { x: d.x, y: d.y };
		                });
		            });

		            var series2 = data.filter(function (d) {
		                return !d.disabled && d.yAxis == 2;
		            }).map(function (d) {
		                return d.values.map(function (d, i) {
		                    return { x: d.x, y: d.y };
		                });
		            });

		            // Setup Scales
		            x = lines1.xScale();
		            y1 = lines1.yScale();
		            y2 = lines2.yScale();
		            xC = linesC.xScale();
		            yC = linesC.yScale();

		            // x.domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))
		            //     .range([0, availableWidth]);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-twoAxisFocusChart').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-twoAxisFocusChart').append('g');
		            var g = wrap.select('g');
		            gEnter.append('g').attr('class', 'legendWrap');

		            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
		            focusEnter.append('g').attr('class', 'nv-x nv-axis');
		            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');
		            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');
		            focusEnter.append('g').attr('class', 'nv-lines1Wrap');
		            focusEnter.append('g').attr('class', 'nv-lines2Wrap');

		            var contextEnter = gEnter.append('g').attr('class', 'nv-context');
		            contextEnter.append('g').attr('class', 'nv-x nv-axis');
		            contextEnter.append('g').attr('class', 'nv-y nv-axis');
		            contextEnter.append('g').attr('class', 'nv-lines1Wrap');
		            contextEnter.append('g').attr('class', 'nv-brushBackground');
		            contextEnter.append('g').attr('class', 'nv-x nv-brush');

		            // Legend
		            var color_array = data.map(function (d, i) {
		                return data[i].color || color(d, i);
		            });

		            if (showLegend) {
		                legend.color(color_array);
		                legend.width(availableWidth / 2);

		                g.select('.legendWrap').datum(data.map(function (series) {
		                    series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
		                    series.key = series.originalKey + (series.yAxis == 1 ? '' : ' (right axis)');
		                    return series;
		                })).call(legend);

		                if (margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight1 = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom - height2;
		                    availableHeight2 = height2 - margin2.top - margin2.bottom;
		                    // availableHeight = (height || parseInt(container.style('height')) || 400)
		                    //     - margin.top - margin.bottom;
		                }

		                g.select('.legendWrap').attr('transform', 'translate(' + availableWidth / 2 + ',' + -margin.top + ')');
		            }

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            // Main Chart Component(s)
		            lines1.width(availableWidth).height(availableHeight1).color(color_array.filter(function (d, i) {
		                return !data[i].disabled && data[i].yAxis == 1;
		            }));
		            lines2.width(availableWidth).height(availableHeight1).color(color_array.filter(function (d, i) {
		                return !data[i].disabled && data[i].yAxis == 2;
		            }));
		            linesC.width(availableWidth).height(availableHeight2).color(color_array.filter(function (d, i) {
		                return data[i].yAxis == 2;
		            }));

		            g.select('.nv-context').attr('transform', 'translate(0,' + (availableHeight1 + margin.bottom + margin2.top) + ')');

		            yScale1.domain(yDomain1 || _d2.default.extent(series1, function (d) {
		                return d.y;
		            })).range([0, availableHeight1]);

		            yScale2.domain(yDomain2 || _d2.default.extent(series2, function (d) {
		                return d.y;
		            })).range([0, availableHeight1]);

		            yScaleC.domain(yDomainC || _d2.default.extent(series2, function (d) {
		                return d.y;
		            })).range([availableHeight2, 0]);

		            lines1.yDomain(yScale1.domain());
		            lines2.yDomain(yScale2.domain());
		            linesC.yDomain(yScaleC.domain());

		            var context1LinesWrap = g.select('.nv-context .nv-lines1Wrap').datum(dataLines2);

		            if (dataLines2.length) {
		                _d2.default.transition(context1LinesWrap).call(linesC);
		            }

		            // Setup Main (Focus) Axes
		            xAxis.scale(x).ticks(_nvd2.default.utils.calcTicksX(availableWidth / 100, dataLines1)).tickSize(-availableHeight1, 0);

		            y1Axis.ticks(_nvd2.default.utils.calcTicksY(availableHeight1 / 36, dataLines1)).tickSize(-availableWidth, 0);

		            y2Axis.ticks(_nvd2.default.utils.calcTicksY(availableHeight1 / 36, dataLines2)).tickSize(-availableWidth, 0);

		            g.select('.nv-focus .nv-x.nv-axis').attr('transform', 'translate(0,' + availableHeight1 + ')');

		            function mouseover_line(evt) {
		                var yaxis = data[evt.seriesIndex].yAxis === 2 ? y2Axis : y1Axis;
		                evt.value = evt.point.x;
		                evt.series = {
		                    value: evt.point.y,
		                    color: evt.point.color
		                };
		                tooltip.duration(100).valueFormatter(function (d, i) {
		                    return yaxis.tickFormat()(d, i);
		                }).data(evt).position(evt.pos).hidden(false);
		            }

		            // Setup Brush
		            brush.x(xC).on('brush', function () {
		                //When brushing, turn off transitions because chart needs to change immediately.
		                var oldTransition = chart.duration();
		                chart.duration(0);
		                onBrush();
		                chart.duration(oldTransition);
		            });

		            if (brushExtent) brush.extent(brushExtent);

		            var brushBG = g.select('.nv-brushBackground').selectAll('g').data([brushExtent || brush.extent()]);

		            var brushBGenter = brushBG.enter().append('g');

		            brushBGenter.append('rect').attr('class', 'left').attr('x', 0).attr('y', 0).attr('height', availableHeight2);

		            brushBGenter.append('rect').attr('class', 'right').attr('x', 0).attr('y', 0).attr('height', availableHeight2);

		            var gBrush = g.select('.nv-x.nv-brush').call(brush);
		            gBrush.selectAll('rect')
		            //.attr('y', -5)
		            .attr('height', availableHeight2);
		            gBrush.selectAll('.resize').append('path').attr('d', resizePath);

		            onBrush();

		            // Setup Secondary (Context) Axes
		            xCAxis.scale(xC).ticks(_nvd2.default.utils.calcTicksX(availableWidth / 100, dataLines2)).tickSize(-availableHeight2, 0);

		            g.select('.nv-context .nv-x.nv-axis').attr('transform', 'translate(0,' + yScaleC.range()[0] + ')');
		            _d2.default.transition(g.select('.nv-context .nv-x.nv-axis')).call(xCAxis);

		            yCAxis.ticks(_nvd2.default.utils.calcTicksY(availableHeight2 / 36, dataLines2)).tickSize(-availableWidth, 0);

		            _d2.default.transition(g.select('.nv-context .nv-y.nv-axis')).call(yCAxis);

		            // g.select('.nv-context .nv-y.nv-axis').transition().duration(transitionDuration)
		            //         .call(yCAxis);

		            g.select('.nv-context .nv-x.nv-axis').attr('transform', 'translate(0,' + yScaleC.range()[0] + ')');

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            legend.dispatch.on('stateChange', function (newState) {
		                for (var key in newState) {
		                    state[key] = newState[key];
		                }dispatch.stateChange(state);
		                chart.update();
		            });

		            // dispatch.on('tooltipShow', function(e) {
		            //     if (tooltips) showTooltip(e, that.parentNode);
		            // });

		            dispatch.on('changeState', function (e) {
		                if (typeof e.disabled !== 'undefined') {
		                    data.forEach(function (series, i) {
		                        series.disabled = e.disabled[i];
		                    });
		                }
		                chart.update();
		            });

		            //============================================================
		            // Functions
		            //------------------------------------------------------------

		            // Taken from crossfilter (http://square.github.com/crossfilter/)
		            function resizePath(d) {
		                var e = +(d == 'e'),
		                    x = e ? 1 : -1,
		                    y = availableHeight2 / 3;
		                return 'M' + .5 * x + ',' + y + 'A6,6 0 0 ' + e + ' ' + 6.5 * x + ',' + (y + 6) + 'V' + (2 * y - 6) + 'A6,6 0 0 ' + e + ' ' + .5 * x + ',' + 2 * y + 'Z' + 'M' + 2.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8) + 'M' + 4.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8);
		            }

		            function updateBrushBG() {
		                if (!brush.empty()) brush.extent(brushExtent);
		                brushBG.data([brush.empty() ? xC.domain() : brushExtent]).each(function (d, i) {
		                    var leftWidth = xC(d[0]) - x.range()[0],
		                        rightWidth = x.range()[1] - xC(d[1]);
		                    _d2.default.select(this).select('.left').attr('width', leftWidth < 0 ? 0 : leftWidth);

		                    _d2.default.select(this).select('.right').attr('x', xC(d[1])).attr('width', rightWidth < 0 ? 0 : rightWidth);
		                });
		            }

		            function onBrush() {
		                brushExtent = brush.empty() ? null : brush.extent();
		                var extent = brush.empty() ? xC.domain() : brush.extent();

		                //The brush extent cannot be less than one.  If it is, don't update the line chart.
		                if (Math.abs(extent[0] - extent[1]) <= 1) {
		                    return;
		                }

		                dispatch.brush({ extent: extent, brush: brush });

		                updateBrushBG();

		                // Update Main (Focus)
		                var focusLines1Wrap = g.select('.nv-focus .nv-lines1Wrap').datum(dataLines1.filter(function (d) {
		                    return !d.disabled;
		                }).map(function (d, i) {
		                    return {
		                        key: d.key,
		                        area: d.area,
		                        values: d.values.filter(function (d, i) {
		                            return lines1.x()(d, i) >= extent[0] && lines1.x()(d, i) <= extent[1];
		                        })
		                    };
		                }));

		                var focusLines2Wrap = g.select('.nv-focus .nv-lines2Wrap').datum(dataLines2.filter(function (d) {
		                    return !d.disabled;
		                }).map(function (d, i) {
		                    return {
		                        key: d.key,
		                        area: d.area,
		                        values: d.values.filter(function (d, i) {
		                            return lines2.x()(d, i) >= extent[0] && lines2.x()(d, i) <= extent[1];
		                        })
		                    };
		                }));
		                focusLines1Wrap.transition().duration(transitionDuration).call(lines1);
		                focusLines2Wrap.transition().duration(transitionDuration).call(lines2);

		                // Update Main (Focus) Axes
		                g.select('.nv-focus .nv-x.nv-axis').transition().duration(transitionDuration).call(xAxis);
		                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration).call(y1Axis);
		                g.select('.nv-focus .nv-y2.nv-axis').attr('transform', 'translate(' + x.range()[1] + ',0)').transition().duration(transitionDuration).call(y2Axis);
		            }
		            lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);
		            lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);
		            lines1.dispatch.on('elementMouseout.tooltip', function (evt) {
		                tooltip.hidden(true);
		            });
		            lines2.dispatch.on('elementMouseout.tooltip', function (evt) {
		                tooltip.hidden(true);
		            });
		        });

		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    // lines1.dispatch.on('elementMouseover.tooltip', function(e) {
		    //     e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];
		    //     dispatch.tooltipShow(e);
		    // });

		    // lines1.dispatch.on('elementMouseout.tooltip', function(e) {
		    //     dispatch.tooltipHide(e);
		    // });

		    // lines2.dispatch.on('elementMouseover.tooltip', function(e) {
		    //     e.pos = [e.pos[0] +  margin.left, e.pos[1] + margin.top];
		    //     dispatch.tooltipShow(e);
		    // });

		    // lines2.dispatch.on('elementMouseout.tooltip', function(e) {
		    //     dispatch.tooltipHide(e);
		    // });

		    // dispatch.on('tooltipHide', function() {
		    //     if (tooltips) nv.tooltip.cleanup();
		    // });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.legend = legend;
		    chart.lines1 = lines1;
		    chart.lines2 = lines2;
		    chart.linesC = linesC;
		    chart.xAxis = xAxis;
		    chart.y1Axis = y1Axis;
		    chart.y2Axis = y2Axis;
		    chart.xCAxis = xCAxis;
		    chart.yCAxis = yCAxis;

		    chart.options = _nvd2.default.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width: { get: function get() {
		                return width;
		            }, set: function set(_) {
		                width = _;
		            } },
		        height: { get: function get() {
		                return height;
		            }, set: function set(_) {
		                height = _;
		            } },
		        focusHeight: { get: function get() {
		                return height2;
		            }, set: function set(_) {
		                height2 = _;
		            } },
		        showLegend: { get: function get() {
		                return showLegend;
		            }, set: function set(_) {
		                showLegend = _;
		            } },
		        yDomain1: { get: function get() {
		                return yDomain1;
		            }, set: function set(_) {
		                yDomain1 = _;
		            } },
		        yDomain2: { get: function get() {
		                return yDomain2;
		            }, set: function set(_) {
		                yDomain2 = _;
		            } },
		        yDomainC: { get: function get() {
		                return yDomainC;
		            }, set: function set(_) {
		                yDomainC = _;
		            } },
		        brushExtent: { get: function get() {
		                return brushExtent;
		            }, set: function set(_) {
		                brushExtent = _;
		            } },
		        tooltips: { get: function get() {
		                return tooltips;
		            }, set: function set(_) {
		                tooltips = _;
		            } },
		        tooltipContent: { get: function get() {
		                return tooltip;
		            }, set: function set(_) {
		                tooltip = _;
		            } },
		        defaultState: { get: function get() {
		                return defaultState;
		            }, set: function set(_) {
		                defaultState = _;
		            } },
		        noData: { get: function get() {
		                return noData;
		            }, set: function set(_) {
		                noData = _;
		            } },

		        // options that require extra logic in the setter
		        margin: { get: function get() {
		                return margin;
		            }, set: function set(_) {
		                margin.top = _.top !== undefined ? _.top : margin.top;
		                margin.right = _.right !== undefined ? _.right : margin.right;
		                margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		                margin.left = _.left !== undefined ? _.left : margin.left;
		            } },
		        color: { get: function get() {
		                return color;
		            }, set: function set(_) {
		                color = _nvd2.default.utils.getColor(_);
		                legend.color(color);
		                // line color is handled above?
		            } },
		        interpolate: { get: function get() {
		                return lines1.interpolate();
		            }, set: function set(_) {
		                lines1.interpolate(_);
		                lines2.interpolate(_);
		                linesC.interpolate(_);
		            } },
		        xTickFormat: { get: function get() {
		                return xAxis.xTickFormat();
		            }, set: function set(_) {
		                xAxis.xTickFormat(_);
		                xCAxis.xTickFormat(_);
		            } },
		        yTickFormat: { get: function get() {
		                return y1Axis.yTickFormat();
		            }, set: function set(_) {
		                y1Axis.yTickFormat(_);
		                y2Axis.yTickFormat(_);
		                yCAxis.yTickFormat(_);
		            } },
		        duration: { get: function get() {
		                return transitionDuration;
		            }, set: function set(_) {
		                transitionDuration = _;
		                y1Axis.duration(transitionDuration);
		                y2Axis.duration(transitionDuration);
		                yCAxis.duration(transitionDuration);
		                xAxis.duration(transitionDuration);
		            } },
		        x: { get: function get() {
		                return lines.x();
		            }, set: function set(_) {
		                lines1.x(_);
		                lines2.x(_);
		                linesC.x(_);
		            } },
		        y: { get: function get() {
		                return lines.y();
		            }, set: function set(_) {
		                lines1.y(_);
		                lines2.y(_);
		                linesC.y(_);
		            } }
		    });

		    _nvd2.default.utils.initOptions(chart);

		    return chart;
		};

		var TwoAxisFocus = function TwoAxisFocus() {
		    this.chart = twoAxisFocusChart();
		};

		TwoAxisFocus.prototype.initialize = function (options) {
		    this.chart.margin(options.margin).color(options.colors);

		    this.chart.lines1.interpolate('monotone');
		    this.chart.lines2.interpolate('monotone');
		    this.chart.linesC.interpolate('monotone');

		    this.chart.xAxis.showMaxMin(false).axisLabel(options.labels.xAxis).tickFormat(function (d) {
		        return _d2.default.time.format('%X')(new Date(d));
		    });

		    this.chart.xCAxis.showMaxMin(false).axisLabel(options.labels.xAxis).tickFormat(function (d) {
		        return _d2.default.time.format('%X')(new Date(d));
		    });

		    this.chart.y1Axis.axisLabel(options.labels.yAxis1).tickFormat(_d2.default.format(',.2f'));

		    this.chart.y2Axis.axisLabel(options.labels.yAxis2).tickFormat(_d2.default.format(',.2f'));

		    this.chart.yCAxis.axisLabel(options.labels.yAxis2).tickFormat(_d2.default.format(',.2f'));
		};

		TwoAxisFocus.prototype.get = function (chartid, url, params) {
		    _d2.default.json(url.concat("?", $.param(params)), function (error, result) {
		        result.data.forEach(function (d) {
		            d.values.forEach(function (v) {
		                v.x = new Date(v.x * 1000);
		            });
		        });
		        this.chart.yDomain1(result.yAxis1.bounds);
		        this.chart.yDomain2(result.yAxis2.bounds);
		        this.chart.yDomainC(result.yAxis2.bounds);
		        _d2.default.select("#".concat(chartid, " svg")).datum(result.data).call(this.chart);
		        _nvd2.default.utils.windowResize(this.chart.update);
		    }.bind(this));
		};

		exports.default = TwoAxisFocus;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		/* nvd3 version 1.8.2 (https://github.com/novus/nvd3) 2016-01-24 */
		(function(){

		// set up main nv object
		var nv = {};

		// the major global objects under the nv namespace
		nv.dev = false; //set false when in production
		nv.tooltip = nv.tooltip || {}; // For the tooltip system
		nv.utils = nv.utils || {}; // Utility subsystem
		nv.models = nv.models || {}; //stores all the possible models/components
		nv.charts = {}; //stores all the ready to use charts
		nv.logs = {}; //stores some statistics and potential error messages
		nv.dom = {}; //DOM manipulation functions

		nv.dispatch = d3.dispatch('render_start', 'render_end');

		// Function bind polyfill
		// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment
		// https://github.com/ariya/phantomjs/issues/10522
		// http://kangax.github.io/compat-table/es5/#Function.prototype.bind
		// phantomJS is used for running the test suite
		if (!Function.prototype.bind) {
		    Function.prototype.bind = function (oThis) {
		        if (typeof this !== "function") {
		            // closest thing possible to the ECMAScript 5 internal IsCallable function
		            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
		        }

		        var aArgs = Array.prototype.slice.call(arguments, 1),
		            fToBind = this,
		            fNOP = function () {},
		            fBound = function () {
		                return fToBind.apply(this instanceof fNOP && oThis
		                        ? this
		                        : oThis,
		                    aArgs.concat(Array.prototype.slice.call(arguments)));
		            };

		        fNOP.prototype = this.prototype;
		        fBound.prototype = new fNOP();
		        return fBound;
		    };
		}

		//  Development render timers - disabled if dev = false
		if (nv.dev) {
		    nv.dispatch.on('render_start', function(e) {
		        nv.logs.startTime = +new Date();
		    });

		    nv.dispatch.on('render_end', function(e) {
		        nv.logs.endTime = +new Date();
		        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;
		        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times
		    });
		}

		// Logs all arguments, and returns the last so you can test things in place
		// Note: in IE8 console.log is an object not a function, and if modernizr is used
		// then calling Function.prototype.bind with with anything other than a function
		// causes a TypeError to be thrown.
		nv.log = function() {
		    if (nv.dev && window.console && console.log && console.log.apply)
		        console.log.apply(console, arguments);
		    else if (nv.dev && window.console && typeof console.log == "function" && Function.prototype.bind) {
		        var log = Function.prototype.bind.call(console.log, console);
		        log.apply(console, arguments);
		    }
		    return arguments[arguments.length - 1];
		};

		// print console warning, should be used by deprecated functions
		nv.deprecated = function(name, info) {
		    if (console && console.warn) {
		        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');
		    }
		};

		// The nv.render function is used to queue up chart rendering
		// in non-blocking async functions.
		// When all queued charts are done rendering, nv.dispatch.render_end is invoked.
		nv.render = function render(step) {
		    // number of graphs to generate in each timeout loop
		    step = step || 1;

		    nv.render.active = true;
		    nv.dispatch.render_start();

		    var renderLoop = function() {
		        var chart, graph;

		        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {
		            chart = graph.generate();
		            if (typeof graph.callback == typeof(Function)) graph.callback(chart);
		        }

		        nv.render.queue.splice(0, i);

		        if (nv.render.queue.length) {
		            setTimeout(renderLoop);
		        }
		        else {
		            nv.dispatch.render_end();
		            nv.render.active = false;
		        }
		    };

		    setTimeout(renderLoop);
		};

		nv.render.active = false;
		nv.render.queue = [];

		/*
		Adds a chart to the async rendering queue. This method can take arguments in two forms:
		nv.addGraph({
		    generate: <Function>
		    callback: <Function>
		})

		or

		nv.addGraph(<generate Function>, <callback Function>)

		The generate function should contain code that creates the NVD3 model, sets options
		on it, adds data to an SVG element, and invokes the chart model. The generate function
		should return the chart model.  See examples/lineChart.html for a usage example.

		The callback function is optional, and it is called when the generate function completes.
		*/
		nv.addGraph = function(obj) {
		    if (typeof arguments[0] === typeof(Function)) {
		        obj = {generate: arguments[0], callback: arguments[1]};
		    }

		    nv.render.queue.push(obj);

		    if (!nv.render.active) {
		        nv.render();
		    }
		};

		// Node/CommonJS exports
		if (true) {
		  module.exports = nv;
		}

		if (typeof(window) !== 'undefined') {
		  window.nv = nv;
		}
		/* Facade for queueing DOM write operations
		 * with Fastdom (https://github.com/wilsonpage/fastdom)
		 * if available.
		 * This could easily be extended to support alternate
		 * implementations in the future.
		 */
		nv.dom.write = function(callback) {
			if (window.fastdom !== undefined) {
				return fastdom.write(callback);
			}
			return callback();
		};

		/* Facade for queueing DOM read operations
		 * with Fastdom (https://github.com/wilsonpage/fastdom)
		 * if available.
		 * This could easily be extended to support alternate
		 * implementations in the future.
		 */
		nv.dom.read = function(callback) {
			if (window.fastdom !== undefined) {
				return fastdom.read(callback);
			}
			return callback();
		};/* Utility class to handle creation of an interactive layer.
		 This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch
		 containing the X-coordinate. It can also render a vertical line where the mouse is located.

		 dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over
		 the rectangle. The dispatch is given one object which contains the mouseX/Y location.
		 It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.
		 */
		nv.interactiveGuideline = function() {
		    "use strict";

		    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.
		        ,   width = null
		        ,   height = null
		        ,   xScale = d3.scale.linear()
		        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')
		        ,   showGuideLine = true
		        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.
		        ,   tooltip = nv.models.tooltip()
		        ,   isMSIE = "ActiveXObject" in window // Checkt if IE by looking for activeX.
		    ;

		    tooltip
		        .duration(0)
		        .hideDelay(0)
		        .hidden(false);

		    function layer(selection) {
		        selection.each(function(data) {
		            var container = d3.select(this);
		            var availableWidth = (width || 960), availableHeight = (height || 400);
		            var wrap = container.selectAll("g.nv-wrap.nv-interactiveLineLayer")
		                .data([data]);
		            var wrapEnter = wrap.enter()
		                .append("g").attr("class", " nv-wrap nv-interactiveLineLayer");
		            wrapEnter.append("g").attr("class","nv-interactiveGuideLine");

		            if (!svgContainer) {
		                return;
		            }

		            function mouseHandler() {
		                var d3mouse = d3.mouse(this);
		                var mouseX = d3mouse[0];
		                var mouseY = d3mouse[1];
		                var subtractMargin = true;
		                var mouseOutAnyReason = false;
		                if (isMSIE) {
		                    /*
		                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.
		                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving
		                     over a rect in IE 10.
		                     However, d3.event.offsetX/Y also returns the mouse coordinates
		                     relative to the triggering <rect>. So we use offsetX/Y on IE.
		                     */
		                    mouseX = d3.event.offsetX;
		                    mouseY = d3.event.offsetY;

		                    /*
		                     On IE, if you attach a mouse event listener to the <svg> container,
		                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).
		                     When this happens on IE, the offsetX/Y is set to where ever the child element
		                     is located.
		                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y
		                     position under this scenario. Removing the line below *will* cause
		                     the interactive layer to not work right on IE.
		                     */
		                    if(d3.event.target.tagName !== "svg") {
		                        subtractMargin = false;
		                    }

		                    if (d3.event.target.className.baseVal.match("nv-legend")) {
		                        mouseOutAnyReason = true;
		                    }

		                }

		                if(subtractMargin) {
		                    mouseX -= margin.left;
		                    mouseY -= margin.top;
		                }

		                /* If mouseX/Y is outside of the chart's bounds,
		                 trigger a mouseOut event.
		                 */
		                if (mouseX < 0 || mouseY < 0
		                    || mouseX > availableWidth || mouseY > availableHeight
		                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)
		                    || mouseOutAnyReason
		                    ) {

		                    if (isMSIE) {
		                        if (d3.event.relatedTarget
		                            && d3.event.relatedTarget.ownerSVGElement === undefined
		                            && (d3.event.relatedTarget.className === undefined
		                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {

		                            return;
		                        }
		                    }
		                    dispatch.elementMouseout({
		                        mouseX: mouseX,
		                        mouseY: mouseY
		                    });
		                    layer.renderGuideLine(null); //hide the guideline
		                    tooltip.hidden(true);
		                    return;
		                } else {
		                    tooltip.hidden(false);
		                }


		                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';
		                var pointXValue = undefined;

		                // Ordinal scale has no invert method
		                if (scaleIsOrdinal) {
		                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;
		                    // Check if mouseX is in the range band
		                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {
		                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];
		                    }
		                    else {
		                        dispatch.elementMouseout({
		                            mouseX: mouseX,
		                            mouseY: mouseY
		                        });
		                        layer.renderGuideLine(null); //hide the guideline
		                        tooltip.hidden(true);
		                        return;
		                    }
		                }
		                else {
		                    pointXValue = xScale.invert(mouseX);
		                }

		                dispatch.elementMousemove({
		                    mouseX: mouseX,
		                    mouseY: mouseY,
		                    pointXValue: pointXValue
		                });

		                //If user double clicks the layer, fire a elementDblclick
		                if (d3.event.type === "dblclick") {
		                    dispatch.elementDblclick({
		                        mouseX: mouseX,
		                        mouseY: mouseY,
		                        pointXValue: pointXValue
		                    });
		                }

		                // if user single clicks the layer, fire elementClick
		                if (d3.event.type === 'click') {
		                    dispatch.elementClick({
		                        mouseX: mouseX,
		                        mouseY: mouseY,
		                        pointXValue: pointXValue
		                    });
		                }

		                // if user presses mouse down the layer, fire elementMouseDown
		                if (d3.event.type === 'mousedown') {
		                	dispatch.elementMouseDown({
		                		mouseX: mouseX,
		                		mouseY: mouseY,
		                		pointXValue: pointXValue
		                	});
		                }

		                // if user presses mouse down the layer, fire elementMouseUp
		                if (d3.event.type === 'mouseup') {
		                	dispatch.elementMouseUp({
		                		mouseX: mouseX,
		                		mouseY: mouseY,
		                		pointXValue: pointXValue
		                	});
		                }
		            }

		            svgContainer
		                .on("touchmove",mouseHandler)
		                .on("mousemove",mouseHandler, true)
		                .on("mouseout" ,mouseHandler,true)
		                .on("mousedown" ,mouseHandler,true)
		                .on("mouseup" ,mouseHandler,true)
		                .on("dblclick" ,mouseHandler)
		                .on("click", mouseHandler)
		            ;

		            layer.guideLine = null;
		            //Draws a vertical guideline at the given X postion.
		            layer.renderGuideLine = function(x) {
		                if (!showGuideLine) return;
		                if (layer.guideLine && layer.guideLine.attr("x1") === x) return;
		                nv.dom.write(function() {
		                    var line = wrap.select(".nv-interactiveGuideLine")
		                        .selectAll("line")
		                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);
		                    line.enter()
		                        .append("line")
		                        .attr("class", "nv-guideline")
		                        .attr("x1", function(d) { return d;})
		                        .attr("x2", function(d) { return d;})
		                        .attr("y1", availableHeight)
		                        .attr("y2",0);
		                    line.exit().remove();
		                });
		            }
		        });
		    }

		    layer.dispatch = dispatch;
		    layer.tooltip = tooltip;

		    layer.margin = function(_) {
		        if (!arguments.length) return margin;
		        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;
		        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;
		        return layer;
		    };

		    layer.width = function(_) {
		        if (!arguments.length) return width;
		        width = _;
		        return layer;
		    };

		    layer.height = function(_) {
		        if (!arguments.length) return height;
		        height = _;
		        return layer;
		    };

		    layer.xScale = function(_) {
		        if (!arguments.length) return xScale;
		        xScale = _;
		        return layer;
		    };

		    layer.showGuideLine = function(_) {
		        if (!arguments.length) return showGuideLine;
		        showGuideLine = _;
		        return layer;
		    };

		    layer.svgContainer = function(_) {
		        if (!arguments.length) return svgContainer;
		        svgContainer = _;
		        return layer;
		    };

		    return layer;
		};

		/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.
		 This is different from normal bisectLeft; this function finds the nearest index to insert the search value.

		 For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.
		 Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5
		 because 28 is closer to 30 than 10.

		 Unit tests can be found in: interactiveBisectTest.html

		 Has the following known issues:
		 * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.
		 * Won't work if there are duplicate x coordinate values.
		 */
		nv.interactiveBisect = function (values, searchVal, xAccessor) {
		    "use strict";
		    if (! (values instanceof Array)) {
		        return null;
		    }
		    var _xAccessor;
		    if (typeof xAccessor !== 'function') {
		        _xAccessor = function(d) {
		            return d.x;
		        }
		    } else {
		        _xAccessor = xAccessor;
		    }
		    var _cmp = function(d, v) {
		        // Accessors are no longer passed the index of the element along with
		        // the element itself when invoked by d3.bisector.
		        //
		        // Starting at D3 v3.4.4, d3.bisector() started inspecting the
		        // function passed to determine if it should consider it an accessor
		        // or a comparator. This meant that accessors that take two arguments
		        // (expecting an index as the second parameter) are treated as
		        // comparators where the second argument is the search value against
		        // which the first argument is compared.
		        return _xAccessor(d) - v;
		    };

		    var bisect = d3.bisector(_cmp).left;
		    var index = d3.max([0, bisect(values,searchVal) - 1]);
		    var currentValue = _xAccessor(values[index]);

		    if (typeof currentValue === 'undefined') {
		        currentValue = index;
		    }

		    if (currentValue === searchVal) {
		        return index; //found exact match
		    }

		    var nextIndex = d3.min([index+1, values.length - 1]);
		    var nextValue = _xAccessor(values[nextIndex]);

		    if (typeof nextValue === 'undefined') {
		        nextValue = nextIndex;
		    }

		    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {
		        return index;
		    } else {
		        return nextIndex
		    }
		};

		/*
		 Returns the index in the array "values" that is closest to searchVal.
		 Only returns an index if searchVal is within some "threshold".
		 Otherwise, returns null.
		 */
		nv.nearestValueIndex = function (values, searchVal, threshold) {
		    "use strict";
		    var yDistMax = Infinity, indexToHighlight = null;
		    values.forEach(function(d,i) {
		        var delta = Math.abs(searchVal - d);
		        if ( d != null && delta <= yDistMax && delta < threshold) {
		            yDistMax = delta;
		            indexToHighlight = i;
		        }
		    });
		    return indexToHighlight;
		};

		/* Model which can be instantiated to handle tooltip rendering.
		 Example usage:
		 var tip = nv.models.tooltip().gravity('w').distance(23)
		 .data(myDataObject);

		 tip();    //just invoke the returned function to render tooltip.
		 */
		nv.models.tooltip = function() {
		    "use strict";

		    /*
		    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.
		    Example Format of data:
		    {
		        key: "Date",
		        value: "August 2009",
		        series: [
		            {key: "Series 1", value: "Value 1", color: "#000"},
		            {key: "Series 2", value: "Value 2", color: "#00f"}
		        ]
		    }
		    */
		    var id = "nvtooltip-" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.
		        ,   data = null
		        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.
		        ,   distance = 25 // Distance to offset tooltip from the mouse location.
		        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)
		        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.
		        ,   chartContainer = null // Parent dom element of the SVG that holds the chart.
		        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.
		        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().
		        ,   tooltip = null // d3 select of the tooltip div.
		        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.
		        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.
		        ,   duration = 100 // Tooltip movement duration, in ms.
		        ,   headerEnabled = true // If is to show the tooltip header.
		        ,   nvPointerEventsClass = "nv-pointer-events-none" // CSS class to specify whether element should not have mouse events.
		    ;

		    /*
		     Function that returns the position (relative to the viewport) the tooltip should be placed in.
		     Should return: {
		        left: <leftPos>,
		        top: <topPos>
		     }
		     */
		    var position = function() {
		        return {
		            left: d3.event !== null ? d3.event.clientX : 0,
		            top: d3.event !== null ? d3.event.clientY : 0
		        };
		    };

		    // Format function for the tooltip values column.
		    var valueFormatter = function(d, i) {
		        return d;
		    };

		    // Format function for the tooltip header value.
		    var headerFormatter = function(d) {
		        return d;
		    };

		    var keyFormatter = function(d, i) {
		        return d;
		    };

		    // By default, the tooltip model renders a beautiful table inside a DIV.
		    // You can override this function if a custom tooltip is desired.
		    var contentGenerator = function(d) {
		        if (d === null) {
		            return '';
		        }

		        var table = d3.select(document.createElement("table"));
		        if (headerEnabled) {
		            var theadEnter = table.selectAll("thead")
		                .data([d])
		                .enter().append("thead");

		            theadEnter.append("tr")
		                .append("td")
		                .attr("colspan", 3)
		                .append("strong")
		                .classed("x-value", true)
		                .html(headerFormatter(d.value));
		        }

		        var tbodyEnter = table.selectAll("tbody")
		            .data([d])
		            .enter().append("tbody");

		        var trowEnter = tbodyEnter.selectAll("tr")
		                .data(function(p) { return p.series})
		                .enter()
		                .append("tr")
		                .classed("highlight", function(p) { return p.highlight});

		        trowEnter.append("td")
		            .classed("legend-color-guide",true)
		            .append("div")
		            .style("background-color", function(p) { return p.color});

		        trowEnter.append("td")
		            .classed("key",true)
		            .classed("total",function(p) { return !!p.total})
		            .html(function(p, i) { return keyFormatter(p.key, i)});

		        trowEnter.append("td")
		            .classed("value",true)
		            .html(function(p, i) { return valueFormatter(p.value, i) });

		        trowEnter.selectAll("td").each(function(p) {
		            if (p.highlight) {
		                var opacityScale = d3.scale.linear().domain([0,1]).range(["#fff",p.color]);
		                var opacity = 0.6;
		                d3.select(this)
		                    .style("border-bottom-color", opacityScale(opacity))
		                    .style("border-top-color", opacityScale(opacity))
		                ;
		            }
		        });

		        var html = table.node().outerHTML;
		        if (d.footer !== undefined)
		            html += "<div class='footer'>" + d.footer + "</div>";
		        return html;

		    };

		    var dataSeriesExists = function(d) {
		        if (d && d.series) {
		            if (d.series instanceof Array) {
		                return !!d.series.length;
		            }
		            // if object, it's okay just convert to array of the object
		            if (d.series instanceof Object) {
		                d.series = [d.series];
		                return true;
		            }
		        }
		        return false;
		    };

		    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip
		    // relative to the viewport.
		    var calcGravityOffset = function(pos) {
		        var height = tooltip.node().offsetHeight,
		            width = tooltip.node().offsetWidth,
		            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.
		            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.
		            left, top, tmp;

		        // calculate position based on gravity
		        switch (gravity) {
		            case 'e':
		                left = - width - distance;
		                top = - (height / 2);
		                if(pos.left + left < 0) left = distance;
		                if((tmp = pos.top + top) < 0) top -= tmp;
		                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;
		                break;
		            case 'w':
		                left = distance;
		                top = - (height / 2);
		                if (pos.left + left + width > clientWidth) left = - width - distance;
		                if ((tmp = pos.top + top) < 0) top -= tmp;
		                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;
		                break;
		            case 'n':
		                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.
		                top = distance;
		                if (pos.top + top + height > clientHeight) top = - height - distance;
		                if ((tmp = pos.left + left) < 0) left -= tmp;
		                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;
		                break;
		            case 's':
		                left = - (width / 2);
		                top = - height - distance;
		                if (pos.top + top < 0) top = distance;
		                if ((tmp = pos.left + left) < 0) left -= tmp;
		                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;
		                break;
		            case 'center':
		                left = - (width / 2);
		                top = - (height / 2);
		                break;
		            default:
		                left = 0;
		                top = 0;
		                break;
		        }

		        return { 'left': left, 'top': top };
		    };

		    /*
		     Positions the tooltip in the correct place, as given by the position() function.
		     */
		    var positionTooltip = function() {
		        nv.dom.read(function() {
		            var pos = position(),
		                gravityOffset = calcGravityOffset(pos),
		                left = pos.left + gravityOffset.left,
		                top = pos.top + gravityOffset.top;

		            // delay hiding a bit to avoid flickering
		            if (hidden) {
		                tooltip
		                    .interrupt()
		                    .transition()
		                    .delay(hideDelay)
		                    .duration(0)
		                    .style('opacity', 0);
		            } else {
		                // using tooltip.style('transform') returns values un-usable for tween
		                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';
		                var new_translate = 'translate(' + left + 'px, ' + top + 'px)';
		                var translateInterpolator = d3.interpolateString(old_translate, new_translate);
		                var is_hidden = tooltip.style('opacity') < 0.1;

		                tooltip
		                    .interrupt() // cancel running transitions
		                    .transition()
		                    .duration(is_hidden ? 0 : duration)
		                    // using tween since some versions of d3 can't auto-tween a translate on a div
		                    .styleTween('transform', function (d) {
		                        return translateInterpolator;
		                    }, 'important')
		                    // Safari has its own `-webkit-transform` and does not support `transform`
		                    .styleTween('-webkit-transform', function (d) {
		                        return translateInterpolator;
		                    })
		                    .style('-ms-transform', new_translate)
		                    .style('opacity', 1);
		            }

		            lastPosition.left = left;
		            lastPosition.top = top;
		        });
		    };

		    // Creates new tooltip container, or uses existing one on DOM.
		    function initTooltip() {
		        if (!tooltip) {
		            var container = chartContainer ? chartContainer : document.body;

		            // Create new tooltip div if it doesn't exist on DOM.
		            tooltip = d3.select(container).append("div")
		                .attr("class", "nvtooltip " + (classes ? classes : "xy-tooltip"))
		                .attr("id", id);
		            tooltip.style("top", 0).style("left", 0);
		            tooltip.style('opacity', 0);
		            tooltip.style('position', 'fixed');
		            tooltip.selectAll("div, table, td, tr").classed(nvPointerEventsClass, true);
		            tooltip.classed(nvPointerEventsClass, true);
		        }
		    }

		    // Draw the tooltip onto the DOM.
		    function nvtooltip() {
		        if (!enabled) return;
		        if (!dataSeriesExists(data)) return;

		        nv.dom.write(function () {
		            initTooltip();
		            // Generate data and set it into tooltip.
		            // Bonus - If you override contentGenerator and return falsey you can use something like
		            //         React or Knockout to bind the data for your tooltip.
		            var newContent = contentGenerator(data);
		            if (newContent) {
		                tooltip.node().innerHTML = newContent;
		            }

		            positionTooltip();
		        });

		        return nvtooltip;
		    }

		    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;
		    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);

		    nvtooltip._options = Object.create({}, {
		        // simple read/write options
		        duration: {get: function(){return duration;}, set: function(_){duration=_;}},
		        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},
		        distance: {get: function(){return distance;}, set: function(_){distance=_;}},
		        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},
		        classes: {get: function(){return classes;}, set: function(_){classes=_;}},
		        chartContainer: {get: function(){return chartContainer;}, set: function(_){chartContainer=_;}},
		        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},
		        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},
		        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},
		        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},
		        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},
		        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},
		        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},
		        position: {get: function(){return position;}, set: function(_){position=_;}},

		        // Deprecated options
		        fixedTop: {get: function(){return null;}, set: function(_){
		            // deprecated after 1.8.1
		            nv.deprecated('fixedTop', 'feature removed after 1.8.1');
		        }},
		        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){
		            // deprecated after 1.8.1
		            nv.deprecated('offset', 'use chart.tooltip.distance() instead');
		        }},

		        // options with extra logic
		        hidden: {get: function(){return hidden;}, set: function(_){
		            if (hidden != _) {
		                hidden = !!_;
		                nvtooltip();
		            }
		        }},
		        data: {get: function(){return data;}, set: function(_){
		            // if showing a single data point, adjust data format with that
		            if (_.point) {
		                _.value = _.point.x;
		                _.series = _.series || {};
		                _.series.value = _.point.y;
		                _.series.color = _.point.color || _.series.color;
		            }
		            data = _;
		        }},

		        // read only properties
		        node: {get: function(){return tooltip.node();}, set: function(_){}},
		        id: {get: function(){return id;}, set: function(_){}}
		    });

		    nv.utils.initOptions(nvtooltip);
		    return nvtooltip;
		};


		/*
		Gets the browser window size

		Returns object with height and width properties
		 */
		nv.utils.windowSize = function() {
		    // Sane defaults
		    var size = {width: 640, height: 480};

		    // Most recent browsers use
		    if (window.innerWidth && window.innerHeight) {
		        size.width = window.innerWidth;
		        size.height = window.innerHeight;
		        return (size);
		    }

		    // IE can use depending on mode it is in
		    if (document.compatMode=='CSS1Compat' &&
		        document.documentElement &&
		        document.documentElement.offsetWidth ) {

		        size.width = document.documentElement.offsetWidth;
		        size.height = document.documentElement.offsetHeight;
		        return (size);
		    }

		    // Earlier IE uses Doc.body
		    if (document.body && document.body.offsetWidth) {
		        size.width = document.body.offsetWidth;
		        size.height = document.body.offsetHeight;
		        return (size);
		    }

		    return (size);
		};

		/*
		Binds callback function to run when window is resized
		 */
		nv.utils.windowResize = function(handler) {
		    if (window.addEventListener) {
		        window.addEventListener('resize', handler);
		    } else {
		        nv.log("ERROR: Failed to bind to window.resize with: ", handler);
		    }
		    // return object with clear function to remove the single added callback.
		    return {
		        callback: handler,
		        clear: function() {
		            window.removeEventListener('resize', handler);
		        }
		    }
		};


		/*
		Backwards compatible way to implement more d3-like coloring of graphs.
		Can take in nothing, an array, or a function/scale
		To use a normal scale, get the range and pass that because we must be able
		to take two arguments and use the index to keep backward compatibility
		*/
		nv.utils.getColor = function(color) {
		    //if you pass in nothing, get default colors back
		    if (color === undefined) {
		        return nv.utils.defaultColor();

		    //if passed an array, turn it into a color scale
		    // use isArray, instanceof fails if d3 range is created in an iframe
		    } else if(Array.isArray(color)) {
		        var color_scale = d3.scale.ordinal().range(color);
		        return function(d, i) {
		            var key = i === undefined ? d : i;
		            return d.color || color_scale(key);
		        };

		    //if passed a function or scale, return it, or whatever it may be
		    //external libs, such as angularjs-nvd3-directives use this
		    } else {
		        //can't really help it if someone passes rubbish as color
		        return color;
		    }
		};


		/*
		Default color chooser uses a color scale of 20 colors from D3
		 https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors
		 */
		nv.utils.defaultColor = function() {
		    // get range of the scale so we'll turn it into our own function.
		    return nv.utils.getColor(d3.scale.category20().range());
		};


		/*
		Returns a color function that takes the result of 'getKey' for each series and
		looks for a corresponding color from the dictionary
		*/
		nv.utils.customTheme = function(dictionary, getKey, defaultColors) {
		    // use default series.key if getKey is undefined
		    getKey = getKey || function(series) { return series.key };
		    defaultColors = defaultColors || d3.scale.category20().range();

		    // start at end of default color list and walk back to index 0
		    var defIndex = defaultColors.length;

		    return function(series, index) {
		        var key = getKey(series);
		        if (typeof dictionary[key] === 'function') {
		            return dictionary[key]();
		        } else if (dictionary[key] !== undefined) {
		            return dictionary[key];
		        } else {
		            // no match in dictionary, use a default color
		            if (!defIndex) {
		                // used all the default colors, start over
		                defIndex = defaultColors.length;
		            }
		            defIndex = defIndex - 1;
		            return defaultColors[defIndex];
		        }
		    };
		};


		/*
		From the PJAX example on d3js.org, while this is not really directly needed
		it's a very cool method for doing pjax, I may expand upon it a little bit,
		open to suggestions on anything that may be useful
		*/
		nv.utils.pjax = function(links, content) {

		    var load = function(href) {
		        d3.html(href, function(fragment) {
		            var target = d3.select(content).node();
		            target.parentNode.replaceChild(
		                d3.select(fragment).select(content).node(),
		                target);
		            nv.utils.pjax(links, content);
		        });
		    };

		    d3.selectAll(links).on("click", function() {
		        history.pushState(this.href, this.textContent, this.href);
		        load(this.href);
		        d3.event.preventDefault();
		    });

		    d3.select(window).on("popstate", function() {
		        if (d3.event.state) {
		            load(d3.event.state);
		        }
		    });
		};


		/*
		For when we want to approximate the width in pixels for an SVG:text element.
		Most common instance is when the element is in a display:none; container.
		Forumla is : text.length * font-size * constant_factor
		*/
		nv.utils.calcApproxTextWidth = function (svgTextElem) {
		    if (typeof svgTextElem.style === 'function'
		        && typeof svgTextElem.text === 'function') {

		        var fontSize = parseInt(svgTextElem.style("font-size").replace("px",""), 10);
		        var textLength = svgTextElem.text().length;
		        return textLength * fontSize * 0.5;
		    }
		    return 0;
		};


		/*
		Numbers that are undefined, null or NaN, convert them to zeros.
		*/
		nv.utils.NaNtoZero = function(n) {
		    if (typeof n !== 'number'
		        || isNaN(n)
		        || n === null
		        || n === Infinity
		        || n === -Infinity) {

		        return 0;
		    }
		    return n;
		};

		/*
		Add a way to watch for d3 transition ends to d3
		*/
		d3.selection.prototype.watchTransition = function(renderWatch){
		    var args = [this].concat([].slice.call(arguments, 1));
		    return renderWatch.transition.apply(renderWatch, args);
		};


		/*
		Helper object to watch when d3 has rendered something
		*/
		nv.utils.renderWatch = function(dispatch, duration) {
		    if (!(this instanceof nv.utils.renderWatch)) {
		        return new nv.utils.renderWatch(dispatch, duration);
		    }

		    var _duration = duration !== undefined ? duration : 250;
		    var renderStack = [];
		    var self = this;

		    this.models = function(models) {
		        models = [].slice.call(arguments, 0);
		        models.forEach(function(model){
		            model.__rendered = false;
		            (function(m){
		                m.dispatch.on('renderEnd', function(arg){
		                    m.__rendered = true;
		                    self.renderEnd('model');
		                });
		            })(model);

		            if (renderStack.indexOf(model) < 0) {
		                renderStack.push(model);
		            }
		        });
		    return this;
		    };

		    this.reset = function(duration) {
		        if (duration !== undefined) {
		            _duration = duration;
		        }
		        renderStack = [];
		    };

		    this.transition = function(selection, args, duration) {
		        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];

		        if (args.length > 1) {
		            duration = args.pop();
		        } else {
		            duration = _duration !== undefined ? _duration : 250;
		        }
		        selection.__rendered = false;

		        if (renderStack.indexOf(selection) < 0) {
		            renderStack.push(selection);
		        }

		        if (duration === 0) {
		            selection.__rendered = true;
		            selection.delay = function() { return this; };
		            selection.duration = function() { return this; };
		            return selection;
		        } else {
		            if (selection.length === 0) {
		                selection.__rendered = true;
		            } else if (selection.every( function(d){ return !d.length; } )) {
		                selection.__rendered = true;
		            } else {
		                selection.__rendered = false;
		            }

		            var n = 0;
		            return selection
		                .transition()
		                .duration(duration)
		                .each(function(){ ++n; })
		                .each('end', function(d, i) {
		                    if (--n === 0) {
		                        selection.__rendered = true;
		                        self.renderEnd.apply(this, args);
		                    }
		                });
		        }
		    };

		    this.renderEnd = function() {
		        if (renderStack.every( function(d){ return d.__rendered; } )) {
		            renderStack.forEach( function(d){ d.__rendered = false; });
		            dispatch.renderEnd.apply(this, arguments);
		        }
		    }

		};


		/*
		Takes multiple objects and combines them into the first one (dst)
		example:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});
		gives:  {a: 2, b: 3, c: 4}
		*/
		nv.utils.deepExtend = function(dst){
		    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
		    sources.forEach(function(source) {
		        for (var key in source) {
		            var isArray = dst[key] instanceof Array;
		            var isObject = typeof dst[key] === 'object';
		            var srcObj = typeof source[key] === 'object';

		            if (isObject && !isArray && srcObj) {
		                nv.utils.deepExtend(dst[key], source[key]);
		            } else {
		                dst[key] = source[key];
		            }
		        }
		    });
		};


		/*
		state utility object, used to track d3 states in the models
		*/
		nv.utils.state = function(){
		    if (!(this instanceof nv.utils.state)) {
		        return new nv.utils.state();
		    }
		    var state = {};
		    var _self = this;
		    var _setState = function(){};
		    var _getState = function(){ return {}; };
		    var init = null;
		    var changed = null;

		    this.dispatch = d3.dispatch('change', 'set');

		    this.dispatch.on('set', function(state){
		        _setState(state, true);
		    });

		    this.getter = function(fn){
		        _getState = fn;
		        return this;
		    };

		    this.setter = function(fn, callback) {
		        if (!callback) {
		            callback = function(){};
		        }
		        _setState = function(state, update){
		            fn(state);
		            if (update) {
		                callback();
		            }
		        };
		        return this;
		    };

		    this.init = function(state){
		        init = init || {};
		        nv.utils.deepExtend(init, state);
		    };

		    var _set = function(){
		        var settings = _getState();

		        if (JSON.stringify(settings) === JSON.stringify(state)) {
		            return false;
		        }

		        for (var key in settings) {
		            if (state[key] === undefined) {
		                state[key] = {};
		            }
		            state[key] = settings[key];
		            changed = true;
		        }
		        return true;
		    };

		    this.update = function(){
		        if (init) {
		            _setState(init, false);
		            init = null;
		        }
		        if (_set.call(this)) {
		            this.dispatch.change(state);
		        }
		    };

		};


		/*
		Snippet of code you can insert into each nv.models.* to give you the ability to
		do things like:
		chart.options({
		  showXAxis: true,
		  tooltips: true
		});

		To enable in the chart:
		chart.options = nv.utils.optionsFunc.bind(chart);
		*/
		nv.utils.optionsFunc = function(args) {
		    if (args) {
		        d3.map(args).forEach((function(key,value) {
		            if (typeof this[key] === "function") {
		                this[key](value);
		            }
		        }).bind(this));
		    }
		    return this;
		};


		/*
		numTicks:  requested number of ticks
		data:  the chart data

		returns the number of ticks to actually use on X axis, based on chart data
		to avoid duplicate ticks with the same value
		*/
		nv.utils.calcTicksX = function(numTicks, data) {
		    // find max number of values from all data streams
		    var numValues = 1;
		    var i = 0;
		    for (i; i < data.length; i += 1) {
		        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;
		        numValues = stream_len > numValues ? stream_len : numValues;
		    }
		    nv.log("Requested number of ticks: ", numTicks);
		    nv.log("Calculated max values to be: ", numValues);
		    // make sure we don't have more ticks than values to avoid duplicates
		    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;
		    // make sure we have at least one tick
		    numTicks = numTicks < 1 ? 1 : numTicks;
		    // make sure it's an integer
		    numTicks = Math.floor(numTicks);
		    nv.log("Calculating tick count as: ", numTicks);
		    return numTicks;
		};


		/*
		returns number of ticks to actually use on Y axis, based on chart data
		*/
		nv.utils.calcTicksY = function(numTicks, data) {
		    // currently uses the same logic but we can adjust here if needed later
		    return nv.utils.calcTicksX(numTicks, data);
		};


		/*
		Add a particular option from an options object onto chart
		Options exposed on a chart are a getter/setter function that returns chart
		on set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');

		option objects should be generated via Object.create() to provide
		the option of manipulating data via get/set functions.
		*/
		nv.utils.initOption = function(chart, name) {
		    // if it's a call option, just call it directly, otherwise do get/set
		    if (chart._calls && chart._calls[name]) {
		        chart[name] = chart._calls[name];
		    } else {
		        chart[name] = function (_) {
		            if (!arguments.length) return chart._options[name];
		            chart._overrides[name] = true;
		            chart._options[name] = _;
		            return chart;
		        };
		        // calling the option as _option will ignore if set by option already
		        // so nvd3 can set options internally but the stop if set manually
		        chart['_' + name] = function(_) {
		            if (!arguments.length) return chart._options[name];
		            if (!chart._overrides[name]) {
		                chart._options[name] = _;
		            }
		            return chart;
		        }
		    }
		};


		/*
		Add all options in an options object to the chart
		*/
		nv.utils.initOptions = function(chart) {
		    chart._overrides = chart._overrides || {};
		    var ops = Object.getOwnPropertyNames(chart._options || {});
		    var calls = Object.getOwnPropertyNames(chart._calls || {});
		    ops = ops.concat(calls);
		    for (var i in ops) {
		        nv.utils.initOption(chart, ops[i]);
		    }
		};


		/*
		Inherit options from a D3 object
		d3.rebind makes calling the function on target actually call it on source
		Also use _d3options so we can track what we inherit for documentation and chained inheritance
		*/
		nv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {
		    target._d3options = oplist.concat(target._d3options || []);
		    oplist.unshift(d3_source);
		    oplist.unshift(target);
		    d3.rebind.apply(this, oplist);
		};


		/*
		Remove duplicates from an array
		*/
		nv.utils.arrayUnique = function(a) {
		    return a.sort().filter(function(item, pos) {
		        return !pos || item != a[pos - 1];
		    });
		};


		/*
		Keeps a list of custom symbols to draw from in addition to d3.svg.symbol
		Necessary since d3 doesn't let you extend its list -_-
		Add new symbols by doing nv.utils.symbols.set('name', function(size){...});
		*/
		nv.utils.symbolMap = d3.map();


		/*
		Replaces d3.svg.symbol so that we can look both there and our own map
		 */
		nv.utils.symbol = function() {
		    var type,
		        size = 64;
		    function symbol(d,i) {
		        var t = type.call(this,d,i);
		        var s = size.call(this,d,i);
		        if (d3.svg.symbolTypes.indexOf(t) !== -1) {
		            return d3.svg.symbol().type(t).size(s)();
		        } else {
		            return nv.utils.symbolMap.get(t)(s);
		        }
		    }
		    symbol.type = function(_) {
		        if (!arguments.length) return type;
		        type = d3.functor(_);
		        return symbol;
		    };
		    symbol.size = function(_) {
		        if (!arguments.length) return size;
		        size = d3.functor(_);
		        return symbol;
		    };
		    return symbol;
		};


		/*
		Inherit option getter/setter functions from source to target
		d3.rebind makes calling the function on target actually call it on source
		Also track via _inherited and _d3options so we can track what we inherit
		for documentation generation purposes and chained inheritance
		*/
		nv.utils.inheritOptions = function(target, source) {
		    // inherit all the things
		    var ops = Object.getOwnPropertyNames(source._options || {});
		    var calls = Object.getOwnPropertyNames(source._calls || {});
		    var inherited = source._inherited || [];
		    var d3ops = source._d3options || [];
		    var args = ops.concat(calls).concat(inherited).concat(d3ops);
		    args.unshift(source);
		    args.unshift(target);
		    d3.rebind.apply(this, args);
		    // pass along the lists to keep track of them, don't allow duplicates
		    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));
		    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));
		};


		/*
		Runs common initialize code on the svg before the chart builds
		*/
		nv.utils.initSVG = function(svg) {
		    svg.classed({'nvd3-svg':true});
		};


		/*
		Sanitize and provide default for the container height.
		*/
		nv.utils.sanitizeHeight = function(height, container) {
		    return (height || parseInt(container.style('height'), 10) || 400);
		};


		/*
		Sanitize and provide default for the container width.
		*/
		nv.utils.sanitizeWidth = function(width, container) {
		    return (width || parseInt(container.style('width'), 10) || 960);
		};


		/*
		Calculate the available height for a chart.
		*/
		nv.utils.availableHeight = function(height, container, margin) {
		    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);
		};

		/*
		Calculate the available width for a chart.
		*/
		nv.utils.availableWidth = function(width, container, margin) {
		    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);
		};

		/*
		Clear any rendered chart components and display a chart's 'noData' message
		*/
		nv.utils.noData = function(chart, container) {
		    var opt = chart.options(),
		        margin = opt.margin(),
		        noData = opt.noData(),
		        data = (noData == null) ? ["No Data Available."] : [noData],
		        height = nv.utils.availableHeight(null, container, margin),
		        width = nv.utils.availableWidth(null, container, margin),
		        x = margin.left + width/2,
		        y = margin.top + height/2;

		    //Remove any previously created chart components
		    container.selectAll('g').remove();

		    var noDataText = container.selectAll('.nv-noData').data(data);

		    noDataText.enter().append('text')
		        .attr('class', 'nvd3 nv-noData')
		        .attr('dy', '-.7em')
		        .style('text-anchor', 'middle');

		    noDataText
		        .attr('x', x)
		        .attr('y', y)
		        .text(function(t){ return t; });
		};

		/*
		 Wrap long labels.
		 */
		nv.utils.wrapTicks = function (text, width) {
		    text.each(function() {
		        var text = d3.select(this),
		            words = text.text().split(/\s+/).reverse(),
		            word,
		            line = [],
		            lineNumber = 0,
		            lineHeight = 1.1,
		            y = text.attr("y"),
		            dy = parseFloat(text.attr("dy")),
		            tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
		        while (word = words.pop()) {
		            line.push(word);
		            tspan.text(line.join(" "));
		            if (tspan.node().getComputedTextLength() > width) {
		                line.pop();
		                tspan.text(line.join(" "));
		                line = [word];
		                tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
		            }
		        }
		    });
		};

		/*
		Check equality of 2 array
		*/
		nv.utils.arrayEquals = function (array1, array2) {
		    if (array1 === array2)
		        return true;

		    if (!array1 || !array2)
		        return false;

		    // compare lengths - can save a lot of time 
		    if (array1.length != array2.length)
		        return false;

		    for (var i = 0,
		        l = array1.length; i < l; i++) {
		        // Check if we have nested arrays
		        if (array1[i] instanceof Array && array2[i] instanceof Array) {
		            // recurse into the nested arrays
		            if (!nv.arrayEquals(array1[i], array2[i]))
		                return false;
		        } else if (array1[i] != array2[i]) {
		            // Warning - two different object instances will never be equal: {x:20} != {x:20}
		            return false;
		        }
		    }
		    return true;
		};nv.models.axis = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var axis = d3.svg.axis();
		    var scale = d3.scale.linear();

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 75 //only used for tickLabel currently
		        , height = 60 //only used for tickLabel currently
		        , axisLabelText = null
		        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes
		        , rotateLabels = 0
		        , rotateYLabel = true
		        , staggerLabels = false
		        , isOrdinal = false
		        , ticks = null
		        , axisLabelDistance = 0
		        , duration = 250
		        , dispatch = d3.dispatch('renderEnd')
		        ;
		    axis
		        .scale(scale)
		        .orient('bottom')
		        .tickFormat(function(d) { return d })
		    ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var scale0;
		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var container = d3.select(this);
		            nv.utils.initSVG(container);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            if (ticks !== null)
		                axis.ticks(ticks);
		            else if (axis.orient() == 'top' || axis.orient() == 'bottom')
		                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);

		            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component
		            g.watchTransition(renderWatch, 'axis').call(axis);

		            scale0 = scale0 || axis.scale();

		            var fmt = axis.tickFormat();
		            if (fmt == null) {
		                fmt = scale0.tickFormat();
		            }

		            var axisLabel = g.selectAll('text.nv-axislabel')
		                .data([axisLabelText || null]);
		            axisLabel.exit().remove();

		            var xLabelMargin;
		            var axisMaxMin;
		            var w;
		            switch (axis.orient()) {
		                case 'top':
		                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');
		                  w = 0;
		                  if (scale.range().length === 1) {
		                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;
		                  } else if (scale.range().length === 2) {
		                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];
		                  } else if ( scale.range().length > 2){
		                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);
		                  };
		                    axisLabel
		                        .attr('text-anchor', 'middle')
		                        .attr('y', 0)
		                        .attr('x', w/2);
		                    if (showMaxMin) {
		                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')
		                            .data(scale.domain());
		                        axisMaxMin.enter().append('g').attr('class',function(d,i){
		                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')
		                        }).append('text');
		                        axisMaxMin.exit().remove();
		                        axisMaxMin
		                            .attr('transform', function(d,i) {
		                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'
		                            })
		                            .select('text')
		                            .attr('dy', '-0.5em')
		                            .attr('y', -axis.tickPadding())
		                            .attr('text-anchor', 'middle')
		                            .text(function(d,i) {
		                                var v = fmt(d);
		                                return ('' + v).match('NaN') ? '' : v;
		                            });
		                        axisMaxMin.watchTransition(renderWatch, 'min-max top')
		                            .attr('transform', function(d,i) {
		                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'
		                            });
		                    }
		                    break;
		                case 'bottom':
		                    xLabelMargin = axisLabelDistance + 36;
		                    var maxTextWidth = 30;
		                    var textHeight = 0;
		                    var xTicks = g.selectAll('g').select("text");
		                    var rotateLabelsRule = '';
		                    if (rotateLabels%360) {
		                        //Calculate the longest xTick width
		                        xTicks.each(function(d,i){
		                            var box = this.getBoundingClientRect();
		                            var width = box.width;
		                            textHeight = box.height;
		                            if(width > maxTextWidth) maxTextWidth = width;
		                        });
		                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';
		                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.
		                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));
		                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;
		                        //Rotate all xTicks
		                        xTicks
		                            .attr('transform', rotateLabelsRule)
		                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');
		                    } else {
		                        if (staggerLabels) {
		                            xTicks
		                                .attr('transform', function(d,i) {
		                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'
		                                });
		                        } else {
		                            xTicks.attr('transform', "translate(0,0)");
		                        }
		                    }
		                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');
		                    w = 0;
		                    if (scale.range().length === 1) {
		                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;
		                    } else if (scale.range().length === 2) {
		                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];
		                    } else if ( scale.range().length > 2){
		                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);
		                    };
		                    axisLabel
		                        .attr('text-anchor', 'middle')
		                        .attr('y', xLabelMargin)
		                        .attr('x', w/2);
		                    if (showMaxMin) {
		                        //if (showMaxMin && !isOrdinal) {
		                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')
		                            //.data(scale.domain())
		                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);
		                        axisMaxMin.enter().append('g').attr('class',function(d,i){
		                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')
		                        }).append('text');
		                        axisMaxMin.exit().remove();
		                        axisMaxMin
		                            .attr('transform', function(d,i) {
		                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'
		                            })
		                            .select('text')
		                            .attr('dy', '.71em')
		                            .attr('y', axis.tickPadding())
		                            .attr('transform', rotateLabelsRule)
		                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')
		                            .text(function(d,i) {
		                                var v = fmt(d);
		                                return ('' + v).match('NaN') ? '' : v;
		                            });
		                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')
		                            .attr('transform', function(d,i) {
		                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'
		                            });
		                    }

		                    break;
		                case 'right':
		                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');
		                    axisLabel
		                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')
		                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')
		                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart
		                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());
		                    if (showMaxMin) {
		                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')
		                            .data(scale.domain());
		                       	axisMaxMin.enter().append('g').attr('class',function(d,i){
		                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')
		                        }).append('text')
		                            .style('opacity', 0);
		                        axisMaxMin.exit().remove();
		                        axisMaxMin
		                            .attr('transform', function(d,i) {
		                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'
		                            })
		                            .select('text')
		                            .attr('dy', '.32em')
		                            .attr('y', 0)
		                            .attr('x', axis.tickPadding())
		                            .style('text-anchor', 'start')
		                            .text(function(d, i) {
		                                var v = fmt(d);
		                                return ('' + v).match('NaN') ? '' : v;
		                            });
		                        axisMaxMin.watchTransition(renderWatch, 'min-max right')
		                            .attr('transform', function(d,i) {
		                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'
		                            })
		                            .select('text')
		                            .style('opacity', 1);
		                    }
		                    break;
		                case 'left':
		                    /*
		                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins
		                     var yTicks = g.selectAll('g').select("text");
		                     yTicks.each(function(d,i){
		                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;
		                     if(labelPadding > width) width = labelPadding;
		                     });
		                     */
		                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');
		                    axisLabel
		                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')
		                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')
		                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)
		                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());
		                    if (showMaxMin) {
		                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')
		                            .data(scale.domain());
		                        axisMaxMin.enter().append('g').attr('class',function(d,i){
		                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')
		                        }).append('text')
		                            .style('opacity', 0);
		                        axisMaxMin.exit().remove();
		                        axisMaxMin
		                            .attr('transform', function(d,i) {
		                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'
		                            })
		                            .select('text')
		                            .attr('dy', '.32em')
		                            .attr('y', 0)
		                            .attr('x', -axis.tickPadding())
		                            .attr('text-anchor', 'end')
		                            .text(function(d,i) {
		                                var v = fmt(d);
		                                return ('' + v).match('NaN') ? '' : v;
		                            });
		                        axisMaxMin.watchTransition(renderWatch, 'min-max right')
		                            .attr('transform', function(d,i) {
		                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'
		                            })
		                            .select('text')
		                            .style('opacity', 1);
		                    }
		                    break;
		            }
		            axisLabel.text(function(d) { return d });

		            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {
		                //check if max and min overlap other values, if so, hide the values that overlap
		                g.selectAll('g') // the g's wrapping each tick
		                    .each(function(d,i) {
		                        d3.select(this).select('text').attr('opacity', 1);
		                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!
		                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL
		                                d3.select(this).attr('opacity', 0);

		                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!
		                        }
		                    });

		                //if Max and Min = 0 only show min, Issue #281
		                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {
		                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {
		                        return !i ? 1 : 0
		                    });
		                }
		            }

		            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {
		                var maxMinRange = [];
		                wrap.selectAll('g.nv-axisMaxMin')
		                    .each(function(d,i) {
		                        try {
		                            if (i) // i== 1, max position
		                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)
		                            else // i==0, min position
		                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)
		                        }catch (err) {
		                            if (i) // i== 1, max position
		                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)
		                            else // i==0, min position
		                                maxMinRange.push(scale(d) + 4);
		                        }
		                    });
		                // the g's wrapping each tick
		                g.selectAll('g').each(function(d, i) {
		                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {
		                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL
		                            d3.select(this).remove();
		                        else
		                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!
		                    }
		                });
		            }

		            //Highlight zero tick line
		            g.selectAll('.tick')
		                .filter(function (d) {
		                    /*
		                    The filter needs to return only ticks at or near zero.
		                    Numbers like 0.00001 need to count as zero as well,
		                    and the arithmetic trick below solves that.
		                    */
		                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)
		                }) 
		                .classed('zero', true);
		            
		            //store old scales for use in transitions on update
		            scale0 = scale.copy();

		        });

		        renderWatch.renderEnd('axis immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.axis = axis;
		    chart.dispatch = dispatch;

		    chart.options = nv.utils.optionsFunc.bind(chart);
		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},
		        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},
		        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},
		        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},
		        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},
		        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},
		        height:            {get: function(){return height;}, set: function(_){height=_;}},
		        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},
		        width:             {get: function(){return width;}, set: function(_){width=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top !== undefined    ? _.top    : margin.top;
		            margin.right  = _.right !== undefined  ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left !== undefined   ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration=_;
		            renderWatch.reset(duration);
		        }},
		        scale: {get: function(){return scale;}, set: function(_){
		            scale = _;
		            axis.scale(scale);
		            isOrdinal = typeof scale.rangeBands === 'function';
		            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);
		        }}
		    });

		    nv.utils.initOptions(chart);
		    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);
		    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);

		    return chart;
		};
		nv.models.boxPlot = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 960
		        , height = 500
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , x = d3.scale.ordinal()
		        , y = d3.scale.linear()
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , color = nv.utils.defaultColor()
		        , container = null
		        , xDomain
		        , yDomain
		        , xRange
		        , yRange
		        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
		        , duration = 250
		        , maxBoxWidth = null
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var x0, y0;
		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right,
		                availableHeight = height - margin.top - margin.bottom;

		            container = d3.select(this);
		            nv.utils.initSVG(container);

		            // Setup Scales
		            x   .domain(xDomain || data.map(function(d,i) { return getX(d,i); }))
		                .rangeBands(xRange || [0, availableWidth], .1);

		            // if we know yDomain, no need to calculate
		            var yData = []
		            if (!yDomain) {
		                // (y-range is based on quartiles, whiskers and outliers)

		                // lower values
		                var yMin = d3.min(data.map(function(d) {
		                    var min_arr = [];

		                    min_arr.push(d.values.Q1);
		                    if (d.values.hasOwnProperty('whisker_low') && d.values.whisker_low !== null) { min_arr.push(d.values.whisker_low); }
		                    if (d.values.hasOwnProperty('outliers') && d.values.outliers !== null) { min_arr = min_arr.concat(d.values.outliers); }

		                    return d3.min(min_arr);
		                }));

		                // upper values
		                var yMax = d3.max(data.map(function(d) {
		                    var max_arr = [];

		                    max_arr.push(d.values.Q3);
		                    if (d.values.hasOwnProperty('whisker_high') && d.values.whisker_high !== null) { max_arr.push(d.values.whisker_high); }
		                    if (d.values.hasOwnProperty('outliers') && d.values.outliers !== null) { max_arr = max_arr.concat(d.values.outliers); }

		                    return d3.max(max_arr);
		                }));

		                yData = [ yMin, yMax ] ;
		            }

		            y.domain(yDomain || yData);
		            y.range(yRange || [availableHeight, 0]);

		            //store old scales if they exist
		            x0 = x0 || x;
		            y0 = y0 || y.copy().range([y(0),y(0)]);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');
		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });
		            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);
		            boxplots
		                .attr('class', 'nv-boxplot')
		                .attr('transform', function(d,i,j) { return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05) + ', 0)'; })
		                .classed('hover', function(d) { return d.hover });
		            boxplots
		                .watchTransition(renderWatch, 'nv-boxplot: boxplots')
		                .style('stroke-opacity', 1)
		                .style('fill-opacity', .75)
		                .delay(function(d,i) { return i * duration / data.length })
		                .attr('transform', function(d,i) {
		                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05) + ', 0)';
		                });
		            boxplots.exit().remove();

		            // ----- add the SVG elements for each boxPlot -----

		            // conditionally append whisker lines
		            boxEnter.each(function(d,i) {
		              var box = d3.select(this);

		              ['low', 'high'].forEach(function(key) {
		                if (d.values.hasOwnProperty('whisker_' + key) && d.values['whisker_' + key] !== null) {
		                  box.append('line')
		                    .style('stroke', (d.color) ? d.color : color(d,i))
		                    .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);

		                  box.append('line')
		                    .style('stroke', (d.color) ? d.color : color(d,i))
		                    .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);
		                }
		              });
		            });

		            // outliers
		            // TODO: support custom colors here
		            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {
		                if (d.values.hasOwnProperty('outliers') && d.values.outliers !== null) { return d.values.outliers; }
		                else { return []; }
		            });
		            outliers.enter().append('circle')
		                .style('fill', function(d,i,j) { return color(d,j) }).style('stroke', function(d,i,j) { return color(d,j) })
		                .on('mouseover', function(d,i,j) {
		                    d3.select(this).classed('hover', true);
		                    dispatch.elementMouseover({
		                        series: { key: d, color: color(d,j) },
		                        e: d3.event
		                    });
		                })
		                .on('mouseout', function(d,i,j) {
		                    d3.select(this).classed('hover', false);
		                    dispatch.elementMouseout({
		                        series: { key: d, color: color(d,j) },
		                        e: d3.event
		                    });
		                })
		                .on('mousemove', function(d,i) {
		                    dispatch.elementMousemove({e: d3.event});
		                });

		            outliers.attr('class', 'nv-boxplot-outlier');
		            outliers
		              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')
		                .attr('cx', x.rangeBand() * .45)
		                .attr('cy', function(d,i,j) { return y(d); })
		                .attr('r', '3');
		            outliers.exit().remove();

		            var box_width = function() { return (maxBoxWidth === null ? x.rangeBand() * .9 : Math.min(75, x.rangeBand() * .9)); };
		            var box_left  = function() { return x.rangeBand() * .45 - box_width()/2; };
		            var box_right = function() { return x.rangeBand() * .45 + box_width()/2; };

		            // update whisker lines and ticks
		            ['low', 'high'].forEach(function(key) {
		              var endpoint = (key === 'low') ? 'Q1' : 'Q3';

		              boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)
		                .watchTransition(renderWatch, 'nv-boxplot: boxplots')
		                  .attr('x1', x.rangeBand() * .45 )
		                  .attr('y1', function(d,i) { return y(d.values['whisker_' + key]); })
		                  .attr('x2', x.rangeBand() * .45 )
		                  .attr('y2', function(d,i) { return y(d.values[endpoint]); });

		              boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)
		                .watchTransition(renderWatch, 'nv-boxplot: boxplots')
		                  .attr('x1', box_left )
		                  .attr('y1', function(d,i) { return y(d.values['whisker_' + key]); })
		                  .attr('x2', box_right )
		                  .attr('y2', function(d,i) { return y(d.values['whisker_' + key]); });
		            });

		            ['low', 'high'].forEach(function(key) {
		              boxEnter.selectAll('.nv-boxplot-' + key)
		                .on('mouseover', function(d,i,j) {
		                    d3.select(this).classed('hover', true);
		                    dispatch.elementMouseover({
		                        series: { key: d.values['whisker_' + key], color: color(d,j) },
		                        e: d3.event
		                    });
		                })
		                .on('mouseout', function(d,i,j) {
		                    d3.select(this).classed('hover', false);
		                    dispatch.elementMouseout({
		                        series: { key: d.values['whisker_' + key], color: color(d,j) },
		                        e: d3.event
		                    });
		                })
		                .on('mousemove', function(d,i) {
		                    dispatch.elementMousemove({e: d3.event});
		                });
		            });

		            // boxes
		            boxEnter.append('rect')
		                .attr('class', 'nv-boxplot-box')
		                // tooltip events
		                .on('mouseover', function(d,i) {
		                    d3.select(this).classed('hover', true);
		                    dispatch.elementMouseover({
		                        key: d.label,
		                        value: d.label,
		                        series: [
		                            { key: 'Q3', value: d.values.Q3, color: d.color || color(d,i) },
		                            { key: 'Q2', value: d.values.Q2, color: d.color || color(d,i) },
		                            { key: 'Q1', value: d.values.Q1, color: d.color || color(d,i) }
		                        ],
		                        data: d,
		                        index: i,
		                        e: d3.event
		                    });
		                })
		                .on('mouseout', function(d,i) {
		                    d3.select(this).classed('hover', false);
		                    dispatch.elementMouseout({
		                        key: d.label,
		                        value: d.label,
		                        series: [
		                            { key: 'Q3', value: d.values.Q3, color: d.color || color(d,i) },
		                            { key: 'Q2', value: d.values.Q2, color: d.color || color(d,i) },
		                            { key: 'Q1', value: d.values.Q1, color: d.color || color(d,i) }
		                        ],
		                        data: d,
		                        index: i,
		                        e: d3.event
		                    });
		                })
		                .on('mousemove', function(d,i) {
		                    dispatch.elementMousemove({e: d3.event});
		                });

		            // box transitions
		            boxplots.select('rect.nv-boxplot-box')
		              .watchTransition(renderWatch, 'nv-boxplot: boxes')
		                .attr('y', function(d,i) { return y(d.values.Q3); })
		                .attr('width', box_width)
		                .attr('x', box_left )

		                .attr('height', function(d,i) { return Math.abs(y(d.values.Q3) - y(d.values.Q1)) || 1 })
		                .style('fill', function(d,i) { return d.color || color(d,i) })
		                .style('stroke', function(d,i) { return d.color || color(d,i) });

		            // median line
		            boxEnter.append('line').attr('class', 'nv-boxplot-median');

		            boxplots.select('line.nv-boxplot-median')
		              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')
		                .attr('x1', box_left)
		                .attr('y1', function(d,i) { return y(d.values.Q2); })
		                .attr('x2', box_right)
		                .attr('y2', function(d,i) { return y(d.values.Q2); });

		            //store old scales for use in transitions on update
		            x0 = x.copy();
		            y0 = y.copy();
		        });

		        renderWatch.renderEnd('nv-boxplot immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:   {get: function(){return width;}, set: function(_){width=_;}},
		        height:  {get: function(){return height;}, set: function(_){height=_;}},
		        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},
		        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
		        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
		        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
		        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        id:          {get: function(){return id;}, set: function(_){id=_;}},
		        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		        }}
		    });

		    nv.utils.initOptions(chart);

		    return chart;
		};
		nv.models.boxPlotChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var boxplot = nv.models.boxPlot()
		        , xAxis = nv.models.axis()
		        , yAxis = nv.models.axis()
		        ;

		    var margin = {top: 15, right: 10, bottom: 50, left: 60}
		        , width = null
		        , height = null
		        , color = nv.utils.getColor()
		        , showXAxis = true
		        , showYAxis = true
		        , rightAlignYAxis = false
		        , staggerLabels = false
		        , tooltip = nv.models.tooltip()
		        , x
		        , y
		        , noData = "No Data Available."
		        , dispatch = d3.dispatch('beforeUpdate', 'renderEnd')
		        , duration = 250
		        ;

		    xAxis
		        .orient('bottom')
		        .showMaxMin(false)
		        .tickFormat(function(d) { return d })
		    ;
		    yAxis
		        .orient((rightAlignYAxis) ? 'right' : 'left')
		        .tickFormat(d3.format(',.1f'))
		    ;

		    tooltip.duration(0);

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(boxplot);
		        if (showXAxis) renderWatch.models(xAxis);
		        if (showYAxis) renderWatch.models(yAxis);

		        selection.each(function(data) {
		            var container = d3.select(this),
		                that = this;
		            nv.utils.initSVG(container);
		            var availableWidth = (width  || parseInt(container.style('width')) || 960)
		                    - margin.left - margin.right,
		                availableHeight = (height || parseInt(container.style('height')) || 400)
		                    - margin.top - margin.bottom;

		            chart.update = function() {
		                dispatch.beforeUpdate();
		                container.transition().duration(duration).call(chart);
		            };
		            chart.container = this;

		            // Display No Data message if there's nothing to show. (quartiles required at minimum)
		            if (!data || !data.length ||
		                    !data.filter(function(d) { return d.values.hasOwnProperty("Q1") && d.values.hasOwnProperty("Q2") && d.values.hasOwnProperty("Q3"); }).length) {
		                var noDataText = container.selectAll('.nv-noData').data([noData]);

		                noDataText.enter().append('text')
		                    .attr('class', 'nvd3 nv-noData')
		                    .attr('dy', '-.7em')
		                    .style('text-anchor', 'middle');

		                noDataText
		                    .attr('x', margin.left + availableWidth / 2)
		                    .attr('y', margin.top + availableHeight / 2)
		                    .text(function(d) { return d });

		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            x = boxplot.xScale();
		            y = boxplot.yScale().clamp(true);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');
		            var defsEnter = gEnter.append('defs');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-x nv-axis');
		            gEnter.append('g').attr('class', 'nv-y nv-axis')
		                .append('g').attr('class', 'nv-zeroLine')
		                .append('line');

		            gEnter.append('g').attr('class', 'nv-barsWrap');

		            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }

		            // Main Chart Component(s)
		            boxplot
		                .width(availableWidth)
		                .height(availableHeight);

		            var barsWrap = g.select('.nv-barsWrap')
		                .datum(data.filter(function(d) { return !d.disabled }))

		            barsWrap.transition().call(boxplot);


		            defsEnter.append('clipPath')
		                .attr('id', 'nv-x-label-clip-' + boxplot.id())
		                .append('rect');

		            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')
		                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))
		                .attr('height', 16)
		                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));

		            // Setup Axes
		            if (showXAxis) {
		                xAxis
		                    .scale(x)
		                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize(-availableHeight, 0);

		                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
		                g.select('.nv-x.nv-axis').call(xAxis);

		                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
		                if (staggerLabels) {
		                    xTicks
		                        .selectAll('text')
		                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })
		                }
		            }

		            if (showYAxis) {
		                yAxis
		                    .scale(y)
		                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data
		                    .tickSize( -availableWidth, 0);

		                g.select('.nv-y.nv-axis').call(yAxis);
		            }

		            // Zero line
		            g.select(".nv-zeroLine line")
		                .attr("x1",0)
		                .attr("x2",availableWidth)
		                .attr("y1", y(0))
		                .attr("y2", y(0))
		            ;

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------
		        });

		        renderWatch.renderEnd('nv-boxplot chart immediate');
		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {
		        tooltip.data(evt).hidden(false);
		    });

		    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.data(evt).hidden(true);
		    });

		    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {
		        tooltip();
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.boxplot = boxplot;
		    chart.xAxis = xAxis;
		    chart.yAxis = yAxis;
		    chart.tooltip = tooltip;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},
		        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		            boxplot.duration(duration);
		            xAxis.duration(duration);
		            yAxis.duration(duration);
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            boxplot.color(color);
		        }},
		        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
		            rightAlignYAxis = _;
		            yAxis.orient( (_) ? 'right' : 'left');
		        }}
		    });

		    nv.utils.inheritOptions(chart, boxplot);
		    nv.utils.initOptions(chart);

		    return chart;
		}

		// Chart design based on the recommendations of Stephen Few. Implementation
		// based on the work of Clint Ivy, Jamie Love, and Jason Davies.
		// http://projects.instantcognition.com/protovis/bulletchart/

		nv.models.bullet = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , orient = 'left' // TODO top & bottom
		        , reverse = false
		        , ranges = function(d) { return d.ranges }
		        , markers = function(d) { return d.markers ? d.markers : [] }
		        , measures = function(d) { return d.measures }
		        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }
		        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }
		        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }
		        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)
		        , width = 380
		        , height = 30
		        , container = null
		        , tickFormat = null
		        , color = nv.utils.getColor(['#1f77b4'])
		        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')
		        ;

		    function chart(selection) {
		        selection.each(function(d, i) {
		            var availableWidth = width - margin.left - margin.right,
		                availableHeight = height - margin.top - margin.bottom;

		            container = d3.select(this);
		            nv.utils.initSVG(container);

		            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),
		                markerz = markers.call(this, d, i).slice().sort(d3.descending),
		                measurez = measures.call(this, d, i).slice().sort(d3.descending),
		                rangeLabelz = rangeLabels.call(this, d, i).slice(),
		                markerLabelz = markerLabels.call(this, d, i).slice(),
		                measureLabelz = measureLabels.call(this, d, i).slice();

		            // Setup Scales
		            // Compute the new x-scale.
		            var x1 = d3.scale.linear()
		                .domain( d3.extent(d3.merge([forceX, rangez])) )
		                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);

		            // Retrieve the old x-scale, if this is an update.
		            var x0 = this.__chart__ || d3.scale.linear()
		                .domain([0, Infinity])
		                .range(x1.range());

		            // Stash the new scale.
		            this.__chart__ = x1;

		            var rangeMin = d3.min(rangez), //rangez[2]
		                rangeMax = d3.max(rangez), //rangez[0]
		                rangeAvg = rangez[1];

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('rect').attr('class', 'nv-range nv-rangeMax');
		            gEnter.append('rect').attr('class', 'nv-range nv-rangeAvg');
		            gEnter.append('rect').attr('class', 'nv-range nv-rangeMin');
		            gEnter.append('rect').attr('class', 'nv-measure');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)
		                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };
		            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },
		                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };

		            g.select('rect.nv-rangeMax')
		                .attr('height', availableHeight)
		                .attr('width', w1(rangeMax > 0 ? rangeMax : rangeMin))
		                .attr('x', xp1(rangeMax > 0 ? rangeMax : rangeMin))
		                .datum(rangeMax > 0 ? rangeMax : rangeMin)

		            g.select('rect.nv-rangeAvg')
		                .attr('height', availableHeight)
		                .attr('width', w1(rangeAvg))
		                .attr('x', xp1(rangeAvg))
		                .datum(rangeAvg)

		            g.select('rect.nv-rangeMin')
		                .attr('height', availableHeight)
		                .attr('width', w1(rangeMax))
		                .attr('x', xp1(rangeMax))
		                .attr('width', w1(rangeMax > 0 ? rangeMin : rangeMax))
		                .attr('x', xp1(rangeMax > 0 ? rangeMin : rangeMax))
		                .datum(rangeMax > 0 ? rangeMin : rangeMax)

		            g.select('rect.nv-measure')
		                .style('fill', color)
		                .attr('height', availableHeight / 3)
		                .attr('y', availableHeight / 3)
		                .attr('width', measurez < 0 ?
		                    x1(0) - x1(measurez[0])
		                    : x1(measurez[0]) - x1(0))
		                .attr('x', xp1(measurez))
		                .on('mouseover', function() {
		                    dispatch.elementMouseover({
		                        value: measurez[0],
		                        label: measureLabelz[0] || 'Current',
		                        color: d3.select(this).style("fill")
		                    })
		                })
		                .on('mousemove', function() {
		                    dispatch.elementMousemove({
		                        value: measurez[0],
		                        label: measureLabelz[0] || 'Current',
		                        color: d3.select(this).style("fill")
		                    })
		                })
		                .on('mouseout', function() {
		                    dispatch.elementMouseout({
		                        value: measurez[0],
		                        label: measureLabelz[0] || 'Current',
		                        color: d3.select(this).style("fill")
		                    })
		                });

		            var h3 =  availableHeight / 6;

		            var markerData = markerz.map( function(marker, index) {
		                return {value: marker, label: markerLabelz[index]}
		            });
		            gEnter
		              .selectAll("path.nv-markerTriangle")
		              .data(markerData)
		              .enter()
		              .append('path')
		              .attr('class', 'nv-markerTriangle')
		              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')
		              .on('mouseover', function(d) {
		                dispatch.elementMouseover({
		                  value: d.value,
		                  label: d.label || 'Previous',
		                  color: d3.select(this).style("fill"),
		                  pos: [x1(d.value), availableHeight/2]
		                })

		              })
		              .on('mousemove', function(d) {
		                  dispatch.elementMousemove({
		                      value: d.value,
		                      label: d.label || 'Previous',
		                      color: d3.select(this).style("fill")
		                  })
		              })
		              .on('mouseout', function(d, i) {
		                  dispatch.elementMouseout({
		                      value: d.value,
		                      label: d.label || 'Previous',
		                      color: d3.select(this).style("fill")
		                  })
		              });

		            g.selectAll("path.nv-markerTriangle")
		              .data(markerData)
		              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });

		            wrap.selectAll('.nv-range')
		                .on('mouseover', function(d,i) {
		                    var label = rangeLabelz[i] || (!i ? "Maximum" : i == 1 ? "Mean" : "Minimum");
		                    dispatch.elementMouseover({
		                        value: d,
		                        label: label,
		                        color: d3.select(this).style("fill")
		                    })
		                })
		                .on('mousemove', function() {
		                    dispatch.elementMousemove({
		                        value: measurez[0],
		                        label: measureLabelz[0] || 'Previous',
		                        color: d3.select(this).style("fill")
		                    })
		                })
		                .on('mouseout', function(d,i) {
		                    var label = rangeLabelz[i] || (!i ? "Maximum" : i == 1 ? "Mean" : "Minimum");
		                    dispatch.elementMouseout({
		                        value: d,
		                        label: label,
		                        color: d3.select(this).style("fill")
		                    })
		                });
		        });

		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)
		        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)
		        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)
		        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},
		        width:    {get: function(){return width;}, set: function(_){width=_;}},
		        height:    {get: function(){return height;}, set: function(_){height=_;}},
		        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom
		            orient = _;
		            reverse = orient == 'right' || orient == 'bottom';
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }}
		    });

		    nv.utils.initOptions(chart);
		    return chart;
		};



		// Chart design based on the recommendations of Stephen Few. Implementation
		// based on the work of Clint Ivy, Jamie Love, and Jason Davies.
		// http://projects.instantcognition.com/protovis/bulletchart/
		nv.models.bulletChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var bullet = nv.models.bullet();
		    var tooltip = nv.models.tooltip();

		    var orient = 'left' // TODO top & bottom
		        , reverse = false
		        , margin = {top: 5, right: 40, bottom: 20, left: 120}
		        , ranges = function(d) { return d.ranges }
		        , markers = function(d) { return d.markers ? d.markers : [] }
		        , measures = function(d) { return d.measures }
		        , width = null
		        , height = 55
		        , tickFormat = null
			, ticks = null
		        , noData = null
		        , dispatch = d3.dispatch()
		        ;

		    tooltip
		        .duration(0)
		        .headerEnabled(false);

		    function chart(selection) {
		        selection.each(function(d, i) {
		            var container = d3.select(this);
		            nv.utils.initSVG(container);

		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = height - margin.top - margin.bottom,
		                that = this;

		            chart.update = function() { chart(selection) };
		            chart.container = this;

		            // Display No Data message if there's nothing to show.
		            if (!d || !ranges.call(this, d, i)) {
		                nv.utils.noData(chart, container)
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),
		                markerz = markers.call(this, d, i).slice().sort(d3.descending),
		                measurez = measures.call(this, d, i).slice().sort(d3.descending);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-bulletWrap');
		            gEnter.append('g').attr('class', 'nv-titles');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            // Compute the new x-scale.
		            var x1 = d3.scale.linear()
		                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain
		                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);

		            // Retrieve the old x-scale, if this is an update.
		            var x0 = this.__chart__ || d3.scale.linear()
		                .domain([0, Infinity])
		                .range(x1.range());

		            // Stash the new scale.
		            this.__chart__ = x1;

		            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)
		                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };

		            var title = gEnter.select('.nv-titles').append('g')
		                .attr('text-anchor', 'end')
		                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');
		            title.append('text')
		                .attr('class', 'nv-title')
		                .text(function(d) { return d.title; });

		            title.append('text')
		                .attr('class', 'nv-subtitle')
		                .attr('dy', '1em')
		                .text(function(d) { return d.subtitle; });

		            bullet
		                .width(availableWidth)
		                .height(availableHeight)

		            var bulletWrap = g.select('.nv-bulletWrap');
		            d3.transition(bulletWrap).call(bullet);

		            // Compute the tick format.
		            var format = tickFormat || x1.tickFormat( availableWidth / 100 );

		            // Update the tick groups.
		            var tick = g.selectAll('g.nv-tick')
		                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {
		                    return this.textContent || format(d);
		                });

		            // Initialize the ticks with the old scale, x0.
		            var tickEnter = tick.enter().append('g')
		                .attr('class', 'nv-tick')
		                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })
		                .style('opacity', 1e-6);

		            tickEnter.append('line')
		                .attr('y1', availableHeight)
		                .attr('y2', availableHeight * 7 / 6);

		            tickEnter.append('text')
		                .attr('text-anchor', 'middle')
		                .attr('dy', '1em')
		                .attr('y', availableHeight * 7 / 6)
		                .text(format);

		            // Transition the updating ticks to the new scale, x1.
		            var tickUpdate = d3.transition(tick)
		                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })
		                .style('opacity', 1);

		            tickUpdate.select('line')
		                .attr('y1', availableHeight)
		                .attr('y2', availableHeight * 7 / 6);

		            tickUpdate.select('text')
		                .attr('y', availableHeight * 7 / 6);

		            // Transition the exiting ticks to the new scale, x1.
		            d3.transition(tick.exit())
		                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })
		                .style('opacity', 1e-6)
		                .remove();
		        });

		        d3.timer.flush();
		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {
		        evt['series'] = {
		            key: evt.label,
		            value: evt.value,
		            color: evt.color
		        };
		        tooltip.data(evt).hidden(false);
		    });

		    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true);
		    });

		    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {
		        tooltip();
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.bullet = bullet;
		    chart.dispatch = dispatch;
		    chart.tooltip = tooltip;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)
		        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)
		        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)
		        width:    {get: function(){return width;}, set: function(_){width=_;}},
		        height:    {get: function(){return height;}, set: function(_){height=_;}},
		        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},
		        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom
		            orient = _;
		            reverse = orient == 'right' || orient == 'bottom';
		        }}
		    });

		    nv.utils.inheritOptions(chart, bullet);
		    nv.utils.initOptions(chart);

		    return chart;
		};



		nv.models.candlestickBar = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = null
		        , height = null
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , container
		        , x = d3.scale.linear()
		        , y = d3.scale.linear()
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , getOpen = function(d) { return d.open }
		        , getClose = function(d) { return d.close }
		        , getHigh = function(d) { return d.high }
		        , getLow = function(d) { return d.low }
		        , forceX = []
		        , forceY = []
		        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
		        , clipEdge = true
		        , color = nv.utils.defaultColor()
		        , interactive = false
		        , xDomain
		        , yDomain
		        , xRange
		        , yRange
		        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    function chart(selection) {
		        selection.each(function(data) {
		            container = d3.select(this);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            nv.utils.initSVG(container);

		            // Width of the candlestick bars.
		            var barWidth = (availableWidth / data[0].values.length) * .45;

		            // Setup Scales
		            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));

		            if (padData)
		                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
		            else
		                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);

		            y.domain(yDomain || [
		                    d3.min(data[0].values.map(getLow).concat(forceY)),
		                    d3.max(data[0].values.map(getHigh).concat(forceY))
		                ]
		            ).range(yRange || [availableHeight, 0]);

		            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
		            if (x.domain()[0] === x.domain()[1])
		                x.domain()[0] ?
		                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
		                    : x.domain([-1,1]);

		            if (y.domain()[0] === y.domain()[1])
		                y.domain()[0] ?
		                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
		                    : y.domain([-1,1]);

		            // Setup containers and skeleton of chart
		            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');
		            var defsEnter = wrapEnter.append('defs');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-ticks');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            container
		                .on('click', function(d,i) {
		                    dispatch.chartClick({
		                        data: d,
		                        index: i,
		                        pos: d3.event,
		                        id: id
		                    });
		                });

		            defsEnter.append('clipPath')
		                .attr('id', 'nv-chart-clip-path-' + id)
		                .append('rect');

		            wrap.select('#nv-chart-clip-path-' + id + ' rect')
		                .attr('width', availableWidth)
		                .attr('height', availableHeight);

		            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');

		            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')
		                .data(function(d) { return d });
		            ticks.exit().remove();

		            var tickGroups = ticks.enter().append('g');

		            // The colors are currently controlled by CSS.
		            ticks
		                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});

		            var lines = tickGroups.append('line')
		                .attr('class', 'nv-candlestick-lines')
		                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })
		                .attr('x1', 0)
		                .attr('y1', function(d, i) { return y(getHigh(d, i)); })
		                .attr('x2', 0)
		                .attr('y2', function(d, i) { return y(getLow(d, i)); });

		            var rects = tickGroups.append('rect')
		                .attr('class', 'nv-candlestick-rects nv-bars')
		                .attr('transform', function(d, i) {
		                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','
		                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))
		                    + ')';
		                })
		                .attr('x', 0)
		                .attr('y', 0)
		                .attr('width', barWidth)
		                .attr('height', function(d, i) {
		                    var open = getOpen(d, i);
		                    var close = getClose(d, i);
		                    return open > close ? y(close) - y(open) : y(open) - y(close);
		                });

		            ticks.select('.nv-candlestick-lines').transition()
		                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })
		                .attr('x1', 0)
		                .attr('y1', function(d, i) { return y(getHigh(d, i)); })
		                .attr('x2', 0)
		                .attr('y2', function(d, i) { return y(getLow(d, i)); });

		            ticks.select('.nv-candlestick-rects').transition()
		                .attr('transform', function(d, i) {
		                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','
		                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))
		                    + ')';
		                })
		                .attr('x', 0)
		                .attr('y', 0)
		                .attr('width', barWidth)
		                .attr('height', function(d, i) {
		                    var open = getOpen(d, i);
		                    var close = getClose(d, i);
		                    return open > close ? y(close) - y(open) : y(open) - y(close);
		                });
		        });

		        return chart;
		    }


		    //Create methods to allow outside functions to highlight a specific bar.
		    chart.highlightPoint = function(pointIndex, isHoverOver) {
		        chart.clearHighlights();
		        container.select(".nv-candlestickBar .nv-tick-0-" + pointIndex)
		            .classed("hover", isHoverOver)
		        ;
		    };

		    chart.clearHighlights = function() {
		        container.select(".nv-candlestickBar .nv-tick.hover")
		            .classed("hover", false)
		        ;
		    };

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:    {get: function(){return width;}, set: function(_){width=_;}},
		        height:   {get: function(){return height;}, set: function(_){height=_;}},
		        xScale:   {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:   {get: function(){return y;}, set: function(_){y=_;}},
		        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},
		        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},
		        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},
		        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
		        id:       {get: function(){return id;}, set: function(_){id=_;}},
		        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},

		        x:     {get: function(){return getX;}, set: function(_){getX=_;}},
		        y:     {get: function(){return getY;}, set: function(_){getY=_;}},
		        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},
		        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},
		        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},
		        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    != undefined ? _.top    : margin.top;
		            margin.right  = _.right  != undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   != undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }}
		    });

		    nv.utils.initOptions(chart);
		    return chart;
		};

		nv.models.cumulativeLineChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var lines = nv.models.line()
		        , xAxis = nv.models.axis()
		        , yAxis = nv.models.axis()
		        , legend = nv.models.legend()
		        , controls = nv.models.legend()
		        , interactiveLayer = nv.interactiveGuideline()
		        , tooltip = nv.models.tooltip()
		        ;

		    var margin = {top: 30, right: 30, bottom: 50, left: 60}
		        , color = nv.utils.defaultColor()
		        , width = null
		        , height = null
		        , showLegend = true
		        , showXAxis = true
		        , showYAxis = true
		        , rightAlignYAxis = false
		        , showControls = true
		        , useInteractiveGuideline = false
		        , rescaleY = true
		        , x //can be accessed via chart.xScale()
		        , y //can be accessed via chart.yScale()
		        , id = lines.id()
		        , state = nv.utils.state()
		        , defaultState = null
		        , noData = null
		        , average = function(d) { return d.average }
		        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')
		        , transitionDuration = 250
		        , duration = 250
		        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.
		        ;

		    state.index = 0;
		    state.rescaleY = rescaleY;

		    xAxis.orient('bottom').tickPadding(7);
		    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');

		    tooltip.valueFormatter(function(d, i) {
		        return yAxis.tickFormat()(d, i);
		    }).headerFormatter(function(d, i) {
		        return xAxis.tickFormat()(d, i);
		    });

		    controls.updateState(false);

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var dx = d3.scale.linear()
		        , index = {i: 0, x: 0}
		        , renderWatch = nv.utils.renderWatch(dispatch, duration)
		        ;

		    var stateGetter = function(data) {
		        return function(){
		            return {
		                active: data.map(function(d) { return !d.disabled }),
		                index: index.i,
		                rescaleY: rescaleY
		            };
		        }
		    };

		    var stateSetter = function(data) {
		        return function(state) {
		            if (state.index !== undefined)
		                index.i = state.index;
		            if (state.rescaleY !== undefined)
		                rescaleY = state.rescaleY;
		            if (state.active !== undefined)
		                data.forEach(function(series,i) {
		                    series.disabled = !state.active[i];
		                });
		        }
		    };

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(lines);
		        if (showXAxis) renderWatch.models(xAxis);
		        if (showYAxis) renderWatch.models(yAxis);
		        selection.each(function(data) {
		            var container = d3.select(this);
		            nv.utils.initSVG(container);
		            container.classed('nv-chart-' + id, true);
		            var that = this;

		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() {
		                if (duration === 0)
		                    container.call(chart);
		                else
		                    container.transition().duration(duration).call(chart)
		            };
		            chart.container = this;

		            state
		                .setter(stateSetter(data), chart.update)
		                .getter(stateGetter(data))
		                .update();

		            // DEPRECATED set state.disableddisabled
		            state.disabled = data.map(function(d) { return !!d.disabled });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            var indexDrag = d3.behavior.drag()
		                .on('dragstart', dragStart)
		                .on('drag', dragMove)
		                .on('dragend', dragEnd);


		            function dragStart(d,i) {
		                d3.select(chart.container)
		                    .style('cursor', 'ew-resize');
		            }

		            function dragMove(d,i) {
		                index.x = d3.event.x;
		                index.i = Math.round(dx.invert(index.x));
		                updateZero();
		            }

		            function dragEnd(d,i) {
		                d3.select(chart.container)
		                    .style('cursor', 'auto');

		                // update state and send stateChange with new index
		                state.index = index.i;
		                dispatch.stateChange(state);
		            }

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container)
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            x = lines.xScale();
		            y = lines.yScale();

		            if (!rescaleY) {
		                var seriesDomains = data
		                    .filter(function(series) { return !series.disabled })
		                    .map(function(series,i) {
		                        var initialDomain = d3.extent(series.values, lines.y());

		                        //account for series being disabled when losing 95% or more
		                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;

		                        return [
		                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),
		                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])
		                        ];
		                    });

		                var completeDomain = [
		                    d3.min(seriesDomains, function(d) { return d[0] }),
		                    d3.max(seriesDomains, function(d) { return d[1] })
		                ];

		                lines.yDomain(completeDomain);
		            } else {
		                lines.yDomain(null);
		            }

		            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length
		                .range([0, availableWidth])
		                .clamp(true);

		            var data = indexify(index.i, data);

		            // Setup containers and skeleton of chart
		            var interactivePointerEvents = (useInteractiveGuideline) ? "none" : "all";
		            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-interactive');
		            gEnter.append('g').attr('class', 'nv-x nv-axis').style("pointer-events","none");
		            gEnter.append('g').attr('class', 'nv-y nv-axis');
		            gEnter.append('g').attr('class', 'nv-background');
		            gEnter.append('g').attr('class', 'nv-linesWrap').style("pointer-events",interactivePointerEvents);
		            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style("pointer-events","none");
		            gEnter.append('g').attr('class', 'nv-legendWrap');
		            gEnter.append('g').attr('class', 'nv-controlsWrap');

		            // Legend
		            if (showLegend) {
		                legend.width(availableWidth);

		                g.select('.nv-legendWrap')
		                    .datum(data)
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                g.select('.nv-legendWrap')
		                    .attr('transform', 'translate(0,' + (-margin.top) +')')
		            }

		            // Controls
		            if (showControls) {
		                var controlsData = [
		                    { key: 'Re-scale y-axis', disabled: !rescaleY }
		                ];

		                controls
		                    .width(140)
		                    .color(['#444', '#444', '#444'])
		                    .rightAlign(false)
		                    .margin({top: 5, right: 0, bottom: 5, left: 20})
		                ;

		                g.select('.nv-controlsWrap')
		                    .datum(controlsData)
		                    .attr('transform', 'translate(0,' + (-margin.top) +')')
		                    .call(controls);
		            }

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }

		            // Show error if series goes below 100%
		            var tempDisabled = data.filter(function(d) { return d.tempDisabled });

		            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates
		            if (tempDisabled.length) {
		                wrap.append('text').attr('class', 'tempDisabled')
		                    .attr('x', availableWidth / 2)
		                    .attr('y', '-.71em')
		                    .style('text-anchor', 'end')
		                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');
		            }

		            //Set up interactive layer
		            if (useInteractiveGuideline) {
		                interactiveLayer
		                    .width(availableWidth)
		                    .height(availableHeight)
		                    .margin({left:margin.left,top:margin.top})
		                    .svgContainer(container)
		                    .xScale(x);
		                wrap.select(".nv-interactive").call(interactiveLayer);
		            }

		            gEnter.select('.nv-background')
		                .append('rect');

		            g.select('.nv-background rect')
		                .attr('width', availableWidth)
		                .attr('height', availableHeight);

		            lines
		                //.x(function(d) { return d.x })
		                .y(function(d) { return d.display.y })
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(data.map(function(d,i) {
		                    return d.color || color(d, i);
		                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));

		            var linesWrap = g.select('.nv-linesWrap')
		                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));

		            linesWrap.call(lines);

		            //Store a series index number in the data array.
		            data.forEach(function(d,i) {
		                d.seriesIndex = i;
		            });

		            var avgLineData = data.filter(function(d) {
		                return !d.disabled && !!average(d);
		            });

		            var avgLines = g.select(".nv-avgLinesWrap").selectAll("line")
		                .data(avgLineData, function(d) { return d.key; });

		            var getAvgLineY = function(d) {
		                //If average lines go off the svg element, clamp them to the svg bounds.
		                var yVal = y(average(d));
		                if (yVal < 0) return 0;
		                if (yVal > availableHeight) return availableHeight;
		                return yVal;
		            };

		            avgLines.enter()
		                .append('line')
		                .style('stroke-width',2)
		                .style('stroke-dasharray','10,10')
		                .style('stroke',function (d,i) {
		                    return lines.color()(d,d.seriesIndex);
		                })
		                .attr('x1',0)
		                .attr('x2',availableWidth)
		                .attr('y1', getAvgLineY)
		                .attr('y2', getAvgLineY);

		            avgLines
		                .style('stroke-opacity',function(d){
		                    //If average lines go offscreen, make them transparent
		                    var yVal = y(average(d));
		                    if (yVal < 0 || yVal > availableHeight) return 0;
		                    return 1;
		                })
		                .attr('x1',0)
		                .attr('x2',availableWidth)
		                .attr('y1', getAvgLineY)
		                .attr('y2', getAvgLineY);

		            avgLines.exit().remove();

		            //Create index line
		            var indexLine = linesWrap.selectAll('.nv-indexLine')
		                .data([index]);
		            indexLine.enter().append('rect').attr('class', 'nv-indexLine')
		                .attr('width', 3)
		                .attr('x', -2)
		                .attr('fill', 'red')
		                .attr('fill-opacity', .5)
		                .style("pointer-events","all")
		                .call(indexDrag);

		            indexLine
		                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })
		                .attr('height', availableHeight);

		            // Setup Axes
		            if (showXAxis) {
		                xAxis
		                    .scale(x)
		                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )
		                    .tickSize(-availableHeight, 0);

		                g.select('.nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + y.range()[0] + ')');
		                g.select('.nv-x.nv-axis')
		                    .call(xAxis);
		            }

		            if (showYAxis) {
		                yAxis
		                    .scale(y)
		                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
		                    .tickSize( -availableWidth, 0);

		                g.select('.nv-y.nv-axis')
		                    .call(yAxis);
		            }

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            function updateZero() {
		                indexLine
		                    .data([index]);

		                //When dragging the index line, turn off line transitions.
		                // Then turn them back on when done dragging.
		                var oldDuration = chart.duration();
		                chart.duration(0);
		                chart.update();
		                chart.duration(oldDuration);
		            }

		            g.select('.nv-background rect')
		                .on('click', function() {
		                    index.x = d3.mouse(this)[0];
		                    index.i = Math.round(dx.invert(index.x));

		                    // update state and send stateChange with new index
		                    state.index = index.i;
		                    dispatch.stateChange(state);

		                    updateZero();
		                });

		            lines.dispatch.on('elementClick', function(e) {
		                index.i = e.pointIndex;
		                index.x = dx(index.i);

		                // update state and send stateChange with new index
		                state.index = index.i;
		                dispatch.stateChange(state);

		                updateZero();
		            });

		            controls.dispatch.on('legendClick', function(d,i) {
		                d.disabled = !d.disabled;
		                rescaleY = !d.disabled;

		                state.rescaleY = rescaleY;
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            legend.dispatch.on('stateChange', function(newState) {
		                for (var key in newState)
		                    state[key] = newState[key];
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            interactiveLayer.dispatch.on('elementMousemove', function(e) {
		                lines.clearHighlights();
		                var singlePoint, pointIndex, pointXLocation, allData = [];

		                data
		                    .filter(function(series, i) {
		                        series.seriesIndex = i;
		                        return !series.disabled;
		                    })
		                    .forEach(function(series,i) {
		                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
		                        lines.highlightPoint(i, pointIndex, true);
		                        var point = series.values[pointIndex];
		                        if (typeof point === 'undefined') return;
		                        if (typeof singlePoint === 'undefined') singlePoint = point;
		                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
		                        allData.push({
		                            key: series.key,
		                            value: chart.y()(point, pointIndex),
		                            color: color(series,series.seriesIndex)
		                        });
		                    });

		                //Highlight the tooltip entry based on which point the mouse is closest to.
		                if (allData.length > 2) {
		                    var yValue = chart.yScale().invert(e.mouseY);
		                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);
		                    var threshold = 0.03 * domainExtent;
		                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);
		                    if (indexToHighlight !== null)
		                        allData[indexToHighlight].highlight = true;
		                }

		                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);
		                interactiveLayer.tooltip
		                    .chartContainer(that.parentNode)
		                    .valueFormatter(function(d,i) {
		                        return yAxis.tickFormat()(d);
		                    })
		                    .data(
		                    {
		                        value: xValue,
		                        series: allData
		                    }
		                )();

		                interactiveLayer.renderGuideLine(pointXLocation);
		            });

		            interactiveLayer.dispatch.on("elementMouseout",function(e) {
		                lines.clearHighlights();
		            });

		            // Update chart from a state object passed to event handler
		            dispatch.on('changeState', function(e) {
		                if (typeof e.disabled !== 'undefined') {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });

		                    state.disabled = e.disabled;
		                }

		                if (typeof e.index !== 'undefined') {
		                    index.i = e.index;
		                    index.x = dx(index.i);

		                    state.index = e.index;

		                    indexLine
		                        .data([index]);
		                }

		                if (typeof e.rescaleY !== 'undefined') {
		                    rescaleY = e.rescaleY;
		                }

		                chart.update();
		            });

		        });

		        renderWatch.renderEnd('cumulativeLineChart immediate');

		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    lines.dispatch.on('elementMouseover.tooltip', function(evt) {
		        var point = {
		            x: chart.x()(evt.point),
		            y: chart.y()(evt.point),
		            color: evt.point.color
		        };
		        evt.point = point;
		        tooltip.data(evt).hidden(false);
		    });

		    lines.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true)
		    });

		    //============================================================
		    // Functions
		    //------------------------------------------------------------

		    var indexifyYGetter = null;
		    /* Normalize the data according to an index point. */
		    function indexify(idx, data) {
		        if (!indexifyYGetter) indexifyYGetter = lines.y();
		        return data.map(function(line, i) {
		            if (!line.values) {
		                return line;
		            }
		            var indexValue = line.values[idx];
		            if (indexValue == null) {
		                return line;
		            }
		            var v = indexifyYGetter(indexValue, idx);

		            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue
		            if (v < -.95 && !noErrorCheck) {
		                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)

		                line.tempDisabled = true;
		                return line;
		            }

		            line.tempDisabled = false;

		            line.values = line.values.map(function(point, pointIndex) {
		                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };
		                return point;
		            });

		            return line;
		        })
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.lines = lines;
		    chart.legend = legend;
		    chart.controls = controls;
		    chart.xAxis = xAxis;
		    chart.yAxis = yAxis;
		    chart.interactiveLayer = interactiveLayer;
		    chart.state = state;
		    chart.tooltip = tooltip;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},
		        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        average: {get: function(){return average;}, set: function(_){average=_;}},
		        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
		        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            legend.color(color);
		        }},
		        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
		            useInteractiveGuideline = _;
		            if (_ === true) {
		                chart.interactive(false);
		                chart.useVoronoi(false);
		            }
		        }},
		        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
		            rightAlignYAxis = _;
		            yAxis.orient( (_) ? 'right' : 'left');
		        }},
		        duration:    {get: function(){return duration;}, set: function(_){
		            duration = _;
		            lines.duration(duration);
		            xAxis.duration(duration);
		            yAxis.duration(duration);
		            renderWatch.reset(duration);
		        }}
		    });

		    nv.utils.inheritOptions(chart, lines);
		    nv.utils.initOptions(chart);

		    return chart;
		};
		//TODO: consider deprecating by adding necessary features to multiBar model
		nv.models.discreteBar = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 960
		        , height = 500
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , container
		        , x = d3.scale.ordinal()
		        , y = d3.scale.linear()
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
		        , color = nv.utils.defaultColor()
		        , showValues = false
		        , valueFormat = d3.format(',.2f')
		        , xDomain
		        , yDomain
		        , xRange
		        , yRange
		        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
		        , rectClass = 'discreteBar'
		        , duration = 250
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var x0, y0;
		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right,
		                availableHeight = height - margin.top - margin.bottom;

		            container = d3.select(this);
		            nv.utils.initSVG(container);

		            //add series index to each data point for reference
		            data.forEach(function(series, i) {
		                series.values.forEach(function(point) {
		                    point.series = i;
		                });
		            });

		            // Setup Scales
		            // remap and flatten the data for use in calculating the scales' domains
		            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate
		                data.map(function(d) {
		                    return d.values.map(function(d,i) {
		                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }
		                    })
		                });

		            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))
		                .rangeBands(xRange || [0, availableWidth], .1);
		            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));

		            // If showValues, pad the Y axis range to account for label height
		            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);
		            else y.range(yRange || [availableHeight, 0]);

		            //store old scales if they exist
		            x0 = x0 || x;
		            y0 = y0 || y.copy().range([y(0),y(0)]);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-groups');
		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later
		            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
		                .data(function(d) { return d }, function(d) { return d.key });
		            groups.enter().append('g')
		                .style('stroke-opacity', 1e-6)
		                .style('fill-opacity', 1e-6);
		            groups.exit()
		                .watchTransition(renderWatch, 'discreteBar: exit groups')
		                .style('stroke-opacity', 1e-6)
		                .style('fill-opacity', 1e-6)
		                .remove();
		            groups
		                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })
		                .classed('hover', function(d) { return d.hover });
		            groups
		                .watchTransition(renderWatch, 'discreteBar: groups')
		                .style('stroke-opacity', 1)
		                .style('fill-opacity', .75);

		            var bars = groups.selectAll('g.nv-bar')
		                .data(function(d) { return d.values });
		            bars.exit().remove();

		            var barsEnter = bars.enter().append('g')
		                .attr('transform', function(d,i,j) {
		                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'
		                })
		                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here
		                    d3.select(this).classed('hover', true);
		                    dispatch.elementMouseover({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mouseout', function(d,i) {
		                    d3.select(this).classed('hover', false);
		                    dispatch.elementMouseout({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mousemove', function(d,i) {
		                    dispatch.elementMousemove({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('click', function(d,i) {
		                    var element = this;
		                    dispatch.elementClick({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill"),
		                        event: d3.event,
		                        element: element
		                    });
		                    d3.event.stopPropagation();
		                })
		                .on('dblclick', function(d,i) {
		                    dispatch.elementDblClick({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                    d3.event.stopPropagation();
		                });

		            barsEnter.append('rect')
		                .attr('height', 0)
		                .attr('width', x.rangeBand() * .9 / data.length )

		            if (showValues) {
		                barsEnter.append('text')
		                    .attr('text-anchor', 'middle')
		                ;

		                bars.select('text')
		                    .text(function(d,i) { return valueFormat(getY(d,i)) })
		                    .watchTransition(renderWatch, 'discreteBar: bars text')
		                    .attr('x', x.rangeBand() * .9 / 2)
		                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })

		                ;
		            } else {
		                bars.selectAll('text').remove();
		            }

		            bars
		                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })
		                .style('fill', function(d,i) { return d.color || color(d,i) })
		                .style('stroke', function(d,i) { return d.color || color(d,i) })
		                .select('rect')
		                .attr('class', rectClass)
		                .watchTransition(renderWatch, 'discreteBar: bars rect')
		                .attr('width', x.rangeBand() * .9 / data.length);
		            bars.watchTransition(renderWatch, 'discreteBar: bars')
		                //.delay(function(d,i) { return i * 1200 / data[0].values.length })
		                .attr('transform', function(d,i) {
		                    var left = x(getX(d,i)) + x.rangeBand() * .05,
		                        top = getY(d,i) < 0 ?
		                            y(0) :
		                                y(0) - y(getY(d,i)) < 1 ?
		                            y(0) - 1 : //make 1 px positive bars show up above y=0
		                            y(getY(d,i));

		                    return 'translate(' + left + ', ' + top + ')'
		                })
		                .select('rect')
		                .attr('height', function(d,i) {
		                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)
		                });


		            //store old scales for use in transitions on update
		            x0 = x.copy();
		            y0 = y.copy();

		        });

		        renderWatch.renderEnd('discreteBar immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:   {get: function(){return width;}, set: function(_){width=_;}},
		        height:  {get: function(){return height;}, set: function(_){height=_;}},
		        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},
		        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},
		        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
		        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
		        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
		        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},
		        id:          {get: function(){return id;}, set: function(_){id=_;}},
		        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		        }}
		    });

		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.discreteBarChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var discretebar = nv.models.discreteBar()
		        , xAxis = nv.models.axis()
		        , yAxis = nv.models.axis()
			, legend = nv.models.legend()
		        , tooltip = nv.models.tooltip()
		        ;

		    var margin = {top: 15, right: 10, bottom: 50, left: 60}
		        , width = null
		        , height = null
		        , color = nv.utils.getColor()
			, showLegend = false
		        , showXAxis = true
		        , showYAxis = true
		        , rightAlignYAxis = false
		        , staggerLabels = false
		        , wrapLabels = false
		        , rotateLabels = 0
		        , x
		        , y
		        , noData = null
		        , dispatch = d3.dispatch('beforeUpdate','renderEnd')
		        , duration = 250
		        ;

		    xAxis
		        .orient('bottom')
		        .showMaxMin(false)
		        .tickFormat(function(d) { return d })
		    ;
		    yAxis
		        .orient((rightAlignYAxis) ? 'right' : 'left')
		        .tickFormat(d3.format(',.1f'))
		    ;

		    tooltip
		        .duration(0)
		        .headerEnabled(false)
		        .valueFormatter(function(d, i) {
		            return yAxis.tickFormat()(d, i);
		        })
		        .keyFormatter(function(d, i) {
		            return xAxis.tickFormat()(d, i);
		        });

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(discretebar);
		        if (showXAxis) renderWatch.models(xAxis);
		        if (showYAxis) renderWatch.models(yAxis);

		        selection.each(function(data) {
		            var container = d3.select(this),
		                that = this;
		            nv.utils.initSVG(container);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() {
		                dispatch.beforeUpdate();
		                container.transition().duration(duration).call(chart);
		            };
		            chart.container = this;

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container);
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            x = discretebar.xScale();
		            y = discretebar.yScale().clamp(true);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');
		            var defsEnter = gEnter.append('defs');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-x nv-axis');
		            gEnter.append('g').attr('class', 'nv-y nv-axis')
		                .append('g').attr('class', 'nv-zeroLine')
		                .append('line');

		            gEnter.append('g').attr('class', 'nv-barsWrap');
			    gEnter.append('g').attr('class', 'nv-legendWrap');

		            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
			    
		            if (showLegend) {
		                legend.width(availableWidth);

		                g.select('.nv-legendWrap')
		                    .datum(data)
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                wrap.select('.nv-legendWrap')
		                    .attr('transform', 'translate(0,' + (-margin.top) +')')
		            }
		            
		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }	    

		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }

		            // Main Chart Component(s)
		            discretebar
		                .width(availableWidth)
		                .height(availableHeight);

		            var barsWrap = g.select('.nv-barsWrap')
		                .datum(data.filter(function(d) { return !d.disabled }));

		            barsWrap.transition().call(discretebar);


		            defsEnter.append('clipPath')
		                .attr('id', 'nv-x-label-clip-' + discretebar.id())
		                .append('rect');

		            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')
		                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))
		                .attr('height', 16)
		                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));

		            // Setup Axes
		            if (showXAxis) {
		                xAxis
		                    .scale(x)
		                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize(-availableHeight, 0);

		                g.select('.nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');
		                g.select('.nv-x.nv-axis').call(xAxis);

		                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
		                if (staggerLabels) {
		                    xTicks
		                        .selectAll('text')
		                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })
		                }

		                if (rotateLabels) {
		                    xTicks
		                        .selectAll('.tick text')
		                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')
		                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');
		                }

		                if (wrapLabels) {
		                    g.selectAll('.tick text')
		                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())
		                }
		            }

		            if (showYAxis) {
		                yAxis
		                    .scale(y)
		                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
		                    .tickSize( -availableWidth, 0);

		                g.select('.nv-y.nv-axis').call(yAxis);
		            }

		            // Zero line
		            g.select(".nv-zeroLine line")
		                .attr("x1",0)
		                .attr("x2",(rightAlignYAxis) ? -availableWidth : availableWidth)
		                .attr("y1", y(0))
		                .attr("y2", y(0))
		            ;
		        });

		        renderWatch.renderEnd('discreteBar chart immediate');
		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {
		        evt['series'] = {
		            key: chart.x()(evt.data),
		            value: chart.y()(evt.data),
		            color: evt.color
		        };
		        tooltip.data(evt).hidden(false);
		    });

		    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true);
		    });

		    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {
		        tooltip();
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.discretebar = discretebar;
		    chart.legend = legend;
		    chart.xAxis = xAxis;
		    chart.yAxis = yAxis;
		    chart.tooltip = tooltip;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
			showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},
		        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},
		        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},
		        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		            discretebar.duration(duration);
		            xAxis.duration(duration);
		            yAxis.duration(duration);
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            discretebar.color(color);
			    legend.color(color);
		        }},
		        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
		            rightAlignYAxis = _;
		            yAxis.orient( (_) ? 'right' : 'left');
		        }}
		    });

		    nv.utils.inheritOptions(chart, discretebar);
		    nv.utils.initOptions(chart);

		    return chart;
		}

		nv.models.distribution = function() {
		    "use strict";
		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 400 //technically width or height depending on x or y....
		        , size = 8
		        , axis = 'x' // 'x' or 'y'... horizontal or vertical
		        , getData = function(d) { return d[axis] }  // defaults d.x or d.y
		        , color = nv.utils.defaultColor()
		        , scale = d3.scale.linear()
		        , domain
		        , duration = 250
		        , dispatch = d3.dispatch('renderEnd')
		        ;

		    //============================================================


		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var scale0;
		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    //============================================================


		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),
		                naxis = axis == 'x' ? 'y' : 'x',
		                container = d3.select(this);
		            nv.utils.initSVG(container);

		            //------------------------------------------------------------
		            // Setup Scales

		            scale0 = scale0 || scale;

		            //------------------------------------------------------------


		            //------------------------------------------------------------
		            // Setup containers and skeleton of chart

		            var wrap = container.selectAll('g.nv-distribution').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

		            //------------------------------------------------------------


		            var distWrap = g.selectAll('g.nv-dist')
		                .data(function(d) { return d }, function(d) { return d.key });

		            distWrap.enter().append('g');
		            distWrap
		                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })
		                .style('stroke', function(d,i) { return color(d, i) });

		            var dist = distWrap.selectAll('line.nv-dist' + axis)
		                .data(function(d) { return d.values })
		            dist.enter().append('line')
		                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })
		                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })
		            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')
		                // .transition()
		                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })
		                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })
		                .style('stroke-opacity', 0)
		                .remove();
		            dist
		                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })
		                .attr(naxis + '1', 0)
		                .attr(naxis + '2', size);
		            renderWatch.transition(dist, 'dist')
		                // .transition()
		                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })
		                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })


		            scale0 = scale.copy();

		        });
		        renderWatch.renderEnd('distribution immediate');
		        return chart;
		    }


		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------
		    chart.options = nv.utils.optionsFunc.bind(chart);
		    chart.dispatch = dispatch;

		    chart.margin = function(_) {
		        if (!arguments.length) return margin;
		        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;
		        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;
		        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
		        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;
		        return chart;
		    };

		    chart.width = function(_) {
		        if (!arguments.length) return width;
		        width = _;
		        return chart;
		    };

		    chart.axis = function(_) {
		        if (!arguments.length) return axis;
		        axis = _;
		        return chart;
		    };

		    chart.size = function(_) {
		        if (!arguments.length) return size;
		        size = _;
		        return chart;
		    };

		    chart.getData = function(_) {
		        if (!arguments.length) return getData;
		        getData = d3.functor(_);
		        return chart;
		    };

		    chart.scale = function(_) {
		        if (!arguments.length) return scale;
		        scale = _;
		        return chart;
		    };

		    chart.color = function(_) {
		        if (!arguments.length) return color;
		        color = nv.utils.getColor(_);
		        return chart;
		    };

		    chart.duration = function(_) {
		        if (!arguments.length) return duration;
		        duration = _;
		        renderWatch.reset(duration);
		        return chart;
		    };
		    //============================================================


		    return chart;
		}
		nv.models.furiousLegend = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 5, right: 0, bottom: 5, left: 0}
		        , width = 400
		        , height = 20
		        , getKey = function(d) { return d.key }
		        , color = nv.utils.getColor()
		        , maxKeyLength = 20 //default value for key lengths
		        , align = true
		        , padding = 28 //define how much space between legend items. - recommend 32 for furious version
		        , rightAlign = true
		        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.
		        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)
		        , expanded = false
		        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')
		        , vers = 'classic' //Options are "classic" and "furious"
		        ;

		    function chart(selection) {
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right,
		                container = d3.select(this);
		            nv.utils.initSVG(container);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-legend').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');
		            var g = wrap.select('g');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            var series = g.selectAll('.nv-series')
		                .data(function(d) {
		                    if(vers != 'furious') return d;

		                    return d.filter(function(n) {
		                        return expanded ? true : !n.disengaged;
		                    });
		                });
		            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')

		            var seriesShape;

		            if(vers == 'classic') {
		                seriesEnter.append('circle')
		                    .style('stroke-width', 2)
		                    .attr('class','nv-legend-symbol')
		                    .attr('r', 5);

		                seriesShape = series.select('circle');
		            } else if (vers == 'furious') {
		                seriesEnter.append('rect')
		                    .style('stroke-width', 2)
		                    .attr('class','nv-legend-symbol')
		                    .attr('rx', 3)
		                    .attr('ry', 3);

		                seriesShape = series.select('rect');

		                seriesEnter.append('g')
		                    .attr('class', 'nv-check-box')
		                    .property('innerHTML','<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>')
		                    .attr('transform', 'translate(-10,-8)scale(0.5)');

		                var seriesCheckbox = series.select('.nv-check-box');

		                seriesCheckbox.each(function(d,i) {
		                    d3.select(this).selectAll('path')
		                        .attr('stroke', setTextColor(d,i));
		                });
		            }

		            seriesEnter.append('text')
		                .attr('text-anchor', 'start')
		                .attr('class','nv-legend-text')
		                .attr('dy', '.32em')
		                .attr('dx', '8');

		            var seriesText = series.select('text.nv-legend-text');

		            series
		                .on('mouseover', function(d,i) {
		                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects
		                })
		                .on('mouseout', function(d,i) {
		                    dispatch.legendMouseout(d,i);
		                })
		                .on('click', function(d,i) {
		                    dispatch.legendClick(d,i);
		                    // make sure we re-get data in case it was modified
		                    var data = series.data();
		                    if (updateState) {
		                        if(vers =='classic') {
		                            if (radioButtonMode) {
		                                //Radio button mode: set every series to disabled,
		                                //  and enable the clicked series.
		                                data.forEach(function(series) { series.disabled = true});
		                                d.disabled = false;
		                            }
		                            else {
		                                d.disabled = !d.disabled;
		                                if (data.every(function(series) { return series.disabled})) {
		                                    //the default behavior of NVD3 legends is, if every single series
		                                    // is disabled, turn all series' back on.
		                                    data.forEach(function(series) { series.disabled = false});
		                                }
		                            }
		                        } else if(vers == 'furious') {
		                            if(expanded) {
		                                d.disengaged = !d.disengaged;
		                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;
		                                d.disabled = d.disengaged || d.userDisabled;
		                            } else if (!expanded) {
		                                d.disabled = !d.disabled;
		                                d.userDisabled = d.disabled;
		                                var engaged = data.filter(function(d) { return !d.disengaged; });
		                                if (engaged.every(function(series) { return series.userDisabled })) {
		                                    //the default behavior of NVD3 legends is, if every single series
		                                    // is disabled, turn all series' back on.
		                                    data.forEach(function(series) {
		                                        series.disabled = series.userDisabled = false;
		                                    });
		                                }
		                            }
		                        }
		                        dispatch.stateChange({
		                            disabled: data.map(function(d) { return !!d.disabled }),
		                            disengaged: data.map(function(d) { return !!d.disengaged })
		                        });

		                    }
		                })
		                .on('dblclick', function(d,i) {
		                    if(vers == 'furious' && expanded) return;
		                    dispatch.legendDblclick(d,i);
		                    if (updateState) {
		                        // make sure we re-get data in case it was modified
		                        var data = series.data();
		                        //the default behavior of NVD3 legends, when double clicking one,
		                        // is to set all other series' to false, and make the double clicked series enabled.
		                        data.forEach(function(series) {
		                            series.disabled = true;
		                            if(vers == 'furious') series.userDisabled = series.disabled;
		                        });
		                        d.disabled = false;
		                        if(vers == 'furious') d.userDisabled = d.disabled;
		                        dispatch.stateChange({
		                            disabled: data.map(function(d) { return !!d.disabled })
		                        });
		                    }
		                });

		            series.classed('nv-disabled', function(d) { return d.userDisabled });
		            series.exit().remove();

		            seriesText
		                .attr('fill', setTextColor)
		                .text(getKey);

		            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)
		            // NEW ALIGNING CODE, TODO: clean up

		            var versPadding;
		            switch(vers) {
		                case 'furious' :
		                    versPadding = 23;
		                    break;
		                case 'classic' :
		                    versPadding = 20;
		            }

		            if (align) {

		                var seriesWidths = [];
		                series.each(function(d,i) {
		                    var legendText;
		                    if (getKey(d).length > maxKeyLength) { 
		                        var trimmedKey = getKey(d).substring(0, maxKeyLength);
		                        legendText = d3.select(this).select('text').text(trimmedKey + "...");
		                        d3.select(this).append("svg:title").text(getKey(d));
		                    } else {
		                        legendText = d3.select(this).select('text');
		                    } 
		                    var nodeTextLength;
		                    try {
		                        nodeTextLength = legendText.node().getComputedTextLength();
		                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead
		                        if(nodeTextLength <= 0) throw Error();
		                    }
		                    catch(e) {
		                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);
		                    }

		                    seriesWidths.push(nodeTextLength + padding);
		                });

		                var seriesPerRow = 0;
		                var legendWidth = 0;
		                var columnWidths = [];

		                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {
		                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];
		                    legendWidth += seriesWidths[seriesPerRow++];
		                }
		                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row

		                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {
		                    columnWidths = [];
		                    seriesPerRow--;

		                    for (var k = 0; k < seriesWidths.length; k++) {
		                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )
		                            columnWidths[k % seriesPerRow] = seriesWidths[k];
		                    }

		                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {
		                        return prev + cur;
		                    });
		                }

		                var xPositions = [];
		                for (var i = 0, curX = 0; i < seriesPerRow; i++) {
		                    xPositions[i] = curX;
		                    curX += columnWidths[i];
		                }

		                series
		                    .attr('transform', function(d, i) {
		                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';
		                    });

		                //position legend as far right as possible within the total width
		                if (rightAlign) {
		                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');
		                }
		                else {
		                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');
		                }

		                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);

		            } else {

		                var ypos = 5,
		                    newxpos = 5,
		                    maxwidth = 0,
		                    xpos;
		                series
		                    .attr('transform', function(d, i) {
		                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;
		                        xpos = newxpos;

		                        if (width < margin.left + margin.right + xpos + length) {
		                            newxpos = xpos = 5;
		                            ypos += versPadding;
		                        }

		                        newxpos += length;
		                        if (newxpos > maxwidth) maxwidth = newxpos;

		                        return 'translate(' + xpos + ',' + ypos + ')';
		                    });

		                //position legend as far right as possible within the total width
		                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');

		                height = margin.top + margin.bottom + ypos + 15;
		            }

		            if(vers == 'furious') {
		                // Size rectangles after text is placed
		                seriesShape
		                    .attr('width', function(d,i) {
		                        return seriesText[0][i].getComputedTextLength() + 27;
		                    })
		                    .attr('height', 18)
		                    .attr('y', -9)
		                    .attr('x', -15)
		            }

		            seriesShape
		                .style('fill', setBGColor)
		                .style('stroke', function(d,i) { return d.color || color(d, i) });
		        });

		        function setTextColor(d,i) {
		            if(vers != 'furious') return '#000';
		            if(expanded) {
		                return d.disengaged ? color(d,i) : '#fff';
		            } else if (!expanded) {
		                return !!d.disabled ? color(d,i) : '#fff';
		            }
		        }

		        function setBGColor(d,i) {
		            if(expanded && vers == 'furious') {
		                return d.disengaged ? '#fff' : color(d,i);
		            } else {
		                return !!d.disabled ? '#fff' : color(d,i);
		            }
		        }

		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        key:        {get: function(){return getKey;}, set: function(_){getKey=_;}},
		        align:      {get: function(){return align;}, set: function(_){align=_;}},
		        rightAlign:    {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},
		        maxKeyLength:  {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},
		        padding:       {get: function(){return padding;}, set: function(_){padding=_;}},
		        updateState:   {get: function(){return updateState;}, set: function(_){updateState=_;}},
		        radioButtonMode:    {get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},
		        expanded:   {get: function(){return expanded;}, set: function(_){expanded=_;}},
		        vers:   {get: function(){return vers;}, set: function(_){vers=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }}
		    });

		    nv.utils.initOptions(chart);

		    return chart;
		};
		//TODO: consider deprecating and using multibar with single series for this
		nv.models.historicalBar = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = null
		        , height = null
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , container = null
		        , x = d3.scale.linear()
		        , y = d3.scale.linear()
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , forceX = []
		        , forceY = [0]
		        , padData = false
		        , clipEdge = true
		        , color = nv.utils.defaultColor()
		        , xDomain
		        , yDomain
		        , xRange
		        , yRange
		        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
		        , interactive = true
		        ;

		    var renderWatch = nv.utils.renderWatch(dispatch, 0);

		    function chart(selection) {
		        selection.each(function(data) {
		            renderWatch.reset();

		            container = d3.select(this);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            nv.utils.initSVG(container);

		            // Setup Scales
		            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));

		            if (padData)
		                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
		            else
		                x.range(xRange || [0, availableWidth]);

		            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))
		                .range(yRange || [availableHeight, 0]);

		            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
		            if (x.domain()[0] === x.domain()[1])
		                x.domain()[0] ?
		                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
		                    : x.domain([-1,1]);

		            if (y.domain()[0] === y.domain()[1])
		                y.domain()[0] ?
		                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
		                    : y.domain([-1,1]);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);
		            var defsEnter = wrapEnter.append('defs');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-bars');
		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            container
		                .on('click', function(d,i) {
		                    dispatch.chartClick({
		                        data: d,
		                        index: i,
		                        pos: d3.event,
		                        id: id
		                    });
		                });

		            defsEnter.append('clipPath')
		                .attr('id', 'nv-chart-clip-path-' + id)
		                .append('rect');

		            wrap.select('#nv-chart-clip-path-' + id + ' rect')
		                .attr('width', availableWidth)
		                .attr('height', availableHeight);

		            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');

		            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')
		                .data(function(d) { return d }, function(d,i) {return getX(d,i)});
		            bars.exit().remove();

		            bars.enter().append('rect')
		                .attr('x', 0 )
		                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })
		                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })
		                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })
		                .on('mouseover', function(d,i) {
		                    if (!interactive) return;
		                    d3.select(this).classed('hover', true);
		                    dispatch.elementMouseover({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });

		                })
		                .on('mouseout', function(d,i) {
		                    if (!interactive) return;
		                    d3.select(this).classed('hover', false);
		                    dispatch.elementMouseout({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mousemove', function(d,i) {
		                    if (!interactive) return;
		                    dispatch.elementMousemove({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('click', function(d,i) {
		                    if (!interactive) return;
		                    dispatch.elementClick({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                    d3.event.stopPropagation();
		                })
		                .on('dblclick', function(d,i) {
		                    if (!interactive) return;
		                    dispatch.elementDblClick({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                    d3.event.stopPropagation();
		                });

		            bars
		                .attr('fill', function(d,i) { return color(d, i); })
		                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })
		                .watchTransition(renderWatch, 'bars')
		                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })
		                //TODO: better width calculations that don't assume always uniform data spacing;w
		                .attr('width', (availableWidth / data[0].values.length) * .9 );

		            bars.watchTransition(renderWatch, 'bars')
		                .attr('y', function(d,i) {
		                    var rval = getY(d,i) < 0 ?
		                        y(0) :
		                            y(0) - y(getY(d,i)) < 1 ?
		                        y(0) - 1 :
		                        y(getY(d,i));
		                    return nv.utils.NaNtoZero(rval);
		                })
		                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });

		        });

		        renderWatch.renderEnd('historicalBar immediate');
		        return chart;
		    }

		    //Create methods to allow outside functions to highlight a specific bar.
		    chart.highlightPoint = function(pointIndex, isHoverOver) {
		        container
		            .select(".nv-bars .nv-bar-0-" + pointIndex)
		            .classed("hover", isHoverOver)
		        ;
		    };

		    chart.clearHighlights = function() {
		        container
		            .select(".nv-bars .nv-bar.hover")
		            .classed("hover", false)
		        ;
		    };

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:   {get: function(){return width;}, set: function(_){width=_;}},
		        height:  {get: function(){return height;}, set: function(_){height=_;}},
		        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},
		        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},
		        padData: {get: function(){return padData;}, set: function(_){padData=_;}},
		        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
		        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
		        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
		        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
		        id:          {get: function(){return id;}, set: function(_){id=_;}},
		        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }}
		    });

		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.historicalBarChart = function(bar_model) {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var bars = bar_model || nv.models.historicalBar()
		        , xAxis = nv.models.axis()
		        , yAxis = nv.models.axis()
		        , legend = nv.models.legend()
		        , interactiveLayer = nv.interactiveGuideline()
		        , tooltip = nv.models.tooltip()
		        ;


		    var margin = {top: 30, right: 90, bottom: 50, left: 90}
		        , color = nv.utils.defaultColor()
		        , width = null
		        , height = null
		        , showLegend = false
		        , showXAxis = true
		        , showYAxis = true
		        , rightAlignYAxis = false
		        , useInteractiveGuideline = false
		        , x
		        , y
		        , state = {}
		        , defaultState = null
		        , noData = null
		        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')
		        , transitionDuration = 250
		        ;

		    xAxis.orient('bottom').tickPadding(7);
		    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');
		    tooltip
		        .duration(0)
		        .headerEnabled(false)
		        .valueFormatter(function(d, i) {
		            return yAxis.tickFormat()(d, i);
		        })
		        .headerFormatter(function(d, i) {
		            return xAxis.tickFormat()(d, i);
		        });


		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch, 0);

		    function chart(selection) {
		        selection.each(function(data) {
		            renderWatch.reset();
		            renderWatch.models(bars);
		            if (showXAxis) renderWatch.models(xAxis);
		            if (showYAxis) renderWatch.models(yAxis);

		            var container = d3.select(this),
		                that = this;
		            nv.utils.initSVG(container);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };
		            chart.container = this;

		            //set state.disabled
		            state.disabled = data.map(function(d) { return !!d.disabled });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            // Display noData message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container)
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            x = bars.xScale();
		            y = bars.yScale();

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-x nv-axis');
		            gEnter.append('g').attr('class', 'nv-y nv-axis');
		            gEnter.append('g').attr('class', 'nv-barsWrap');
		            gEnter.append('g').attr('class', 'nv-legendWrap');
		            gEnter.append('g').attr('class', 'nv-interactive');

		            // Legend
		            if (showLegend) {
		                legend.width(availableWidth);

		                g.select('.nv-legendWrap')
		                    .datum(data)
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                wrap.select('.nv-legendWrap')
		                    .attr('transform', 'translate(0,' + (-margin.top) +')')
		            }
		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }

		            //Set up interactive layer
		            if (useInteractiveGuideline) {
		                interactiveLayer
		                    .width(availableWidth)
		                    .height(availableHeight)
		                    .margin({left:margin.left, top:margin.top})
		                    .svgContainer(container)
		                    .xScale(x);
		                wrap.select(".nv-interactive").call(interactiveLayer);
		            }
		            bars
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(data.map(function(d,i) {
		                    return d.color || color(d, i);
		                }).filter(function(d,i) { return !data[i].disabled }));

		            var barsWrap = g.select('.nv-barsWrap')
		                .datum(data.filter(function(d) { return !d.disabled }));
		            barsWrap.transition().call(bars);

		            // Setup Axes
		            if (showXAxis) {
		                xAxis
		                    .scale(x)
		                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize(-availableHeight, 0);

		                g.select('.nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + y.range()[0] + ')');
		                g.select('.nv-x.nv-axis')
		                    .transition()
		                    .call(xAxis);
		            }

		            if (showYAxis) {
		                yAxis
		                    .scale(y)
		                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
		                    .tickSize( -availableWidth, 0);

		                g.select('.nv-y.nv-axis')
		                    .transition()
		                    .call(yAxis);
		            }

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            interactiveLayer.dispatch.on('elementMousemove', function(e) {
		                bars.clearHighlights();

		                var singlePoint, pointIndex, pointXLocation, allData = [];
		                data
		                    .filter(function(series, i) {
		                        series.seriesIndex = i;
		                        return !series.disabled;
		                    })
		                    .forEach(function(series,i) {
		                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
		                        bars.highlightPoint(pointIndex,true);
		                        var point = series.values[pointIndex];
		                        if (point === undefined) return;
		                        if (singlePoint === undefined) singlePoint = point;
		                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
		                        allData.push({
		                            key: series.key,
		                            value: chart.y()(point, pointIndex),
		                            color: color(series,series.seriesIndex),
		                            data: series.values[pointIndex]
		                        });
		                    });

		                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));
		                interactiveLayer.tooltip
		                    .chartContainer(that.parentNode)
		                    .valueFormatter(function(d,i) {
		                        return yAxis.tickFormat()(d);
		                    })
		                    .data({
		                        value: xValue,
		                        index: pointIndex,
		                        series: allData
		                    })();

		                interactiveLayer.renderGuideLine(pointXLocation);

		            });

		            interactiveLayer.dispatch.on("elementMouseout",function(e) {
		                dispatch.tooltipHide();
		                bars.clearHighlights();
		            });

		            legend.dispatch.on('legendClick', function(d,i) {
		                d.disabled = !d.disabled;

		                if (!data.filter(function(d) { return !d.disabled }).length) {
		                    data.map(function(d) {
		                        d.disabled = false;
		                        wrap.selectAll('.nv-series').classed('disabled', false);
		                        return d;
		                    });
		                }

		                state.disabled = data.map(function(d) { return !!d.disabled });
		                dispatch.stateChange(state);

		                selection.transition().call(chart);
		            });

		            legend.dispatch.on('legendDblclick', function(d) {
		                //Double clicking should always enable current series, and disabled all others.
		                data.forEach(function(d) {
		                    d.disabled = true;
		                });
		                d.disabled = false;

		                state.disabled = data.map(function(d) { return !!d.disabled });
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            dispatch.on('changeState', function(e) {
		                if (typeof e.disabled !== 'undefined') {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });

		                    state.disabled = e.disabled;
		                }

		                chart.update();
		            });
		        });

		        renderWatch.renderEnd('historicalBarChart immediate');
		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    bars.dispatch.on('elementMouseover.tooltip', function(evt) {
		        evt['series'] = {
		            key: chart.x()(evt.data),
		            value: chart.y()(evt.data),
		            color: evt.color
		        };
		        tooltip.data(evt).hidden(false);
		    });

		    bars.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true);
		    });

		    bars.dispatch.on('elementMousemove.tooltip', function(evt) {
		        tooltip();
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.bars = bars;
		    chart.legend = legend;
		    chart.xAxis = xAxis;
		    chart.yAxis = yAxis;
		    chart.interactiveLayer = interactiveLayer;
		    chart.tooltip = tooltip;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            legend.color(color);
		            bars.color(color);
		        }},
		        duration:    {get: function(){return transitionDuration;}, set: function(_){
		            transitionDuration=_;
		            renderWatch.reset(transitionDuration);
		            yAxis.duration(transitionDuration);
		            xAxis.duration(transitionDuration);
		        }},
		        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
		            rightAlignYAxis = _;
		            yAxis.orient( (_) ? 'right' : 'left');
		        }},
		        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
		            useInteractiveGuideline = _;
		            if (_ === true) {
		                chart.interactive(false);
		            }
		        }}
		    });

		    nv.utils.inheritOptions(chart, bars);
		    nv.utils.initOptions(chart);

		    return chart;
		};


		// ohlcChart is just a historical chart with ohlc bars and some tweaks
		nv.models.ohlcBarChart = function() {
		    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());

		    // special default tooltip since we show multiple values per x
		    chart.useInteractiveGuideline(true);
		    chart.interactiveLayer.tooltip.contentGenerator(function(data) {
		        // we assume only one series exists for this chart
		        var d = data.series[0].data;
		        // match line colors as defined in nv.d3.css
		        var color = d.open < d.close ? "2ca02c" : "d62728";
		        return '' +
		            '<h3 style="color: #' + color + '">' + data.value + '</h3>' +
		            '<table>' +
		            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +
		            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +
		            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +
		            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +
		            '</table>';
		    });
		    return chart;
		};

		// candlestickChart is just a historical chart with candlestick bars and some tweaks
		nv.models.candlestickBarChart = function() {
		    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());

		    // special default tooltip since we show multiple values per x
		    chart.useInteractiveGuideline(true);
		    chart.interactiveLayer.tooltip.contentGenerator(function(data) {
		        // we assume only one series exists for this chart
		        var d = data.series[0].data;
		        // match line colors as defined in nv.d3.css
		        var color = d.open < d.close ? "2ca02c" : "d62728";
		        return '' +
		            '<h3 style="color: #' + color + '">' + data.value + '</h3>' +
		            '<table>' +
		            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +
		            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +
		            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +
		            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +
		            '</table>';
		    });
		    return chart;
		};
		nv.models.legend = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 5, right: 0, bottom: 5, left: 0}
		        , width = 400
		        , height = 20
		        , getKey = function(d) { return d.key }
		        , color = nv.utils.getColor()
		        , maxKeyLength = 20 //default value for key lengths
		        , align = true
		        , padding = 32 //define how much space between legend items. - recommend 32 for furious version
		        , rightAlign = true
		        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.
		        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)
		        , expanded = false
		        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')
		        , vers = 'classic' //Options are "classic" and "furious"
		        ;

		    function chart(selection) {
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right,
		                container = d3.select(this);
		            nv.utils.initSVG(container);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-legend').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');
		            var g = wrap.select('g');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            var series = g.selectAll('.nv-series')
		                .data(function(d) {
		                    if(vers != 'furious') return d;

		                    return d.filter(function(n) {
		                        return expanded ? true : !n.disengaged;
		                    });
		                });

		            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');
		            var seriesShape;

		            var versPadding;
		            switch(vers) {
		                case 'furious' :
		                    versPadding = 23;
		                    break;
		                case 'classic' :
		                    versPadding = 20;
		            }

		            if(vers == 'classic') {
		                seriesEnter.append('circle')
		                    .style('stroke-width', 2)
		                    .attr('class','nv-legend-symbol')
		                    .attr('r', 5);

		                seriesShape = series.select('circle');
		            } else if (vers == 'furious') {
		                seriesEnter.append('rect')
		                    .style('stroke-width', 2)
		                    .attr('class','nv-legend-symbol')
		                    .attr('rx', 3)
		                    .attr('ry', 3);
		                seriesShape = series.select('.nv-legend-symbol');

		                seriesEnter.append('g')
		                    .attr('class', 'nv-check-box')
		                    .property('innerHTML','<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>')
		                    .attr('transform', 'translate(-10,-8)scale(0.5)');

		                var seriesCheckbox = series.select('.nv-check-box');

		                seriesCheckbox.each(function(d,i) {
		                    d3.select(this).selectAll('path')
		                        .attr('stroke', setTextColor(d,i));
		                });
		            }

		            seriesEnter.append('text')
		                .attr('text-anchor', 'start')
		                .attr('class','nv-legend-text')
		                .attr('dy', '.32em')
		                .attr('dx', '8');

		            var seriesText = series.select('text.nv-legend-text');

		            series
		                .on('mouseover', function(d,i) {
		                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects
		                })
		                .on('mouseout', function(d,i) {
		                    dispatch.legendMouseout(d,i);
		                })
		                .on('click', function(d,i) {
		                    dispatch.legendClick(d,i);
		                    // make sure we re-get data in case it was modified
		                    var data = series.data();
		                    if (updateState) {
		                        if(vers =='classic') {
		                            if (radioButtonMode) {
		                                //Radio button mode: set every series to disabled,
		                                //  and enable the clicked series.
		                                data.forEach(function(series) { series.disabled = true});
		                                d.disabled = false;
		                            }
		                            else {
		                                d.disabled = !d.disabled;
		                                if (data.every(function(series) { return series.disabled})) {
		                                    //the default behavior of NVD3 legends is, if every single series
		                                    // is disabled, turn all series' back on.
		                                    data.forEach(function(series) { series.disabled = false});
		                                }
		                            }
		                        } else if(vers == 'furious') {
		                            if(expanded) {
		                                d.disengaged = !d.disengaged;
		                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;
		                                d.disabled = d.disengaged || d.userDisabled;
		                            } else if (!expanded) {
		                                d.disabled = !d.disabled;
		                                d.userDisabled = d.disabled;
		                                var engaged = data.filter(function(d) { return !d.disengaged; });
		                                if (engaged.every(function(series) { return series.userDisabled })) {
		                                    //the default behavior of NVD3 legends is, if every single series
		                                    // is disabled, turn all series' back on.
		                                    data.forEach(function(series) {
		                                        series.disabled = series.userDisabled = false;
		                                    });
		                                }
		                            }
		                        }
		                        dispatch.stateChange({
		                            disabled: data.map(function(d) { return !!d.disabled }),
		                            disengaged: data.map(function(d) { return !!d.disengaged })
		                        });

		                    }
		                })
		                .on('dblclick', function(d,i) {
		                    if(vers == 'furious' && expanded) return;
		                    dispatch.legendDblclick(d,i);
		                    if (updateState) {
		                        // make sure we re-get data in case it was modified
		                        var data = series.data();
		                        //the default behavior of NVD3 legends, when double clicking one,
		                        // is to set all other series' to false, and make the double clicked series enabled.
		                        data.forEach(function(series) {
		                            series.disabled = true;
		                            if(vers == 'furious') series.userDisabled = series.disabled;
		                        });
		                        d.disabled = false;
		                        if(vers == 'furious') d.userDisabled = d.disabled;
		                        dispatch.stateChange({
		                            disabled: data.map(function(d) { return !!d.disabled })
		                        });
		                    }
		                });

		            series.classed('nv-disabled', function(d) { return d.userDisabled });
		            series.exit().remove();

		            seriesText
		                .attr('fill', setTextColor)
		                .text(getKey);

		            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)
		            // NEW ALIGNING CODE, TODO: clean up
		            var legendWidth = 0;
		            if (align) {

		                var seriesWidths = [];
		                series.each(function(d,i) {
		                    var legendText;
		                    if (getKey(d).length > maxKeyLength) { 
		                        var trimmedKey = getKey(d).substring(0, maxKeyLength);
		                        legendText = d3.select(this).select('text').text(trimmedKey + "...");
		                        d3.select(this).append("svg:title").text(getKey(d));
		                    } else {
		                        legendText = d3.select(this).select('text');
		                    } 
		                    var nodeTextLength;
		                    try {
		                        nodeTextLength = legendText.node().getComputedTextLength();
		                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead
		                        if(nodeTextLength <= 0) throw Error();
		                    }
		                    catch(e) {
		                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);
		                    }

		                    seriesWidths.push(nodeTextLength + padding);
		                });

		                var seriesPerRow = 0;
		                var columnWidths = [];
		                legendWidth = 0;

		                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {
		                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];
		                    legendWidth += seriesWidths[seriesPerRow++];
		                }
		                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row

		                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {
		                    columnWidths = [];
		                    seriesPerRow--;

		                    for (var k = 0; k < seriesWidths.length; k++) {
		                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )
		                            columnWidths[k % seriesPerRow] = seriesWidths[k];
		                    }

		                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {
		                        return prev + cur;
		                    });
		                }

		                var xPositions = [];
		                for (var i = 0, curX = 0; i < seriesPerRow; i++) {
		                    xPositions[i] = curX;
		                    curX += columnWidths[i];
		                }

		                series
		                    .attr('transform', function(d, i) {
		                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';
		                    });

		                //position legend as far right as possible within the total width
		                if (rightAlign) {
		                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');
		                }
		                else {
		                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');
		                }

		                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);

		            } else {

		                var ypos = 5,
		                    newxpos = 5,
		                    maxwidth = 0,
		                    xpos;
		                series
		                    .attr('transform', function(d, i) {
		                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;
		                        xpos = newxpos;

		                        if (width < margin.left + margin.right + xpos + length) {
		                            newxpos = xpos = 5;
		                            ypos += versPadding;
		                        }

		                        newxpos += length;
		                        if (newxpos > maxwidth) maxwidth = newxpos;

		                        if(legendWidth < xpos + maxwidth) {
		                            legendWidth = xpos + maxwidth;
		                        }
		                        return 'translate(' + xpos + ',' + ypos + ')';
		                    });

		                //position legend as far right as possible within the total width
		                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');

		                height = margin.top + margin.bottom + ypos + 15;
		            }

		            if(vers == 'furious') {
		                // Size rectangles after text is placed
		                seriesShape
		                    .attr('width', function(d,i) {
		                        return seriesText[0][i].getComputedTextLength() + 27;
		                    })
		                    .attr('height', 18)
		                    .attr('y', -9)
		                    .attr('x', -15);

		                // The background for the expanded legend (UI)
		                gEnter.insert('rect',':first-child')
		                    .attr('class', 'nv-legend-bg')
		                    .attr('fill', '#eee')
		                    // .attr('stroke', '#444')
		                    .attr('opacity',0);

		                var seriesBG = g.select('.nv-legend-bg');

		                seriesBG
		                .transition().duration(300)
		                    .attr('x', -versPadding )
		                    .attr('width', legendWidth + versPadding - 12)
		                    .attr('height', height + 10)
		                    .attr('y', -margin.top - 10)
		                    .attr('opacity', expanded ? 1 : 0);


		            }

		            seriesShape
		                .style('fill', setBGColor)
		                .style('fill-opacity', setBGOpacity)
		                .style('stroke', setBGColor);
		        });

		        function setTextColor(d,i) {
		            if(vers != 'furious') return '#000';
		            if(expanded) {
		                return d.disengaged ? '#000' : '#fff';
		            } else if (!expanded) {
		                if(!d.color) d.color = color(d,i);
		                return !!d.disabled ? d.color : '#fff';
		            }
		        }

		        function setBGColor(d,i) {
		            if(expanded && vers == 'furious') {
		                return d.disengaged ? '#eee' : d.color || color(d,i);
		            } else {
		                return d.color || color(d,i);
		            }
		        }


		        function setBGOpacity(d,i) {
		            if(expanded && vers == 'furious') {
		                return 1;
		            } else {
		                return !!d.disabled ? 0 : 1;
		            }
		        }

		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        key:        {get: function(){return getKey;}, set: function(_){getKey=_;}},
		        align:      {get: function(){return align;}, set: function(_){align=_;}},
		        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},
		        rightAlign:    {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},
		        padding:       {get: function(){return padding;}, set: function(_){padding=_;}},
		        updateState:   {get: function(){return updateState;}, set: function(_){updateState=_;}},
		        radioButtonMode:    {get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},
		        expanded:   {get: function(){return expanded;}, set: function(_){expanded=_;}},
		        vers:   {get: function(){return vers;}, set: function(_){vers=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }}
		    });

		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.line = function() {
		    "use strict";
		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var  scatter = nv.models.scatter()
		        ;

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 960
		        , height = 500
		        , container = null
		        , strokeWidth = 1.5
		        , color = nv.utils.defaultColor() // a function that returns a color
		        , getX = function(d) { return d.x } // accessor to get the x value from a data point
		        , getY = function(d) { return d.y } // accessor to get the y value from a data point
		        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined
		        , isArea = function(d) { return d.area } // decides if a line is an area or just a line
		        , clipEdge = false // if true, masks lines within x and y scale
		        , x //can be accessed via chart.xScale()
		        , y //can be accessed via chart.yScale()
		        , interpolate = "linear" // controls the line interpolation
		        , duration = 250
		        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')
		        ;

		    scatter
		        .pointSize(16) // default size
		        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor
		    ;

		    //============================================================


		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var x0, y0 //used to store previous scales
		        , renderWatch = nv.utils.renderWatch(dispatch, duration)
		        ;

		    //============================================================


		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(scatter);
		        selection.each(function(data) {
		            container = d3.select(this);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);
		            nv.utils.initSVG(container);

		            // Setup Scales
		            x = scatter.xScale();
		            y = scatter.yScale();

		            x0 = x0 || x;
		            y0 = y0 || y;

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');
		            var defsEnter = wrapEnter.append('defs');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-groups');
		            gEnter.append('g').attr('class', 'nv-scatterWrap');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            scatter
		                .width(availableWidth)
		                .height(availableHeight);

		            var scatterWrap = wrap.select('.nv-scatterWrap');
		            scatterWrap.call(scatter);

		            defsEnter.append('clipPath')
		                .attr('id', 'nv-edge-clip-' + scatter.id())
		                .append('rect');

		            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')
		                .attr('width', availableWidth)
		                .attr('height', (availableHeight > 0) ? availableHeight : 0);

		            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');
		            scatterWrap
		                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');

		            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
		                .data(function(d) { return d }, function(d) { return d.key });
		            groups.enter().append('g')
		                .style('stroke-opacity', 1e-6)
		                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })
		                .style('fill-opacity', 1e-6);

		            groups.exit().remove();

		            groups
		                .attr('class', function(d,i) {
		                    return (d.classed || '') + ' nv-group nv-series-' + i;
		                })
		                .classed('hover', function(d) { return d.hover })
		                .style('fill', function(d,i){ return color(d, i) })
		                .style('stroke', function(d,i){ return color(d, i)});
		            groups.watchTransition(renderWatch, 'line: groups')
		                .style('stroke-opacity', 1)
		                .style('fill-opacity', function(d) { return d.fillOpacity || .5});

		            var areaPaths = groups.selectAll('path.nv-area')
		                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area
		            areaPaths.enter().append('path')
		                .attr('class', 'nv-area')
		                .attr('d', function(d) {
		                    return d3.svg.area()
		                        .interpolate(interpolate)
		                        .defined(defined)
		                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })
		                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })
		                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })
		                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this
		                        .apply(this, [d.values])
		                });
		            groups.exit().selectAll('path.nv-area')
		                .remove();

		            areaPaths.watchTransition(renderWatch, 'line: areaPaths')
		                .attr('d', function(d) {
		                    return d3.svg.area()
		                        .interpolate(interpolate)
		                        .defined(defined)
		                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })
		                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })
		                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })
		                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this
		                        .apply(this, [d.values])
		                });

		            var linePaths = groups.selectAll('path.nv-line')
		                .data(function(d) { return [d.values] });

		            linePaths.enter().append('path')
		                .attr('class', 'nv-line')
		                .attr('d',
		                    d3.svg.line()
		                    .interpolate(interpolate)
		                    .defined(defined)
		                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })
		                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })
		            );

		            linePaths.watchTransition(renderWatch, 'line: linePaths')
		                .attr('d',
		                    d3.svg.line()
		                    .interpolate(interpolate)
		                    .defined(defined)
		                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })
		                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })
		            );

		            //store old scales for use in transitions on update
		            x0 = x.copy();
		            y0 = y.copy();
		        });
		        renderWatch.renderEnd('line immediate');
		        return chart;
		    }


		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.scatter = scatter;
		    // Pass through events
		    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });
		    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });
		    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        defined: {get: function(){return defined;}, set: function(_){defined=_;}},
		        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},
		        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		            scatter.duration(duration);
		        }},
		        isArea: {get: function(){return isArea;}, set: function(_){
		            isArea = d3.functor(_);
		        }},
		        x: {get: function(){return getX;}, set: function(_){
		            getX = _;
		            scatter.x(_);
		        }},
		        y: {get: function(){return getY;}, set: function(_){
		            getY = _;
		            scatter.y(_);
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            scatter.color(color);
		        }}
		    });

		    nv.utils.inheritOptions(chart, scatter);
		    nv.utils.initOptions(chart);

		    return chart;
		};
		nv.models.lineChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var lines = nv.models.line()
		        , xAxis = nv.models.axis()
		        , yAxis = nv.models.axis()
		        , legend = nv.models.legend()
		        , interactiveLayer = nv.interactiveGuideline()
		        , tooltip = nv.models.tooltip()
		        , lines2 = nv.models.line()
		        , x2Axis = nv.models.axis()
		        , y2Axis = nv.models.axis()
		        , brush = d3.svg.brush()
		        ;

		    var margin = {top: 30, right: 20, bottom: 50, left: 60}
		        , margin2 = {top: 0, right: 20, bottom: 20, left: 60}
		        , color = nv.utils.defaultColor()
		        , width = null
		        , height = null
		        , showLegend = true
		        , showXAxis = true
		        , showYAxis = true
		        , rightAlignYAxis = false
		        , useInteractiveGuideline = false
		        , x
		        , y
		        , x2
		        , y2
		        , focusEnable = false
		        , focusShowAxisY = false
		        , focusShowAxisX = true
		        , focusHeight = 50
		        , brushExtent = null
		        , state = nv.utils.state()
		        , defaultState = null
		        , noData = null
		        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush', 'stateChange', 'changeState', 'renderEnd')
		        , duration = 250
		        ;

		    // set options on sub-objects for this chart
		    xAxis.orient('bottom').tickPadding(7);
		    yAxis.orient(rightAlignYAxis ? 'right' : 'left');

		    lines.clipEdge(true).duration(0);
		    lines2.interactive(false);
		    // We don't want any points emitted for the focus chart's scatter graph.
		    lines2.pointActive(function(d) { return false; });

		    x2Axis.orient('bottom').tickPadding(5);
		    y2Axis.orient(rightAlignYAxis ? 'right' : 'left');

		    tooltip.valueFormatter(function(d, i) {
		        return yAxis.tickFormat()(d, i);
		    }).headerFormatter(function(d, i) {
		        return xAxis.tickFormat()(d, i);
		    });
		    
		    interactiveLayer.tooltip.valueFormatter(function(d, i) {
		        return yAxis.tickFormat()(d, i);
		    }).headerFormatter(function(d, i) {
		        return xAxis.tickFormat()(d, i);
		    });


		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    var stateGetter = function(data) {
		        return function(){
		            return {
		                active: data.map(function(d) { return !d.disabled; })
		            };
		        };
		    };

		    var stateSetter = function(data) {
		        return function(state) {
		            if (state.active !== undefined)
		                data.forEach(function(series,i) {
		                    series.disabled = !state.active[i];
		                });
		        };
		    };

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(lines);
		        renderWatch.models(lines2);
		        if (showXAxis) renderWatch.models(xAxis);
		        if (showYAxis) renderWatch.models(yAxis);

		        if (focusShowAxisX) renderWatch.models(x2Axis);
		        if (focusShowAxisY) renderWatch.models(y2Axis);
		        selection.each(function(data) {
		            var container = d3.select(this);
		            nv.utils.initSVG(container);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight1 = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focusHeight : 0),
		                availableHeight2 = focusHeight - margin2.top - margin2.bottom;

		            chart.update = function() { 
		                if( duration === 0 ) {
		                    container.call( chart );
		                } else {
		                    container.transition().duration(duration).call(chart);
		                }
		            };
		            chart.container = this;

		            state
		                .setter(stateSetter(data), chart.update)
		                .getter(stateGetter(data))
		                .update();

		            // DEPRECATED set state.disabled
		            state.disabled = data.map(function(d) { return !!d.disabled; });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            // Display noData message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {
		                nv.utils.noData(chart, container);
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }


		            // Setup Scales
		            x = lines.xScale();
		            y = lines.yScale();
		            x2 = lines2.xScale();
		            y2 = lines2.yScale();

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-legendWrap');

		            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
		            focusEnter.append('g').attr('class', 'nv-background').append('rect');
		            focusEnter.append('g').attr('class', 'nv-x nv-axis');
		            focusEnter.append('g').attr('class', 'nv-y nv-axis');
		            focusEnter.append('g').attr('class', 'nv-linesWrap');
		            focusEnter.append('g').attr('class', 'nv-interactive');

		            var contextEnter = gEnter.append('g').attr('class', 'nv-context');
		            contextEnter.append('g').attr('class', 'nv-background').append('rect');
		            contextEnter.append('g').attr('class', 'nv-x nv-axis');
		            contextEnter.append('g').attr('class', 'nv-y nv-axis');
		            contextEnter.append('g').attr('class', 'nv-linesWrap');
		            contextEnter.append('g').attr('class', 'nv-brushBackground');
		            contextEnter.append('g').attr('class', 'nv-x nv-brush');

		            // Legend
		            if (showLegend) {
		                legend.width(availableWidth);

		                g.select('.nv-legendWrap')
		                    .datum(data)
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focusHeight : 0);
		                }

		                wrap.select('.nv-legendWrap')
		                    .attr('transform', 'translate(0,' + (-margin.top) +')');
		            }

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }

		            //Set up interactive layer
		            if (useInteractiveGuideline) {
		                interactiveLayer
		                    .width(availableWidth)
		                    .height(availableHeight1)
		                    .margin({left:margin.left, top:margin.top})
		                    .svgContainer(container)
		                    .xScale(x);
		                wrap.select(".nv-interactive").call(interactiveLayer);
		            }

		            g.select('.nv-focus .nv-background rect')
		                .attr('width', availableWidth)
		                .attr('height', availableHeight1);
		                
		            lines
		                .width(availableWidth)
		                .height(availableHeight1)
		                .color(data.map(function(d,i) {
		                    return d.color || color(d, i);

		                }).filter(function(d,i) { return !data[i].disabled; }));

		            var linesWrap = g.select('.nv-linesWrap')
		                .datum(data.filter(function(d) { return !d.disabled; }));


		            // Setup Main (Focus) Axes
		            if (showXAxis) {
		                xAxis
		                    .scale(x)
		                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize(-availableHeight1, 0);

		            }

		            if (showYAxis) {
		                yAxis
		                    .scale(y)
		                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )
		                    .tickSize( -availableWidth, 0);
		            }

		            //============================================================
		            // Update Axes
		            //============================================================
		            function updateXAxis() {
		              if(showXAxis) {
		                g.select('.nv-focus .nv-x.nv-axis')
		                  .transition()
		                  .duration(duration)
		                  .call(xAxis)
		                ;
		              }
		            }

		            function updateYAxis() {
		              if(showYAxis) {
		                g.select('.nv-focus .nv-y.nv-axis')
		                  .transition()
		                  .duration(duration)
		                  .call(yAxis)
		                ;
		              }
		            }
		            
		            g.select('.nv-focus .nv-x.nv-axis')
		                .attr('transform', 'translate(0,' + availableHeight1 + ')');

		            if( !focusEnable )
		            {
		                linesWrap.call(lines);
		                updateXAxis();
		                updateYAxis();
		            }
		            else
		            {
		                lines2
		                    .defined(lines.defined())
		                    .width(availableWidth)
		                    .height(availableHeight2)
		                    .color(data.map(function(d,i) {
		                        return d.color || color(d, i);
		                    }).filter(function(d,i) { return !data[i].disabled; }));
		    
		                g.select('.nv-context')
		                    .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')')
		                    .style('display', focusEnable ? 'initial' : 'none')
		                ;
		    
		                var contextLinesWrap = g.select('.nv-context .nv-linesWrap')
		                    .datum(data.filter(function(d) { return !d.disabled; }))
		                    ;
		                    
		                d3.transition(contextLinesWrap).call(lines2);
		                
		            
		                // Setup Brush
		                brush
		                    .x(x2)
		                    .on('brush', function() {
		                        onBrush();
		                    });
		    
		                if (brushExtent) brush.extent(brushExtent);
		    
		                var brushBG = g.select('.nv-brushBackground').selectAll('g')
		                    .data([brushExtent || brush.extent()]);
		        
		                var brushBGenter = brushBG.enter()
		                    .append('g');
		    
		                brushBGenter.append('rect')
		                    .attr('class', 'left')
		                    .attr('x', 0)
		                    .attr('y', 0)
		                    .attr('height', availableHeight2);
		    
		                brushBGenter.append('rect')
		                    .attr('class', 'right')
		                    .attr('x', 0)
		                    .attr('y', 0)
		                    .attr('height', availableHeight2);
		    
		                var gBrush = g.select('.nv-x.nv-brush')
		                    .call(brush);
		                gBrush.selectAll('rect')
		                    .attr('height', availableHeight2);
		                gBrush.selectAll('.resize').append('path').attr('d', resizePath);
		    
		                onBrush();
		    
		                g.select('.nv-context .nv-background rect')
		                    .attr('width', availableWidth)
		                    .attr('height', availableHeight2);
		    
		                // Setup Secondary (Context) Axes
		                if (focusShowAxisX) {
		                  x2Axis
		                      .scale(x2)
		                      ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                      .tickSize(-availableHeight2, 0);
		      
		                  g.select('.nv-context .nv-x.nv-axis')
		                      .attr('transform', 'translate(0,' + y2.range()[0] + ')');
		                  d3.transition(g.select('.nv-context .nv-x.nv-axis'))
		                      .call(x2Axis);
		                }
		    
		                if (focusShowAxisY) {
		                  y2Axis
		                      .scale(y2)
		                      ._ticks( nv.utils.calcTicksY(availableHeight2/36, data) )
		                      .tickSize( -availableWidth, 0);
		      
		                  d3.transition(g.select('.nv-context .nv-y.nv-axis'))
		                      .call(y2Axis);
		                }
		                
		                g.select('.nv-context .nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + y2.range()[0] + ')');
		            }

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            legend.dispatch.on('stateChange', function(newState) {
		                for (var key in newState)
		                    state[key] = newState[key];
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            interactiveLayer.dispatch.on('elementMousemove', function(e) {
		                lines.clearHighlights();
		                var singlePoint, pointIndex, pointXLocation, allData = [];
		                data
		                    .filter(function(series, i) {
		                        series.seriesIndex = i;
		                        return !series.disabled && !series.disableTooltip;
		                    })
		                    .forEach(function(series,i) {
		                        var extent = focusEnable ? (brush.empty() ? x2.domain() : brush.extent()) : x.domain();
		                        var currentValues = series.values.filter(function(d,i) {
		                            return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];
		                        });

		                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());
		                        var point = currentValues[pointIndex];
		                        var pointYValue = chart.y()(point, pointIndex);
		                        if (pointYValue !== null) {
		                            lines.highlightPoint(series.seriesIndex, pointIndex, true);
		                        }
		                        if (point === undefined) return;
		                        if (singlePoint === undefined) singlePoint = point;
		                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
		                        allData.push({
		                            key: series.key,
		                            value: pointYValue,
		                            color: color(series,series.seriesIndex),
		                            data: point
		                        });
		                    });
		                //Highlight the tooltip entry based on which point the mouse is closest to.
		                if (allData.length > 2) {
		                    var yValue = chart.yScale().invert(e.mouseY);
		                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);
		                    var threshold = 0.03 * domainExtent;
		                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);
		                    if (indexToHighlight !== null)
		                        allData[indexToHighlight].highlight = true;
		                }

		                interactiveLayer.tooltip
		                    .chartContainer(chart.container.parentNode)
		                    .valueFormatter(function(d,i) {
		                        return d === null ? "N/A" : yAxis.tickFormat()(d);
		                    })
		                    .data({
		                        value: chart.x()( singlePoint,pointIndex ),
		                        index: pointIndex,
		                        series: allData
		                    })();

		                interactiveLayer.renderGuideLine(pointXLocation);

		            });

		            interactiveLayer.dispatch.on('elementClick', function(e) {
		                var pointXLocation, allData = [];

		                data.filter(function(series, i) {
		                    series.seriesIndex = i;
		                    return !series.disabled;
		                }).forEach(function(series) {
		                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
		                    var point = series.values[pointIndex];
		                    if (typeof point === 'undefined') return;
		                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
		                    var yPos = chart.yScale()(chart.y()(point,pointIndex));
		                    allData.push({
		                        point: point,
		                        pointIndex: pointIndex,
		                        pos: [pointXLocation, yPos],
		                        seriesIndex: series.seriesIndex,
		                        series: series
		                    });
		                });

		                lines.dispatch.elementClick(allData);
		            });

		            interactiveLayer.dispatch.on("elementMouseout",function(e) {
		                lines.clearHighlights();
		            });

		            dispatch.on('changeState', function(e) {
		                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });

		                    state.disabled = e.disabled;
		                }

		                chart.update();
		            });

		            //============================================================
		            // Functions
		            //------------------------------------------------------------
		    
		            // Taken from crossfilter (http://square.github.com/crossfilter/)
		            function resizePath(d) {
		                var e = +(d == 'e'),
		                    x = e ? 1 : -1,
		                    y = availableHeight2 / 3;
		                return 'M' + (0.5 * x) + ',' + y
		                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)
		                    + 'V' + (2 * y - 6)
		                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)
		                    + 'Z'
		                    + 'M' + (2.5 * x) + ',' + (y + 8)
		                    + 'V' + (2 * y - 8)
		                    + 'M' + (4.5 * x) + ',' + (y + 8)
		                    + 'V' + (2 * y - 8);
		            }
		    
		    
		            function updateBrushBG() {
		                if (!brush.empty()) brush.extent(brushExtent);
		                brushBG
		                    .data([brush.empty() ? x2.domain() : brushExtent])
		                    .each(function(d,i) {
		                        var leftWidth = x2(d[0]) - x.range()[0],
		                            rightWidth = availableWidth - x2(d[1]);
		                        d3.select(this).select('.left')
		                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);
		    
		                        d3.select(this).select('.right')
		                            .attr('x', x2(d[1]))
		                            .attr('width', rightWidth < 0 ? 0 : rightWidth);
		                    });
		            }
		    
		    
		            function onBrush() {
		                brushExtent = brush.empty() ? null : brush.extent();
		                var extent = brush.empty() ? x2.domain() : brush.extent();
		    
		                //The brush extent cannot be less than one.  If it is, don't update the line chart.
		                if (Math.abs(extent[0] - extent[1]) <= 1) {
		                    return;
		                }
		    
		                dispatch.brush({extent: extent, brush: brush});
		    
		    
		                updateBrushBG();
		    
		                // Update Main (Focus)
		                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')
		                    .datum(
		                    data
		                        .filter(function(d) { return !d.disabled; })
		                        .map(function(d,i) {
		                            return {
		                                key: d.key,
		                                area: d.area,
		                                classed: d.classed,
		                                values: d.values.filter(function(d,i) {
		                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];
		                                }),
		                                disableTooltip: d.disableTooltip
		                            };
		                        })
		                );
		                focusLinesWrap.transition().duration(duration).call(lines);
		    
		    
		                // Update Main (Focus) Axes
		                updateXAxis();
		                updateYAxis();
		            }


		        });

		        renderWatch.renderEnd('lineChart immediate');
		        return chart;
		    }


		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    lines.dispatch.on('elementMouseover.tooltip', function(evt) {
		        if(!evt.series.disableTooltip){
		            tooltip.data(evt).hidden(false);
		        }
		    });

		    lines.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true);
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.lines = lines;
		    chart.lines2 = lines2;
		    chart.legend = legend;
		    chart.xAxis = xAxis;
		    chart.x2Axis = x2Axis;
		    chart.yAxis = yAxis;
		    chart.y2Axis = y2Axis;
		    chart.interactiveLayer = interactiveLayer;
		    chart.tooltip = tooltip;
		    chart.state = state;
		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},
		        focusHeight:     {get: function(){return height2;}, set: function(_){focusHeight=_;}},
		        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},
		        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},
		        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},
		        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		            lines.duration(duration);
		            xAxis.duration(duration);
		            x2Axis.duration(duration);
		            yAxis.duration(duration);
		            y2Axis.duration(duration);
		        }},
		        focusMargin: {get: function(){return margin2;}, set: function(_){
		            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;
		            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;
		            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;
		            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            legend.color(color);
		            lines.color(color);
		        }},
		        interpolate: {get: function(){return lines.interpolate();}, set: function(_){
		            lines.interpolate(_);
		            lines2.interpolate(_);
		        }},
		        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){
		            xAxis.tickFormat(_);
		            x2Axis.tickFormat(_);
		        }},
		        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){
		            yAxis.tickFormat(_);
		            y2Axis.tickFormat(_);
		        }},
		        x: {get: function(){return lines.x();}, set: function(_){
		            lines.x(_);
		            lines2.x(_);
		        }},
		        y: {get: function(){return lines.y();}, set: function(_){
		            lines.y(_);
		            lines2.y(_);
		        }},
		        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
		            rightAlignYAxis = _;
		            yAxis.orient( rightAlignYAxis ? 'right' : 'left');
		        }},
		        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
		            useInteractiveGuideline = _;
		            if (useInteractiveGuideline) {
		                lines.interactive(false);
		                lines.useVoronoi(false);
		            }
		        }}
		    });

		    nv.utils.inheritOptions(chart, lines);
		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.lineWithFocusChart = function() {
		  return nv.models.lineChart()
		    .margin({ bottom: 30 }) 
		    .focusEnable( true );
		};
		nv.models.linePlusBarChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var lines = nv.models.line()
		        , lines2 = nv.models.line()
		        , bars = nv.models.historicalBar()
		        , bars2 = nv.models.historicalBar()
		        , xAxis = nv.models.axis()
		        , x2Axis = nv.models.axis()
		        , y1Axis = nv.models.axis()
		        , y2Axis = nv.models.axis()
		        , y3Axis = nv.models.axis()
		        , y4Axis = nv.models.axis()
		        , legend = nv.models.legend()
		        , brush = d3.svg.brush()
		        , tooltip = nv.models.tooltip()
		        ;

		    var margin = {top: 30, right: 30, bottom: 30, left: 60}
		        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}
		        , width = null
		        , height = null
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , color = nv.utils.defaultColor()
		        , showLegend = true
		        , focusEnable = true
		        , focusShowAxisY = false
		        , focusShowAxisX = true
		        , focusHeight = 50
		        , extent
		        , brushExtent = null
		        , x
		        , x2
		        , y1
		        , y2
		        , y3
		        , y4
		        , noData = null
		        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')
		        , transitionDuration = 0
		        , state = nv.utils.state()
		        , defaultState = null
		        , legendLeftAxisHint = ' (left axis)'
		        , legendRightAxisHint = ' (right axis)'
		        , switchYAxisOrder = false
		        ;

		    lines.clipEdge(true);
		    lines2.interactive(false);
		    // We don't want any points emitted for the focus chart's scatter graph.
		    lines2.pointActive(function(d) { return false });
		    xAxis.orient('bottom').tickPadding(5);
		    y1Axis.orient('left');
		    y2Axis.orient('right');
		    x2Axis.orient('bottom').tickPadding(5);
		    y3Axis.orient('left');
		    y4Axis.orient('right');

		    tooltip.headerEnabled(true).headerFormatter(function(d, i) {
		        return xAxis.tickFormat()(d, i);
		    });

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var getBarsAxis = function() {
		        return switchYAxisOrder
		            ? { main: y1Axis, focus: y3Axis }
		            : { main: y2Axis, focus: y4Axis }
		    }

		    var getLinesAxis = function() {
		        return switchYAxisOrder
		            ? { main: y2Axis, focus: y4Axis }
		            : { main: y1Axis, focus: y3Axis }
		    }

		    var stateGetter = function(data) {
		        return function(){
		            return {
		                active: data.map(function(d) { return !d.disabled })
		            };
		        }
		    };

		    var stateSetter = function(data) {
		        return function(state) {
		            if (state.active !== undefined)
		                data.forEach(function(series,i) {
		                    series.disabled = !state.active[i];
		                });
		        }
		    };

		    var allDisabled = function(data) {
		      return data.every(function(series) {
		        return series.disabled;
		      });
		    }

		    function chart(selection) {
		        selection.each(function(data) {
		            var container = d3.select(this),
		                that = this;
		            nv.utils.initSVG(container);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight1 = nv.utils.availableHeight(height, container, margin)
		                    - (focusEnable ? focusHeight : 0),
		                availableHeight2 = focusHeight - margin2.top - margin2.bottom;

		            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };
		            chart.container = this;

		            state
		                .setter(stateSetter(data), chart.update)
		                .getter(stateGetter(data))
		                .update();

		            // DEPRECATED set state.disableddisabled
		            state.disabled = data.map(function(d) { return !!d.disabled });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container)
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });
		            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240

		            x = bars.xScale();
		            x2 = x2Axis.scale();

		            // select the scales and series based on the position of the yAxis
		            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();
		            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();
		            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();
		            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();

		            var series1 = data
		                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })
		                .map(function(d) {
		                    return d.values.map(function(d,i) {
		                        return { x: getX(d,i), y: getY(d,i) }
		                    })
		                });

		            var series2 = data
		                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })
		                .map(function(d) {
		                    return d.values.map(function(d,i) {
		                        return { x: getX(d,i), y: getY(d,i) }
		                    })
		                });

		            x.range([0, availableWidth]);

		            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))
		                .range([0, availableWidth]);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-legendWrap');

		            // this is the main chart
		            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
		            focusEnter.append('g').attr('class', 'nv-x nv-axis');
		            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');
		            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');
		            focusEnter.append('g').attr('class', 'nv-barsWrap');
		            focusEnter.append('g').attr('class', 'nv-linesWrap');

		            // context chart is where you can focus in
		            var contextEnter = gEnter.append('g').attr('class', 'nv-context');
		            contextEnter.append('g').attr('class', 'nv-x nv-axis');
		            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');
		            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');
		            contextEnter.append('g').attr('class', 'nv-barsWrap');
		            contextEnter.append('g').attr('class', 'nv-linesWrap');
		            contextEnter.append('g').attr('class', 'nv-brushBackground');
		            contextEnter.append('g').attr('class', 'nv-x nv-brush');

		            //============================================================
		            // Legend
		            //------------------------------------------------------------

		            if (showLegend) {
		                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;
		                var legendXPosition = legend.align() ? legendWidth : 0;

		                legend.width(legendWidth);

		                g.select('.nv-legendWrap')
		                    .datum(data.map(function(series) {
		                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
		                        if(switchYAxisOrder) {
		                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);
		                        } else {
		                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);
		                        }
		                        return series;
		                    }))
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    // FIXME: shouldn't this be "- (focusEnabled ? focusHeight : 0)"?
		                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;
		                }

		                g.select('.nv-legendWrap')
		                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');
		            }

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            //============================================================
		            // Context chart (focus chart) components
		            //------------------------------------------------------------

		            // hide or show the focus context chart
		            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');

		            bars2
		                .width(availableWidth)
		                .height(availableHeight2)
		                .color(data.map(function (d, i) {
		                    return d.color || color(d, i);
		                }).filter(function (d, i) {
		                    return !data[i].disabled && data[i].bar
		                }));
		            lines2
		                .width(availableWidth)
		                .height(availableHeight2)
		                .color(data.map(function (d, i) {
		                    return d.color || color(d, i);
		                }).filter(function (d, i) {
		                    return !data[i].disabled && !data[i].bar
		                }));

		            var bars2Wrap = g.select('.nv-context .nv-barsWrap')
		                .datum(dataBars.length ? dataBars : [
		                    {values: []}
		                ]);
		            var lines2Wrap = g.select('.nv-context .nv-linesWrap')
		                .datum(allDisabled(dataLines) ?
		                       [{values: []}] :
		                       dataLines.filter(function(dataLine) {
		                         return !dataLine.disabled;
		                       }));

		            g.select('.nv-context')
		                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');

		            bars2Wrap.transition().call(bars2);
		            lines2Wrap.transition().call(lines2);

		            // context (focus chart) axis controls
		            if (focusShowAxisX) {
		                x2Axis
		                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))
		                    .tickSize(-availableHeight2, 0);
		                g.select('.nv-context .nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');
		                g.select('.nv-context .nv-x.nv-axis').transition()
		                    .call(x2Axis);
		            }

		            if (focusShowAxisY) {
		                y3Axis
		                    .scale(y3)
		                    ._ticks( availableHeight2 / 36 )
		                    .tickSize( -availableWidth, 0);
		                y4Axis
		                    .scale(y4)
		                    ._ticks( availableHeight2 / 36 )
		                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none

		                g.select('.nv-context .nv-y3.nv-axis')
		                    .style('opacity', dataBars.length ? 1 : 0)
		                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');
		                g.select('.nv-context .nv-y2.nv-axis')
		                    .style('opacity', dataLines.length ? 1 : 0)
		                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');

		                g.select('.nv-context .nv-y1.nv-axis').transition()
		                    .call(y3Axis);
		                g.select('.nv-context .nv-y2.nv-axis').transition()
		                    .call(y4Axis);
		            }

		            // Setup Brush
		            brush.x(x2).on('brush', onBrush);

		            if (brushExtent) brush.extent(brushExtent);

		            var brushBG = g.select('.nv-brushBackground').selectAll('g')
		                .data([brushExtent || brush.extent()]);

		            var brushBGenter = brushBG.enter()
		                .append('g');

		            brushBGenter.append('rect')
		                .attr('class', 'left')
		                .attr('x', 0)
		                .attr('y', 0)
		                .attr('height', availableHeight2);

		            brushBGenter.append('rect')
		                .attr('class', 'right')
		                .attr('x', 0)
		                .attr('y', 0)
		                .attr('height', availableHeight2);

		            var gBrush = g.select('.nv-x.nv-brush')
		                .call(brush);
		            gBrush.selectAll('rect')
		                //.attr('y', -5)
		                .attr('height', availableHeight2);
		            gBrush.selectAll('.resize').append('path').attr('d', resizePath);

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            legend.dispatch.on('stateChange', function(newState) {
		                for (var key in newState)
		                    state[key] = newState[key];
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            // Update chart from a state object passed to event handler
		            dispatch.on('changeState', function(e) {
		                if (typeof e.disabled !== 'undefined') {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });
		                    state.disabled = e.disabled;
		                }
		                chart.update();
		            });

		            //============================================================
		            // Functions
		            //------------------------------------------------------------

		            // Taken from crossfilter (http://square.github.com/crossfilter/)
		            function resizePath(d) {
		                var e = +(d == 'e'),
		                    x = e ? 1 : -1,
		                    y = availableHeight2 / 3;
		                return 'M' + (.5 * x) + ',' + y
		                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)
		                    + 'V' + (2 * y - 6)
		                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)
		                    + 'Z'
		                    + 'M' + (2.5 * x) + ',' + (y + 8)
		                    + 'V' + (2 * y - 8)
		                    + 'M' + (4.5 * x) + ',' + (y + 8)
		                    + 'V' + (2 * y - 8);
		            }


		            function updateBrushBG() {
		                if (!brush.empty()) brush.extent(brushExtent);
		                brushBG
		                    .data([brush.empty() ? x2.domain() : brushExtent])
		                    .each(function(d,i) {
		                        var leftWidth = x2(d[0]) - x2.range()[0],
		                            rightWidth = x2.range()[1] - x2(d[1]);
		                        d3.select(this).select('.left')
		                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);

		                        d3.select(this).select('.right')
		                            .attr('x', x2(d[1]))
		                            .attr('width', rightWidth < 0 ? 0 : rightWidth);
		                    });
		            }

		            function onBrush() {
		                brushExtent = brush.empty() ? null : brush.extent();
		                extent = brush.empty() ? x2.domain() : brush.extent();
		                dispatch.brush({extent: extent, brush: brush});
		                updateBrushBG();

		                // Prepare Main (Focus) Bars and Lines
		                bars
		                    .width(availableWidth)
		                    .height(availableHeight1)
		                    .color(data.map(function(d,i) {
		                        return d.color || color(d, i);
		                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));

		                lines
		                    .width(availableWidth)
		                    .height(availableHeight1)
		                    .color(data.map(function(d,i) {
		                        return d.color || color(d, i);
		                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));

		                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')
		                    .datum(!dataBars.length ? [{values:[]}] :
		                        dataBars
		                            .map(function(d,i) {
		                                return {
		                                    key: d.key,
		                                    values: d.values.filter(function(d,i) {
		                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];
		                                    })
		                                }
		                            })
		                );

		                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')
		                    .datum(allDisabled(dataLines) ? [{values:[]}] :
		                           dataLines
		                           .filter(function(dataLine) { return !dataLine.disabled; })
		                           .map(function(d,i) {
		                                return {
		                                    area: d.area,
		                                    fillOpacity: d.fillOpacity,
		                                    key: d.key,
		                                    values: d.values.filter(function(d,i) {
		                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];
		                                    })
		                                }
		                            })
		                );

		                // Update Main (Focus) X Axis
		                if (dataBars.length && !switchYAxisOrder) {
		                    x = bars.xScale();
		                } else {
		                    x = lines.xScale();
		                }

		                xAxis
		                    .scale(x)
		                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize(-availableHeight1, 0);

		                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);

		                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)
		                    .call(xAxis);

		                // Update Main (Focus) Bars and Lines
		                focusBarsWrap.transition().duration(transitionDuration).call(bars);
		                focusLinesWrap.transition().duration(transitionDuration).call(lines);

		                // Setup and Update Main (Focus) Y Axes
		                g.select('.nv-focus .nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');

		                y1Axis
		                    .scale(y1)
		                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )
		                    .tickSize(-availableWidth, 0);
		                y2Axis
		                    .scale(y2)
		                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )
		                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none

		                // Calculate opacity of the axis
		                var barsOpacity = dataBars.length ? 1 : 0;
		                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;

		                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;
		                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;

		                g.select('.nv-focus .nv-y1.nv-axis')
		                    .style('opacity', y1Opacity);
		                g.select('.nv-focus .nv-y2.nv-axis')
		                    .style('opacity', y2Opacity)
		                    .attr('transform', 'translate(' + x.range()[1] + ',0)');

		                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)
		                    .call(y1Axis);
		                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)
		                    .call(y2Axis);
		            }

		            onBrush();

		        });

		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    lines.dispatch.on('elementMouseover.tooltip', function(evt) {
		        tooltip
		            .duration(100)
		            .valueFormatter(function(d, i) {
		                return getLinesAxis().main.tickFormat()(d, i);
		            })
		            .data(evt)
		            .hidden(false);
		    });

		    lines.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true)
		    });

		    bars.dispatch.on('elementMouseover.tooltip', function(evt) {
		        evt.value = chart.x()(evt.data);
		        evt['series'] = {
		            value: chart.y()(evt.data),
		            color: evt.color
		        };
		        tooltip
		            .duration(0)
		            .valueFormatter(function(d, i) {
		                return getBarsAxis().main.tickFormat()(d, i);
		            })
		            .data(evt)
		            .hidden(false);
		    });

		    bars.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true);
		    });

		    bars.dispatch.on('elementMousemove.tooltip', function(evt) {
		        tooltip();
		    });

		    //============================================================


		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.legend = legend;
		    chart.lines = lines;
		    chart.lines2 = lines2;
		    chart.bars = bars;
		    chart.bars2 = bars2;
		    chart.xAxis = xAxis;
		    chart.x2Axis = x2Axis;
		    chart.y1Axis = y1Axis;
		    chart.y2Axis = y2Axis;
		    chart.y3Axis = y3Axis;
		    chart.y4Axis = y4Axis;
		    chart.tooltip = tooltip;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
		        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},
		        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},
		        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},
		        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},
		        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},
		        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        focusMargin: {get: function(){return margin2;}, set: function(_){
		            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;
		            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;
		            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;
		            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;
		        }},
		        duration: {get: function(){return transitionDuration;}, set: function(_){
		            transitionDuration = _;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            legend.color(color);
		        }},
		        x: {get: function(){return getX;}, set: function(_){
		            getX = _;
		            lines.x(_);
		            lines2.x(_);
		            bars.x(_);
		            bars2.x(_);
		        }},
		        y: {get: function(){return getY;}, set: function(_){
		            getY = _;
		            lines.y(_);
		            lines2.y(_);
		            bars.y(_);
		            bars2.y(_);
		        }},
		        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){
		            // Switch the tick format for the yAxis
		            if(switchYAxisOrder !== _) {
		                var tickFormat = y1Axis.tickFormat();
		                y1Axis.tickFormat(y2Axis.tickFormat());
		                y2Axis.tickFormat(tickFormat);
		            }
		            switchYAxisOrder=_;
		        }}
		    });

		    nv.utils.inheritOptions(chart, lines);
		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.multiBar = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 960
		        , height = 500
		        , x = d3.scale.ordinal()
		        , y = d3.scale.linear()
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , container = null
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
		        , clipEdge = true
		        , stacked = false
		        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function
		        , color = nv.utils.defaultColor()
		        , hideable = false
		        , barColor = null // adding the ability to set the color for each rather than the whole group
		        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled
		        , duration = 500
		        , xDomain
		        , yDomain
		        , xRange
		        , yRange
		        , groupSpacing = 0.1
		        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var x0, y0 //used to store previous scales
		        , renderWatch = nv.utils.renderWatch(dispatch, duration)
		        ;

		    var last_datalength = 0;

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right,
		                availableHeight = height - margin.top - margin.bottom;

		            container = d3.select(this);
		            nv.utils.initSVG(container);
		            var nonStackableCount = 0;
		            // This function defines the requirements for render complete
		            var endFn = function(d, i) {
		                if (d.series === data.length - 1 && i === data[0].values.length - 1)
		                    return true;
		                return false;
		            };

		            if(hideable && data.length) hideable = [{
		                values: data[0].values.map(function(d) {
		                        return {
		                            x: d.x,
		                            y: 0,
		                            series: d.series,
		                            size: 0.01
		                        };}
		                )}];

		            if (stacked) {
		                var parsed = d3.layout.stack()
		                    .offset(stackOffset)
		                    .values(function(d){ return d.values })
		                    .y(getY)
		                (!data.length && hideable ? hideable : data);

		                parsed.forEach(function(series, i){
		                    // if series is non-stackable, use un-parsed data
		                    if (series.nonStackable) {
		                        data[i].nonStackableSeries = nonStackableCount++;
		                        parsed[i] = data[i];
		                    } else {
		                        // don't stack this seires on top of the nonStackable seriees
		                        if (i > 0 && parsed[i - 1].nonStackable){
		                            parsed[i].values.map(function(d,j){
		                                d.y0 -= parsed[i - 1].values[j].y;
		                                d.y1 = d.y0 + d.y;
		                            });
		                        }
		                    }
		                });
		                data = parsed;
		            }
		            //add series index and key to each data point for reference
		            data.forEach(function(series, i) {
		                series.values.forEach(function(point) {
		                    point.series = i;
		                    point.key = series.key;
		                });
		            });

		            // HACK for negative value stacking
		            if (stacked) {
		                data[0].values.map(function(d,i) {
		                    var posBase = 0, negBase = 0;
		                    data.map(function(d, idx) {
		                        if (!data[idx].nonStackable) {
		                            var f = d.values[i]
		                            f.size = Math.abs(f.y);
		                            if (f.y<0)  {
		                                f.y1 = negBase;
		                                negBase = negBase - f.size;
		                            } else
		                            {
		                                f.y1 = f.size + posBase;
		                                posBase = posBase + f.size;
		                            }
		                        }

		                    });
		                });
		            }
		            // Setup Scales
		            // remap and flatten the data for use in calculating the scales' domains
		            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate
		                data.map(function(d, idx) {
		                    return d.values.map(function(d,i) {
		                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }
		                    })
		                });

		            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))
		                .rangeBands(xRange || [0, availableWidth], groupSpacing);

		            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {
		                var domain = d.y;
		                // increase the domain range if this series is stackable
		                if (stacked && !data[d.idx].nonStackable) {
		                    if (d.y > 0){
		                        domain = d.y1
		                    } else {
		                        domain = d.y1 + d.y
		                    }
		                }
		                return domain;
		            }).concat(forceY)))
		            .range(yRange || [availableHeight, 0]);

		            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
		            if (x.domain()[0] === x.domain()[1])
		                x.domain()[0] ?
		                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
		                    : x.domain([-1,1]);

		            if (y.domain()[0] === y.domain()[1])
		                y.domain()[0] ?
		                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
		                    : y.domain([-1,1]);

		            x0 = x0 || x;
		            y0 = y0 || y;

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');
		            var defsEnter = wrapEnter.append('defs');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-groups');
		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            defsEnter.append('clipPath')
		                .attr('id', 'nv-edge-clip-' + id)
		                .append('rect');
		            wrap.select('#nv-edge-clip-' + id + ' rect')
		                .attr('width', availableWidth)
		                .attr('height', availableHeight);

		            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');

		            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
		                .data(function(d) { return d }, function(d,i) { return i });
		            groups.enter().append('g')
		                .style('stroke-opacity', 1e-6)
		                .style('fill-opacity', 1e-6);

		            var exitTransition = renderWatch
		                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))
		                .attr('y', function(d, i, j) {
		                    var yVal = y0(0) || 0;
		                    if (stacked) {
		                        if (data[d.series] && !data[d.series].nonStackable) {
		                            yVal = y0(d.y0);
		                        }
		                    }
		                    return yVal;
		                })
		                .attr('height', 0)
		                .remove();
		            if (exitTransition.delay)
		                exitTransition.delay(function(d,i) {
		                    var delay = i * (duration / (last_datalength + 1)) - i;
		                    return delay;
		                });
		            groups
		                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })
		                .classed('hover', function(d) { return d.hover })
		                .style('fill', function(d,i){ return color(d, i) })
		                .style('stroke', function(d,i){ return color(d, i) });
		            groups
		                .style('stroke-opacity', 1)
		                .style('fill-opacity', 0.75);

		            var bars = groups.selectAll('rect.nv-bar')
		                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });
		            bars.exit().remove();

		            var barsEnter = bars.enter().append('rect')
		                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})
		                    .attr('x', function(d,i,j) {
		                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )
		                    })
		                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })
		                    .attr('height', 0)
		                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })
		                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })
		                ;
		            bars
		                .style('fill', function(d,i,j){ return color(d, j, i);  })
		                .style('stroke', function(d,i,j){ return color(d, j, i); })
		                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here
		                    d3.select(this).classed('hover', true);
		                    dispatch.elementMouseover({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mouseout', function(d,i) {
		                    d3.select(this).classed('hover', false);
		                    dispatch.elementMouseout({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mousemove', function(d,i) {
		                    dispatch.elementMousemove({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('click', function(d,i) {
		                    var element = this;
		                    dispatch.elementClick({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill"),
		                        event: d3.event,
		                        element: element
		                    });
		                    d3.event.stopPropagation();
		                })
		                .on('dblclick', function(d,i) {
		                    dispatch.elementDblClick({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                    d3.event.stopPropagation();
		                });
		            bars
		                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})
		                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })

		            if (barColor) {
		                if (!disabled) disabled = data.map(function() { return true });
		                bars
		                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })
		                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });
		            }

		            var barSelection =
		                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))
		                    .delay(function(d,i) {
		                        return i * duration / data[0].values.length;
		                    });
		            if (stacked){
		                barSelection
		                    .attr('y', function(d,i,j) {
		                        var yVal = 0;
		                        // if stackable, stack it on top of the previous series
		                        if (!data[j].nonStackable) {
		                            yVal = y(d.y1);
		                        } else {
		                            if (getY(d,i) < 0){
		                                yVal = y(0);
		                            } else {
		                                if (y(0) - y(getY(d,i)) < -1){
		                                    yVal = y(0) - 1;
		                                } else {
		                                    yVal = y(getY(d, i)) || 0;
		                                }
		                            }
		                        }
		                        return yVal;
		                    })
		                    .attr('height', function(d,i,j) {
		                        if (!data[j].nonStackable) {
		                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);
		                        } else {
		                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;
		                        }
		                    })
		                    .attr('x', function(d,i,j) {
		                        var width = 0;
		                        if (data[j].nonStackable) {
		                            width = d.series * x.rangeBand() / data.length;
		                            if (data.length !== nonStackableCount){
		                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);
		                            }
		                        }
		                        return width;
		                    })
		                    .attr('width', function(d,i,j){
		                        if (!data[j].nonStackable) {
		                            return x.rangeBand();
		                        } else {
		                            // if all series are nonStacable, take the full width
		                            var width = (x.rangeBand() / nonStackableCount);
		                            // otherwise, nonStackable graph will be only taking the half-width
		                            // of the x rangeBand
		                            if (data.length !== nonStackableCount) {
		                                width = x.rangeBand()/(nonStackableCount*2);
		                            }
		                            return width;
		                        }
		                    });
		            }
		            else {
		                barSelection
		                    .attr('x', function(d,i) {
		                        return d.series * x.rangeBand() / data.length;
		                    })
		                    .attr('width', x.rangeBand() / data.length)
		                    .attr('y', function(d,i) {
		                        return getY(d,i) < 0 ?
		                            y(0) :
		                                y(0) - y(getY(d,i)) < 1 ?
		                            y(0) - 1 :
		                            y(getY(d,i)) || 0;
		                    })
		                    .attr('height', function(d,i) {
		                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;
		                    });
		            }

		            //store old scales for use in transitions on update
		            x0 = x.copy();
		            y0 = y.copy();

		            // keep track of the last data value length for transition calculations
		            if (data[0] && data[0].values) {
		                last_datalength = data[0].values.length;
		            }

		        });

		        renderWatch.renderEnd('multibar immediate');

		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:   {get: function(){return width;}, set: function(_){width=_;}},
		        height:  {get: function(){return height;}, set: function(_){height=_;}},
		        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
		        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
		        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
		        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},
		        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},
		        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},
		        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
		        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},
		        id:          {get: function(){return id;}, set: function(_){id=_;}},
		        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},
		        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }},
		        barColor:  {get: function(){return barColor;}, set: function(_){
		            barColor = _ ? nv.utils.getColor(_) : null;
		        }}
		    });

		    nv.utils.initOptions(chart);

		    return chart;
		};nv.models.multiBarChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var multibar = nv.models.multiBar()
		        , xAxis = nv.models.axis()
		        , yAxis = nv.models.axis()
		        , interactiveLayer = nv.interactiveGuideline()
		        , legend = nv.models.legend()
		        , controls = nv.models.legend()
		        , tooltip = nv.models.tooltip()
		        ;

		    var margin = {top: 30, right: 20, bottom: 50, left: 60}
		        , width = null
		        , height = null
		        , color = nv.utils.defaultColor()
		        , showControls = true
		        , controlLabels = {}
		        , showLegend = true
		        , showXAxis = true
		        , showYAxis = true
		        , rightAlignYAxis = false
		        , reduceXTicks = true // if false a tick will show for every data point
		        , staggerLabels = false
		        , wrapLabels = false
		        , rotateLabels = 0
		        , x //can be accessed via chart.xScale()
		        , y //can be accessed via chart.yScale()
		        , state = nv.utils.state()
		        , defaultState = null
		        , noData = null
		        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')
		        , controlWidth = function() { return showControls ? 180 : 0 }
		        , duration = 250
		        , useInteractiveGuideline = false
		        ;

		    state.stacked = false // DEPRECATED Maintained for backward compatibility

		    multibar.stacked(false);
		    xAxis
		        .orient('bottom')
		        .tickPadding(7)
		        .showMaxMin(false)
		        .tickFormat(function(d) { return d })
		    ;
		    yAxis
		        .orient((rightAlignYAxis) ? 'right' : 'left')
		        .tickFormat(d3.format(',.1f'))
		    ;

		    tooltip
		        .duration(0)
		        .valueFormatter(function(d, i) {
		            return yAxis.tickFormat()(d, i);
		        })
		        .headerFormatter(function(d, i) {
		            return xAxis.tickFormat()(d, i);
		        });

		    controls.updateState(false);

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch);
		    var stacked = false;

		    var stateGetter = function(data) {
		        return function(){
		            return {
		                active: data.map(function(d) { return !d.disabled }),
		                stacked: stacked
		            };
		        }
		    };

		    var stateSetter = function(data) {
		        return function(state) {
		            if (state.stacked !== undefined)
		                stacked = state.stacked;
		            if (state.active !== undefined)
		                data.forEach(function(series,i) {
		                    series.disabled = !state.active[i];
		                });
		        }
		    };

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(multibar);
		        if (showXAxis) renderWatch.models(xAxis);
		        if (showYAxis) renderWatch.models(yAxis);

		        selection.each(function(data) {
		            var container = d3.select(this),
		                that = this;
		            nv.utils.initSVG(container);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() {
		                if (duration === 0)
		                    container.call(chart);
		                else
		                    container.transition()
		                        .duration(duration)
		                        .call(chart);
		            };
		            chart.container = this;

		            state
		                .setter(stateSetter(data), chart.update)
		                .getter(stateGetter(data))
		                .update();

		            // DEPRECATED set state.disableddisabled
		            state.disabled = data.map(function(d) { return !!d.disabled });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            // Display noData message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container)
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            x = multibar.xScale();
		            y = multibar.yScale();

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-x nv-axis');
		            gEnter.append('g').attr('class', 'nv-y nv-axis');
		            gEnter.append('g').attr('class', 'nv-barsWrap');
		            gEnter.append('g').attr('class', 'nv-legendWrap');
		            gEnter.append('g').attr('class', 'nv-controlsWrap');
		            gEnter.append('g').attr('class', 'nv-interactive');

		            // Legend
		            if (showLegend) {
		                legend.width(availableWidth - controlWidth());

		                g.select('.nv-legendWrap')
		                    .datum(data)
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                g.select('.nv-legendWrap')
		                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');
		            }

		            // Controls
		            if (showControls) {
		                var controlsData = [
		                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },
		                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }
		                ];

		                controls.width(controlWidth()).color(['#444', '#444', '#444']);
		                g.select('.nv-controlsWrap')
		                    .datum(controlsData)
		                    .attr('transform', 'translate(0,' + (-margin.top) +')')
		                    .call(controls);
		            }

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }

		            // Main Chart Component(s)
		            multibar
		                .disabled(data.map(function(series) { return series.disabled }))
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(data.map(function(d,i) {
		                    return d.color || color(d, i);
		                }).filter(function(d,i) { return !data[i].disabled }));


		            var barsWrap = g.select('.nv-barsWrap')
		                .datum(data.filter(function(d) { return !d.disabled }));

		            barsWrap.call(multibar);

		            // Setup Axes
		            if (showXAxis) {
		                xAxis
		                    .scale(x)
		                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize(-availableHeight, 0);

		                g.select('.nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + y.range()[0] + ')');
		                g.select('.nv-x.nv-axis')
		                    .call(xAxis);

		                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');

		                xTicks
		                    .selectAll('line, text')
		                    .style('opacity', 1)

		                if (staggerLabels) {
		                    var getTranslate = function(x,y) {
		                        return "translate(" + x + "," + y + ")";
		                    };

		                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by
		                    // Issue #140
		                    xTicks
		                        .selectAll("text")
		                        .attr('transform', function(d,i,j) {
		                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));
		                        });

		                    var totalInBetweenTicks = d3.selectAll(".nv-x.nv-axis .nv-wrap g g text")[0].length;
		                    g.selectAll(".nv-x.nv-axis .nv-axisMaxMin text")
		                        .attr("transform", function(d,i) {
		                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);
		                        });
		                }

		                if (wrapLabels) {
		                    g.selectAll('.tick text')
		                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())
		                }

		                if (reduceXTicks)
		                    xTicks
		                        .filter(function(d,i) {
		                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;
		                        })
		                        .selectAll('text, line')
		                        .style('opacity', 0);

		                if(rotateLabels)
		                    xTicks
		                        .selectAll('.tick text')
		                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')
		                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');

		                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')
		                    .style('opacity', 1);
		            }

		            if (showYAxis) {
		                yAxis
		                    .scale(y)
		                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
		                    .tickSize( -availableWidth, 0);

		                g.select('.nv-y.nv-axis')
		                    .call(yAxis);
		            }

		            //Set up interactive layer
		            if (useInteractiveGuideline) {
		                interactiveLayer
		                    .width(availableWidth)
		                    .height(availableHeight)
		                    .margin({left:margin.left, top:margin.top})
		                    .svgContainer(container)
		                    .xScale(x);
		                wrap.select(".nv-interactive").call(interactiveLayer);
		            }

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            legend.dispatch.on('stateChange', function(newState) {
		                for (var key in newState)
		                    state[key] = newState[key];
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            controls.dispatch.on('legendClick', function(d,i) {
		                if (!d.disabled) return;
		                controlsData = controlsData.map(function(s) {
		                    s.disabled = true;
		                    return s;
		                });
		                d.disabled = false;

		                switch (d.key) {
		                    case 'Grouped':
		                    case controlLabels.grouped:
		                        multibar.stacked(false);
		                        break;
		                    case 'Stacked':
		                    case controlLabels.stacked:
		                        multibar.stacked(true);
		                        break;
		                }

		                state.stacked = multibar.stacked();
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            // Update chart from a state object passed to event handler
		            dispatch.on('changeState', function(e) {
		                if (typeof e.disabled !== 'undefined') {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });
		                    state.disabled = e.disabled;
		                }
		                if (typeof e.stacked !== 'undefined') {
		                    multibar.stacked(e.stacked);
		                    state.stacked = e.stacked;
		                    stacked = e.stacked;
		                }
		                chart.update();
		            });

		            if (useInteractiveGuideline) {
		                interactiveLayer.dispatch.on('elementMousemove', function(e) {
		                    if (e.pointXValue == undefined) return;

		                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];
		                    data
		                        .filter(function(series, i) {
		                            series.seriesIndex = i;
		                            return !series.disabled;
		                        })
		                        .forEach(function(series,i) {
		                            pointIndex = x.domain().indexOf(e.pointXValue)

		                            var point = series.values[pointIndex];
		                            if (point === undefined) return;

		                            xValue = point.x;
		                            if (singlePoint === undefined) singlePoint = point;
		                            if (pointXLocation === undefined) pointXLocation = e.mouseX
		                            allData.push({
		                                key: series.key,
		                                value: chart.y()(point, pointIndex),
		                                color: color(series,series.seriesIndex),
		                                data: series.values[pointIndex]
		                            });
		                        });

		                    interactiveLayer.tooltip
		                        .chartContainer(that.parentNode)
		                        .data({
		                            value: xValue,
		                            index: pointIndex,
		                            series: allData
		                        })();

		                    interactiveLayer.renderGuideLine(pointXLocation);
		                });

		                interactiveLayer.dispatch.on("elementMouseout",function(e) {
		                    interactiveLayer.tooltip.hidden(true);
		                });
		            }
		            else {
		                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {
		                    evt.value = chart.x()(evt.data);
		                    evt['series'] = {
		                        key: evt.data.key,
		                        value: chart.y()(evt.data),
		                        color: evt.color
		                    };
		                    tooltip.data(evt).hidden(false);
		                });

		                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true);
		                });

		                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {
		                    tooltip();
		                });
		            }
		        });

		        renderWatch.renderEnd('multibarchart immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.multibar = multibar;
		    chart.legend = legend;
		    chart.controls = controls;
		    chart.xAxis = xAxis;
		    chart.yAxis = yAxis;
		    chart.state = state;
		    chart.tooltip = tooltip;
		    chart.interactiveLayer = interactiveLayer;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},
		        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},
		        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
		        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},
		        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},
		        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},
		        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            multibar.duration(duration);
		            xAxis.duration(duration);
		            yAxis.duration(duration);
		            renderWatch.reset(duration);
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            legend.color(color);
		        }},
		        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
		            rightAlignYAxis = _;
		            yAxis.orient( rightAlignYAxis ? 'right' : 'left');
		        }},
		        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
		            useInteractiveGuideline = _;
		        }},
		        barColor:  {get: function(){return multibar.barColor;}, set: function(_){
		            multibar.barColor(_);
		            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})
		        }}
		    });

		    nv.utils.inheritOptions(chart, multibar);
		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.multiBarHorizontal = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 960
		        , height = 500
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , container = null
		        , x = d3.scale.ordinal()
		        , y = d3.scale.linear()
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , getYerr = function(d) { return d.yErr }
		        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
		        , color = nv.utils.defaultColor()
		        , barColor = null // adding the ability to set the color for each rather than the whole group
		        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled
		        , stacked = false
		        , showValues = false
		        , showBarLabels = false
		        , valuePadding = 60
		        , groupSpacing = 0.1
		        , valueFormat = d3.format(',.2f')
		        , delay = 1200
		        , xDomain
		        , yDomain
		        , xRange
		        , yRange
		        , duration = 250
		        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var x0, y0; //used to store previous scales
		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right,
		                availableHeight = height - margin.top - margin.bottom;

		            container = d3.select(this);
		            nv.utils.initSVG(container);

		            if (stacked)
		                data = d3.layout.stack()
		                    .offset('zero')
		                    .values(function(d){ return d.values })
		                    .y(getY)
		                (data);

		            //add series index and key to each data point for reference
		            data.forEach(function(series, i) {
		                series.values.forEach(function(point) {
		                    point.series = i;
		                    point.key = series.key;
		                });
		            });

		            // HACK for negative value stacking
		            if (stacked)
		                data[0].values.map(function(d,i) {
		                    var posBase = 0, negBase = 0;
		                    data.map(function(d) {
		                        var f = d.values[i]
		                        f.size = Math.abs(f.y);
		                        if (f.y<0)  {
		                            f.y1 = negBase - f.size;
		                            negBase = negBase - f.size;
		                        } else
		                        {
		                            f.y1 = posBase;
		                            posBase = posBase + f.size;
		                        }
		                    });
		                });

		            // Setup Scales
		            // remap and flatten the data for use in calculating the scales' domains
		            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate
		                data.map(function(d) {
		                    return d.values.map(function(d,i) {
		                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }
		                    })
		                });

		            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))
		                .rangeBands(xRange || [0, availableHeight], groupSpacing);

		            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))

		            if (showValues && !stacked)
		                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);
		            else
		                y.range(yRange || [0, availableWidth]);

		            x0 = x0 || x;
		            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);

		            // Setup containers and skeleton of chart
		            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');
		            var defsEnter = wrapEnter.append('defs');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-groups');
		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
		                .data(function(d) { return d }, function(d,i) { return i });
		            groups.enter().append('g')
		                .style('stroke-opacity', 1e-6)
		                .style('fill-opacity', 1e-6);
		            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')
		                .style('stroke-opacity', 1e-6)
		                .style('fill-opacity', 1e-6)
		                .remove();
		            groups
		                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })
		                .classed('hover', function(d) { return d.hover })
		                .style('fill', function(d,i){ return color(d, i) })
		                .style('stroke', function(d,i){ return color(d, i) });
		            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')
		                .style('stroke-opacity', 1)
		                .style('fill-opacity', .75);

		            var bars = groups.selectAll('g.nv-bar')
		                .data(function(d) { return d.values });
		            bars.exit().remove();

		            var barsEnter = bars.enter().append('g')
		                .attr('transform', function(d,i,j) {
		                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'
		                });

		            barsEnter.append('rect')
		                .attr('width', 0)
		                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )

		            bars
		                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here
		                    d3.select(this).classed('hover', true);
		                    dispatch.elementMouseover({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mouseout', function(d,i) {
		                    d3.select(this).classed('hover', false);
		                    dispatch.elementMouseout({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mouseout', function(d,i) {
		                    dispatch.elementMouseout({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mousemove', function(d,i) {
		                    dispatch.elementMousemove({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('click', function(d,i) {
		                    dispatch.elementClick({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                    d3.event.stopPropagation();
		                })
		                .on('dblclick', function(d,i) {
		                    dispatch.elementDblClick({
		                        data: d,
		                        index: i,
		                        color: d3.select(this).style("fill")
		                    });
		                    d3.event.stopPropagation();
		                });

		            if (getYerr(data[0],0)) {
		                barsEnter.append('polyline');

		                bars.select('polyline')
		                    .attr('fill', 'none')
		                    .attr('points', function(d,i) {
		                        var xerr = getYerr(d,i)
		                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);
		                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];
		                        xerr = xerr.map(function(e) { return y(e) - y(0); });
		                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];
		                        return a.map(function (path) { return path.join(',') }).join(' ');
		                    })
		                    .attr('transform', function(d,i) {
		                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);
		                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'
		                    });
		            }

		            barsEnter.append('text');

		            if (showValues && !stacked) {
		                bars.select('text')
		                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })
		                    .attr('y', x.rangeBand() / (data.length * 2))
		                    .attr('dy', '.32em')
		                    .text(function(d,i) {
		                        var t = valueFormat(getY(d,i))
		                            , yerr = getYerr(d,i);
		                        if (yerr === undefined)
		                            return t;
		                        if (!yerr.length)
		                            return t + '±' + valueFormat(Math.abs(yerr));
		                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));
		                    });
		                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')
		                    .select('text')
		                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })
		            } else {
		                bars.selectAll('text').text('');
		            }

		            if (showBarLabels && !stacked) {
		                barsEnter.append('text').classed('nv-bar-label',true);
		                bars.select('text.nv-bar-label')
		                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })
		                    .attr('y', x.rangeBand() / (data.length * 2))
		                    .attr('dy', '.32em')
		                    .text(function(d,i) { return getX(d,i) });
		                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')
		                    .select('text.nv-bar-label')
		                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });
		            }
		            else {
		                bars.selectAll('text.nv-bar-label').text('');
		            }

		            bars
		                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})

		            if (barColor) {
		                if (!disabled) disabled = data.map(function() { return true });
		                bars
		                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })
		                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });
		            }

		            if (stacked)
		                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')
		                    .attr('transform', function(d,i) {
		                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'
		                    })
		                    .select('rect')
		                    .attr('width', function(d,i) {
		                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0
		                    })
		                    .attr('height', x.rangeBand() );
		            else
		                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')
		                    .attr('transform', function(d,i) {
		                        //TODO: stacked must be all positive or all negative, not both?
		                        return 'translate(' +
		                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))
		                            + ',' +
		                            (d.series * x.rangeBand() / data.length
		                                +
		                                x(getX(d,i)) )
		                            + ')'
		                    })
		                    .select('rect')
		                    .attr('height', x.rangeBand() / data.length )
		                    .attr('width', function(d,i) {
		                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0
		                    });

		            //store old scales for use in transitions on update
		            x0 = x.copy();
		            y0 = y.copy();

		        });

		        renderWatch.renderEnd('multibarHorizontal immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:   {get: function(){return width;}, set: function(_){width=_;}},
		        height:  {get: function(){return height;}, set: function(_){height=_;}},
		        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
		        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
		        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},
		        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
		        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},
		        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},
		        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},
		        // this shows the group name, seems pointless?
		        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},
		        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},
		        id:           {get: function(){return id;}, set: function(_){id=_;}},
		        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},
		        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},
		        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }},
		        barColor:  {get: function(){return barColor;}, set: function(_){
		            barColor = _ ? nv.utils.getColor(_) : null;
		        }}
		    });

		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.multiBarHorizontalChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var multibar = nv.models.multiBarHorizontal()
		        , xAxis = nv.models.axis()
		        , yAxis = nv.models.axis()
		        , legend = nv.models.legend().height(30)
		        , controls = nv.models.legend().height(30)
		        , tooltip = nv.models.tooltip()
		        ;

		    var margin = {top: 30, right: 20, bottom: 50, left: 60}
		        , width = null
		        , height = null
		        , color = nv.utils.defaultColor()
		        , showControls = true
		        , controlLabels = {}
		        , showLegend = true
		        , showXAxis = true
		        , showYAxis = true
		        , stacked = false
		        , x //can be accessed via chart.xScale()
		        , y //can be accessed via chart.yScale()
		        , state = nv.utils.state()
		        , defaultState = null
		        , noData = null
		        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')
		        , controlWidth = function() { return showControls ? 180 : 0 }
		        , duration = 250
		        ;

		    state.stacked = false; // DEPRECATED Maintained for backward compatibility

		    multibar.stacked(stacked);

		    xAxis
		        .orient('left')
		        .tickPadding(5)
		        .showMaxMin(false)
		        .tickFormat(function(d) { return d })
		    ;
		    yAxis
		        .orient('bottom')
		        .tickFormat(d3.format(',.1f'))
		    ;

		    tooltip
		        .duration(0)
		        .valueFormatter(function(d, i) {
		            return yAxis.tickFormat()(d, i);
		        })
		        .headerFormatter(function(d, i) {
		            return xAxis.tickFormat()(d, i);
		        });

		    controls.updateState(false);

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var stateGetter = function(data) {
		        return function(){
		            return {
		                active: data.map(function(d) { return !d.disabled }),
		                stacked: stacked
		            };
		        }
		    };

		    var stateSetter = function(data) {
		        return function(state) {
		            if (state.stacked !== undefined)
		                stacked = state.stacked;
		            if (state.active !== undefined)
		                data.forEach(function(series,i) {
		                    series.disabled = !state.active[i];
		                });
		        }
		    };

		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(multibar);
		        if (showXAxis) renderWatch.models(xAxis);
		        if (showYAxis) renderWatch.models(yAxis);

		        selection.each(function(data) {
		            var container = d3.select(this),
		                that = this;
		            nv.utils.initSVG(container);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() { container.transition().duration(duration).call(chart) };
		            chart.container = this;

		            stacked = multibar.stacked();

		            state
		                .setter(stateSetter(data), chart.update)
		                .getter(stateGetter(data))
		                .update();

		            // DEPRECATED set state.disableddisabled
		            state.disabled = data.map(function(d) { return !!d.disabled });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container)
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            x = multibar.xScale();
		            y = multibar.yScale().clamp(true);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-x nv-axis');
		            gEnter.append('g').attr('class', 'nv-y nv-axis')
		                .append('g').attr('class', 'nv-zeroLine')
		                .append('line');
		            gEnter.append('g').attr('class', 'nv-barsWrap');
		            gEnter.append('g').attr('class', 'nv-legendWrap');
		            gEnter.append('g').attr('class', 'nv-controlsWrap');

		            // Legend
		            if (showLegend) {
		                legend.width(availableWidth - controlWidth());

		                g.select('.nv-legendWrap')
		                    .datum(data)
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                g.select('.nv-legendWrap')
		                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');
		            }

		            // Controls
		            if (showControls) {
		                var controlsData = [
		                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },
		                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }
		                ];

		                controls.width(controlWidth()).color(['#444', '#444', '#444']);
		                g.select('.nv-controlsWrap')
		                    .datum(controlsData)
		                    .attr('transform', 'translate(0,' + (-margin.top) +')')
		                    .call(controls);
		            }

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            // Main Chart Component(s)
		            multibar
		                .disabled(data.map(function(series) { return series.disabled }))
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(data.map(function(d,i) {
		                    return d.color || color(d, i);
		                }).filter(function(d,i) { return !data[i].disabled }));

		            var barsWrap = g.select('.nv-barsWrap')
		                .datum(data.filter(function(d) { return !d.disabled }));

		            barsWrap.transition().call(multibar);

		            // Setup Axes
		            if (showXAxis) {
		                xAxis
		                    .scale(x)
		                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )
		                    .tickSize(-availableWidth, 0);

		                g.select('.nv-x.nv-axis').call(xAxis);

		                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');

		                xTicks
		                    .selectAll('line, text');
		            }

		            if (showYAxis) {
		                yAxis
		                    .scale(y)
		                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize( -availableHeight, 0);

		                g.select('.nv-y.nv-axis')
		                    .attr('transform', 'translate(0,' + availableHeight + ')');
		                g.select('.nv-y.nv-axis').call(yAxis);
		            }

		            // Zero line
		            g.select(".nv-zeroLine line")
		                .attr("x1", y(0))
		                .attr("x2", y(0))
		                .attr("y1", 0)
		                .attr("y2", -availableHeight)
		            ;

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            legend.dispatch.on('stateChange', function(newState) {
		                for (var key in newState)
		                    state[key] = newState[key];
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            controls.dispatch.on('legendClick', function(d,i) {
		                if (!d.disabled) return;
		                controlsData = controlsData.map(function(s) {
		                    s.disabled = true;
		                    return s;
		                });
		                d.disabled = false;

		                switch (d.key) {
		                    case 'Grouped':
		                    case controlLabels.grouped:
		                        multibar.stacked(false);
		                        break;
		                    case 'Stacked':
		                    case controlLabels.stacked:
		                        multibar.stacked(true);
		                        break;
		                }

		                state.stacked = multibar.stacked();
		                dispatch.stateChange(state);
		                stacked = multibar.stacked();

		                chart.update();
		            });

		            // Update chart from a state object passed to event handler
		            dispatch.on('changeState', function(e) {

		                if (typeof e.disabled !== 'undefined') {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });

		                    state.disabled = e.disabled;
		                }

		                if (typeof e.stacked !== 'undefined') {
		                    multibar.stacked(e.stacked);
		                    state.stacked = e.stacked;
		                    stacked = e.stacked;
		                }

		                chart.update();
		            });
		        });
		        renderWatch.renderEnd('multibar horizontal chart immediate');
		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {
		        evt.value = chart.x()(evt.data);
		        evt['series'] = {
		            key: evt.data.key,
		            value: chart.y()(evt.data),
		            color: evt.color
		        };
		        tooltip.data(evt).hidden(false);
		    });

		    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true);
		    });

		    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {
		        tooltip();
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.multibar = multibar;
		    chart.legend = legend;
		    chart.controls = controls;
		    chart.xAxis = xAxis;
		    chart.yAxis = yAxis;
		    chart.state = state;
		    chart.tooltip = tooltip;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},
		        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},
		        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		            multibar.duration(duration);
		            xAxis.duration(duration);
		            yAxis.duration(duration);
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            legend.color(color);
		        }},
		        barColor:  {get: function(){return multibar.barColor;}, set: function(_){
		            multibar.barColor(_);
		            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})
		        }}
		    });

		    nv.utils.inheritOptions(chart, multibar);
		    nv.utils.initOptions(chart);

		    return chart;
		};
		nv.models.multiChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 30, right: 20, bottom: 50, left: 60},
		        color = nv.utils.defaultColor(),
		        width = null,
		        height = null,
		        showLegend = true,
		        noData = null,
		        yDomain1,
		        yDomain2,
		        getX = function(d) { return d.x },
		        getY = function(d) { return d.y},
		        interpolate = 'monotone',
		        useVoronoi = true,
		        interactiveLayer = nv.interactiveGuideline(),
		        useInteractiveGuideline = false,
		        legendRightAxisHint = ' (right axis)'
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var x = d3.scale.linear(),
		        yScale1 = d3.scale.linear(),
		        yScale2 = d3.scale.linear(),

		        lines1 = nv.models.line().yScale(yScale1),
		        lines2 = nv.models.line().yScale(yScale2),

		        scatters1 = nv.models.scatter().yScale(yScale1),
		        scatters2 = nv.models.scatter().yScale(yScale2),

		        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1),
		        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2),

		        stack1 = nv.models.stackedArea().yScale(yScale1),
		        stack2 = nv.models.stackedArea().yScale(yScale2),

		        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5),
		        yAxis1 = nv.models.axis().scale(yScale1).orient('left'),
		        yAxis2 = nv.models.axis().scale(yScale2).orient('right'),

		        legend = nv.models.legend().height(30),
		        tooltip = nv.models.tooltip(),
		        dispatch = d3.dispatch();

		    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];

		    function chart(selection) {
		        selection.each(function(data) {
		            var container = d3.select(this),
		                that = this;
		            nv.utils.initSVG(container);

		            chart.update = function() { container.transition().call(chart); };
		            chart.container = this;

		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});
		            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});
		            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});
		            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});
		            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});
		            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});
		            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});
		            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});

		            // Display noData message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container);
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})
		                .map(function(d) {
		                    return d.values.map(function(d,i) {
		                        return { x: getX(d), y: getY(d) }
		                    })
		                });

		            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})
		                .map(function(d) {
		                    return d.values.map(function(d,i) {
		                        return { x: getX(d), y: getY(d) }
		                    })
		                });

		            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return getX(d) }))
		                .range([0, availableWidth]);

		            var wrap = container.selectAll('g.wrap.multiChart').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');

		            gEnter.append('g').attr('class', 'nv-x nv-axis');
		            gEnter.append('g').attr('class', 'nv-y1 nv-axis');
		            gEnter.append('g').attr('class', 'nv-y2 nv-axis');
		            gEnter.append('g').attr('class', 'stack1Wrap');
		            gEnter.append('g').attr('class', 'stack2Wrap');
		            gEnter.append('g').attr('class', 'bars1Wrap');
		            gEnter.append('g').attr('class', 'bars2Wrap');
		            gEnter.append('g').attr('class', 'scatters1Wrap');
		            gEnter.append('g').attr('class', 'scatters2Wrap');
		            gEnter.append('g').attr('class', 'lines1Wrap');
		            gEnter.append('g').attr('class', 'lines2Wrap');
		            gEnter.append('g').attr('class', 'legendWrap');
		            gEnter.append('g').attr('class', 'nv-interactive');

		            var g = wrap.select('g');

		            var color_array = data.map(function(d,i) {
		                return data[i].color || color(d, i);
		            });

		            if (showLegend) {
		                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;
		                var legendXPosition = legend.align() ? legendWidth : 0;

		                legend.width(legendWidth);
		                legend.color(color_array);

		                g.select('.legendWrap')
		                    .datum(data.map(function(series) {
		                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
		                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);
		                        return series;
		                    }))
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                g.select('.legendWrap')
		                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');
		            }

		            lines1
		                .width(availableWidth)
		                .height(availableHeight)
		                .interpolate(interpolate)
		                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));
		            lines2
		                .width(availableWidth)
		                .height(availableHeight)
		                .interpolate(interpolate)
		                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));
		            scatters1
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));
		            scatters2
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));
		            bars1
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));
		            bars2
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));
		            stack1
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));
		            stack2
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));

		            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            var lines1Wrap = g.select('.lines1Wrap')
		                .datum(dataLines1.filter(function(d){return !d.disabled}));
		            var scatters1Wrap = g.select('.scatters1Wrap')
		                .datum(dataScatters1.filter(function(d){return !d.disabled}));
		            var bars1Wrap = g.select('.bars1Wrap')
		                .datum(dataBars1.filter(function(d){return !d.disabled}));
		            var stack1Wrap = g.select('.stack1Wrap')
		                .datum(dataStack1.filter(function(d){return !d.disabled}));
		            var lines2Wrap = g.select('.lines2Wrap')
		                .datum(dataLines2.filter(function(d){return !d.disabled}));
		            var scatters2Wrap = g.select('.scatters2Wrap')
		                .datum(dataScatters2.filter(function(d){return !d.disabled}));
		            var bars2Wrap = g.select('.bars2Wrap')
		                .datum(dataBars2.filter(function(d){return !d.disabled}));
		            var stack2Wrap = g.select('.stack2Wrap')
		                .datum(dataStack2.filter(function(d){return !d.disabled}));

		            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){
		                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})
		            }).concat([{x:0, y:0}]) : [];
		            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){
		                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})
		            }).concat([{x:0, y:0}]) : [];

		            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))
		                .range([0, availableHeight]);

		            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))
		                .range([0, availableHeight]);

		            lines1.yDomain(yScale1.domain());
		            scatters1.yDomain(yScale1.domain());
		            bars1.yDomain(yScale1.domain());
		            stack1.yDomain(yScale1.domain());

		            lines2.yDomain(yScale2.domain());
		            scatters2.yDomain(yScale2.domain());
		            bars2.yDomain(yScale2.domain());
		            stack2.yDomain(yScale2.domain());

		            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}
		            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}

		            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}
		            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}

		            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}
		            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}

		            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}
		            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}

		            xAxis
		                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                .tickSize(-availableHeight, 0);

		            g.select('.nv-x.nv-axis')
		                .attr('transform', 'translate(0,' + availableHeight + ')');
		            d3.transition(g.select('.nv-x.nv-axis'))
		                .call(xAxis);

		            yAxis1
		                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
		                .tickSize( -availableWidth, 0);


		            d3.transition(g.select('.nv-y1.nv-axis'))
		                .call(yAxis1);

		            yAxis2
		                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
		                .tickSize( -availableWidth, 0);

		            d3.transition(g.select('.nv-y2.nv-axis'))
		                .call(yAxis2);

		            g.select('.nv-y1.nv-axis')
		                .classed('nv-disabled', series1.length ? false : true)
		                .attr('transform', 'translate(' + x.range()[0] + ',0)');

		            g.select('.nv-y2.nv-axis')
		                .classed('nv-disabled', series2.length ? false : true)
		                .attr('transform', 'translate(' + x.range()[1] + ',0)');

		            legend.dispatch.on('stateChange', function(newState) {
		                chart.update();
		            });

		            if(useInteractiveGuideline){
		                interactiveLayer
		                    .width(availableWidth)
		                    .height(availableHeight)
		                    .margin({left:margin.left, top:margin.top})
		                    .svgContainer(container)
		                    .xScale(x);
		                wrap.select(".nv-interactive").call(interactiveLayer);
		            }

		            //============================================================
		            // Event Handling/Dispatching
		            //------------------------------------------------------------

		            function mouseover_line(evt) {
		                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
		                evt.value = evt.point.x;
		                evt.series = {
		                    value: evt.point.y,
		                    color: evt.point.color,
		                    key: evt.series.key
		                };
		                tooltip
		                    .duration(0)
		                    .valueFormatter(function(d, i) {
		                        return yaxis.tickFormat()(d, i);
		                    })
		                    .data(evt)
		                    .hidden(false);
		            }

		            function mouseover_scatter(evt) {
		                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
		                evt.value = evt.point.x;
		                evt.series = {
		                    value: evt.point.y,
		                    color: evt.point.color,
		                    key: evt.series.key
		                };
		                tooltip
		                    .duration(100)
		                    .valueFormatter(function(d, i) {
		                        return yaxis.tickFormat()(d, i);
		                    })
		                    .data(evt)
		                    .hidden(false);
		            }

		            function mouseover_stack(evt) {
		                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
		                evt.point['x'] = stack1.x()(evt.point);
		                evt.point['y'] = stack1.y()(evt.point);
		                tooltip
		                    .duration(0)
		                    .valueFormatter(function(d, i) {
		                        return yaxis.tickFormat()(d, i);
		                    })
		                    .data(evt)
		                    .hidden(false);
		            }

		            function mouseover_bar(evt) {
		                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;

		                evt.value = bars1.x()(evt.data);
		                evt['series'] = {
		                    value: bars1.y()(evt.data),
		                    color: evt.color,
		                    key: evt.data.key
		                };
		                tooltip
		                    .duration(0)
		                    .valueFormatter(function(d, i) {
		                        return yaxis.tickFormat()(d, i);
		                    })
		                    .data(evt)
		                    .hidden(false);
		            }



		            function clearHighlights() {
		              for(var i=0, il=charts.length; i < il; i++){
		                var chart = charts[i];
		                try {
		                  chart.clearHighlights();
		                } catch(e){}
		              }
		            }

		            function highlightPoint(serieIndex, pointIndex, b){
		              for(var i=0, il=charts.length; i < il; i++){
		                var chart = charts[i];
		                try {
		                  chart.highlightPoint(serieIndex, pointIndex, b);
		                } catch(e){}
		              }
		            }

		            if(useInteractiveGuideline){
		                interactiveLayer.dispatch.on('elementMousemove', function(e) {
		                    clearHighlights();
		                    var singlePoint, pointIndex, pointXLocation, allData = [];
		                    data
		                    .filter(function(series, i) {
		                        series.seriesIndex = i;
		                        return !series.disabled;
		                    })
		                    .forEach(function(series,i) {
		                        var extent = x.domain();
		                        var currentValues = series.values.filter(function(d,i) {
		                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];
		                        });

		                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());
		                        var point = currentValues[pointIndex];
		                        var pointYValue = chart.y()(point, pointIndex);
		                        if (pointYValue !== null) {
		                            highlightPoint(i, pointIndex, true);
		                        }
		                        if (point === undefined) return;
		                        if (singlePoint === undefined) singlePoint = point;
		                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));
		                        allData.push({
		                            key: series.key,
		                            value: pointYValue,
		                            color: color(series,series.seriesIndex),
		                            data: point,
		                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1
		                        });
		                    });

		                    interactiveLayer.tooltip
		                    .chartContainer(chart.container.parentNode)
		                    .valueFormatter(function(d,i) {
		                        var yAxis = allData[i].yAxis;
		                        return d === null ? "N/A" : yAxis.tickFormat()(d);
		                    })
		                    .data({
		                        value: chart.x()( singlePoint,pointIndex ),
		                        index: pointIndex,
		                        series: allData
		                    })();

		                    interactiveLayer.renderGuideLine(pointXLocation);
		                });

		                interactiveLayer.dispatch.on("elementMouseout",function(e) {
		                    clearHighlights();
		                });
		            } else {
		                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);
		                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);
		                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true)
		                });
		                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true)
		                });

		                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);
		                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);
		                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true)
		                });
		                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true)
		                });

		                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);
		                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);
		                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true)
		                });
		                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true)
		                });

		                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);
		                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);

		                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true);
		                });
		                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {
		                    tooltip.hidden(true);
		                });
		                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {
		                    tooltip();
		                });
		                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {
		                    tooltip();
		                });
		            }
		        });

		        return chart;
		    }

		    //============================================================
		    // Global getters and setters
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.legend = legend;
		    chart.lines1 = lines1;
		    chart.lines2 = lines2;
		    chart.scatters1 = scatters1;
		    chart.scatters2 = scatters2;
		    chart.bars1 = bars1;
		    chart.bars2 = bars2;
		    chart.stack1 = stack1;
		    chart.stack2 = stack2;
		    chart.xAxis = xAxis;
		    chart.yAxis1 = yAxis1;
		    chart.yAxis2 = yAxis2;
		    chart.tooltip = tooltip;
		    chart.interactiveLayer = interactiveLayer;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},
		        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
		        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},
		        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }},
		        x: {get: function(){return getX;}, set: function(_){
		            getX = _;
		            lines1.x(_);
		            lines2.x(_);
		            scatters1.x(_);
		            scatters2.x(_);
		            bars1.x(_);
		            bars2.x(_);
		            stack1.x(_);
		            stack2.x(_);
		        }},
		        y: {get: function(){return getY;}, set: function(_){
		            getY = _;
		            lines1.y(_);
		            lines2.y(_);
		            scatters1.y(_);
		            scatters2.y(_);
		            stack1.y(_);
		            stack2.y(_);
		            bars1.y(_);
		            bars2.y(_);
		        }},
		        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){
		            useVoronoi=_;
		            lines1.useVoronoi(_);
		            lines2.useVoronoi(_);
		            stack1.useVoronoi(_);
		            stack2.useVoronoi(_);
		        }},

		        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
		            useInteractiveGuideline = _;
		            if (useInteractiveGuideline) {
		                lines1.interactive(false);
		                lines1.useVoronoi(false);
		                lines2.interactive(false);
		                lines2.useVoronoi(false);
		                stack1.interactive(false);
		                stack1.useVoronoi(false);
		                stack2.interactive(false);
		                stack2.useVoronoi(false);
		                scatters1.interactive(false);
		                scatters2.interactive(false);
		            }
		        }}
		    });

		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.ohlcBar = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = null
		        , height = null
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , container = null
		        , x = d3.scale.linear()
		        , y = d3.scale.linear()
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , getOpen = function(d) { return d.open }
		        , getClose = function(d) { return d.close }
		        , getHigh = function(d) { return d.high }
		        , getLow = function(d) { return d.low }
		        , forceX = []
		        , forceY = []
		        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
		        , clipEdge = true
		        , color = nv.utils.defaultColor()
		        , interactive = false
		        , xDomain
		        , yDomain
		        , xRange
		        , yRange
		        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    function chart(selection) {
		        selection.each(function(data) {
		            container = d3.select(this);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            nv.utils.initSVG(container);

		            // ohlc bar width.
		            var w = (availableWidth / data[0].values.length) * .9;

		            // Setup Scales
		            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));

		            if (padData)
		                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
		            else
		                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);

		            y.domain(yDomain || [
		                    d3.min(data[0].values.map(getLow).concat(forceY)),
		                    d3.max(data[0].values.map(getHigh).concat(forceY))
		                ]
		            ).range(yRange || [availableHeight, 0]);

		            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
		            if (x.domain()[0] === x.domain()[1])
		                x.domain()[0] ?
		                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
		                    : x.domain([-1,1]);

		            if (y.domain()[0] === y.domain()[1])
		                y.domain()[0] ?
		                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
		                    : y.domain([-1,1]);

		            // Setup containers and skeleton of chart
		            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');
		            var defsEnter = wrapEnter.append('defs');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-ticks');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            container
		                .on('click', function(d,i) {
		                    dispatch.chartClick({
		                        data: d,
		                        index: i,
		                        pos: d3.event,
		                        id: id
		                    });
		                });

		            defsEnter.append('clipPath')
		                .attr('id', 'nv-chart-clip-path-' + id)
		                .append('rect');

		            wrap.select('#nv-chart-clip-path-' + id + ' rect')
		                .attr('width', availableWidth)
		                .attr('height', availableHeight);

		            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');

		            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')
		                .data(function(d) { return d });
		            ticks.exit().remove();

		            ticks.enter().append('path')
		                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })
		                .attr('d', function(d,i) {
		                    return 'm0,0l0,'
		                        + (y(getOpen(d,i))
		                            - y(getHigh(d,i)))
		                        + 'l'
		                        + (-w/2)
		                        + ',0l'
		                        + (w/2)
		                        + ',0l0,'
		                        + (y(getLow(d,i)) - y(getOpen(d,i)))
		                        + 'l0,'
		                        + (y(getClose(d,i))
		                            - y(getLow(d,i)))
		                        + 'l'
		                        + (w/2)
		                        + ',0l'
		                        + (-w/2)
		                        + ',0z';
		                })
		                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })
		                .attr('fill', function(d,i) { return color[0]; })
		                .attr('stroke', function(d,i) { return color[0]; })
		                .attr('x', 0 )
		                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })
		                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });

		            // the bar colors are controlled by CSS currently
		            ticks.attr('class', function(d,i,j) {
		                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;
		            });

		            d3.transition(ticks)
		                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })
		                .attr('d', function(d,i) {
		                    var w = (availableWidth / data[0].values.length) * .9;
		                    return 'm0,0l0,'
		                        + (y(getOpen(d,i))
		                            - y(getHigh(d,i)))
		                        + 'l'
		                        + (-w/2)
		                        + ',0l'
		                        + (w/2)
		                        + ',0l0,'
		                        + (y(getLow(d,i))
		                            - y(getOpen(d,i)))
		                        + 'l0,'
		                        + (y(getClose(d,i))
		                            - y(getLow(d,i)))
		                        + 'l'
		                        + (w/2)
		                        + ',0l'
		                        + (-w/2)
		                        + ',0z';
		                });
		        });

		        return chart;
		    }


		    //Create methods to allow outside functions to highlight a specific bar.
		    chart.highlightPoint = function(pointIndex, isHoverOver) {
		        chart.clearHighlights();
		        container.select(".nv-ohlcBar .nv-tick-0-" + pointIndex)
		            .classed("hover", isHoverOver)
		        ;
		    };

		    chart.clearHighlights = function() {
		        container.select(".nv-ohlcBar .nv-tick.hover")
		            .classed("hover", false)
		        ;
		    };

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:    {get: function(){return width;}, set: function(_){width=_;}},
		        height:   {get: function(){return height;}, set: function(_){height=_;}},
		        xScale:   {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:   {get: function(){return y;}, set: function(_){y=_;}},
		        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},
		        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},
		        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},
		        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
		        id:       {get: function(){return id;}, set: function(_){id=_;}},
		        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},

		        x:     {get: function(){return getX;}, set: function(_){getX=_;}},
		        y:     {get: function(){return getY;}, set: function(_){getY=_;}},
		        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},
		        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},
		        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},
		        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    != undefined ? _.top    : margin.top;
		            margin.right  = _.right  != undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   != undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }}
		    });

		    nv.utils.initOptions(chart);
		    return chart;
		};
		// Code adapted from Jason Davies' "Parallel Coordinates"
		// http://bl.ocks.org/jasondavies/1341281
		nv.models.parallelCoordinates = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 30, right: 0, bottom: 10, left: 0}
		        , width = null
		        , height = null
		        , x = d3.scale.ordinal()
		        , y = {}
		        , dimensionData = []
		        , enabledDimensions = []
		        , dimensionNames = []
		        , displayBrush = true
		        , color = nv.utils.defaultColor()
		        , filters = []
		        , active = []
		        , dragging = []
		        , axisWithUndefinedValues = []
		        , lineTension = 1
		        , foreground
		        , background
		        , dimensions
		        , line = d3.svg.line()
		        , axis = d3.svg.axis()
		        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', "stateChange", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------


		    var renderWatch = nv.utils.renderWatch(dispatch);

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var container = d3.select(this);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            nv.utils.initSVG(container);


		           //Convert old data to new format (name, values)
		            if (data[0].values === undefined) {
		                var newData = [];
		                data.forEach(function (d) {
		                        var val = {};
		                        var key = Object.keys(d);
		                        key.forEach(function (k) { if (k !== "name") val[k] = d[k] });
		                        newData.push({ key: d.name, values: val });
		                });
		                data = newData;
		            }

		            var dataValues = data.map(function (d) {return d.values});
		            if (active.length === 0) {
		                active = data;
		            }; //set all active before first brush call
		            
		            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });
		            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });
		            

		            // Setup Scales
		            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));

		            //Set as true if all values on an axis are missing.
		            // Extract the list of dimensions and create a scale for each.
		            var oldDomainMaxValue = {};
		            var displayMissingValuesline = false;

		            dimensionNames.forEach(function(d) {
		                var extent = d3.extent(dataValues, function (p) { return +p[d]; });
		                var min = extent[0];
		                var max = extent[1];
		                var onlyUndefinedValues = false;
		                //If there is no values to display on an axis, set the extent to 0
		                if (isNaN(min) || isNaN(max)) {
		                    onlyUndefinedValues = true;
		                    min = 0;
		                    max = 0;
		                }
		                //Scale axis if there is only one value
		                if (min === max) {
		                    min = min - 1;
		                    max = max + 1;
		                }
		                var f = filters.filter(function (k) { return k.dimension == d; });
		                if (f.length !== 0) {
		                    //If there is only NaN values, keep the existing domain.
		                    if (onlyUndefinedValues) {
		                        min = y[d].domain()[0];
		                        max = y[d].domain()[1];
		                    }
		                        //If the brush extent is > max (< min), keep the extent value.
		                    else if (!f[0].hasOnlyNaN && displayBrush) {
		                        min = min > f[0].extent[0] ? f[0].extent[0] : min;
		                        max = max < f[0].extent[1] ? f[0].extent[1] : max;
		                    }
		                        //If there is NaN values brushed be sure the brush extent is on the domain.
		                    else if (f[0].hasNaN) {
		                        max = max < f[0].extent[1] ? f[0].extent[1] : max;
		                        oldDomainMaxValue[d] = y[d].domain()[1];
		                        displayMissingValuesline = true;
		                    }
		                }
		                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display "undefined values" text.
		                //The remaining 10% are used to display the missingValue line.
		                y[d] = d3.scale.linear()
		                    .domain([min, max])
		                    .range([(availableHeight - 12) * 0.9, 0]);

		                axisWithUndefinedValues = [];

		                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);
		            });

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');
		            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');
		            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            line.interpolate('cardinal').tension(lineTension);
		            axis.orient('left');
		            var axisDrag = d3.behavior.drag()
		                        .on('dragstart', dragStart)
		                        .on('drag', dragMove)
		                        .on('dragend', dragEnd);

		            //Add missing value line at the bottom of the chart
		            var missingValuesline, missingValueslineText;
		            var step = x.range()[1] - x.range()[0];
		            if (!isNaN(step)) {
		                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];
		                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);
		                missingValuesline.enter().append('line');
		                missingValuesline.exit().remove();
		                missingValuesline.attr("x1", function(d) { return d[0]; })
		                        .attr("y1", function(d) { return d[1]; })
		                        .attr("x2", function(d) { return d[2]; })
		                        .attr("y2", function(d) { return d[3]; });
		    
		                //Add the text "undefined values" under the missing value line
		                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data(["undefined values"]);
		                missingValueslineText.append('text').data(["undefined values"]);
		                missingValueslineText.enter().append('text');
		                missingValueslineText.exit().remove();
		                missingValueslineText.attr("y", availableHeight)
		                        //To have the text right align with the missingValues line, substract 92 representing the text size.
		                        .attr("x", availableWidth - 92 - step / 2)
		                        .text(function(d) { return d; });
		            }
		            // Add grey background lines for context.
		            background = wrap.select('.background').selectAll('path').data(data);
		            background.enter().append('path');
		            background.exit().remove();
		            background.attr('d', path);

		            // Add blue foreground lines for focus.
		            foreground = wrap.select('.foreground').selectAll('path').data(data);
		            foreground.enter().append('path')
		            foreground.exit().remove();
		            foreground.attr('d', path)
		                .style("stroke-width", function (d, i) {
		                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})
		                .attr('stroke', function (d, i) { return d.color || color(d, i); });
		            foreground.on("mouseover", function (d, i) {
		                d3.select(this).classed('hover', true).style("stroke-width", d.strokeWidth + 2 + "px").style("stroke-opacity", 1);
		                dispatch.elementMouseover({
		                    label: d.name,
		                    color: d.color || color(d, i)
		                });

		            });
		            foreground.on("mouseout", function (d, i) {
		                d3.select(this).classed('hover', false).style("stroke-width", d.strokeWidth + "px").style("stroke-opacity", 0.7);
		                dispatch.elementMouseout({
		                    label: d.name,
		                    index: i
		                });
		            });
		            foreground.on('mousemove', function (d, i) {
		                dispatch.elementMousemove();
		            });
		            foreground.on('click', function (d) {
		                dispatch.elementClick({
		                    id: d.id
		                });
		            });
		            // Add a group element for each dimension.
		            dimensions = g.selectAll('.dimension').data(enabledDimensions);
		            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');

		            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });
		            dimensionsEnter.append('g').attr('class', 'nv-axis');

		            // Add an axis and title.
		            dimensionsEnter.append('text')
		                    .attr('class', 'nv-label')
		                .style("cursor", "move")
		                .attr('dy', '-1em')
		                .attr('text-anchor', 'middle')
		                .on("mouseover", function(d, i) {
		                    dispatch.elementMouseover({
		                        label: d.tooltip || d.key
		                    });
		                })
		                .on("mouseout", function(d, i) {
		                    dispatch.elementMouseout({
		                        label: d.tooltip
		                    });
		                })
		                .on('mousemove', function (d, i) {
		                    dispatch.elementMousemove();
		                })
		                .call(axisDrag);

		            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');
		            dimensions.exit().remove();
		            dimensions.select('.nv-label').text(function (d) { return d.key });
		            dimensions.select('.nv-axis')
		                .each(function (d, i) {
		                    d3.select(this).call(axis.scale(y[d.key]).tickFormat(d3.format(d.format)));
		                });

		            // Add and store a brush for each axis.
		            restoreBrush(displayBrush);

		            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),
		                    extents = actives.map(function (p) { return y[p].brush.extent(); });
		            var formerActive = active.slice(0);

		            //Restore active values
		            active = [];
		            foreground.style("display", function (d) {
		                var isActive = actives.every(function (p, i) {
		                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {
		                        return true;
		                    }
		                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));
		                });
		                if (isActive)
		                    active.push(d);
		                return !isActive ? "none" : null;

		            });

		            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {
		               dispatch.activeChanged(active);
		            }

		            // Returns the path for a given data point.
		            function path(d) {
		                return line(enabledDimensions.map(function (p) {
		                    //If value if missing, put the value on the missing value line
		                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {
		                        var domain = y[p.key].domain();
		                        var range = y[p.key].range();
		                        var min = domain[0] - (domain[1] - domain[0]) / 9;

		                        //If it's not already the case, allow brush to select undefined values
		                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {

		                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);
		                            y[p.key].brush.y(newscale);
		                            axisWithUndefinedValues.push(p.key);
		                        }
		                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {
		                            return [x(p.key), y[p.key](min)];
		                        }
		                    }

		                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.
		                    if (missingValuesline !== undefined) {
		                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {
		                            missingValuesline.style("display", "inline");
		                            missingValueslineText.style("display", "inline");
		                        } else {
		                            missingValuesline.style("display", "none");
		                            missingValueslineText.style("display", "none");
		                        }
		                    }
		                    return [x(p.key), y[p.key](d.values[p.key])];
		                }));
		            }

		            function restoreBrush(visible) {
		                filters.forEach(function (f) {
		                    //If filter brushed NaN values, keep the brush on the bottom of the axis.
		                    var brushDomain = y[f.dimension].brush.y().domain();
		                    if (f.hasOnlyNaN) {
		                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];
		                    }
		                    if (f.hasNaN) {
		                        f.extent[0] = brushDomain[0];
		                    }
		                    if (visible)
		                        y[f.dimension].brush.extent(f.extent);
		                });
		                
		                dimensions.select('.nv-brushBackground')
		                .each(function (d) {
		                    d3.select(this).call(y[d.key].brush);

		                })
		                .selectAll('rect')
		                .attr('x', -8)
		                .attr('width', 16);
		            }
		            
		            // Handles a brush event, toggling the display of foreground lines.
		            function brushstart() {
		                //If brush aren't visible, show it before brushing again.
		                if (displayBrush === false) {
		                    restoreBrush(true);
		                }
		            }
		            
		            // Handles a brush event, toggling the display of foreground lines.
		            function brush() {
		                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),
		                    extents = actives.map(function(p) { return y[p].brush.extent(); });

		                filters = []; //erase current filters
		                actives.forEach(function(d,i) {
		                    filters[i] = {
		                        dimension: d,
		                        extent: extents[i],
		                        hasNaN: false,
		                        hasOnlyNaN: false
		                    }
		                });

		                active = []; //erase current active list
		                foreground.style('display', function(d) {
		                    var isActive = actives.every(function(p, i) {
		                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;
		                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));
		                    });
		                    if (isActive) active.push(d);
		                    return isActive ? null : 'none';
		                });

		                dispatch.brush({
		                    filters: filters,
		                    active: active
		                });
		            }
		            function brushend() {
		                var hasActiveBrush = actives.length > 0 ? true : false;
		                filters.forEach(function (f) {
		                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)
		                        f.hasNaN = true;
		                    if (f.extent[1] < y[f.dimension].domain()[0])
		                        f.hasOnlyNaN = true;
		                });
		                dispatch.brushEnd(active, hasActiveBrush);
		            }
		            function dragStart(d) {
		                dragging[d.key] = this.parentNode.__origin__ = x(d.key);
		                background.attr("visibility", "hidden");

		            }

		            function dragMove(d) {
		                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));
		                foreground.attr("d", path);
		                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });
		                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });
		                x.domain(enabledDimensions.map(function (d) { return d.key; }));
		                dimensions.attr("transform", function(d) { return "translate(" + dimensionPosition(d.key) + ")"; });
		            }

		            function dragEnd(d, i) {
		                delete this.parentNode.__origin__;
		                delete dragging[d.key];
		                d3.select(this.parentNode).attr("transform", "translate(" + x(d.key) + ")");
		                foreground
		                  .attr("d", path);
		                background
		                  .attr("d", path)
		                  .attr("visibility", null);

		                dispatch.dimensionsOrder(enabledDimensions);
		            }
		            function resetBrush() {
		                filters = [];
		                active = [];
		                dispatch.stateChange();
		            }
		            function resetDrag() {
		                dimensionName.map(function (d, i) { return d.currentPosition = d.originalPosition; });
		                dispatch.stateChange();
		            }

		            function dimensionPosition(d) {
		                var v = dragging[d];
		                return v == null ? x(d) : v;
		            }
		        });

		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:         {get: function(){return width;},           set: function(_){width= _;}},
		        height:        {get: function(){return height;},          set: function(_){height= _;}},
		        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },
		        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },
		        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },
		        active: { get: function () { return active; }, set: function (_) { active = _; } },
		        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},

		        // deprecated options
		        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {
		            // deprecated after 1.8.1
		            nv.deprecated('dimensions', 'use dimensionData instead');
		            if (dimensionData.length === 0) {
		                _.forEach(function (k) { dimensionData.push({ key: k }) })
		            } else {
		                _.forEach(function (k, i) { dimensionData[i].key= k })
		            }
		        }
		        },
		        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {
		            // deprecated after 1.8.1
		            nv.deprecated('dimensionNames', 'use dimensionData instead');
		            dimensionNames = [];
		            if (dimensionData.length === 0) {
		                _.forEach(function (k) { dimensionData.push({ key: k }) })
		            } else {
		                _.forEach(function (k, i) { dimensionData[i].key = k })
		            }
		 
		        }},
		        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {
		            // deprecated after 1.8.1
		            nv.deprecated('dimensionFormats', 'use dimensionData instead');
		            if (dimensionData.length === 0) {
		                _.forEach(function (f) { dimensionData.push({ format: f }) })
		            } else {
		                _.forEach(function (f, i) { dimensionData[i].format = f })
		            }

		        }},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    =  _.top    !== undefined ? _.top    : margin.top;
		            margin.right  =  _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   =  _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }}
		    });

		    nv.utils.initOptions(chart);
		    return chart;
		};
		nv.models.parallelCoordinatesChart = function () {
		        "use strict";
		        //============================================================
		        // Public Variables with Default Settings
		        //------------------------------------------------------------

		        var parallelCoordinates = nv.models.parallelCoordinates()
		        var legend = nv.models.legend()
		        var tooltip = nv.models.tooltip();
		        var dimensionTooltip = nv.models.tooltip();

		        var margin = { top: 0, right: 0, bottom: 0, left: 0 }
		        , width = null
				, height = null
		        , showLegend = true
				, color = nv.utils.defaultColor()
		        , state = nv.utils.state()
		        , dimensionData = []
		        , dimensionNames = []
		        , displayBrush = true
		        , defaultState = null
		        , noData = null
		        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')
		        , controlWidth = function () { return showControls ? 180 : 0 }
		        ;

			    //============================================================
			
				//============================================================
		        // Private Variables
		        //------------------------------------------------------------

		        var renderWatch = nv.utils.renderWatch(dispatch);

		        var stateGetter = function(data) {
		            return function() {
		                return {
		                    active: data.map(function(d) { return !d.disabled })
		                };
		            }
		        };

		        var stateSetter = function(data) {
		            return function(state) {
		                if(state.active !== undefined) {
		                    data.forEach(function(series, i) {
		                        series.disabled = !state.active[i];
		                    });
		                }
		            }
		        };

		        //============================================================
		        // Chart function
		        //------------------------------------------------------------

		        function chart(selection) {
		            renderWatch.reset();
		            renderWatch.models(parallelCoordinates);

		            selection.each(function(data) {
		                var container = d3.select(this);
		                nv.utils.initSVG(container);

		                var that = this;

		                var availableWidth = nv.utils.availableWidth(width, container, margin),
		                    availableHeight = nv.utils.availableHeight(height, container, margin);

		                chart.update = function() { container.call(chart); };
		                chart.container = this;

		                state.setter(stateSetter(dimensionData), chart.update)
		                    .getter(stateGetter(dimensionData))
		                    .update();

		                //set state.disabled
		                state.disabled = dimensionData.map(function (d) { return !!d.disabled });

		                //Keep dimensions position in memory
		                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});
		                dimensionData.forEach(function (d, i) {
		                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;
		                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;
		                });

		                var currentDimensions = dimensionNames.map(function (d) { return d.key; });
		                var newDimensions = dimensionData.map(function (d) { return d.key; });
		                dimensionData.forEach(function (k, i) {
		                    var idx = currentDimensions.indexOf(k.key);
		                        if (idx < 0) {
		                            dimensionNames.splice(i, 0, k);
		                        } else {
		                            var gap = dimensionNames[idx].currentPosition - dimensionNames[idx].originalPosition;
		                            dimensionNames[idx].originalPosition = k.originalPosition;
		                            dimensionNames[idx].currentPosition = k.originalPosition + gap;
		                        }
		                });
		                //Remove old dimensions
		                dimensionNames = dimensionNames.filter(function (d) { return newDimensions.indexOf(d.key) >= 0; });

		               if (!defaultState) {
		                    var key;
		                    defaultState = {};
		                    for(key in state) {
		                        if(state[key] instanceof Array)
		                            defaultState[key] = state[key].slice(0);
		                        else
		                            defaultState[key] = state[key];
		                    }
		                }

		                // Display No Data message if there's nothing to show.
		                if(!data || !data.length) {
		                    nv.utils.noData(chart, container);
		                    return chart;
		                } else {
		                    container.selectAll('.nv-noData').remove();
		                }
		                
		                //------------------------------------------------------------
		                // Setup containers and skeleton of chart

		                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);
		                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');

		                var g = wrap.select('g');
		                
		                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');
		                gEnter.append('g').attr('class', 'nv-legendWrap');

		                g.select("rect")
		                    .attr("width", availableWidth)
		                    .attr("height", (availableHeight > 0) ? availableHeight : 0);

		                // Legend
		                if (showLegend) {
		                    legend.width(availableWidth)
		                        .color(function (d) { return "rgb(188,190,192)"; });

		                    g.select('.nv-legendWrap')
		                        .datum(dimensionNames.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))
		                        .call(legend);

		                    if (margin.top != legend.height()) {
		                        margin.top = legend.height();
		                        availableHeight = nv.utils.availableHeight(height, container, margin);
		                    }
		                    wrap.select('.nv-legendWrap')
		                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');
		                }
		                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		                
		               

		                // Main Chart Component(s)
		                parallelCoordinates
		                    .width(availableWidth)
		                    .height(availableHeight)
		                    .dimensionData(dimensionNames)
		                    .displayBrush(displayBrush);
				
				        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')
		                  .datum(data);

				        parallelCoordinatesWrap.transition().call(parallelCoordinates);
				  
						//============================================================
		                // Event Handling/Dispatching (in chart's scope)
		                //------------------------------------------------------------
		                //Display reset brush button
				        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {
				            if (hasActiveBrush) {
				                displayBrush = true;
				                dispatch.brushEnd(active);
				            } else {

				                displayBrush = false;
				            }
				        });

				        legend.dispatch.on('stateChange', function(newState) {
				            for(var key in newState) {
				                state[key] = newState[key];
				            }
				            dispatch.stateChange(state);
				            chart.update();
				        });

		                //Update dimensions order and display reset sorting button
				        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {
				            dimensionNames.sort(function (a, b) { return a.currentPosition - b.currentPosition; });
				            var isSorted = false;
				            dimensionNames.forEach(function (d, i) {
				                d.currentPosition = i;
				                if (d.currentPosition !== d.originalPosition)
				                    isSorted = true;
				            });
				            dispatch.dimensionsOrder(dimensionNames, isSorted);
				        });

						// Update chart from a state object passed to event handler
		                dispatch.on('changeState', function (e) {

		                    if (typeof e.disabled !== 'undefined') {
		                        dimensionNames.forEach(function (series, i) {
		                            series.disabled = e.disabled[i];
		                        });
		                        state.disabled = e.disabled;
		                    }
		                    chart.update();
		                });
		            });

		            renderWatch.renderEnd('parraleleCoordinateChart immediate');
		            return chart;
		        }

				//============================================================
		        // Event Handling/Dispatching (out of chart's scope)
		        //------------------------------------------------------------

		        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {
		            evt['series'] = {
		                key: evt.label,
		                color: evt.color
		            };
		            tooltip.data(evt).hidden(false);
		        });

		        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {
		            tooltip.hidden(true)
		        });

		        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {
		            tooltip();
		        });
				 //============================================================
		        // Expose Public Variables
		        //------------------------------------------------------------
				
				// expose chart's sub-components
		        chart.dispatch = dispatch;
		        chart.parallelCoordinates = parallelCoordinates;
		        chart.legend = legend;
		        chart.tooltip = tooltip;

		        chart.options = nv.utils.optionsFunc.bind(chart);

		        chart._options = Object.create({}, {
		            // simple options, just get/set the necessary values
		            width: { get: function () { return width; }, set: function (_) { width = _; } },
		            height: { get: function () { return height; }, set: function (_) { height = _; } },
		            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },
		            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },
		            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },
		            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },
		            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },

		            // options that require extra logic in the setter
		            margin: {
		                get: function () { return margin; },
		                set: function (_) {
		                    margin.top = _.top !== undefined ? _.top : margin.top;
		                    margin.right = _.right !== undefined ? _.right : margin.right;
		                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		                    margin.left = _.left !== undefined ? _.left : margin.left;
		                }
		            },
		            color: {get: function(){return color;}, set: function(_){
		                    color = nv.utils.getColor(_);
		                    legend.color(color);
		                    parallelCoordinates.color(color);
		                }}
		        });

		        nv.utils.inheritOptions(chart, parallelCoordinates);
		        nv.utils.initOptions(chart);

		        return chart;
		    };nv.models.pie = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 500
		        , height = 500
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , container = null
		        , color = nv.utils.defaultColor()
		        , valueFormat = d3.format(',.2f')
		        , showLabels = true
		        , labelsOutside = false
		        , labelType = "key"
		        , labelThreshold = .02 //if slice percentage is under this, don't show label
		        , donut = false
		        , title = false
		        , growOnHover = true
		        , titleOffset = 0
		        , labelSunbeamLayout = false
		        , startAngle = false
		        , padAngle = false
		        , endAngle = false
		        , cornerRadius = 0
		        , donutRatio = 0.5
		        , arcsRadius = []
		        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
		        ;

		    var arcs = [];
		    var arcsOver = [];

		    //============================================================
		    // chart function
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch);

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right
		                , availableHeight = height - margin.top - margin.bottom
		                , radius = Math.min(availableWidth, availableHeight) / 2
		                , arcsRadiusOuter = []
		                , arcsRadiusInner = []
		                ;

		            container = d3.select(this)
		            if (arcsRadius.length === 0) {
		                var outer = radius - radius / 5;
		                var inner = donutRatio * radius;
		                for (var i = 0; i < data[0].length; i++) {
		                    arcsRadiusOuter.push(outer);
		                    arcsRadiusInner.push(inner);
		                }
		            } else {
		                arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });
		                arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });
		                donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));
		            }
		            nv.utils.initSVG(container);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);
		            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');
		            var g_pie = gEnter.append('g').attr('class', 'nv-pie');
		            gEnter.append('g').attr('class', 'nv-pieLabels');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
		            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
		            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');

		            //
		            container.on('click', function(d,i) {
		                dispatch.chartClick({
		                    data: d,
		                    index: i,
		                    pos: d3.event,
		                    id: id
		                });
		            });

		            arcs = [];
		            arcsOver = [];
		            for (var i = 0; i < data[0].length; i++) {

		                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);
		                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);

		                if (startAngle !== false) {
		                    arc.startAngle(startAngle);
		                    arcOver.startAngle(startAngle);
		                }
		                if (endAngle !== false) {
		                    arc.endAngle(endAngle);
		                    arcOver.endAngle(endAngle);
		                }
		                if (donut) {
		                    arc.innerRadius(arcsRadiusInner[i]);
		                    arcOver.innerRadius(arcsRadiusInner[i]);
		                }

		                if (arc.cornerRadius && cornerRadius) {
		                    arc.cornerRadius(cornerRadius);
		                    arcOver.cornerRadius(cornerRadius);
		                }

		                arcs.push(arc);
		                arcsOver.push(arcOver);
		            }

		            // Setup the Pie chart and choose the data element
		            var pie = d3.layout.pie()
		                .sort(null)
		                .value(function(d) { return d.disabled ? 0 : getY(d) });

		            // padAngle added in d3 3.5
		            if (pie.padAngle && padAngle) {
		                pie.padAngle(padAngle);
		            }

		            // if title is specified and donut, put it in the middle
		            if (donut && title) {
		                g_pie.append("text").attr('class', 'nv-pie-title');

		                wrap.select('.nv-pie-title')
		                    .style("text-anchor", "middle")
		                    .text(function (d) {
		                        return title;
		                    })
		                    .style("font-size", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + "px")
		                    .attr("dy", "0.35em") // trick to vertically center text
		                    .attr('transform', function(d, i) {
		                        return 'translate(0, '+ titleOffset + ')';
		                    });
		            }

		            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);
		            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);

		            slices.exit().remove();
		            pieLabels.exit().remove();

		            var ae = slices.enter().append('g');
		            ae.attr('class', 'nv-slice');
		            ae.on('mouseover', function(d, i) {
		                d3.select(this).classed('hover', true);
		                if (growOnHover) {
		                    d3.select(this).select("path").transition()
		                        .duration(70)
		                        .attr("d", arcsOver[i]);
		                }
		                dispatch.elementMouseover({
		                    data: d.data,
		                    index: i,
		                    color: d3.select(this).style("fill")
		                });
		            });
		            ae.on('mouseout', function(d, i) {
		                d3.select(this).classed('hover', false);
		                if (growOnHover) {
		                    d3.select(this).select("path").transition()
		                        .duration(50)
		                        .attr("d", arcs[i]);
		                }
		                dispatch.elementMouseout({data: d.data, index: i});
		            });
		            ae.on('mousemove', function(d, i) {
		                dispatch.elementMousemove({data: d.data, index: i});
		            });
		            ae.on('click', function(d, i) {
		                var element = this;
		                dispatch.elementClick({
		                    data: d.data,
		                    index: i,
		                    color: d3.select(this).style("fill"),
		                    event: d3.event,
		                    element: element
		                });
		            });
		            ae.on('dblclick', function(d, i) {
		                dispatch.elementDblClick({
		                    data: d.data,
		                    index: i,
		                    color: d3.select(this).style("fill")
		                });
		            });

		            slices.attr('fill', function(d,i) { return color(d.data, i); });
		            slices.attr('stroke', function(d,i) { return color(d.data, i); });

		            var paths = ae.append('path').each(function(d) {
		                this._current = d;
		            });

		            slices.select('path')
		                .transition()
		                .attr('d', function (d, i) { return arcs[i](d); })
		                .attrTween('d', arcTween);

		            if (showLabels) {
		                // This does the normal label
		                var labelsArc = [];
		                for (var i = 0; i < data[0].length; i++) {
		                    labelsArc.push(arcs[i]);

		                    if (labelsOutside) {
		                        if (donut) {
		                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());
		                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);
		                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);
		                        }
		                    } else if (!donut) {
		                            labelsArc[i].innerRadius(0);
		                    }
		                }

		                pieLabels.enter().append("g").classed("nv-label",true).each(function(d,i) {
		                    var group = d3.select(this);

		                    group.attr('transform', function (d, i) {
		                        if (labelSunbeamLayout) {
		                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate
		                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate
		                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);
		                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {
		                                rotateAngle -= 90;
		                            } else {
		                                rotateAngle += 90;
		                            }
		                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';
		                        } else {
		                            d.outerRadius = radius + 10; // Set Outer Coordinate
		                            d.innerRadius = radius + 15; // Set Inner Coordinate
		                            return 'translate(' + labelsArc[i].centroid(d) + ')'
		                        }
		                    });

		                    group.append('rect')
		                        .style('stroke', '#fff')
		                        .style('fill', '#fff')
		                        .attr("rx", 3)
		                        .attr("ry", 3);

		                    group.append('text')
		                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned
		                        .style('fill', '#000')
		                });

		                var labelLocationHash = {};
		                var avgHeight = 14;
		                var avgWidth = 140;
		                var createHashKey = function(coordinates) {
		                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;
		                };
		                var getSlicePercentage = function(d) {
		                    return (d.endAngle - d.startAngle) / (2 * Math.PI);
		                };

		                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {
		                    if (labelSunbeamLayout) {
		                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate
		                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate
		                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);
		                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {
		                            rotateAngle -= 90;
		                        } else {
		                            rotateAngle += 90;
		                        }
		                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';
		                    } else {
		                        d.outerRadius = radius + 10; // Set Outer Coordinate
		                        d.innerRadius = radius + 15; // Set Inner Coordinate

		                        /*
		                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.
		                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.
		                        Adjust the label's y-position to remove the overlap.
		                        */
		                        var center = labelsArc[i].centroid(d);
		                        var percent = getSlicePercentage(d);
		                        if (d.value && percent >= labelThreshold) {
		                            var hashKey = createHashKey(center);
		                            if (labelLocationHash[hashKey]) {
		                                center[1] -= avgHeight;
		                            }
		                            labelLocationHash[createHashKey(center)] = true;
		                        }
		                        return 'translate(' + center + ')'
		                    }
		                });

		                pieLabels.select(".nv-label text")
		                    .style('text-anchor', function(d,i) {
		                        //center the text on it's origin or begin/end if orthogonal aligned
		                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';
		                    })
		                    .text(function(d, i) {
		                        var percent = getSlicePercentage(d);
		                        var label = '';
		                        if (!d.value || percent < labelThreshold) return '';

		                        if(typeof labelType === 'function') {
		                            label = labelType(d, i, {
		                                'key': getX(d.data),
		                                'value': getY(d.data),
		                                'percent': valueFormat(percent)
		                            });
		                        } else {
		                            switch (labelType) {
		                                case 'key':
		                                    label = getX(d.data);
		                                    break;
		                                case 'value':
		                                    label = valueFormat(getY(d.data));
		                                    break;
		                                case 'percent':
		                                    label = d3.format('%')(percent);
		                                    break;
		                            }
		                        }
		                        return label;
		                    })
		                ;
		            }


		            // Computes the angle of an arc, converting from radians to degrees.
		            function angle(d) {
		                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;
		                return a > 90 ? a - 180 : a;
		            }

		            function arcTween(a, idx) {
		                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;
		                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;
		                if (!donut) a.innerRadius = 0;
		                var i = d3.interpolate(this._current, a);
		                this._current = i(0);
		                return function (t) {
		                    return arcs[idx](i(t));
		                };
		            }
		        });

		        renderWatch.renderEnd('pie immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},
		        title:      {get: function(){return title;}, set: function(_){title=_;}},
		        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},
		        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},
		        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},
		        x:          {get: function(){return getX;}, set: function(_){getX=_;}},
		        id:         {get: function(){return id;}, set: function(_){id=_;}},
		        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},
		        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},
		        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},
		        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},
		        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},
		        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},
		        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},
		        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},
		        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},

		        // depreciated after 1.7.1
		        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){
		            labelsOutside=_;
		            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');
		        }},
		        // depreciated after 1.7.1
		        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){
		            labelsOutside=_;
		            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');
		        }},
		        // deprecated after 1.7.1
		        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {
		            valueFormat=_;
		            nv.deprecated('labelFormat','use valueFormat instead');
		        }},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;
		            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;
		            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
		            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;
		        }},
		        y: {get: function(){return getY;}, set: function(_){
		            getY=d3.functor(_);
		        }},
		        color: {get: function(){return color;}, set: function(_){
		            color=nv.utils.getColor(_);
		        }},
		        labelType:          {get: function(){return labelType;}, set: function(_){
		            labelType= _ || 'key';
		        }}
		    });

		    nv.utils.initOptions(chart);
		    return chart;
		};
		nv.models.pieChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var pie = nv.models.pie();
		    var legend = nv.models.legend();
		    var tooltip = nv.models.tooltip();

		    var margin = {top: 30, right: 20, bottom: 20, left: 20}
		        , width = null
		        , height = null
		        , showLegend = true
		        , legendPosition = "top"
		        , color = nv.utils.defaultColor()
		        , state = nv.utils.state()
		        , defaultState = null
		        , noData = null
		        , duration = 250
		        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')
		        ;

		    tooltip
		        .duration(0)
		        .headerEnabled(false)
		        .valueFormatter(function(d, i) {
		            return pie.valueFormat()(d, i);
		        });

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch);

		    var stateGetter = function(data) {
		        return function(){
		            return {
		                active: data.map(function(d) { return !d.disabled })
		            };
		        }
		    };

		    var stateSetter = function(data) {
		        return function(state) {
		            if (state.active !== undefined) {
		                data.forEach(function (series, i) {
		                    series.disabled = !state.active[i];
		                });
		            }
		        }
		    };

		    //============================================================
		    // Chart function
		    //------------------------------------------------------------

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(pie);

		        selection.each(function(data) {
		            var container = d3.select(this);
		            nv.utils.initSVG(container);

		            var that = this;
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() { container.transition().call(chart); };
		            chart.container = this;

		            state.setter(stateSetter(data), chart.update)
		                .getter(stateGetter(data))
		                .update();

		            //set state.disabled
		            state.disabled = data.map(function(d) { return !!d.disabled });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length) {
		                nv.utils.noData(chart, container);
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-pieWrap');
		            gEnter.append('g').attr('class', 'nv-legendWrap');

		            // Legend
		            if (showLegend) {
		                if (legendPosition === "top") {
		                    legend.width( availableWidth ).key(pie.x());

		                    wrap.select('.nv-legendWrap')
		                        .datum(data)
		                        .call(legend);

		                    if ( margin.top != legend.height()) {
		                        margin.top = legend.height();
		                        availableHeight = nv.utils.availableHeight(height, container, margin);
		                    }

		                    wrap.select('.nv-legendWrap')
		                        .attr('transform', 'translate(0,' + (-margin.top) +')');
		                } else if (legendPosition === "right") {
		                    var legendWidth = nv.models.legend().width();
		                    if (availableWidth / 2 < legendWidth) {
		                        legendWidth = (availableWidth / 2)
		                    }
		                    legend.height(availableHeight).key(pie.x());
		                    legend.width(legendWidth);
		                    availableWidth -= legend.width();

		                    wrap.select('.nv-legendWrap')
		                        .datum(data)
		                        .call(legend)
		                        .attr('transform', 'translate(' + (availableWidth) +',0)');
		                }
		            }
		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            // Main Chart Component(s)
		            pie.width(availableWidth).height(availableHeight);
		            var pieWrap = g.select('.nv-pieWrap').datum([data]);
		            d3.transition(pieWrap).call(pie);

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            legend.dispatch.on('stateChange', function(newState) {
		                for (var key in newState) {
		                    state[key] = newState[key];
		                }
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            // Update chart from a state object passed to event handler
		            dispatch.on('changeState', function(e) {
		                if (typeof e.disabled !== 'undefined') {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });
		                    state.disabled = e.disabled;
		                }
		                chart.update();
		            });
		        });

		        renderWatch.renderEnd('pieChart immediate');
		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    pie.dispatch.on('elementMouseover.tooltip', function(evt) {
		        evt['series'] = {
		            key: chart.x()(evt.data),
		            value: chart.y()(evt.data),
		            color: evt.color
		        };
		        tooltip.data(evt).hidden(false);
		    });

		    pie.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true);
		    });

		    pie.dispatch.on('elementMousemove.tooltip', function(evt) {
		        tooltip();
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.legend = legend;
		    chart.dispatch = dispatch;
		    chart.pie = pie;
		    chart.tooltip = tooltip;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    // use Object get/set functionality to map between vars and chart functions
		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        noData:         {get: function(){return noData;},         set: function(_){noData=_;}},
		        showLegend:     {get: function(){return showLegend;},     set: function(_){showLegend=_;}},
		        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},
		        defaultState:   {get: function(){return defaultState;},   set: function(_){defaultState=_;}},

		        // options that require extra logic in the setter
		        color: {get: function(){return color;}, set: function(_){
		            color = _;
		            legend.color(color);
		            pie.color(color);
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		        }},
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }}
		    });
		    nv.utils.inheritOptions(chart, pie);
		    nv.utils.initOptions(chart);
		    return chart;
		};

		nv.models.scatter = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin       = {top: 0, right: 0, bottom: 0, left: 0}
		        , width        = null
		        , height       = null
		        , color        = nv.utils.defaultColor() // chooses color
		        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one
		        , container    = null
		        , x            = d3.scale.linear()
		        , y            = d3.scale.linear()
		        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area
		        , getX         = function(d) { return d.x } // accessor to get the x value
		        , getY         = function(d) { return d.y } // accessor to get the y value
		        , getSize      = function(d) { return d.size || 1} // accessor to get the point size
		        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape
		        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)
		        , forceY       = [] // List of numbers to Force into the Y scale
		        , forceSize    = [] // List of numbers to Force into the Size scale
		        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection
		        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out
		        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
		        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding
		        , clipEdge     = false // if true, masks points within x and y scale
		        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance
		        , showVoronoi  = false // display the voronoi areas
		        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips
		        , xDomain      = null // Override x domain (skips the calculation from data)
		        , yDomain      = null // Override y domain
		        , xRange       = null // Override x range
		        , yRange       = null // Override y range
		        , sizeDomain   = null // Override point size domain
		        , sizeRange    = null
		        , singlePoint  = false
		        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')
		        , useVoronoi   = true
		        , duration     = 250
		        , interactiveUpdateDelay = 300
		        ;


		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var x0, y0, z0 // used to store previous scales
		        , timeoutID
		        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips
		        , renderWatch = nv.utils.renderWatch(dispatch, duration)
		        , _sizeRange_def = [16, 256]
		        ;

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            container = d3.select(this);
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            nv.utils.initSVG(container);

		            //add series index to each data point for reference
		            data.forEach(function(series, i) {
		                series.values.forEach(function(point) {
		                    point.series = i;
		                });
		            });

		            // Setup Scales
		            // remap and flatten the data for use in calculating the scales' domains
		            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance
		                d3.merge(
		                    data.map(function(d) {
		                        return d.values.map(function(d,i) {
		                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }
		                        })
		                    })
		                );

		            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))

		            if (padData && data[0])
		                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);
		            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
		            else
		                x.range(xRange || [0, availableWidth]);

		             if (chart.yScale().name === "o") {
		                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));
		                    y.clamp(true)
		                        .domain(yDomain || d3.extent(seriesData.map(function(d) {
		                            if (d.y !== 0) return d.y;
		                            else return min * 0.1;
		                        }).concat(forceY)))
		                        .range(yRange || [availableHeight, 0]);
		                } else {
		                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))
		                        .range(yRange || [availableHeight, 0]);
		                }

		            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))
		                .range(sizeRange || _sizeRange_def);

		            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
		            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];

		            if (x.domain()[0] === x.domain()[1])
		                x.domain()[0] ?
		                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
		                    : x.domain([-1,1]);

		            if (y.domain()[0] === y.domain()[1])
		                y.domain()[0] ?
		                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])
		                    : y.domain([-1,1]);

		            if ( isNaN(x.domain()[0])) {
		                x.domain([-1,1]);
		            }

		            if ( isNaN(y.domain()[0])) {
		                y.domain([-1,1]);
		            }

		            x0 = x0 || x;
		            y0 = y0 || y;
		            z0 = z0 || z;

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);
		            var defsEnter = wrapEnter.append('defs');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            wrap.classed('nv-single-point', singlePoint);
		            gEnter.append('g').attr('class', 'nv-groups');
		            gEnter.append('g').attr('class', 'nv-point-paths');
		            wrapEnter.append('g').attr('class', 'nv-point-clips');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            defsEnter.append('clipPath')
		                .attr('id', 'nv-edge-clip-' + id)
		                .append('rect');

		            wrap.select('#nv-edge-clip-' + id + ' rect')
		                .attr('width', availableWidth)
		                .attr('height', (availableHeight > 0) ? availableHeight : 0);

		            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');

		            function updateInteractiveLayer() {
		                // Always clear needs-update flag regardless of whether or not
		                // we will actually do anything (avoids needless invocations).
		                needsUpdate = false;

		                if (!interactive) return false;

		                // inject series and point index for reference into voronoi
		                if (useVoronoi === true) {
		                    var vertices = d3.merge(data.map(function(group, groupIndex) {
		                            return group.values
		                                .map(function(point, pointIndex) {
		                                    // *Adding noise to make duplicates very unlikely
		                                    // *Injecting series and point index for reference
		                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.
		                                     */
		                                    var pX = getX(point,pointIndex);
		                                    var pY = getY(point,pointIndex);

		                                    return [x(pX)+ Math.random() * 1e-4,
		                                            y(pY)+ Math.random() * 1e-4,
		                                        groupIndex,
		                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates
		                                })
		                                .filter(function(pointArray, pointIndex) {
		                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!
		                                })
		                        })
		                    );

		                    if (vertices.length == 0) return false;  // No active points, we're done
		                    if (vertices.length < 3) {
		                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work
		                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);
		                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);
		                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);
		                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);
		                    }

		                    // keep voronoi sections from going more than 10 outside of graph
		                    // to avoid overlap with other things like legend etc
		                    var bounds = d3.geom.polygon([
		                        [-10,-10],
		                        [-10,height + 10],
		                        [width + 10,height + 10],
		                        [width + 10,-10]
		                    ]);

		                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {
		                        return {
		                            'data': bounds.clip(d),
		                            'series': vertices[i][2],
		                            'point': vertices[i][3]
		                        }
		                    });

		                    // nuke all voronoi paths on reload and recreate them
		                    wrap.select('.nv-point-paths').selectAll('path').remove();
		                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);
		                    var vPointPaths = pointPaths
		                        .enter().append("svg:path")
		                        .attr("d", function(d) {
		                            if (!d || !d.data || d.data.length === 0)
		                                return 'M 0 0';
		                            else
		                                return "M" + d.data.join(",") + "Z";
		                        })
		                        .attr("id", function(d,i) {
		                            return "nv-path-"+i; })
		                        .attr("clip-path", function(d,i) { return "url(#nv-clip-"+id+"-"+i+")"; })
		                        ;

		                    // good for debugging point hover issues
		                    if (showVoronoi) {
		                        vPointPaths.style("fill", d3.rgb(230, 230, 230))
		                            .style('fill-opacity', 0.4)
		                            .style('stroke-opacity', 1)
		                            .style("stroke", d3.rgb(200,200,200));
		                    }

		                    if (clipVoronoi) {
		                        // voronoi sections are already set to clip,
		                        // just create the circles with the IDs they expect
		                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom
		                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);
		                        var vPointClips = pointClips
		                            .enter().append("svg:clipPath")
		                            .attr("id", function(d, i) { return "nv-clip-"+id+"-"+i;})
		                            .append("svg:circle")
		                            .attr('cx', function(d) { return d[0]; })
		                            .attr('cy', function(d) { return d[1]; })
		                            .attr('r', clipRadius);
		                    }

		                    var mouseEventCallback = function(d, mDispatch) {
		                        if (needsUpdate) return 0;
		                        var series = data[d.series];
		                        if (series === undefined) return;
		                        var point  = series.values[d.point];
		                        point['color'] = color(series, d.series);

		                        // standardize attributes for tooltip.
		                        point['x'] = getX(point);
		                        point['y'] = getY(point);

		                        // can't just get box of event node since it's actually a voronoi polygon
		                        var box = container.node().getBoundingClientRect();
		                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;
		                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

		                        var pos = {
		                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,
		                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10
		                        };

		                        mDispatch({
		                            point: point,
		                            series: series,
		                            pos: pos,
		                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],
		                            seriesIndex: d.series,
		                            pointIndex: d.point
		                        });
		                    };

		                    pointPaths
		                        .on('click', function(d) {
		                            mouseEventCallback(d, dispatch.elementClick);
		                        })
		                        .on('dblclick', function(d) {
		                            mouseEventCallback(d, dispatch.elementDblClick);
		                        })
		                        .on('mouseover', function(d) {
		                            mouseEventCallback(d, dispatch.elementMouseover);
		                        })
		                        .on('mouseout', function(d, i) {
		                            mouseEventCallback(d, dispatch.elementMouseout);
		                        });

		                } else {
		                    // add event handlers to points instead voronoi paths
		                    wrap.select('.nv-groups').selectAll('.nv-group')
		                        .selectAll('.nv-point')
		                        //.data(dataWithPoints)
		                        //.style('pointer-events', 'auto') // recativate events, disabled by css
		                        .on('click', function(d,i) {
		                            //nv.log('test', d, i);
		                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point
		                            var series = data[d.series],
		                                point  = series.values[i];

		                            dispatch.elementClick({
		                                point: point,
		                                series: series,
		                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page
		                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],
		                                seriesIndex: d.series,
		                                pointIndex: i
		                            });
		                        })
		                        .on('dblclick', function(d,i) {
		                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point
		                            var series = data[d.series],
		                                point  = series.values[i];

		                            dispatch.elementDblClick({
		                                point: point,
		                                series: series,
		                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page
		                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],
		                                seriesIndex: d.series,
		                                pointIndex: i
		                            });
		                        })
		                        .on('mouseover', function(d,i) {
		                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point
		                            var series = data[d.series],
		                                point  = series.values[i];

		                            dispatch.elementMouseover({
		                                point: point,
		                                series: series,
		                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page
		                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],
		                                seriesIndex: d.series,
		                                pointIndex: i,
		                                color: color(d, i)
		                            });
		                        })
		                        .on('mouseout', function(d,i) {
		                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point
		                            var series = data[d.series],
		                                point  = series.values[i];

		                            dispatch.elementMouseout({
		                                point: point,
		                                series: series,
		                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page
		                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],
		                                seriesIndex: d.series,
		                                pointIndex: i,
		                                color: color(d, i)
		                            });
		                        });
		                }
		            }

		            needsUpdate = true;
		            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
		                .data(function(d) { return d }, function(d) { return d.key });
		            groups.enter().append('g')
		                .style('stroke-opacity', 1e-6)
		                .style('fill-opacity', 1e-6);
		            groups.exit()
		                .remove();
		            groups
		                .attr('class', function(d,i) {
		                    return (d.classed || '') + ' nv-group nv-series-' + i;
		                })
		                .classed('hover', function(d) { return d.hover });
		            groups.watchTransition(renderWatch, 'scatter: groups')
		                .style('fill', function(d,i) { return color(d, i) })
		                .style('stroke', function(d,i) { return color(d, i) })
		                .style('stroke-opacity', 1)
		                .style('fill-opacity', .5);

		            // create the points, maintaining their IDs from the original data set
		            var points = groups.selectAll('path.nv-point')
		                .data(function(d) {
		                    return d.values.map(
		                        function (point, pointIndex) {
		                            return [point, pointIndex]
		                        }).filter(
		                            function(pointArray, pointIndex) {
		                                return pointActive(pointArray[0], pointIndex)
		                            })
		                    });
		            points.enter().append('path')
		                .style('fill', function (d) { return d.color })
		                .style('stroke', function (d) { return d.color })
		                .attr('transform', function(d) {
		                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'
		                })
		                .attr('d',
		                    nv.utils.symbol()
		                    .type(function(d) { return getShape(d[0]); })
		                    .size(function(d) { return z(getSize(d[0],d[1])) })
		            );
		            points.exit().remove();
		            groups.exit().selectAll('path.nv-point')
		                .watchTransition(renderWatch, 'scatter exit')
		                .attr('transform', function(d) {
		                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'
		                })
		                .remove();
		            points.each(function(d) {
		                d3.select(this)
		                    .classed('nv-point', true)
		                    .classed('nv-point-' + d[1], true)
		                    .classed('nv-noninteractive', !interactive)
		                    .classed('hover',false)
		                ;
		            });
		            points
		                .watchTransition(renderWatch, 'scatter points')
		                .attr('transform', function(d) {
		                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));
		                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'
		                })
		                .attr('d',
		                    nv.utils.symbol()
		                    .type(function(d) { return getShape(d[0]); })
		                    .size(function(d) { return z(getSize(d[0],d[1])) })
		            );

		            // Delay updating the invisible interactive layer for smoother animation
		            if( interactiveUpdateDelay )
		            {
		                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer
		                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );
		            }
		            else
		            {
		                updateInteractiveLayer();
		            }

		            //store old scales for use in transitions on update
		            x0 = x.copy();
		            y0 = y.copy();
		            z0 = z.copy();

		        });
		        renderWatch.renderEnd('scatter immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    // utility function calls provided by this chart
		    chart._calls = new function() {
		        this.clearHighlights = function () {
		            nv.dom.write(function() {
		                container.selectAll(".nv-point.hover").classed("hover", false);
		            });
		            return null;
		        };
		        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {
		            nv.dom.write(function() {
		                container.select('.nv-groups')
		                  .selectAll(".nv-series-" + seriesIndex)
		                  .selectAll(".nv-point-" + pointIndex)
		                  .classed("hover", isHoverOver);
		            });
		        };
		    };

		    // trigger calls from events too
		    dispatch.on('elementMouseover.point', function(d) {
		        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);
		    });

		    dispatch.on('elementMouseout.point', function(d) {
		        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);
		    });

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:        {get: function(){return width;}, set: function(_){width=_;}},
		        height:       {get: function(){return height;}, set: function(_){height=_;}},
		        xScale:       {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:       {get: function(){return y;}, set: function(_){y=_;}},
		        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},
		        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},
		        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},
		        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},
		        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},
		        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},
		        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},
		        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},
		        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},
		        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},
		        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
		        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},
		        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},
		        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},
		        id:           {get: function(){return id;}, set: function(_){id=_;}},
		        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},


		        // simple functor options
		        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},
		        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},
		        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},
		        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		        }},
		        color: {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }},
		        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){
		            useVoronoi = _;
		            if (useVoronoi === false) {
		                clipVoronoi = false;
		            }
		        }}
		    });

		    nv.utils.initOptions(chart);
		    return chart;
		};

		nv.models.scatterChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var scatter      = nv.models.scatter()
		        , xAxis        = nv.models.axis()
		        , yAxis        = nv.models.axis()
		        , legend       = nv.models.legend()
		        , distX        = nv.models.distribution()
		        , distY        = nv.models.distribution()
		        , tooltip      = nv.models.tooltip()
		        ;

		    var margin       = {top: 30, right: 20, bottom: 50, left: 75}
		        , width        = null
		        , height       = null
		        , container    = null
		        , color        = nv.utils.defaultColor()
		        , x            = scatter.xScale()
		        , y            = scatter.yScale()
		        , showDistX    = false
		        , showDistY    = false
		        , showLegend   = true
		        , showXAxis    = true
		        , showYAxis    = true
		        , rightAlignYAxis = false
		        , state = nv.utils.state()
		        , defaultState = null
		        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')
		        , noData       = null
		        , duration = 250
		        ;

		    scatter.xScale(x).yScale(y);
		    xAxis.orient('bottom').tickPadding(10);
		    yAxis
		        .orient((rightAlignYAxis) ? 'right' : 'left')
		        .tickPadding(10)
		    ;
		    distX.axis('x');
		    distY.axis('y');
		    tooltip
		        .headerFormatter(function(d, i) {
		            return xAxis.tickFormat()(d, i);
		        })
		        .valueFormatter(function(d, i) {
		            return yAxis.tickFormat()(d, i);
		        });

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var x0, y0
		        , renderWatch = nv.utils.renderWatch(dispatch, duration);

		    var stateGetter = function(data) {
		        return function(){
		            return {
		                active: data.map(function(d) { return !d.disabled })
		            };
		        }
		    };

		    var stateSetter = function(data) {
		        return function(state) {
		            if (state.active !== undefined)
		                data.forEach(function(series,i) {
		                    series.disabled = !state.active[i];
		                });
		        }
		    };

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(scatter);
		        if (showXAxis) renderWatch.models(xAxis);
		        if (showYAxis) renderWatch.models(yAxis);
		        if (showDistX) renderWatch.models(distX);
		        if (showDistY) renderWatch.models(distY);

		        selection.each(function(data) {
		            var that = this;

		            container = d3.select(this);
		            nv.utils.initSVG(container);

		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() {
		                if (duration === 0)
		                    container.call(chart);
		                else
		                    container.transition().duration(duration).call(chart);
		            };
		            chart.container = this;

		            state
		                .setter(stateSetter(data), chart.update)
		                .getter(stateGetter(data))
		                .update();

		            // DEPRECATED set state.disableddisabled
		            state.disabled = data.map(function(d) { return !!d.disabled });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            // Display noData message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container);
		                renderWatch.renderEnd('scatter immediate');
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            x = scatter.xScale();
		            y = scatter.yScale();

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            // background for pointer events
		            gEnter.append('rect').attr('class', 'nvd3 nv-background').style("pointer-events","none");

		            gEnter.append('g').attr('class', 'nv-x nv-axis');
		            gEnter.append('g').attr('class', 'nv-y nv-axis');
		            gEnter.append('g').attr('class', 'nv-scatterWrap');
		            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');
		            gEnter.append('g').attr('class', 'nv-distWrap');
		            gEnter.append('g').attr('class', 'nv-legendWrap');

		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }

		            // Legend
		            if (showLegend) {
		                var legendWidth = availableWidth;
		                legend.width(legendWidth);

		                wrap.select('.nv-legendWrap')
		                    .datum(data)
		                    .call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                wrap.select('.nv-legendWrap')
		                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');
		            }

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            // Main Chart Component(s)
		            scatter
		                .width(availableWidth)
		                .height(availableHeight)
		                .color(data.map(function(d,i) {
		                    d.color = d.color || color(d, i);
		                    return d.color;
		                }).filter(function(d,i) { return !data[i].disabled }));

		            wrap.select('.nv-scatterWrap')
		                .datum(data.filter(function(d) { return !d.disabled }))
		                .call(scatter);


		            wrap.select('.nv-regressionLinesWrap')
		                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');

		            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')
		                .data(function (d) {
		                    return d;
		                });

		            regWrap.enter().append('g').attr('class', 'nv-regLines');

		            var regLine = regWrap.selectAll('.nv-regLine')
		                .data(function (d) {
		                    return [d]
		                });

		            regLine.enter()
		                .append('line').attr('class', 'nv-regLine')
		                .style('stroke-opacity', 0);

		            // don't add lines unless we have slope and intercept to use
		            regLine.filter(function(d) {
		                return d.intercept && d.slope;
		            })
		                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')
		                .attr('x1', x.range()[0])
		                .attr('x2', x.range()[1])
		                .attr('y1', function (d, i) {
		                    return y(x.domain()[0] * d.slope + d.intercept)
		                })
		                .attr('y2', function (d, i) {
		                    return y(x.domain()[1] * d.slope + d.intercept)
		                })
		                .style('stroke', function (d, i, j) {
		                    return color(d, j)
		                })
		                .style('stroke-opacity', function (d, i) {
		                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1
		                });

		            // Setup Axes
		            if (showXAxis) {
		                xAxis
		                    .scale(x)
		                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize( -availableHeight , 0);

		                g.select('.nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + y.range()[0] + ')')
		                    .call(xAxis);
		            }

		            if (showYAxis) {
		                yAxis
		                    .scale(y)
		                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
		                    .tickSize( -availableWidth, 0);

		                g.select('.nv-y.nv-axis')
		                    .call(yAxis);
		            }

		            // Setup Distribution
		            if (showDistX) {
		                distX
		                    .getData(scatter.x())
		                    .scale(x)
		                    .width(availableWidth)
		                    .color(data.map(function(d,i) {
		                        return d.color || color(d, i);
		                    }).filter(function(d,i) { return !data[i].disabled }));
		                gEnter.select('.nv-distWrap').append('g')
		                    .attr('class', 'nv-distributionX');
		                g.select('.nv-distributionX')
		                    .attr('transform', 'translate(0,' + y.range()[0] + ')')
		                    .datum(data.filter(function(d) { return !d.disabled }))
		                    .call(distX);
		            }

		            if (showDistY) {
		                distY
		                    .getData(scatter.y())
		                    .scale(y)
		                    .width(availableHeight)
		                    .color(data.map(function(d,i) {
		                        return d.color || color(d, i);
		                    }).filter(function(d,i) { return !data[i].disabled }));
		                gEnter.select('.nv-distWrap').append('g')
		                    .attr('class', 'nv-distributionY');
		                g.select('.nv-distributionY')
		                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')
		                    .datum(data.filter(function(d) { return !d.disabled }))
		                    .call(distY);
		            }

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            legend.dispatch.on('stateChange', function(newState) {
		                for (var key in newState)
		                    state[key] = newState[key];
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            // Update chart from a state object passed to event handler
		            dispatch.on('changeState', function(e) {
		                if (typeof e.disabled !== 'undefined') {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });
		                    state.disabled = e.disabled;
		                }
		                chart.update();
		            });

		            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block
		            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {
		                tooltip.hidden(true);
		                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)
		                    .attr('y1', 0);
		                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)
		                    .attr('x2', distY.size());
		            });

		            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {
		                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)
		                    .attr('y1', evt.relativePos[1] - availableHeight);
		                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)
		                    .attr('x2', evt.relativePos[0] + distX.size());
		                tooltip.data(evt).hidden(false);
		            });

		            //store old scales for use in transitions on update
		            x0 = x.copy();
		            y0 = y.copy();

		        });

		        renderWatch.renderEnd('scatter with line immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.scatter = scatter;
		    chart.legend = legend;
		    chart.xAxis = xAxis;
		    chart.yAxis = yAxis;
		    chart.distX = distX;
		    chart.distY = distY;
		    chart.tooltip = tooltip;

		    chart.options = nv.utils.optionsFunc.bind(chart);
		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        container:  {get: function(){return container;}, set: function(_){container=_;}},
		        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},
		        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
		        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},
		        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
		            rightAlignYAxis = _;
		            yAxis.orient( (_) ? 'right' : 'left');
		        }},
		        color: {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            legend.color(color);
		            distX.color(color);
		            distY.color(color);
		        }}
		    });

		    nv.utils.inheritOptions(chart, scatter);
		    nv.utils.initOptions(chart);
		    return chart;
		};

		nv.models.sparkline = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 2, right: 0, bottom: 2, left: 0}
		        , width = 400
		        , height = 32
		        , container = null
		        , animate = true
		        , x = d3.scale.linear()
		        , y = d3.scale.linear()
		        , getX = function(d) { return d.x }
		        , getY = function(d) { return d.y }
		        , color = nv.utils.getColor(['#000'])
		        , xDomain
		        , yDomain
		        , xRange
		        , yRange
		        , dispatch = d3.dispatch('renderEnd')
		        ;

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch);
		    
		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right,
		                availableHeight = height - margin.top - margin.bottom;

		            container = d3.select(this);
		            nv.utils.initSVG(container);

		            // Setup Scales
		            x   .domain(xDomain || d3.extent(data, getX ))
		                .range(xRange || [0, availableWidth]);

		            y   .domain(yDomain || d3.extent(data, getY ))
		                .range(yRange || [availableHeight, 0]);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

		            var paths = wrap.selectAll('path')
		                .data(function(d) { return [d] });
		            paths.enter().append('path');
		            paths.exit().remove();
		            paths
		                .style('stroke', function(d,i) { return d.color || color(d, i) })
		                .attr('d', d3.svg.line()
		                    .x(function(d,i) { return x(getX(d,i)) })
		                    .y(function(d,i) { return y(getY(d,i)) })
		            );

		            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)
		            var points = wrap.selectAll('circle.nv-point')
		                .data(function(data) {
		                    var yValues = data.map(function(d, i) { return getY(d,i); });
		                    function pointIndex(index) {
		                        if (index != -1) {
		                            var result = data[index];
		                            result.pointIndex = index;
		                            return result;
		                        } else {
		                            return null;
		                        }
		                    }
		                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),
		                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),
		                        currentPoint = pointIndex(yValues.length - 1);
		                    return [minPoint, maxPoint, currentPoint].filter(function (d) {return d != null;});
		                });
		            points.enter().append('circle');
		            points.exit().remove();
		            points
		                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })
		                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })
		                .attr('r', 2)
		                .attr('class', function(d,i) {
		                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :
		                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'
		                });
		        });
		        
		        renderWatch.renderEnd('sparkline immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:     {get: function(){return width;}, set: function(_){width=_;}},
		        height:    {get: function(){return height;}, set: function(_){height=_;}},
		        xDomain:   {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
		        yDomain:   {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
		        xRange:    {get: function(){return xRange;}, set: function(_){xRange=_;}},
		        yRange:    {get: function(){return yRange;}, set: function(_){yRange=_;}},
		        xScale:    {get: function(){return x;}, set: function(_){x=_;}},
		        yScale:    {get: function(){return y;}, set: function(_){y=_;}},
		        animate:   {get: function(){return animate;}, set: function(_){animate=_;}},

		        //functor options
		        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},
		        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }}
		    });

		    chart.dispatch = dispatch;
		    nv.utils.initOptions(chart);
		    return chart;
		};

		nv.models.sparklinePlus = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var sparkline = nv.models.sparkline();

		    var margin = {top: 15, right: 100, bottom: 10, left: 50}
		        , width = null
		        , height = null
		        , x
		        , y
		        , index = []
		        , paused = false
		        , xTickFormat = d3.format(',r')
		        , yTickFormat = d3.format(',.2f')
		        , showLastValue = true
		        , alignValue = true
		        , rightAlignValue = false
		        , noData = null
		        , dispatch = d3.dispatch('renderEnd')
		        ;
		        
		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch);

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(sparkline);
		        selection.each(function(data) {
		            var container = d3.select(this);
		            nv.utils.initSVG(container);

		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() { container.call(chart); };
		            chart.container = this;

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length) {
		                nv.utils.noData(chart, container)
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            var currentValue = sparkline.y()(data[data.length-1], data.length-1);

		            // Setup Scales
		            x = sparkline.xScale();
		            y = sparkline.yScale();

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-sparklineWrap');
		            gEnter.append('g').attr('class', 'nv-valueWrap');
		            gEnter.append('g').attr('class', 'nv-hoverArea');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            // Main Chart Component(s)
		            var sparklineWrap = g.select('.nv-sparklineWrap');

		            sparkline.width(availableWidth).height(availableHeight);
		            sparklineWrap.call(sparkline);

		            if (showLastValue) {
		                var valueWrap = g.select('.nv-valueWrap');
		                var value = valueWrap.selectAll('.nv-currentValue')
		                    .data([currentValue]);

		                value.enter().append('text').attr('class', 'nv-currentValue')
		                    .attr('dx', rightAlignValue ? -8 : 8)
		                    .attr('dy', '.9em')
		                    .style('text-anchor', rightAlignValue ? 'end' : 'start');

		                value
		                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))
		                    .attr('y', alignValue ? function (d) {
		                        return y(d)
		                    } : 0)
		                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))
		                    .text(yTickFormat(currentValue));
		            }

		            gEnter.select('.nv-hoverArea').append('rect')
		                .on('mousemove', sparklineHover)
		                .on('click', function() { paused = !paused })
		                .on('mouseout', function() { index = []; updateValueLine(); });

		            g.select('.nv-hoverArea rect')
		                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })
		                .attr('width', availableWidth + margin.left + margin.right)
		                .attr('height', availableHeight + margin.top);

		            //index is currently global (within the chart), may or may not keep it that way
		            function updateValueLine() {
		                if (paused) return;

		                var hoverValue = g.selectAll('.nv-hoverValue').data(index);

		                var hoverEnter = hoverValue.enter()
		                    .append('g').attr('class', 'nv-hoverValue')
		                    .style('stroke-opacity', 0)
		                    .style('fill-opacity', 0);

		                hoverValue.exit()
		                    .transition().duration(250)
		                    .style('stroke-opacity', 0)
		                    .style('fill-opacity', 0)
		                    .remove();

		                hoverValue
		                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })
		                    .transition().duration(250)
		                    .style('stroke-opacity', 1)
		                    .style('fill-opacity', 1);

		                if (!index.length) return;

		                hoverEnter.append('line')
		                    .attr('x1', 0)
		                    .attr('y1', -margin.top)
		                    .attr('x2', 0)
		                    .attr('y2', availableHeight);

		                hoverEnter.append('text').attr('class', 'nv-xValue')
		                    .attr('x', -6)
		                    .attr('y', -margin.top)
		                    .attr('text-anchor', 'end')
		                    .attr('dy', '.9em');

		                g.select('.nv-hoverValue .nv-xValue')
		                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));

		                hoverEnter.append('text').attr('class', 'nv-yValue')
		                    .attr('x', 6)
		                    .attr('y', -margin.top)
		                    .attr('text-anchor', 'start')
		                    .attr('dy', '.9em');

		                g.select('.nv-hoverValue .nv-yValue')
		                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));
		            }

		            function sparklineHover() {
		                if (paused) return;

		                var pos = d3.mouse(this)[0] - margin.left;

		                function getClosestIndex(data, x) {
		                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);
		                    var closestIndex = 0;
		                    for (var i = 0; i < data.length; i++){
		                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {
		                            distance = Math.abs(sparkline.x()(data[i], i) - x);
		                            closestIndex = i;
		                        }
		                    }
		                    return closestIndex;
		                }

		                index = [getClosestIndex(data, Math.round(x.invert(pos)))];
		                updateValueLine();
		            }

		        });
		        renderWatch.renderEnd('sparklinePlus immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.sparkline = sparkline;

		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:           {get: function(){return width;}, set: function(_){width=_;}},
		        height:          {get: function(){return height;}, set: function(_){height=_;}},
		        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},
		        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},
		        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},
		        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},
		        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},
		        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }}
		    });

		    nv.utils.inheritOptions(chart, sparkline);
		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.stackedArea = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = 960
		        , height = 500
		        , color = nv.utils.defaultColor() // a function that computes the color
		        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one
		        , container = null
		        , getX = function(d) { return d.x } // accessor to get the x value from a data point
		        , getY = function(d) { return d.y } // accessor to get the y value from a data point
		        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined
		        , style = 'stack'
		        , offset = 'zero'
		        , order = 'default'
		        , interpolate = 'linear'  // controls the line interpolation
		        , clipEdge = false // if true, masks lines within x and y scale
		        , x //can be accessed via chart.xScale()
		        , y //can be accessed via chart.yScale()
		        , scatter = nv.models.scatter()
		        , duration = 250
		        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')
		        ;

		    scatter
		        .pointSize(2.2) // default size
		        .pointDomain([2.2, 2.2]) // all the same size by default
		    ;

		    /************************************
		     * offset:
		     *   'wiggle' (stream)
		     *   'zero' (stacked)
		     *   'expand' (normalize to 100%)
		     *   'silhouette' (simple centered)
		     *
		     * order:
		     *   'inside-out' (stream)
		     *   'default' (input order)
		     ************************************/

		    var renderWatch = nv.utils.renderWatch(dispatch, duration);

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(scatter);
		        selection.each(function(data) {
		            var availableWidth = width - margin.left - margin.right,
		                availableHeight = height - margin.top - margin.bottom;

		            container = d3.select(this);
		            nv.utils.initSVG(container);

		            // Setup Scales
		            x = scatter.xScale();
		            y = scatter.yScale();

		            var dataRaw = data;
		            // Injecting point index into each point because d3.layout.stack().out does not give index
		            data.forEach(function(aseries, i) {
		                aseries.seriesIndex = i;
		                aseries.values = aseries.values.map(function(d, j) {
		                    d.index = j;
		                    d.seriesIndex = i;
		                    return d;
		                });
		            });

		            var dataFiltered = data.filter(function(series) {
		                return !series.disabled;
		            });

		            data = d3.layout.stack()
		                .order(order)
		                .offset(offset)
		                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion
		                .x(getX)
		                .y(getY)
		                .out(function(d, y0, y) {
		                    d.display = {
		                        y: y,
		                        y0: y0
		                    };
		                })
		            (dataFiltered);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');
		            var defsEnter = wrapEnter.append('defs');
		            var gEnter = wrapEnter.append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-areaWrap');
		            gEnter.append('g').attr('class', 'nv-scatterWrap');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
		            
		            // If the user has not specified forceY, make sure 0 is included in the domain
		            // Otherwise, use user-specified values for forceY
		            if (scatter.forceY().length == 0) {
		                scatter.forceY().push(0);
		            }
		            
		            scatter
		                .width(availableWidth)
		                .height(availableHeight)
		                .x(getX)
		                .y(function(d) {
		                    if (d.display !== undefined) { return d.display.y + d.display.y0; }
		                })
		                .forceY([0])
		                .color(data.map(function(d,i) {
		                    d.color = d.color || color(d, d.seriesIndex);
		                    return d.color;
		                }));

		            var scatterWrap = g.select('.nv-scatterWrap')
		                .datum(data);

		            scatterWrap.call(scatter);

		            defsEnter.append('clipPath')
		                .attr('id', 'nv-edge-clip-' + id)
		                .append('rect');

		            wrap.select('#nv-edge-clip-' + id + ' rect')
		                .attr('width', availableWidth)
		                .attr('height', availableHeight);

		            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');

		            var area = d3.svg.area()
		                .defined(defined)
		                .x(function(d,i)  { return x(getX(d,i)) })
		                .y0(function(d) {
		                    return y(d.display.y0)
		                })
		                .y1(function(d) {
		                    return y(d.display.y + d.display.y0)
		                })
		                .interpolate(interpolate);

		            var zeroArea = d3.svg.area()
		                .defined(defined)
		                .x(function(d,i)  { return x(getX(d,i)) })
		                .y0(function(d) { return y(d.display.y0) })
		                .y1(function(d) { return y(d.display.y0) });

		            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')
		                .data(function(d) { return d });

		            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })
		                .attr('d', function(d,i){
		                    return zeroArea(d.values, d.seriesIndex);
		                })
		                .on('mouseover', function(d,i) {
		                    d3.select(this).classed('hover', true);
		                    dispatch.areaMouseover({
		                        point: d,
		                        series: d.key,
		                        pos: [d3.event.pageX, d3.event.pageY],
		                        seriesIndex: d.seriesIndex
		                    });
		                })
		                .on('mouseout', function(d,i) {
		                    d3.select(this).classed('hover', false);
		                    dispatch.areaMouseout({
		                        point: d,
		                        series: d.key,
		                        pos: [d3.event.pageX, d3.event.pageY],
		                        seriesIndex: d.seriesIndex
		                    });
		                })
		                .on('click', function(d,i) {
		                    d3.select(this).classed('hover', false);
		                    dispatch.areaClick({
		                        point: d,
		                        series: d.key,
		                        pos: [d3.event.pageX, d3.event.pageY],
		                        seriesIndex: d.seriesIndex
		                    });
		                });

		            path.exit().remove();
		            path.style('fill', function(d,i){
		                    return d.color || color(d, d.seriesIndex)
		                })
		                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });
		            path.watchTransition(renderWatch,'stackedArea path')
		                .attr('d', function(d,i) {
		                    return area(d.values,i)
		                });

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            scatter.dispatch.on('elementMouseover.area', function(e) {
		                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);
		            });
		            scatter.dispatch.on('elementMouseout.area', function(e) {
		                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);
		            });

		            //Special offset functions
		            chart.d3_stackedOffset_stackPercent = function(stackData) {
		                var n = stackData.length,    //How many series
		                    m = stackData[0].length,     //how many points per series
		                    i,
		                    j,
		                    o,
		                    y0 = [];

		                for (j = 0; j < m; ++j) { //Looping through all points
		                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series
		                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.
		                    }

		                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0
		                        stackData[i][j][1] /= o;
		                    } else { //(total y value of all series at point in time i) == 0
		                        for (i = 0; i < n; i++) {
		                            stackData[i][j][1] = 0;
		                        }
		                    }
		                }
		                for (j = 0; j < m; ++j) y0[j] = 0;
		                return y0;
		            };

		        });

		        renderWatch.renderEnd('stackedArea immediate');
		        return chart;
		    }

		    //============================================================
		    // Global getters and setters
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.scatter = scatter;

		    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });
		    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });
		    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });

		    chart.interpolate = function(_) {
		        if (!arguments.length) return interpolate;
		        interpolate = _;
		        return chart;
		    };

		    chart.duration = function(_) {
		        if (!arguments.length) return duration;
		        duration = _;
		        renderWatch.reset(duration);
		        scatter.duration(duration);
		        return chart;
		    };

		    chart.dispatch = dispatch;
		    chart.scatter = scatter;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        defined: {get: function(){return defined;}, set: function(_){defined=_;}},
		        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
		        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},
		        order:    {get: function(){return order;}, set: function(_){order=_;}},
		        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},

		        // simple functor options
		        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},
		        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		        }},
		        style: {get: function(){return style;}, set: function(_){
		            style = _;
		            switch (style) {
		                case 'stack':
		                    chart.offset('zero');
		                    chart.order('default');
		                    break;
		                case 'stream':
		                    chart.offset('wiggle');
		                    chart.order('inside-out');
		                    break;
		                case 'stream-center':
		                    chart.offset('silhouette');
		                    chart.order('inside-out');
		                    break;
		                case 'expand':
		                    chart.offset('expand');
		                    chart.order('default');
		                    break;
		                case 'stack_percent':
		                    chart.offset(chart.d3_stackedOffset_stackPercent);
		                    chart.order('default');
		                    break;
		            }
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		            scatter.duration(duration);
		        }}
		    });

		    nv.utils.inheritOptions(chart, scatter);
		    nv.utils.initOptions(chart);

		    return chart;
		};

		nv.models.stackedAreaChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var stacked = nv.models.stackedArea()
		        , xAxis = nv.models.axis()
		        , yAxis = nv.models.axis()
		        , legend = nv.models.legend()
		        , controls = nv.models.legend()
		        , interactiveLayer = nv.interactiveGuideline()
		        , tooltip = nv.models.tooltip()
		        ;

		    var margin = {top: 30, right: 25, bottom: 50, left: 60}
		        , width = null
		        , height = null
		        , color = nv.utils.defaultColor()
		        , showControls = true
		        , showLegend = true
		        , showXAxis = true
		        , showYAxis = true
		        , rightAlignYAxis = false
		        , useInteractiveGuideline = false
		        , showTotalInTooltip = true
		        , totalLabel = 'TOTAL'
		        , x //can be accessed via chart.xScale()
		        , y //can be accessed via chart.yScale()
		        , state = nv.utils.state()
		        , defaultState = null
		        , noData = null
		        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')
		        , controlWidth = 250
		        , controlOptions = ['Stacked','Stream','Expanded']
		        , controlLabels = {}
		        , duration = 250
		        ;

		    state.style = stacked.style();
		    xAxis.orient('bottom').tickPadding(7);
		    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');

		    tooltip
		        .headerFormatter(function(d, i) {
		            return xAxis.tickFormat()(d, i);
		        })
		        .valueFormatter(function(d, i) {
		            return yAxis.tickFormat()(d, i);
		        });

		    interactiveLayer.tooltip
		        .headerFormatter(function(d, i) {
		            return xAxis.tickFormat()(d, i);
		        })
		        .valueFormatter(function(d, i) {
		            return yAxis.tickFormat()(d, i);
		        });

		    var oldYTickFormat = null,
		        oldValueFormatter = null;

		    controls.updateState(false);

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch);
		    var style = stacked.style();

		    var stateGetter = function(data) {
		        return function(){
		            return {
		                active: data.map(function(d) { return !d.disabled }),
		                style: stacked.style()
		            };
		        }
		    };

		    var stateSetter = function(data) {
		        return function(state) {
		            if (state.style !== undefined)
		                style = state.style;
		            if (state.active !== undefined)
		                data.forEach(function(series,i) {
		                    series.disabled = !state.active[i];
		                });
		        }
		    };

		    var percentFormatter = d3.format('%');

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(stacked);
		        if (showXAxis) renderWatch.models(xAxis);
		        if (showYAxis) renderWatch.models(yAxis);

		        selection.each(function(data) {
		            var container = d3.select(this),
		                that = this;
		            nv.utils.initSVG(container);

		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() { container.transition().duration(duration).call(chart); };
		            chart.container = this;

		            state
		                .setter(stateSetter(data), chart.update)
		                .getter(stateGetter(data))
		                .update();

		            // DEPRECATED set state.disabled
		            state.disabled = data.map(function(d) { return !!d.disabled });

		            if (!defaultState) {
		                var key;
		                defaultState = {};
		                for (key in state) {
		                    if (state[key] instanceof Array)
		                        defaultState[key] = state[key].slice(0);
		                    else
		                        defaultState[key] = state[key];
		                }
		            }

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
		                nv.utils.noData(chart, container)
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup Scales
		            x = stacked.xScale();
		            y = stacked.yScale();

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');
		            var g = wrap.select('g');

		            gEnter.append("rect").style("opacity",0);
		            gEnter.append('g').attr('class', 'nv-x nv-axis');
		            gEnter.append('g').attr('class', 'nv-y nv-axis');
		            gEnter.append('g').attr('class', 'nv-stackedWrap');
		            gEnter.append('g').attr('class', 'nv-legendWrap');
		            gEnter.append('g').attr('class', 'nv-controlsWrap');
		            gEnter.append('g').attr('class', 'nv-interactive');

		            g.select("rect").attr("width",availableWidth).attr("height",availableHeight);

		            // Legend
		            if (showLegend) {
		                var legendWidth = (showControls) ? availableWidth - controlWidth : availableWidth;

		                legend.width(legendWidth);
		                g.select('.nv-legendWrap').datum(data).call(legend);

		                if ( margin.top != legend.height()) {
		                    margin.top = legend.height();
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                g.select('.nv-legendWrap')
		                    .attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');
		            }

		            // Controls
		            if (showControls) {
		                var controlsData = [
		                    {
		                        key: controlLabels.stacked || 'Stacked',
		                        metaKey: 'Stacked',
		                        disabled: stacked.style() != 'stack',
		                        style: 'stack'
		                    },
		                    {
		                        key: controlLabels.stream || 'Stream',
		                        metaKey: 'Stream',
		                        disabled: stacked.style() != 'stream',
		                        style: 'stream'
		                    },
		                    {
		                        key: controlLabels.expanded || 'Expanded',
		                        metaKey: 'Expanded',
		                        disabled: stacked.style() != 'expand',
		                        style: 'expand'
		                    },
		                    {
		                        key: controlLabels.stack_percent || 'Stack %',
		                        metaKey: 'Stack_Percent',
		                        disabled: stacked.style() != 'stack_percent',
		                        style: 'stack_percent'
		                    }
		                ];

		                controlWidth = (controlOptions.length/3) * 260;
		                controlsData = controlsData.filter(function(d) {
		                    return controlOptions.indexOf(d.metaKey) !== -1;
		                });

		                controls
		                    .width( controlWidth )
		                    .color(['#444', '#444', '#444']);

		                g.select('.nv-controlsWrap')
		                    .datum(controlsData)
		                    .call(controls);

		                if ( margin.top != Math.max(controls.height(), legend.height()) ) {
		                    margin.top = Math.max(controls.height(), legend.height());
		                    availableHeight = nv.utils.availableHeight(height, container, margin);
		                }

		                g.select('.nv-controlsWrap')
		                    .attr('transform', 'translate(0,' + (-margin.top) +')');
		            }

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            if (rightAlignYAxis) {
		                g.select(".nv-y.nv-axis")
		                    .attr("transform", "translate(" + availableWidth + ",0)");
		            }

		            //Set up interactive layer
		            if (useInteractiveGuideline) {
		                interactiveLayer
		                    .width(availableWidth)
		                    .height(availableHeight)
		                    .margin({left: margin.left, top: margin.top})
		                    .svgContainer(container)
		                    .xScale(x);
		                wrap.select(".nv-interactive").call(interactiveLayer);
		            }

		            stacked
		                .width(availableWidth)
		                .height(availableHeight);

		            var stackedWrap = g.select('.nv-stackedWrap')
		                .datum(data);

		            stackedWrap.transition().call(stacked);

		            // Setup Axes
		            if (showXAxis) {
		                xAxis.scale(x)
		                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
		                    .tickSize( -availableHeight, 0);

		                g.select('.nv-x.nv-axis')
		                    .attr('transform', 'translate(0,' + availableHeight + ')');

		                g.select('.nv-x.nv-axis')
		                    .transition().duration(0)
		                    .call(xAxis);
		            }

		            if (showYAxis) {
		                var ticks;
		                if (stacked.offset() === 'wiggle') {
		                    ticks = 0;
		                }
		                else {
		                    ticks = nv.utils.calcTicksY(availableHeight/36, data);
		                }
		                yAxis.scale(y)
		                    ._ticks(ticks)
		                    .tickSize(-availableWidth, 0);

		                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {
		                        var currentFormat = yAxis.tickFormat();

		                        if ( !oldYTickFormat || currentFormat !== percentFormatter )
		                            oldYTickFormat = currentFormat;

		                        //Forces the yAxis to use percentage in 'expand' mode.
		                        yAxis.tickFormat(percentFormatter);
		                    }
		                    else {
		                        if (oldYTickFormat) {
		                            yAxis.tickFormat(oldYTickFormat);
		                            oldYTickFormat = null;
		                        }
		                    }

		                g.select('.nv-y.nv-axis')
		                    .transition().duration(0)
		                    .call(yAxis);
		            }

		            //============================================================
		            // Event Handling/Dispatching (in chart's scope)
		            //------------------------------------------------------------

		            stacked.dispatch.on('areaClick.toggle', function(e) {
		                if (data.filter(function(d) { return !d.disabled }).length === 1)
		                    data.forEach(function(d) {
		                        d.disabled = false;
		                    });
		                else
		                    data.forEach(function(d,i) {
		                        d.disabled = (i != e.seriesIndex);
		                    });

		                state.disabled = data.map(function(d) { return !!d.disabled });
		                dispatch.stateChange(state);

		                chart.update();
		            });

		            legend.dispatch.on('stateChange', function(newState) {
		                for (var key in newState)
		                    state[key] = newState[key];
		                dispatch.stateChange(state);
		                chart.update();
		            });

		            controls.dispatch.on('legendClick', function(d,i) {
		                if (!d.disabled) return;

		                controlsData = controlsData.map(function(s) {
		                    s.disabled = true;
		                    return s;
		                });
		                d.disabled = false;

		                stacked.style(d.style);


		                state.style = stacked.style();
		                dispatch.stateChange(state);

		                chart.update();
		            });

		            interactiveLayer.dispatch.on('elementMousemove', function(e) {
		                stacked.clearHighlights();
		                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0;
		                data
		                    .filter(function(series, i) {
		                        series.seriesIndex = i;
		                        return !series.disabled;
		                    })
		                    .forEach(function(series,i) {
		                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
		                        var point = series.values[pointIndex];
		                        var pointYValue = chart.y()(point, pointIndex);
		                        if (pointYValue != null) {
		                            stacked.highlightPoint(i, pointIndex, true);
		                        }
		                        if (typeof point === 'undefined') return;
		                        if (typeof singlePoint === 'undefined') singlePoint = point;
		                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));

		                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.
		                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);
		                        allData.push({
		                            key: series.key,
		                            value: tooltipValue,
		                            color: color(series,series.seriesIndex),
		                            stackedValue: point.display
		                        });

		                        if (showTotalInTooltip && stacked.style() != 'expand') {
		                          valueSum += tooltipValue;
		                        };
		                    });

		                allData.reverse();

		                //Highlight the tooltip entry based on which stack the mouse is closest to.
		                if (allData.length > 2) {
		                    var yValue = chart.yScale().invert(e.mouseY);
		                    var yDistMax = Infinity, indexToHighlight = null;
		                    allData.forEach(function(series,i) {

		                        //To handle situation where the stacked area chart is negative, we need to use absolute values
		                        //when checking if the mouse Y value is within the stack area.
		                        yValue = Math.abs(yValue);
		                        var stackedY0 = Math.abs(series.stackedValue.y0);
		                        var stackedY = Math.abs(series.stackedValue.y);
		                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))
		                        {
		                            indexToHighlight = i;
		                            return;
		                        }
		                    });
		                    if (indexToHighlight != null)
		                        allData[indexToHighlight].highlight = true;
		                }

		                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.
		                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2) {
		                    allData.push({
		                        key: totalLabel,
		                        value: valueSum,
		                        total: true
		                    });
		                }

		                var xValue = chart.x()(singlePoint,pointIndex);

		                var valueFormatter = interactiveLayer.tooltip.valueFormatter();
		                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view
		                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {
		                    if ( !oldValueFormatter ) {
		                        oldValueFormatter = valueFormatter;
		                    }
		                    //Forces the tooltip to use percentage in 'expand' mode.
		                    valueFormatter = d3.format(".1%");
		                }
		                else {
		                    if (oldValueFormatter) {
		                        valueFormatter = oldValueFormatter;
		                        oldValueFormatter = null;
		                    }
		                }

		                interactiveLayer.tooltip
		                    .chartContainer(that.parentNode)
		                    .valueFormatter(valueFormatter)
		                    .data(
		                    {
		                        value: xValue,
		                        series: allData
		                    }
		                )();

		                interactiveLayer.renderGuideLine(pointXLocation);

		            });

		            interactiveLayer.dispatch.on("elementMouseout",function(e) {
		                stacked.clearHighlights();
		            });

		            // Update chart from a state object passed to event handler
		            dispatch.on('changeState', function(e) {

		                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {
		                    data.forEach(function(series,i) {
		                        series.disabled = e.disabled[i];
		                    });

		                    state.disabled = e.disabled;
		                }

		                if (typeof e.style !== 'undefined') {
		                    stacked.style(e.style);
		                    style = e.style;
		                }

		                chart.update();
		            });

		        });

		        renderWatch.renderEnd('stacked Area chart immediate');
		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {
		        evt.point['x'] = stacked.x()(evt.point);
		        evt.point['y'] = stacked.y()(evt.point);
		        tooltip.data(evt).hidden(false);
		    });

		    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true)
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.stacked = stacked;
		    chart.legend = legend;
		    chart.controls = controls;
		    chart.xAxis = xAxis;
		    chart.yAxis = yAxis;
		    chart.interactiveLayer = interactiveLayer;
		    chart.tooltip = tooltip;

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
		        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
		        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
		        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
		        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
		        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},
		        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},
		        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},
		        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},
		        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		            stacked.duration(duration);
		            xAxis.duration(duration);
		            yAxis.duration(duration);
		        }},
		        color:  {get: function(){return color;}, set: function(_){
		            color = nv.utils.getColor(_);
		            legend.color(color);
		            stacked.color(color);
		        }},
		        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
		            rightAlignYAxis = _;
		            yAxis.orient( rightAlignYAxis ? 'right' : 'left');
		        }},
		        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
		            useInteractiveGuideline = !!_;
		            chart.interactive(!_);
		            chart.useVoronoi(!_);
		            stacked.scatter.interactive(!_);
		        }}
		    });

		    nv.utils.inheritOptions(chart, stacked);
		    nv.utils.initOptions(chart);

		    return chart;
		};
		// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad
		nv.models.sunburst = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var margin = {top: 0, right: 0, bottom: 0, left: 0}
		        , width = null
		        , height = null
		        , mode = "count"
		        , modes = {count: function(d) { return 1; }, size: function(d) { return d.size }}
		        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
		        , container = null
		        , color = nv.utils.defaultColor()
		        , groupColorByParent = true
		        , duration = 500
		        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd')
		        ;

		    var x = d3.scale.linear().range([0, 2 * Math.PI]);
		    var y = d3.scale.sqrt();

		    var partition = d3.layout.partition()
		        .sort(null)
		        .value(function(d) { return 1; });

		    var arc = d3.svg.arc()
		        .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
		        .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
		        .innerRadius(function(d) { return Math.max(0, y(d.y)); })
		        .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });

		    // Keep track of the current and previous node being displayed as the root.
		    var node, prevNode;
		    // Keep track of the root node
		    var rootNode;

		    //============================================================
		    // chart function
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch);

		    function chart(selection) {
		        renderWatch.reset();
		        selection.each(function(data) {
		            container = d3.select(this);
		            var availableWidth = nv.utils.availableWidth(width, container, margin);
		            var availableHeight = nv.utils.availableHeight(height, container, margin);
		            var radius = Math.min(availableWidth, availableHeight) / 2;
		            var path;

		            nv.utils.initSVG(container);

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('.nv-wrap.nv-sunburst').data(data);
		            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id);

		            var g = wrapEnter.selectAll('nv-sunburst');

		            chart.update = function() { 
		                if ( duration === 0 ) {
		                    container.call(chart);
		                } else {
		                    container.transition().duration(duration).call(chart);
		                }
		            };
		            chart.container = this;


		            wrap.attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');

		            container.on('click', function (d, i) {
		                dispatch.chartClick({
		                    data: d,
		                    index: i,
		                    pos: d3.event,
		                    id: id
		                });
		            });

		            y.range([0, radius]);

		            node = node || data;
		            rootNode = data[0];
		            partition.value(modes[mode] || modes["count"]);
		            path = g.data(partition.nodes).enter()
		                .append("path")
		                .attr("d", arc)
		                .style("fill", function (d) {
		                    if (d.color) {
		                        return d.color;
		                    }
		                    else if (groupColorByParent) {
		                        return color((d.children ? d : d.parent).name);
		                    }
		                    else {
		                        return color(d.name);
		                    }
		                })
		                .style("stroke", "#FFF")
		                .on("click", function(d) {
		                    if (prevNode !== node && node !== d) prevNode = node;
		                    node = d;
		                    path.transition()
		                        .duration(duration)
		                        .attrTween("d", arcTweenZoom(d));
		                })
		                .each(stash)
		                .on("dblclick", function(d) {
		                    if (prevNode.parent == d) {
		                        path.transition()
		                            .duration(duration)
		                            .attrTween("d", arcTweenZoom(rootNode));
		                    }
		                })
		                .each(stash)
		                .on('mouseover', function(d,i){
		                    d3.select(this).classed('hover', true).style('opacity', 0.8);
		                    dispatch.elementMouseover({
		                        data: d,
		                        color: d3.select(this).style("fill")
		                    });
		                })
		                .on('mouseout', function(d,i){
		                    d3.select(this).classed('hover', false).style('opacity', 1);
		                    dispatch.elementMouseout({
		                        data: d
		                    });
		                })
		                .on('mousemove', function(d,i){
		                    dispatch.elementMousemove({
		                        data: d
		                    });
		                });



		            // Setup for switching data: stash the old values for transition.
		            function stash(d) {
		                d.x0 = d.x;
		                d.dx0 = d.dx;
		            }

		            // When switching data: interpolate the arcs in data space.
		            function arcTweenData(a, i) {
		                var oi = d3.interpolate({x: a.x0, dx: a.dx0}, a);

		                function tween(t) {
		                    var b = oi(t);
		                    a.x0 = b.x;
		                    a.dx0 = b.dx;
		                    return arc(b);
		                }

		                if (i == 0) {
		                    // If we are on the first arc, adjust the x domain to match the root node
		                    // at the current zoom level. (We only need to do this once.)
		                    var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]);
		                    return function (t) {
		                        x.domain(xd(t));
		                        return tween(t);
		                    };
		                } else {
		                    return tween;
		                }
		            }

		            // When zooming: interpolate the scales.
		            function arcTweenZoom(d) {
		                var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
		                    yd = d3.interpolate(y.domain(), [d.y, 1]),
		                    yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
		                return function (d, i) {
		                    return i
		                        ? function (t) {
		                        return arc(d);
		                    }
		                        : function (t) {
		                        x.domain(xd(t));
		                        y.domain(yd(t)).range(yr(t));
		                        return arc(d);
		                    };
		                };
		            }

		        });

		        renderWatch.renderEnd('sunburst immediate');
		        return chart;
		    }

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    chart.dispatch = dispatch;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        width:      {get: function(){return width;}, set: function(_){width=_;}},
		        height:     {get: function(){return height;}, set: function(_){height=_;}},
		        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},
		        id:         {get: function(){return id;}, set: function(_){id=_;}},
		        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},
		        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},

		        // options that require extra logic in the setter
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    != undefined ? _.top    : margin.top;
		            margin.right  = _.right  != undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   != undefined ? _.left   : margin.left;
		        }},
		        color: {get: function(){return color;}, set: function(_){
		            color=nv.utils.getColor(_);
		        }}
		    });

		    nv.utils.initOptions(chart);
		    return chart;
		};
		nv.models.sunburstChart = function() {
		    "use strict";

		    //============================================================
		    // Public Variables with Default Settings
		    //------------------------------------------------------------

		    var sunburst = nv.models.sunburst();
		    var tooltip = nv.models.tooltip();

		    var margin = {top: 30, right: 20, bottom: 20, left: 20}
		        , width = null
		        , height = null
		        , color = nv.utils.defaultColor()
		        , id = Math.round(Math.random() * 100000)
		        , defaultState = null
		        , noData = null
		        , duration = 250
		        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')
		        ;

		    tooltip.duration(0);

		    //============================================================
		    // Private Variables
		    //------------------------------------------------------------

		    var renderWatch = nv.utils.renderWatch(dispatch);
		    tooltip
		        .headerEnabled(false)
		        .valueFormatter(function(d, i) {
		            return d;
		        });

		    //============================================================
		    // Chart function
		    //------------------------------------------------------------

		    function chart(selection) {
		        renderWatch.reset();
		        renderWatch.models(sunburst);

		        selection.each(function(data) {
		            var container = d3.select(this);
		            nv.utils.initSVG(container);

		            var that = this;
		            var availableWidth = nv.utils.availableWidth(width, container, margin),
		                availableHeight = nv.utils.availableHeight(height, container, margin);

		            chart.update = function() {
		                if (duration === 0) {
		                    container.call(chart);
		                } else {
		                    container.transition().duration(duration).call(chart);
		                }
		            };
		            chart.container = this;

		            // Display No Data message if there's nothing to show.
		            if (!data || !data.length) {
		                nv.utils.noData(chart, container);
		                return chart;
		            } else {
		                container.selectAll('.nv-noData').remove();
		            }

		            // Setup containers and skeleton of chart
		            var wrap = container.selectAll('g.nv-wrap.nv-sunburstChart').data(data);
		            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sunburstChart').append('g');
		            var g = wrap.select('g');

		            gEnter.append('g').attr('class', 'nv-sunburstWrap');

		            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

		            // Main Chart Component(s)
		            sunburst.width(availableWidth).height(availableHeight);
		            var sunWrap = g.select('.nv-sunburstWrap').datum(data);
		            d3.transition(sunWrap).call(sunburst);

		        });

		        renderWatch.renderEnd('sunburstChart immediate');
		        return chart;
		    }

		    //============================================================
		    // Event Handling/Dispatching (out of chart's scope)
		    //------------------------------------------------------------

		    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {
		        evt['series'] = {
		            key: evt.data.name,
		            value: evt.data.size,
		            color: evt.color
		        };
		        tooltip.data(evt).hidden(false);
		    });

		    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {
		        tooltip.hidden(true);
		    });

		    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {
		        tooltip();
		    });

		    //============================================================
		    // Expose Public Variables
		    //------------------------------------------------------------

		    // expose chart's sub-components
		    chart.dispatch = dispatch;
		    chart.sunburst = sunburst;
		    chart.tooltip = tooltip;
		    chart.options = nv.utils.optionsFunc.bind(chart);

		    // use Object get/set functionality to map between vars and chart functions
		    chart._options = Object.create({}, {
		        // simple options, just get/set the necessary values
		        noData:         {get: function(){return noData;},         set: function(_){noData=_;}},
		        defaultState:   {get: function(){return defaultState;},   set: function(_){defaultState=_;}},

		        // options that require extra logic in the setter
		        color: {get: function(){return color;}, set: function(_){
		            color = _;
		            sunburst.color(color);
		        }},
		        duration: {get: function(){return duration;}, set: function(_){
		            duration = _;
		            renderWatch.reset(duration);
		            sunburst.duration(duration);
		        }},
		        margin: {get: function(){return margin;}, set: function(_){
		            margin.top    = _.top    !== undefined ? _.top    : margin.top;
		            margin.right  = _.right  !== undefined ? _.right  : margin.right;
		            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
		            margin.left   = _.left   !== undefined ? _.left   : margin.left;
		        }}
		    });
		    nv.utils.inheritOptions(chart, sunburst);
		    nv.utils.initOptions(chart);
		    return chart;
		};

		nv.version = "1.8.2";
		})();

	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _nvd = __webpack_require__(9);

		var _nvd2 = _interopRequireDefault(_nvd);

		var _d = __webpack_require__(6);

		var _d2 = _interopRequireDefault(_d);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var PieChart = function PieChart() {
		    this.chart = _nvd2.default.models.pieChart();
		};

		PieChart.prototype.initialize = function (options) {
		    this.chart.x(function (d) {
		        return d.label;
		    }).y(function (d) {
		        return d.value;
		    }).showLabels(true).labelType(options.labelType).showLegend(true).labelsOutside(false).color(options.colors);

		    this.chart.tooltip.contentGenerator(function (x) {
		        return '<h3 style="background-color: ' + x.color + '">' + x.data.label + "</h3><p>" + x.data.value * 100 + "%</p>";
		    });
		};

		PieChart.prototype.get = function (chartid, url, params) {
		    _d2.default.json(url.concat("?", $.param(params)), function (error, result) {
		        var svg = _d2.default.select("#".concat(chartid, " svg")).datum(result.data).transition().duration(500).call(this.chart);
		        _nvd2.default.utils.windowResize(this.chart.update);
		    }.bind(this));
		};

		exports.default = PieChart;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {"use strict";

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.Table = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		$["dataTable"] = __webpack_require__(12);

		var Table = exports.Table = function (_React$Component) {
		    _inherits(Table, _React$Component);

		    function Table(props) {
		        _classCallCheck(this, Table);

		        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Table).call(this, props));

		        _this.state = {
		            columns: []
		        };
		        return _this;
		    }

		    _createClass(Table, [{
		        key: "componentWillMount",
		        value: function componentWillMount() {
		            this._initialize();
		        }
		    }, {
		        key: "_initialize",
		        value: function _initialize() {
		            var _url = this.props.options.url.concat("?", $.param(this.props.options.params));
		            $.get(_url, function (result) {
		                this.setState({ columns: result.columns });
		                var options = this.props.options.table_options;
		                options.data = result.data;
		                options.columns = result.columns;
		                options.aaData = result.data;
		                if ("columnDefs" in this.props.options.table_options) {
		                    options.columnDefs = this.props.options.table_options.columnDefs;
		                    options.columnDefs.forEach(function (x) {
		                        x.render = new Function("return '" + x.render + "';");
		                    });
		                }

		                options.initComplete = new Function("settings", "json", this.props.options.table_options.initComplete);
		                options.drawCallback = new Function("settings", this.props.options.table_options.drawCallback);
		                $('#'.concat(this.props.options.id)).dataTable(options);
		            }.bind(this));
		        }
		    }, {
		        key: "_update",
		        value: function _update(params) {
		            var _table = $('#'.concat(this.props.options.id)).dataTable();
		            _table.api().ajax.url(this.props.options.url.concat("?", $.param(params))).load();
		        }
		    }, {
		        key: "render",
		        value: function render() {
		            var header = this.state.columns.map(function (item, index) {
		                return _react2.default.createElement(
		                    "th",
		                    { key: index },
		                    item.data
		                );
		            });
		            return _react2.default.createElement(
		                "div",
		                null,
		                _react2.default.createElement(
		                    "table",
		                    { id: this.props.options.id,
		                        className: this.props.options.className,
		                        cellPadding: "0",
		                        cellSpacing: "0", width: "100%" },
		                    _react2.default.createElement(
		                        "thead",
		                        null,
		                        _react2.default.createElement(
		                            "tr",
		                            null,
		                            header
		                        )
		                    )
		                )
		            );
		        }
		    }]);

		    return Table;
		}(_react2.default.Component);
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables 1.10.9
		 * ©2008-2015 SpryMedia Ltd - datatables.net/license
		 */

		/**
		 * @summary     DataTables
		 * @description Paginate, search and order HTML tables
		 * @version     1.10.9
		 * @file        jquery.dataTables.js
		 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
		 * @contact     www.sprymedia.co.uk/contact
		 * @copyright   Copyright 2008-2015 SpryMedia Ltd.
		 *
		 * This source file is free software, available under the following license:
		 *   MIT license - http://datatables.net/license
		 *
		 * This source file is distributed in the hope that it will be useful, but
		 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
		 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
		 *
		 * For details please refer to: http://www.datatables.net
		 */

		/*jslint evil: true, undef: true, browser: true */
		/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

		(/** @lends <global> */function( window, document, undefined ) {

		(function( factory ) {
			"use strict";

			if ( true ) {
				// Define as an AMD module if possible
				!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			}
			else if ( typeof exports === 'object' ) {
				// Node/CommonJS
				module.exports = factory( require( 'jquery' ) );
			}
			else if ( jQuery && !jQuery.fn.dataTable ) {
				// Define using browser globals otherwise
				// Prevent multiple instantiations if the script is loaded twice
				factory( jQuery );
			}
		}
		(/** @lends <global> */function( $ ) {
			"use strict";

			/**
			 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
			 * flexible tool, based upon the foundations of progressive enhancement,
			 * which will add advanced interaction controls to any HTML table. For a
			 * full list of features please refer to
			 * [DataTables.net](href="http://datatables.net).
			 *
			 * Note that the `DataTable` object is not a global variable but is aliased
			 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
			 * be  accessed.
			 *
			 *  @class
			 *  @param {object} [init={}] Configuration object for DataTables. Options
			 *    are defined by {@link DataTable.defaults}
			 *  @requires jQuery 1.7+
			 *
			 *  @example
			 *    // Basic initialisation
			 *    $(document).ready( function {
			 *      $('#example').dataTable();
			 *    } );
			 *
			 *  @example
			 *    // Initialisation with configuration options - in this case, disable
			 *    // pagination and sorting.
			 *    $(document).ready( function {
			 *      $('#example').dataTable( {
			 *        "paginate": false,
			 *        "sort": false
			 *      } );
			 *    } );
			 */
			var DataTable;

			
			/*
			 * It is useful to have variables which are scoped locally so only the
			 * DataTables functions can access them and they don't leak into global space.
			 * At the same time these functions are often useful over multiple files in the
			 * core and API, so we list, or at least document, all variables which are used
			 * by DataTables as private variables here. This also ensures that there is no
			 * clashing of variable names and that they can easily referenced for reuse.
			 */
			
			
			// Defined else where
			//  _selector_run
			//  _selector_opts
			//  _selector_first
			//  _selector_row_indexes
			
			var _ext; // DataTable.ext
			var _Api; // DataTable.Api
			var _api_register; // DataTable.Api.register
			var _api_registerPlural; // DataTable.Api.registerPlural
			
			var _re_dic = {};
			var _re_new_lines = /[\r\n]/g;
			var _re_html = /<.*?>/g;
			var _re_date_start = /^[\w\+\-]/;
			var _re_date_end = /[\w\+\-]$/;
			
			// Escape regular expression special characters
			var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
			
			// http://en.wikipedia.org/wiki/Foreign_exchange_market
			// - \u20BD - Russian ruble.
			// - \u20a9 - South Korean Won
			// - \u20BA - Turkish Lira
			// - \u20B9 - Indian Rupee
			// - R - Brazil (R$) and South Africa
			// - fr - Swiss Franc
			// - kr - Swedish krona, Norwegian krone and Danish krone
			// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
			//   standards as thousands separators.
			var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;
			
			
			var _empty = function ( d ) {
				return !d || d === true || d === '-' ? true : false;
			};
			
			
			var _intVal = function ( s ) {
				var integer = parseInt( s, 10 );
				return !isNaN(integer) && isFinite(s) ? integer : null;
			};
			
			// Convert from a formatted number with characters other than `.` as the
			// decimal place, to a Javascript number
			var _numToDecimal = function ( num, decimalPoint ) {
				// Cache created regular expressions for speed as this function is called often
				if ( ! _re_dic[ decimalPoint ] ) {
					_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
				}
				return typeof num === 'string' && decimalPoint !== '.' ?
					num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
					num;
			};
			
			
			var _isNumber = function ( d, decimalPoint, formatted ) {
				var strType = typeof d === 'string';
			
				// If empty return immediately so there must be a number if it is a
				// formatted string (this stops the string "k", or "kr", etc being detected
				// as a formatted number for currency
				if ( _empty( d ) ) {
					return true;
				}
			
				if ( decimalPoint && strType ) {
					d = _numToDecimal( d, decimalPoint );
				}
			
				if ( formatted && strType ) {
					d = d.replace( _re_formatted_numeric, '' );
				}
			
				return !isNaN( parseFloat(d) ) && isFinite( d );
			};
			
			
			// A string without HTML in it can be considered to be HTML still
			var _isHtml = function ( d ) {
				return _empty( d ) || typeof d === 'string';
			};
			
			
			var _htmlNumeric = function ( d, decimalPoint, formatted ) {
				if ( _empty( d ) ) {
					return true;
				}
			
				var html = _isHtml( d );
				return ! html ?
					null :
					_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
						true :
						null;
			};
			
			
			var _pluck = function ( a, prop, prop2 ) {
				var out = [];
				var i=0, ien=a.length;
			
				// Could have the test in the loop for slightly smaller code, but speed
				// is essential here
				if ( prop2 !== undefined ) {
					for ( ; i<ien ; i++ ) {
						if ( a[i] && a[i][ prop ] ) {
							out.push( a[i][ prop ][ prop2 ] );
						}
					}
				}
				else {
					for ( ; i<ien ; i++ ) {
						if ( a[i] ) {
							out.push( a[i][ prop ] );
						}
					}
				}
			
				return out;
			};
			
			
			// Basically the same as _pluck, but rather than looping over `a` we use `order`
			// as the indexes to pick from `a`
			var _pluck_order = function ( a, order, prop, prop2 )
			{
				var out = [];
				var i=0, ien=order.length;
			
				// Could have the test in the loop for slightly smaller code, but speed
				// is essential here
				if ( prop2 !== undefined ) {
					for ( ; i<ien ; i++ ) {
						if ( a[ order[i] ][ prop ] ) {
							out.push( a[ order[i] ][ prop ][ prop2 ] );
						}
					}
				}
				else {
					for ( ; i<ien ; i++ ) {
						out.push( a[ order[i] ][ prop ] );
					}
				}
			
				return out;
			};
			
			
			var _range = function ( len, start )
			{
				var out = [];
				var end;
			
				if ( start === undefined ) {
					start = 0;
					end = len;
				}
				else {
					end = start;
					start = len;
				}
			
				for ( var i=start ; i<end ; i++ ) {
					out.push( i );
				}
			
				return out;
			};
			
			
			var _removeEmpty = function ( a )
			{
				var out = [];
			
				for ( var i=0, ien=a.length ; i<ien ; i++ ) {
					if ( a[i] ) { // careful - will remove all falsy values!
						out.push( a[i] );
					}
				}
			
				return out;
			};
			
			
			var _stripHtml = function ( d ) {
				return d.replace( _re_html, '' );
			};
			
			
			/**
			 * Find the unique elements in a source array.
			 *
			 * @param  {array} src Source array
			 * @return {array} Array of unique items
			 * @ignore
			 */
			var _unique = function ( src )
			{
				// A faster unique method is to use object keys to identify used values,
				// but this doesn't work with arrays or objects, which we must also
				// consider. See jsperf.com/compare-array-unique-versions/4 for more
				// information.
				var
					out = [],
					val,
					i, ien=src.length,
					j, k=0;
			
				again: for ( i=0 ; i<ien ; i++ ) {
					val = src[i];
			
					for ( j=0 ; j<k ; j++ ) {
						if ( out[j] === val ) {
							continue again;
						}
					}
			
					out.push( val );
					k++;
				}
			
				return out;
			};
			
			
			
			/**
			 * Create a mapping object that allows camel case parameters to be looked up
			 * for their Hungarian counterparts. The mapping is stored in a private
			 * parameter called `_hungarianMap` which can be accessed on the source object.
			 *  @param {object} o
			 *  @memberof DataTable#oApi
			 */
			function _fnHungarianMap ( o )
			{
				var
					hungarian = 'a aa ai ao as b fn i m o s ',
					match,
					newKey,
					map = {};
			
				$.each( o, function (key, val) {
					match = key.match(/^([^A-Z]+?)([A-Z])/);
			
					if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
					{
						newKey = key.replace( match[0], match[2].toLowerCase() );
						map[ newKey ] = key;
			
						if ( match[1] === 'o' )
						{
							_fnHungarianMap( o[key] );
						}
					}
				} );
			
				o._hungarianMap = map;
			}
			
			
			/**
			 * Convert from camel case parameters to Hungarian, based on a Hungarian map
			 * created by _fnHungarianMap.
			 *  @param {object} src The model object which holds all parameters that can be
			 *    mapped.
			 *  @param {object} user The object to convert from camel case to Hungarian.
			 *  @param {boolean} force When set to `true`, properties which already have a
			 *    Hungarian value in the `user` object will be overwritten. Otherwise they
			 *    won't be.
			 *  @memberof DataTable#oApi
			 */
			function _fnCamelToHungarian ( src, user, force )
			{
				if ( ! src._hungarianMap ) {
					_fnHungarianMap( src );
				}
			
				var hungarianKey;
			
				$.each( user, function (key, val) {
					hungarianKey = src._hungarianMap[ key ];
			
					if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
					{
						// For objects, we need to buzz down into the object to copy parameters
						if ( hungarianKey.charAt(0) === 'o' )
						{
							// Copy the camelCase options over to the hungarian
							if ( ! user[ hungarianKey ] ) {
								user[ hungarianKey ] = {};
							}
							$.extend( true, user[hungarianKey], user[key] );
			
							_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
						}
						else {
							user[hungarianKey] = user[ key ];
						}
					}
				} );
			}
			
			
			/**
			 * Language compatibility - when certain options are given, and others aren't, we
			 * need to duplicate the values over, in order to provide backwards compatibility
			 * with older language files.
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnLanguageCompat( lang )
			{
				var defaults = DataTable.defaults.oLanguage;
				var zeroRecords = lang.sZeroRecords;
			
				/* Backwards compatibility - if there is no sEmptyTable given, then use the same as
				 * sZeroRecords - assuming that is given.
				 */
				if ( ! lang.sEmptyTable && zeroRecords &&
					defaults.sEmptyTable === "No data available in table" )
				{
					_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
				}
			
				/* Likewise with loading records */
				if ( ! lang.sLoadingRecords && zeroRecords &&
					defaults.sLoadingRecords === "Loading..." )
				{
					_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
				}
			
				// Old parameter name of the thousands separator mapped onto the new
				if ( lang.sInfoThousands ) {
					lang.sThousands = lang.sInfoThousands;
				}
			
				var decimal = lang.sDecimal;
				if ( decimal ) {
					_addNumericSort( decimal );
				}
			}
			
			
			/**
			 * Map one parameter onto another
			 *  @param {object} o Object to map
			 *  @param {*} knew The new parameter name
			 *  @param {*} old The old parameter name
			 */
			var _fnCompatMap = function ( o, knew, old ) {
				if ( o[ knew ] !== undefined ) {
					o[ old ] = o[ knew ];
				}
			};
			
			
			/**
			 * Provide backwards compatibility for the main DT options. Note that the new
			 * options are mapped onto the old parameters, so this is an external interface
			 * change only.
			 *  @param {object} init Object to map
			 */
			function _fnCompatOpts ( init )
			{
				_fnCompatMap( init, 'ordering',      'bSort' );
				_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
				_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
				_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
				_fnCompatMap( init, 'order',         'aaSorting' );
				_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
				_fnCompatMap( init, 'paging',        'bPaginate' );
				_fnCompatMap( init, 'pagingType',    'sPaginationType' );
				_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
				_fnCompatMap( init, 'searching',     'bFilter' );
			
				// Boolean initialisation of x-scrolling
				if ( typeof init.sScrollX === 'boolean' ) {
					init.sScrollX = init.sScrollX ? '100%' : '';
				}
			
				// Column search objects are in an array, so it needs to be converted
				// element by element
				var searchCols = init.aoSearchCols;
			
				if ( searchCols ) {
					for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
						if ( searchCols[i] ) {
							_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
						}
					}
				}
			}
			
			
			/**
			 * Provide backwards compatibility for column options. Note that the new options
			 * are mapped onto the old parameters, so this is an external interface change
			 * only.
			 *  @param {object} init Object to map
			 */
			function _fnCompatCols ( init )
			{
				_fnCompatMap( init, 'orderable',     'bSortable' );
				_fnCompatMap( init, 'orderData',     'aDataSort' );
				_fnCompatMap( init, 'orderSequence', 'asSorting' );
				_fnCompatMap( init, 'orderDataType', 'sortDataType' );
			
				// orderData can be given as an integer
				var dataSort = init.aDataSort;
				if ( dataSort && ! $.isArray( dataSort ) ) {
					init.aDataSort = [ dataSort ];
				}
			}
			
			
			/**
			 * Browser feature detection for capabilities, quirks
			 *  @param {object} settings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnBrowserDetect( settings )
			{
				// We don't need to do this every time DataTables is constructed, the values
				// calculated are specific to the browser and OS configuration which we
				// don't expect to change between initialisations
				if ( ! DataTable.__browser ) {
					var browser = {};
					DataTable.__browser = browser;
			
					// Scrolling feature / quirks detection
					var n = $('<div/>')
						.css( {
							position: 'fixed',
							top: 0,
							left: 0,
							height: 1,
							width: 1,
							overflow: 'hidden'
						} )
						.append(
							$('<div/>')
								.css( {
									position: 'absolute',
									top: 1,
									left: 1,
									width: 100,
									overflow: 'scroll'
								} )
								.append(
									$('<div/>')
										.css( {
											width: '100%',
											height: 10
										} )
								)
						)
						.appendTo( 'body' );
			
					var outer = n.children();
					var inner = outer.children();
			
					// Numbers below, in order, are:
					// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
					//
					// IE6 XP:                           100 100 100  83
					// IE7 Vista:                        100 100 100  83
					// IE 8+ Windows:                     83  83 100  83
					// Evergreen Windows:                 83  83 100  83
					// Evergreen Mac with scrollbars:     85  85 100  85
					// Evergreen Mac without scrollbars: 100 100 100 100
			
					// Get scrollbar width
					browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
			
					// IE6/7 will oversize a width 100% element inside a scrolling element, to
					// include the width of the scrollbar, while other browsers ensure the inner
					// element is contained without forcing scrolling
					//console.log( inner.offsetWidth );
					browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
			
					// In rtl text layout, some browsers (most, but not all) will place the
					// scrollbar on the left, rather than the right.
					browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;
			
					// IE8- don't provide height and width for getBoundingClientRect
					browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
			
					n.remove();
				}
			
				$.extend( settings.oBrowser, DataTable.__browser );
				settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
			}
			
			
			/**
			 * Array.prototype reduce[Right] method, used for browsers which don't support
			 * JS 1.6. Done this way to reduce code size, since we iterate either way
			 *  @param {object} settings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnReduce ( that, fn, init, start, end, inc )
			{
				var
					i = start,
					value,
					isSet = false;
			
				if ( init !== undefined ) {
					value = init;
					isSet = true;
				}
			
				while ( i !== end ) {
					if ( ! that.hasOwnProperty(i) ) {
						continue;
					}
			
					value = isSet ?
						fn( value, that[i], i, that ) :
						that[i];
			
					isSet = true;
					i += inc;
				}
			
				return value;
			}
			
			/**
			 * Add a column to the list used for the table with default values
			 *  @param {object} oSettings dataTables settings object
			 *  @param {node} nTh The th element for this column
			 *  @memberof DataTable#oApi
			 */
			function _fnAddColumn( oSettings, nTh )
			{
				// Add column to aoColumns array
				var oDefaults = DataTable.defaults.column;
				var iCol = oSettings.aoColumns.length;
				var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
					"nTh": nTh ? nTh : document.createElement('th'),
					"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
					"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
					"mData": oDefaults.mData ? oDefaults.mData : iCol,
					idx: iCol
				} );
				oSettings.aoColumns.push( oCol );
			
				// Add search object for column specific search. Note that the `searchCols[ iCol ]`
				// passed into extend can be undefined. This allows the user to give a default
				// with only some of the parameters defined, and also not give a default
				var searchCols = oSettings.aoPreSearchCols;
				searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
			
				// Use the default column options function to initialise classes etc
				_fnColumnOptions( oSettings, iCol, $(nTh).data() );
			}
			
			
			/**
			 * Apply options for a column
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iCol column index to consider
			 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
			 *  @memberof DataTable#oApi
			 */
			function _fnColumnOptions( oSettings, iCol, oOptions )
			{
				var oCol = oSettings.aoColumns[ iCol ];
				var oClasses = oSettings.oClasses;
				var th = $(oCol.nTh);
			
				// Try to get width information from the DOM. We can't get it from CSS
				// as we'd need to parse the CSS stylesheet. `width` option can override
				if ( ! oCol.sWidthOrig ) {
					// Width attribute
					oCol.sWidthOrig = th.attr('width') || null;
			
					// Style attribute
					var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
					if ( t ) {
						oCol.sWidthOrig = t[1];
					}
				}
			
				/* User specified column options */
				if ( oOptions !== undefined && oOptions !== null )
				{
					// Backwards compatibility
					_fnCompatCols( oOptions );
			
					// Map camel case parameters to their Hungarian counterparts
					_fnCamelToHungarian( DataTable.defaults.column, oOptions );
			
					/* Backwards compatibility for mDataProp */
					if ( oOptions.mDataProp !== undefined && !oOptions.mData )
					{
						oOptions.mData = oOptions.mDataProp;
					}
			
					if ( oOptions.sType )
					{
						oCol._sManualType = oOptions.sType;
					}
			
					// `class` is a reserved word in Javascript, so we need to provide
					// the ability to use a valid name for the camel case input
					if ( oOptions.className && ! oOptions.sClass )
					{
						oOptions.sClass = oOptions.className;
					}
			
					$.extend( oCol, oOptions );
					_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
			
					/* iDataSort to be applied (backwards compatibility), but aDataSort will take
					 * priority if defined
					 */
					if ( oOptions.iDataSort !== undefined )
					{
						oCol.aDataSort = [ oOptions.iDataSort ];
					}
					_fnMap( oCol, oOptions, "aDataSort" );
				}
			
				/* Cache the data get and set functions for speed */
				var mDataSrc = oCol.mData;
				var mData = _fnGetObjectDataFn( mDataSrc );
				var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
			
				var attrTest = function( src ) {
					return typeof src === 'string' && src.indexOf('@') !== -1;
				};
				oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
					attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
				);
			
				oCol.fnGetData = function (rowData, type, meta) {
					var innerData = mData( rowData, type, undefined, meta );
			
					return mRender && type ?
						mRender( innerData, type, rowData, meta ) :
						innerData;
				};
				oCol.fnSetData = function ( rowData, val, meta ) {
					return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
				};
			
				// Indicate if DataTables should read DOM data as an object or array
				// Used in _fnGetRowElements
				if ( typeof mDataSrc !== 'number' ) {
					oSettings._rowReadObject = true;
				}
			
				/* Feature sorting overrides column specific when off */
				if ( !oSettings.oFeatures.bSort )
				{
					oCol.bSortable = false;
					th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
				}
			
				/* Check that the class assignment is correct for sorting */
				var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
				var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
				if ( !oCol.bSortable || (!bAsc && !bDesc) )
				{
					oCol.sSortingClass = oClasses.sSortableNone;
					oCol.sSortingClassJUI = "";
				}
				else if ( bAsc && !bDesc )
				{
					oCol.sSortingClass = oClasses.sSortableAsc;
					oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
				}
				else if ( !bAsc && bDesc )
				{
					oCol.sSortingClass = oClasses.sSortableDesc;
					oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
				}
				else
				{
					oCol.sSortingClass = oClasses.sSortable;
					oCol.sSortingClassJUI = oClasses.sSortJUI;
				}
			}
			
			
			/**
			 * Adjust the table column widths for new data. Note: you would probably want to
			 * do a redraw after calling this function!
			 *  @param {object} settings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnAdjustColumnSizing ( settings )
			{
				/* Not interested in doing column width calculation if auto-width is disabled */
				if ( settings.oFeatures.bAutoWidth !== false )
				{
					var columns = settings.aoColumns;
			
					_fnCalculateColumnWidths( settings );
					for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
					{
						columns[i].nTh.style.width = columns[i].sWidth;
					}
				}
			
				var scroll = settings.oScroll;
				if ( scroll.sY !== '' || scroll.sX !== '')
				{
					_fnScrollDraw( settings );
				}
			
				_fnCallbackFire( settings, null, 'column-sizing', [settings] );
			}
			
			
			/**
			 * Covert the index of a visible column to the index in the data array (take account
			 * of hidden columns)
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iMatch Visible column index to lookup
			 *  @returns {int} i the data index
			 *  @memberof DataTable#oApi
			 */
			function _fnVisibleToColumnIndex( oSettings, iMatch )
			{
				var aiVis = _fnGetColumns( oSettings, 'bVisible' );
			
				return typeof aiVis[iMatch] === 'number' ?
					aiVis[iMatch] :
					null;
			}
			
			
			/**
			 * Covert the index of an index in the data array and convert it to the visible
			 *   column index (take account of hidden columns)
			 *  @param {int} iMatch Column index to lookup
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {int} i the data index
			 *  @memberof DataTable#oApi
			 */
			function _fnColumnIndexToVisible( oSettings, iMatch )
			{
				var aiVis = _fnGetColumns( oSettings, 'bVisible' );
				var iPos = $.inArray( iMatch, aiVis );
			
				return iPos !== -1 ? iPos : null;
			}
			
			
			/**
			 * Get the number of visible columns
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {int} i the number of visible columns
			 *  @memberof DataTable#oApi
			 */
			function _fnVisbleColumns( oSettings )
			{
				return _fnGetColumns( oSettings, 'bVisible' ).length;
			}
			
			
			/**
			 * Get an array of column indexes that match a given property
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string} sParam Parameter in aoColumns to look for - typically
			 *    bVisible or bSearchable
			 *  @returns {array} Array of indexes with matched properties
			 *  @memberof DataTable#oApi
			 */
			function _fnGetColumns( oSettings, sParam )
			{
				var a = [];
			
				$.map( oSettings.aoColumns, function(val, i) {
					if ( val[sParam] ) {
						a.push( i );
					}
				} );
			
				return a;
			}
			
			
			/**
			 * Calculate the 'type' of a column
			 *  @param {object} settings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnColumnTypes ( settings )
			{
				var columns = settings.aoColumns;
				var data = settings.aoData;
				var types = DataTable.ext.type.detect;
				var i, ien, j, jen, k, ken;
				var col, cell, detectedType, cache;
			
				// For each column, spin over the 
				for ( i=0, ien=columns.length ; i<ien ; i++ ) {
					col = columns[i];
					cache = [];
			
					if ( ! col.sType && col._sManualType ) {
						col.sType = col._sManualType;
					}
					else if ( ! col.sType ) {
						for ( j=0, jen=types.length ; j<jen ; j++ ) {
							for ( k=0, ken=data.length ; k<ken ; k++ ) {
								// Use a cache array so we only need to get the type data
								// from the formatter once (when using multiple detectors)
								if ( cache[k] === undefined ) {
									cache[k] = _fnGetCellData( settings, k, i, 'type' );
								}
			
								detectedType = types[j]( cache[k], settings );
			
								// If null, then this type can't apply to this column, so
								// rather than testing all cells, break out. There is an
								// exception for the last type which is `html`. We need to
								// scan all rows since it is possible to mix string and HTML
								// types
								if ( ! detectedType && j !== types.length-1 ) {
									break;
								}
			
								// Only a single match is needed for html type since it is
								// bottom of the pile and very similar to string
								if ( detectedType === 'html' ) {
									break;
								}
							}
			
							// Type is valid for all data points in the column - use this
							// type
							if ( detectedType ) {
								col.sType = detectedType;
								break;
							}
						}
			
						// Fall back - if no type was detected, always use string
						if ( ! col.sType ) {
							col.sType = 'string';
						}
					}
				}
			}
			
			
			/**
			 * Take the column definitions and static columns arrays and calculate how
			 * they relate to column indexes. The callback function will then apply the
			 * definition found for a column to a suitable configuration object.
			 *  @param {object} oSettings dataTables settings object
			 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
			 *  @param {array} aoCols The aoColumns array that defines columns individually
			 *  @param {function} fn Callback function - takes two parameters, the calculated
			 *    column index and the definition for that column.
			 *  @memberof DataTable#oApi
			 */
			function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
			{
				var i, iLen, j, jLen, k, kLen, def;
				var columns = oSettings.aoColumns;
			
				// Column definitions with aTargets
				if ( aoColDefs )
				{
					/* Loop over the definitions array - loop in reverse so first instance has priority */
					for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
					{
						def = aoColDefs[i];
			
						/* Each definition can target multiple columns, as it is an array */
						var aTargets = def.targets !== undefined ?
							def.targets :
							def.aTargets;
			
						if ( ! $.isArray( aTargets ) )
						{
							aTargets = [ aTargets ];
						}
			
						for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
						{
							if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
							{
								/* Add columns that we don't yet know about */
								while( columns.length <= aTargets[j] )
								{
									_fnAddColumn( oSettings );
								}
			
								/* Integer, basic index */
								fn( aTargets[j], def );
							}
							else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
							{
								/* Negative integer, right to left column counting */
								fn( columns.length+aTargets[j], def );
							}
							else if ( typeof aTargets[j] === 'string' )
							{
								/* Class name matching on TH element */
								for ( k=0, kLen=columns.length ; k<kLen ; k++ )
								{
									if ( aTargets[j] == "_all" ||
									     $(columns[k].nTh).hasClass( aTargets[j] ) )
									{
										fn( k, def );
									}
								}
							}
						}
					}
				}
			
				// Statically defined columns array
				if ( aoCols )
				{
					for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
					{
						fn( i, aoCols[i] );
					}
				}
			}
			
			/**
			 * Add a data array to the table, creating DOM node etc. This is the parallel to
			 * _fnGatherData, but for adding rows from a Javascript source, rather than a
			 * DOM source.
			 *  @param {object} oSettings dataTables settings object
			 *  @param {array} aData data array to be added
			 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
			 *    DataTables will create a row automatically
			 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
			 *    if nTr is.
			 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
			 *  @memberof DataTable#oApi
			 */
			function _fnAddData ( oSettings, aDataIn, nTr, anTds )
			{
				/* Create the object for storing information about this new row */
				var iRow = oSettings.aoData.length;
				var oData = $.extend( true, {}, DataTable.models.oRow, {
					src: nTr ? 'dom' : 'data',
					idx: iRow
				} );
			
				oData._aData = aDataIn;
				oSettings.aoData.push( oData );
			
				/* Create the cells */
				var nTd, sThisType;
				var columns = oSettings.aoColumns;
			
				// Invalidate the column types as the new data needs to be revalidated
				for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
				{
					columns[i].sType = null;
				}
			
				/* Add to the display array */
				oSettings.aiDisplayMaster.push( iRow );
			
				var id = oSettings.rowIdFn( aDataIn );
				if ( id !== undefined ) {
					oSettings.aIds[ id ] = oData;
				}
			
				/* Create the DOM information, or register it if already present */
				if ( nTr || ! oSettings.oFeatures.bDeferRender )
				{
					_fnCreateTr( oSettings, iRow, nTr, anTds );
				}
			
				return iRow;
			}
			
			
			/**
			 * Add one or more TR elements to the table. Generally we'd expect to
			 * use this for reading data from a DOM sourced table, but it could be
			 * used for an TR element. Note that if a TR is given, it is used (i.e.
			 * it is not cloned).
			 *  @param {object} settings dataTables settings object
			 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
			 *  @returns {array} Array of indexes for the added rows
			 *  @memberof DataTable#oApi
			 */
			function _fnAddTr( settings, trs )
			{
				var row;
			
				// Allow an individual node to be passed in
				if ( ! (trs instanceof $) ) {
					trs = $(trs);
				}
			
				return trs.map( function (i, el) {
					row = _fnGetRowElements( settings, el );
					return _fnAddData( settings, row.data, el, row.cells );
				} );
			}
			
			
			/**
			 * Take a TR element and convert it to an index in aoData
			 *  @param {object} oSettings dataTables settings object
			 *  @param {node} n the TR element to find
			 *  @returns {int} index if the node is found, null if not
			 *  @memberof DataTable#oApi
			 */
			function _fnNodeToDataIndex( oSettings, n )
			{
				return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
			}
			
			
			/**
			 * Take a TD element and convert it into a column data index (not the visible index)
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iRow The row number the TD/TH can be found in
			 *  @param {node} n The TD/TH element to find
			 *  @returns {int} index if the node is found, -1 if not
			 *  @memberof DataTable#oApi
			 */
			function _fnNodeToColumnIndex( oSettings, iRow, n )
			{
				return $.inArray( n, oSettings.aoData[ iRow ].anCells );
			}
			
			
			/**
			 * Get the data for a given cell from the internal cache, taking into account data mapping
			 *  @param {object} settings dataTables settings object
			 *  @param {int} rowIdx aoData row id
			 *  @param {int} colIdx Column index
			 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
			 *  @returns {*} Cell data
			 *  @memberof DataTable#oApi
			 */
			function _fnGetCellData( settings, rowIdx, colIdx, type )
			{
				var draw           = settings.iDraw;
				var col            = settings.aoColumns[colIdx];
				var rowData        = settings.aoData[rowIdx]._aData;
				var defaultContent = col.sDefaultContent;
				var cellData       = col.fnGetData( rowData, type, {
					settings: settings,
					row:      rowIdx,
					col:      colIdx
				} );
			
				if ( cellData === undefined ) {
					if ( settings.iDrawError != draw && defaultContent === null ) {
						_fnLog( settings, 0, "Requested unknown parameter "+
							(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
							" for row "+rowIdx, 4 );
						settings.iDrawError = draw;
					}
					return defaultContent;
				}
			
				/* When the data source is null, we can use default column data */
				if ( (cellData === rowData || cellData === null) && defaultContent !== null ) {
					cellData = defaultContent;
				}
				else if ( typeof cellData === 'function' ) {
					// If the data source is a function, then we run it and use the return,
					// executing in the scope of the data object (for instances)
					return cellData.call( rowData );
				}
			
				if ( cellData === null && type == 'display' ) {
					return '';
				}
				return cellData;
			}
			
			
			/**
			 * Set the value for a specific cell, into the internal data cache
			 *  @param {object} settings dataTables settings object
			 *  @param {int} rowIdx aoData row id
			 *  @param {int} colIdx Column index
			 *  @param {*} val Value to set
			 *  @memberof DataTable#oApi
			 */
			function _fnSetCellData( settings, rowIdx, colIdx, val )
			{
				var col     = settings.aoColumns[colIdx];
				var rowData = settings.aoData[rowIdx]._aData;
			
				col.fnSetData( rowData, val, {
					settings: settings,
					row:      rowIdx,
					col:      colIdx
				}  );
			}
			
			
			// Private variable that is used to match action syntax in the data property object
			var __reArray = /\[.*?\]$/;
			var __reFn = /\(\)$/;
			
			/**
			 * Split string on periods, taking into account escaped periods
			 * @param  {string} str String to split
			 * @return {array} Split string
			 */
			function _fnSplitObjNotation( str )
			{
				return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
					return s.replace(/\\./g, '.');
				} );
			}
			
			
			/**
			 * Return a function that can be used to get data from a source object, taking
			 * into account the ability to use nested objects as a source
			 *  @param {string|int|function} mSource The data source for the object
			 *  @returns {function} Data get function
			 *  @memberof DataTable#oApi
			 */
			function _fnGetObjectDataFn( mSource )
			{
				if ( $.isPlainObject( mSource ) )
				{
					/* Build an object of get functions, and wrap them in a single call */
					var o = {};
					$.each( mSource, function (key, val) {
						if ( val ) {
							o[key] = _fnGetObjectDataFn( val );
						}
					} );
			
					return function (data, type, row, meta) {
						var t = o[type] || o._;
						return t !== undefined ?
							t(data, type, row, meta) :
							data;
					};
				}
				else if ( mSource === null )
				{
					/* Give an empty string for rendering / sorting etc */
					return function (data) { // type, row and meta also passed, but not used
						return data;
					};
				}
				else if ( typeof mSource === 'function' )
				{
					return function (data, type, row, meta) {
						return mSource( data, type, row, meta );
					};
				}
				else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
					      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
				{
					/* If there is a . in the source string then the data source is in a
					 * nested object so we loop over the data for each level to get the next
					 * level down. On each loop we test for undefined, and if found immediately
					 * return. This allows entire objects to be missing and sDefaultContent to
					 * be used if defined, rather than throwing an error
					 */
					var fetchData = function (data, type, src) {
						var arrayNotation, funcNotation, out, innerSrc;
			
						if ( src !== "" )
						{
							var a = _fnSplitObjNotation( src );
			
							for ( var i=0, iLen=a.length ; i<iLen ; i++ )
							{
								// Check if we are dealing with special notation
								arrayNotation = a[i].match(__reArray);
								funcNotation = a[i].match(__reFn);
			
								if ( arrayNotation )
								{
									// Array notation
									a[i] = a[i].replace(__reArray, '');
			
									// Condition allows simply [] to be passed in
									if ( a[i] !== "" ) {
										data = data[ a[i] ];
									}
									out = [];
			
									// Get the remainder of the nested object to get
									a.splice( 0, i+1 );
									innerSrc = a.join('.');
			
									// Traverse each entry in the array getting the properties requested
									if ( $.isArray( data ) ) {
										for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
											out.push( fetchData( data[j], type, innerSrc ) );
										}
									}
			
									// If a string is given in between the array notation indicators, that
									// is used to join the strings together, otherwise an array is returned
									var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
									data = (join==="") ? out : out.join(join);
			
									// The inner call to fetchData has already traversed through the remainder
									// of the source requested, so we exit from the loop
									break;
								}
								else if ( funcNotation )
								{
									// Function call
									a[i] = a[i].replace(__reFn, '');
									data = data[ a[i] ]();
									continue;
								}
			
								if ( data === null || data[ a[i] ] === undefined )
								{
									return undefined;
								}
								data = data[ a[i] ];
							}
						}
			
						return data;
					};
			
					return function (data, type) { // row and meta also passed, but not used
						return fetchData( data, type, mSource );
					};
				}
				else
				{
					/* Array or flat object mapping */
					return function (data, type) { // row and meta also passed, but not used
						return data[mSource];
					};
				}
			}
			
			
			/**
			 * Return a function that can be used to set data from a source object, taking
			 * into account the ability to use nested objects as a source
			 *  @param {string|int|function} mSource The data source for the object
			 *  @returns {function} Data set function
			 *  @memberof DataTable#oApi
			 */
			function _fnSetObjectDataFn( mSource )
			{
				if ( $.isPlainObject( mSource ) )
				{
					/* Unlike get, only the underscore (global) option is used for for
					 * setting data since we don't know the type here. This is why an object
					 * option is not documented for `mData` (which is read/write), but it is
					 * for `mRender` which is read only.
					 */
					return _fnSetObjectDataFn( mSource._ );
				}
				else if ( mSource === null )
				{
					/* Nothing to do when the data source is null */
					return function () {};
				}
				else if ( typeof mSource === 'function' )
				{
					return function (data, val, meta) {
						mSource( data, 'set', val, meta );
					};
				}
				else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
					      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
				{
					/* Like the get, we need to get data from a nested object */
					var setData = function (data, val, src) {
						var a = _fnSplitObjNotation( src ), b;
						var aLast = a[a.length-1];
						var arrayNotation, funcNotation, o, innerSrc;
			
						for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
						{
							// Check if we are dealing with an array notation request
							arrayNotation = a[i].match(__reArray);
							funcNotation = a[i].match(__reFn);
			
							if ( arrayNotation )
							{
								a[i] = a[i].replace(__reArray, '');
								data[ a[i] ] = [];
			
								// Get the remainder of the nested object to set so we can recurse
								b = a.slice();
								b.splice( 0, i+1 );
								innerSrc = b.join('.');
			
								// Traverse each entry in the array setting the properties requested
								if ( $.isArray( val ) )
								{
									for ( var j=0, jLen=val.length ; j<jLen ; j++ )
									{
										o = {};
										setData( o, val[j], innerSrc );
										data[ a[i] ].push( o );
									}
								}
								else
								{
									// We've been asked to save data to an array, but it
									// isn't array data to be saved. Best that can be done
									// is to just save the value.
									data[ a[i] ] = val;
								}
			
								// The inner call to setData has already traversed through the remainder
								// of the source and has set the data, thus we can exit here
								return;
							}
							else if ( funcNotation )
							{
								// Function call
								a[i] = a[i].replace(__reFn, '');
								data = data[ a[i] ]( val );
							}
			
							// If the nested object doesn't currently exist - since we are
							// trying to set the value - create it
							if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
							{
								data[ a[i] ] = {};
							}
							data = data[ a[i] ];
						}
			
						// Last item in the input - i.e, the actual set
						if ( aLast.match(__reFn ) )
						{
							// Function call
							data = data[ aLast.replace(__reFn, '') ]( val );
						}
						else
						{
							// If array notation is used, we just want to strip it and use the property name
							// and assign the value. If it isn't used, then we get the result we want anyway
							data[ aLast.replace(__reArray, '') ] = val;
						}
					};
			
					return function (data, val) { // meta is also passed in, but not used
						return setData( data, val, mSource );
					};
				}
				else
				{
					/* Array or flat object mapping */
					return function (data, val) { // meta is also passed in, but not used
						data[mSource] = val;
					};
				}
			}
			
			
			/**
			 * Return an array with the full table data
			 *  @param {object} oSettings dataTables settings object
			 *  @returns array {array} aData Master data array
			 *  @memberof DataTable#oApi
			 */
			function _fnGetDataMaster ( settings )
			{
				return _pluck( settings.aoData, '_aData' );
			}
			
			
			/**
			 * Nuke the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnClearTable( settings )
			{
				settings.aoData.length = 0;
				settings.aiDisplayMaster.length = 0;
				settings.aiDisplay.length = 0;
				settings.aIds = {};
			}
			
			
			 /**
			 * Take an array of integers (index array) and remove a target integer (value - not
			 * the key!)
			 *  @param {array} a Index array to target
			 *  @param {int} iTarget value to find
			 *  @memberof DataTable#oApi
			 */
			function _fnDeleteIndex( a, iTarget, splice )
			{
				var iTargetIndex = -1;
			
				for ( var i=0, iLen=a.length ; i<iLen ; i++ )
				{
					if ( a[i] == iTarget )
					{
						iTargetIndex = i;
					}
					else if ( a[i] > iTarget )
					{
						a[i]--;
					}
				}
			
				if ( iTargetIndex != -1 && splice === undefined )
				{
					a.splice( iTargetIndex, 1 );
				}
			}
			
			
			/**
			 * Mark cached data as invalid such that a re-read of the data will occur when
			 * the cached data is next requested. Also update from the data source object.
			 *
			 * @param {object} settings DataTables settings object
			 * @param {int}    rowIdx   Row index to invalidate
			 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
			 *     or 'data'
			 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
			 *     row will be invalidated
			 * @memberof DataTable#oApi
			 *
			 * @todo For the modularisation of v1.11 this will need to become a callback, so
			 *   the sort and filter methods can subscribe to it. That will required
			 *   initialisation options for sorting, which is why it is not already baked in
			 */
			function _fnInvalidate( settings, rowIdx, src, colIdx )
			{
				var row = settings.aoData[ rowIdx ];
				var i, ien;
				var cellWrite = function ( cell, col ) {
					// This is very frustrating, but in IE if you just write directly
					// to innerHTML, and elements that are overwritten are GC'ed,
					// even if there is a reference to them elsewhere
					while ( cell.childNodes.length ) {
						cell.removeChild( cell.firstChild );
					}
			
					cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
				};
			
				// Are we reading last data from DOM or the data object?
				if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
					// Read the data from the DOM
					row._aData = _fnGetRowElements(
							settings, row, colIdx, colIdx === undefined ? undefined : row._aData
						)
						.data;
				}
				else {
					// Reading from data object, update the DOM
					var cells = row.anCells;
			
					if ( cells ) {
						if ( colIdx !== undefined ) {
							cellWrite( cells[colIdx], colIdx );
						}
						else {
							for ( i=0, ien=cells.length ; i<ien ; i++ ) {
								cellWrite( cells[i], i );
							}
						}
					}
				}
			
				// For both row and cell invalidation, the cached data for sorting and
				// filtering is nulled out
				row._aSortData = null;
				row._aFilterData = null;
			
				// Invalidate the type for a specific column (if given) or all columns since
				// the data might have changed
				var cols = settings.aoColumns;
				if ( colIdx !== undefined ) {
					cols[ colIdx ].sType = null;
				}
				else {
					for ( i=0, ien=cols.length ; i<ien ; i++ ) {
						cols[i].sType = null;
					}
			
					// Update DataTables special `DT_*` attributes for the row
					_fnRowAttributes( settings, row );
				}
			}
			
			
			/**
			 * Build a data source object from an HTML row, reading the contents of the
			 * cells that are in the row.
			 *
			 * @param {object} settings DataTables settings object
			 * @param {node|object} TR element from which to read data or existing row
			 *   object from which to re-read the data from the cells
			 * @param {int} [colIdx] Optional column index
			 * @param {array|object} [d] Data source object. If `colIdx` is given then this
			 *   parameter should also be given and will be used to write the data into.
			 *   Only the column in question will be written
			 * @returns {object} Object with two parameters: `data` the data read, in
			 *   document order, and `cells` and array of nodes (they can be useful to the
			 *   caller, so rather than needing a second traversal to get them, just return
			 *   them from here).
			 * @memberof DataTable#oApi
			 */
			function _fnGetRowElements( settings, row, colIdx, d )
			{
				var
					tds = [],
					td = row.firstChild,
					name, col, o, i=0, contents,
					columns = settings.aoColumns,
					objectRead = settings._rowReadObject;
			
				// Allow the data object to be passed in, or construct
				d = d !== undefined ?
					d :
					objectRead ?
						{} :
						[];
			
				var attr = function ( str, td  ) {
					if ( typeof str === 'string' ) {
						var idx = str.indexOf('@');
			
						if ( idx !== -1 ) {
							var attr = str.substring( idx+1 );
							var setter = _fnSetObjectDataFn( str );
							setter( d, td.getAttribute( attr ) );
						}
					}
				};
			
				// Read data from a cell and store into the data object
				var cellProcess = function ( cell ) {
					if ( colIdx === undefined || colIdx === i ) {
						col = columns[i];
						contents = $.trim(cell.innerHTML);
			
						if ( col && col._bAttrSrc ) {
							var setter = _fnSetObjectDataFn( col.mData._ );
							setter( d, contents );
			
							attr( col.mData.sort, cell );
							attr( col.mData.type, cell );
							attr( col.mData.filter, cell );
						}
						else {
							// Depending on the `data` option for the columns the data can
							// be read to either an object or an array.
							if ( objectRead ) {
								if ( ! col._setter ) {
									// Cache the setter function
									col._setter = _fnSetObjectDataFn( col.mData );
								}
								col._setter( d, contents );
							}
							else {
								d[i] = contents;
							}
						}
					}
			
					i++;
				};
			
				if ( td ) {
					// `tr` element was passed in
					while ( td ) {
						name = td.nodeName.toUpperCase();
			
						if ( name == "TD" || name == "TH" ) {
							cellProcess( td );
							tds.push( td );
						}
			
						td = td.nextSibling;
					}
				}
				else {
					// Existing row object passed in
					tds = row.anCells;
			
					for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
						cellProcess( tds[j] );
					}
				}
			
				// Read the ID from the DOM if present
				var rowNode = td ? row : row.nTr;
			
				if ( rowNode ) {
					var id = rowNode.getAttribute( 'id' );
			
					if ( id ) {
						_fnSetObjectDataFn( settings.rowId )( d, id );
					}
				}
			
				return {
					data: d,
					cells: tds
				};
			}
			/**
			 * Create a new TR element (and it's TD children) for a row
			 *  @param {object} oSettings dataTables settings object
			 *  @param {int} iRow Row to consider
			 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
			 *    DataTables will create a row automatically
			 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
			 *    if nTr is.
			 *  @memberof DataTable#oApi
			 */
			function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
			{
				var
					row = oSettings.aoData[iRow],
					rowData = row._aData,
					cells = [],
					nTr, nTd, oCol,
					i, iLen;
			
				if ( row.nTr === null )
				{
					nTr = nTrIn || document.createElement('tr');
			
					row.nTr = nTr;
					row.anCells = cells;
			
					/* Use a private property on the node to allow reserve mapping from the node
					 * to the aoData array for fast look up
					 */
					nTr._DT_RowIndex = iRow;
			
					/* Special parameters can be given by the data source to be used on the row */
					_fnRowAttributes( oSettings, row );
			
					/* Process each column */
					for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
					{
						oCol = oSettings.aoColumns[i];
			
						nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );
						cells.push( nTd );
			
						// Need to create the HTML if new, or if a rendering function is defined
						if ( !nTrIn || oCol.mRender || oCol.mData !== i )
						{
							nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
						}
			
						/* Add user defined class */
						if ( oCol.sClass )
						{
							nTd.className += ' '+oCol.sClass;
						}
			
						// Visibility - add or remove as required
						if ( oCol.bVisible && ! nTrIn )
						{
							nTr.appendChild( nTd );
						}
						else if ( ! oCol.bVisible && nTrIn )
						{
							nTd.parentNode.removeChild( nTd );
						}
			
						if ( oCol.fnCreatedCell )
						{
							oCol.fnCreatedCell.call( oSettings.oInstance,
								nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
							);
						}
					}
			
					_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );
				}
			
				// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
				// and deployed
				row.nTr.setAttribute( 'role', 'row' );
			}
			
			
			/**
			 * Add attributes to a row based on the special `DT_*` parameters in a data
			 * source object.
			 *  @param {object} settings DataTables settings object
			 *  @param {object} DataTables row object for the row to be modified
			 *  @memberof DataTable#oApi
			 */
			function _fnRowAttributes( settings, row )
			{
				var tr = row.nTr;
				var data = row._aData;
			
				if ( tr ) {
					var id = settings.rowIdFn( data );
			
					if ( id ) {
						tr.id = id;
					}
			
					if ( data.DT_RowClass ) {
						// Remove any classes added by DT_RowClass before
						var a = data.DT_RowClass.split(' ');
						row.__rowc = row.__rowc ?
							_unique( row.__rowc.concat( a ) ) :
							a;
			
						$(tr)
							.removeClass( row.__rowc.join(' ') )
							.addClass( data.DT_RowClass );
					}
			
					if ( data.DT_RowAttr ) {
						$(tr).attr( data.DT_RowAttr );
					}
			
					if ( data.DT_RowData ) {
						$(tr).data( data.DT_RowData );
					}
				}
			}
			
			
			/**
			 * Create the HTML header for the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnBuildHead( oSettings )
			{
				var i, ien, cell, row, column;
				var thead = oSettings.nTHead;
				var tfoot = oSettings.nTFoot;
				var createHeader = $('th, td', thead).length === 0;
				var classes = oSettings.oClasses;
				var columns = oSettings.aoColumns;
			
				if ( createHeader ) {
					row = $('<tr/>').appendTo( thead );
				}
			
				for ( i=0, ien=columns.length ; i<ien ; i++ ) {
					column = columns[i];
					cell = $( column.nTh ).addClass( column.sClass );
			
					if ( createHeader ) {
						cell.appendTo( row );
					}
			
					// 1.11 move into sorting
					if ( oSettings.oFeatures.bSort ) {
						cell.addClass( column.sSortingClass );
			
						if ( column.bSortable !== false ) {
							cell
								.attr( 'tabindex', oSettings.iTabIndex )
								.attr( 'aria-controls', oSettings.sTableId );
			
							_fnSortAttachListener( oSettings, column.nTh, i );
						}
					}
			
					if ( column.sTitle != cell[0].innerHTML ) {
						cell.html( column.sTitle );
					}
			
					_fnRenderer( oSettings, 'header' )(
						oSettings, cell, column, classes
					);
				}
			
				if ( createHeader ) {
					_fnDetectHeader( oSettings.aoHeader, thead );
				}
				
				/* ARIA role for the rows */
			 	$(thead).find('>tr').attr('role', 'row');
			
				/* Deal with the footer - add classes if required */
				$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
				$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );
			
				// Cache the footer cells. Note that we only take the cells from the first
				// row in the footer. If there is more than one row the user wants to
				// interact with, they need to use the table().foot() method. Note also this
				// allows cells to be used for multiple columns using colspan
				if ( tfoot !== null ) {
					var cells = oSettings.aoFooter[0];
			
					for ( i=0, ien=cells.length ; i<ien ; i++ ) {
						column = columns[i];
						column.nTf = cells[i].cell;
			
						if ( column.sClass ) {
							$(column.nTf).addClass( column.sClass );
						}
					}
				}
			}
			
			
			/**
			 * Draw the header (or footer) element based on the column visibility states. The
			 * methodology here is to use the layout array from _fnDetectHeader, modified for
			 * the instantaneous column visibility, to construct the new layout. The grid is
			 * traversed over cell at a time in a rows x columns grid fashion, although each
			 * cell insert can cover multiple elements in the grid - which is tracks using the
			 * aApplied array. Cell inserts in the grid will only occur where there isn't
			 * already a cell in that position.
			 *  @param {object} oSettings dataTables settings object
			 *  @param array {objects} aoSource Layout array from _fnDetectHeader
			 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
			 *  @memberof DataTable#oApi
			 */
			function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
			{
				var i, iLen, j, jLen, k, kLen, n, nLocalTr;
				var aoLocal = [];
				var aApplied = [];
				var iColumns = oSettings.aoColumns.length;
				var iRowspan, iColspan;
			
				if ( ! aoSource )
				{
					return;
				}
			
				if (  bIncludeHidden === undefined )
				{
					bIncludeHidden = false;
				}
			
				/* Make a copy of the master layout array, but without the visible columns in it */
				for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
				{
					aoLocal[i] = aoSource[i].slice();
					aoLocal[i].nTr = aoSource[i].nTr;
			
					/* Remove any columns which are currently hidden */
					for ( j=iColumns-1 ; j>=0 ; j-- )
					{
						if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
						{
							aoLocal[i].splice( j, 1 );
						}
					}
			
					/* Prep the applied array - it needs an element for each row */
					aApplied.push( [] );
				}
			
				for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
				{
					nLocalTr = aoLocal[i].nTr;
			
					/* All cells are going to be replaced, so empty out the row */
					if ( nLocalTr )
					{
						while( (n = nLocalTr.firstChild) )
						{
							nLocalTr.removeChild( n );
						}
					}
			
					for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
					{
						iRowspan = 1;
						iColspan = 1;
			
						/* Check to see if there is already a cell (row/colspan) covering our target
						 * insert point. If there is, then there is nothing to do.
						 */
						if ( aApplied[i][j] === undefined )
						{
							nLocalTr.appendChild( aoLocal[i][j].cell );
							aApplied[i][j] = 1;
			
							/* Expand the cell to cover as many rows as needed */
							while ( aoLocal[i+iRowspan] !== undefined &&
							        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
							{
								aApplied[i+iRowspan][j] = 1;
								iRowspan++;
							}
			
							/* Expand the cell to cover as many columns as needed */
							while ( aoLocal[i][j+iColspan] !== undefined &&
							        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
							{
								/* Must update the applied array over the rows for the columns */
								for ( k=0 ; k<iRowspan ; k++ )
								{
									aApplied[i+k][j+iColspan] = 1;
								}
								iColspan++;
							}
			
							/* Do the actual expansion in the DOM */
							$(aoLocal[i][j].cell)
								.attr('rowspan', iRowspan)
								.attr('colspan', iColspan);
						}
					}
				}
			}
			
			
			/**
			 * Insert the required TR nodes into the table for display
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnDraw( oSettings )
			{
				/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
				var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
				if ( $.inArray( false, aPreDraw ) !== -1 )
				{
					_fnProcessingDisplay( oSettings, false );
					return;
				}
			
				var i, iLen, n;
				var anRows = [];
				var iRowCount = 0;
				var asStripeClasses = oSettings.asStripeClasses;
				var iStripes = asStripeClasses.length;
				var iOpenRows = oSettings.aoOpenRows.length;
				var oLang = oSettings.oLanguage;
				var iInitDisplayStart = oSettings.iInitDisplayStart;
				var bServerSide = _fnDataSource( oSettings ) == 'ssp';
				var aiDisplay = oSettings.aiDisplay;
			
				oSettings.bDrawing = true;
			
				/* Check and see if we have an initial draw position from state saving */
				if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
				{
					oSettings._iDisplayStart = bServerSide ?
						iInitDisplayStart :
						iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
							0 :
							iInitDisplayStart;
			
					oSettings.iInitDisplayStart = -1;
				}
			
				var iDisplayStart = oSettings._iDisplayStart;
				var iDisplayEnd = oSettings.fnDisplayEnd();
			
				/* Server-side processing draw intercept */
				if ( oSettings.bDeferLoading )
				{
					oSettings.bDeferLoading = false;
					oSettings.iDraw++;
					_fnProcessingDisplay( oSettings, false );
				}
				else if ( !bServerSide )
				{
					oSettings.iDraw++;
				}
				else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
				{
					return;
				}
			
				if ( aiDisplay.length !== 0 )
				{
					var iStart = bServerSide ? 0 : iDisplayStart;
					var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
			
					for ( var j=iStart ; j<iEnd ; j++ )
					{
						var iDataIndex = aiDisplay[j];
						var aoData = oSettings.aoData[ iDataIndex ];
						if ( aoData.nTr === null )
						{
							_fnCreateTr( oSettings, iDataIndex );
						}
			
						var nRow = aoData.nTr;
			
						/* Remove the old striping classes and then add the new one */
						if ( iStripes !== 0 )
						{
							var sStripe = asStripeClasses[ iRowCount % iStripes ];
							if ( aoData._sRowStripe != sStripe )
							{
								$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
								aoData._sRowStripe = sStripe;
							}
						}
			
						// Row callback functions - might want to manipulate the row
						// iRowCount and j are not currently documented. Are they at all
						// useful?
						_fnCallbackFire( oSettings, 'aoRowCallback', null,
							[nRow, aoData._aData, iRowCount, j] );
			
						anRows.push( nRow );
						iRowCount++;
					}
				}
				else
				{
					/* Table is empty - create a row with an empty message in it */
					var sZero = oLang.sZeroRecords;
					if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
					{
						sZero = oLang.sLoadingRecords;
					}
					else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
					{
						sZero = oLang.sEmptyTable;
					}
			
					anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
						.append( $('<td />', {
							'valign':  'top',
							'colSpan': _fnVisbleColumns( oSettings ),
							'class':   oSettings.oClasses.sRowEmpty
						} ).html( sZero ) )[0];
				}
			
				/* Header and footer callbacks */
				_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
					_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
			
				_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
					_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
			
				var body = $(oSettings.nTBody);
			
				body.children().detach();
				body.append( $(anRows) );
			
				/* Call all required callback functions for the end of a draw */
				_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
			
				/* Draw is complete, sorting and filtering must be as well */
				oSettings.bSorted = false;
				oSettings.bFiltered = false;
				oSettings.bDrawing = false;
			}
			
			
			/**
			 * Redraw the table - taking account of the various features which are enabled
			 *  @param {object} oSettings dataTables settings object
			 *  @param {boolean} [holdPosition] Keep the current paging position. By default
			 *    the paging is reset to the first page
			 *  @memberof DataTable#oApi
			 */
			function _fnReDraw( settings, holdPosition )
			{
				var
					features = settings.oFeatures,
					sort     = features.bSort,
					filter   = features.bFilter;
			
				if ( sort ) {
					_fnSort( settings );
				}
			
				if ( filter ) {
					_fnFilterComplete( settings, settings.oPreviousSearch );
				}
				else {
					// No filtering, so we want to just use the display master
					settings.aiDisplay = settings.aiDisplayMaster.slice();
				}
			
				if ( holdPosition !== true ) {
					settings._iDisplayStart = 0;
				}
			
				// Let any modules know about the draw hold position state (used by
				// scrolling internally)
				settings._drawHold = holdPosition;
			
				_fnDraw( settings );
			
				settings._drawHold = false;
			}
			
			
			/**
			 * Add the options to the page HTML for the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnAddOptionsHtml ( oSettings )
			{
				var classes = oSettings.oClasses;
				var table = $(oSettings.nTable);
				var holding = $('<div/>').insertBefore( table ); // Holding element for speed
				var features = oSettings.oFeatures;
			
				// All DataTables are wrapped in a div
				var insert = $('<div/>', {
					id:      oSettings.sTableId+'_wrapper',
					'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
				} );
			
				oSettings.nHolding = holding[0];
				oSettings.nTableWrapper = insert[0];
				oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
			
				/* Loop over the user set positioning and place the elements as needed */
				var aDom = oSettings.sDom.split('');
				var featureNode, cOption, nNewNode, cNext, sAttr, j;
				for ( var i=0 ; i<aDom.length ; i++ )
				{
					featureNode = null;
					cOption = aDom[i];
			
					if ( cOption == '<' )
					{
						/* New container div */
						nNewNode = $('<div/>')[0];
			
						/* Check to see if we should append an id and/or a class name to the container */
						cNext = aDom[i+1];
						if ( cNext == "'" || cNext == '"' )
						{
							sAttr = "";
							j = 2;
							while ( aDom[i+j] != cNext )
							{
								sAttr += aDom[i+j];
								j++;
							}
			
							/* Replace jQuery UI constants @todo depreciated */
							if ( sAttr == "H" )
							{
								sAttr = classes.sJUIHeader;
							}
							else if ( sAttr == "F" )
							{
								sAttr = classes.sJUIFooter;
							}
			
							/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
							 * breaks the string into parts and applies them as needed
							 */
							if ( sAttr.indexOf('.') != -1 )
							{
								var aSplit = sAttr.split('.');
								nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
								nNewNode.className = aSplit[1];
							}
							else if ( sAttr.charAt(0) == "#" )
							{
								nNewNode.id = sAttr.substr(1, sAttr.length-1);
							}
							else
							{
								nNewNode.className = sAttr;
							}
			
							i += j; /* Move along the position array */
						}
			
						insert.append( nNewNode );
						insert = $(nNewNode);
					}
					else if ( cOption == '>' )
					{
						/* End container div */
						insert = insert.parent();
					}
					// @todo Move options into their own plugins?
					else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
					{
						/* Length */
						featureNode = _fnFeatureHtmlLength( oSettings );
					}
					else if ( cOption == 'f' && features.bFilter )
					{
						/* Filter */
						featureNode = _fnFeatureHtmlFilter( oSettings );
					}
					else if ( cOption == 'r' && features.bProcessing )
					{
						/* pRocessing */
						featureNode = _fnFeatureHtmlProcessing( oSettings );
					}
					else if ( cOption == 't' )
					{
						/* Table */
						featureNode = _fnFeatureHtmlTable( oSettings );
					}
					else if ( cOption ==  'i' && features.bInfo )
					{
						/* Info */
						featureNode = _fnFeatureHtmlInfo( oSettings );
					}
					else if ( cOption == 'p' && features.bPaginate )
					{
						/* Pagination */
						featureNode = _fnFeatureHtmlPaginate( oSettings );
					}
					else if ( DataTable.ext.feature.length !== 0 )
					{
						/* Plug-in features */
						var aoFeatures = DataTable.ext.feature;
						for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
						{
							if ( cOption == aoFeatures[k].cFeature )
							{
								featureNode = aoFeatures[k].fnInit( oSettings );
								break;
							}
						}
					}
			
					/* Add to the 2D features array */
					if ( featureNode )
					{
						var aanFeatures = oSettings.aanFeatures;
			
						if ( ! aanFeatures[cOption] )
						{
							aanFeatures[cOption] = [];
						}
			
						aanFeatures[cOption].push( featureNode );
						insert.append( featureNode );
					}
				}
			
				/* Built our DOM structure - replace the holding div with what we want */
				holding.replaceWith( insert );
				oSettings.nHolding = null;
			}
			
			
			/**
			 * Use the DOM source to create up an array of header cells. The idea here is to
			 * create a layout grid (array) of rows x columns, which contains a reference
			 * to the cell that that point in the grid (regardless of col/rowspan), such that
			 * any column / row could be removed and the new grid constructed
			 *  @param array {object} aLayout Array to store the calculated layout in
			 *  @param {node} nThead The header/footer element for the table
			 *  @memberof DataTable#oApi
			 */
			function _fnDetectHeader ( aLayout, nThead )
			{
				var nTrs = $(nThead).children('tr');
				var nTr, nCell;
				var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
				var bUnique;
				var fnShiftCol = function ( a, i, j ) {
					var k = a[i];
			                while ( k[j] ) {
						j++;
					}
					return j;
				};
			
				aLayout.splice( 0, aLayout.length );
			
				/* We know how many rows there are in the layout - so prep it */
				for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
				{
					aLayout.push( [] );
				}
			
				/* Calculate a layout array */
				for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
				{
					nTr = nTrs[i];
					iColumn = 0;
			
					/* For every cell in the row... */
					nCell = nTr.firstChild;
					while ( nCell ) {
						if ( nCell.nodeName.toUpperCase() == "TD" ||
						     nCell.nodeName.toUpperCase() == "TH" )
						{
							/* Get the col and rowspan attributes from the DOM and sanitise them */
							iColspan = nCell.getAttribute('colspan') * 1;
							iRowspan = nCell.getAttribute('rowspan') * 1;
							iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
							iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
			
							/* There might be colspan cells already in this row, so shift our target
							 * accordingly
							 */
							iColShifted = fnShiftCol( aLayout, i, iColumn );
			
							/* Cache calculation for unique columns */
							bUnique = iColspan === 1 ? true : false;
			
							/* If there is col / rowspan, copy the information into the layout grid */
							for ( l=0 ; l<iColspan ; l++ )
							{
								for ( k=0 ; k<iRowspan ; k++ )
								{
									aLayout[i+k][iColShifted+l] = {
										"cell": nCell,
										"unique": bUnique
									};
									aLayout[i+k].nTr = nTr;
								}
							}
						}
						nCell = nCell.nextSibling;
					}
				}
			}
			
			
			/**
			 * Get an array of unique th elements, one for each column
			 *  @param {object} oSettings dataTables settings object
			 *  @param {node} nHeader automatically detect the layout from this node - optional
			 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
			 *  @returns array {node} aReturn list of unique th's
			 *  @memberof DataTable#oApi
			 */
			function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
			{
				var aReturn = [];
				if ( !aLayout )
				{
					aLayout = oSettings.aoHeader;
					if ( nHeader )
					{
						aLayout = [];
						_fnDetectHeader( aLayout, nHeader );
					}
				}
			
				for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
				{
					for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
					{
						if ( aLayout[i][j].unique &&
							 (!aReturn[j] || !oSettings.bSortCellsTop) )
						{
							aReturn[j] = aLayout[i][j].cell;
						}
					}
				}
			
				return aReturn;
			}
			
			/**
			 * Create an Ajax call based on the table's settings, taking into account that
			 * parameters can have multiple forms, and backwards compatibility.
			 *
			 * @param {object} oSettings dataTables settings object
			 * @param {array} data Data to send to the server, required by
			 *     DataTables - may be augmented by developer callbacks
			 * @param {function} fn Callback function to run when data is obtained
			 */
			function _fnBuildAjax( oSettings, data, fn )
			{
				// Compatibility with 1.9-, allow fnServerData and event to manipulate
				_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
			
				// Convert to object based for 1.10+ if using the old array scheme which can
				// come from server-side processing or serverParams
				if ( data && $.isArray(data) ) {
					var tmp = {};
					var rbracket = /(.*?)\[\]$/;
			
					$.each( data, function (key, val) {
						var match = val.name.match(rbracket);
			
						if ( match ) {
							// Support for arrays
							var name = match[0];
			
							if ( ! tmp[ name ] ) {
								tmp[ name ] = [];
							}
							tmp[ name ].push( val.value );
						}
						else {
							tmp[val.name] = val.value;
						}
					} );
					data = tmp;
				}
			
				var ajaxData;
				var ajax = oSettings.ajax;
				var instance = oSettings.oInstance;
				var callback = function ( json ) {
					_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
					fn( json );
				};
			
				if ( $.isPlainObject( ajax ) && ajax.data )
				{
					ajaxData = ajax.data;
			
					var newData = $.isFunction( ajaxData ) ?
						ajaxData( data, oSettings ) :  // fn can manipulate data or return
						ajaxData;                      // an object object or array to merge
			
					// If the function returned something, use that alone
					data = $.isFunction( ajaxData ) && newData ?
						newData :
						$.extend( true, data, newData );
			
					// Remove the data property as we've resolved it already and don't want
					// jQuery to do it again (it is restored at the end of the function)
					delete ajax.data;
				}
			
				var baseAjax = {
					"data": data,
					"success": function (json) {
						var error = json.error || json.sError;
						if ( error ) {
							_fnLog( oSettings, 0, error );
						}
			
						oSettings.json = json;
						callback( json );
					},
					"dataType": "json",
					"cache": false,
					"type": oSettings.sServerMethod,
					"error": function (xhr, error, thrown) {
						var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );
			
						if ( $.inArray( true, ret ) === -1 ) {
							if ( error == "parsererror" ) {
								_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
							}
							else if ( xhr.readyState === 4 ) {
								_fnLog( oSettings, 0, 'Ajax error', 7 );
							}
						}
			
						_fnProcessingDisplay( oSettings, false );
					}
				};
			
				// Store the data submitted for the API
				oSettings.oAjaxData = data;
			
				// Allow plug-ins and external processes to modify the data
				_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
			
				if ( oSettings.fnServerData )
				{
					// DataTables 1.9- compatibility
					oSettings.fnServerData.call( instance,
						oSettings.sAjaxSource,
						$.map( data, function (val, key) { // Need to convert back to 1.9 trad format
							return { name: key, value: val };
						} ),
						callback,
						oSettings
					);
				}
				else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
				{
					// DataTables 1.9- compatibility
					oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
						url: ajax || oSettings.sAjaxSource
					} ) );
				}
				else if ( $.isFunction( ajax ) )
				{
					// Is a function - let the caller define what needs to be done
					oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
				}
				else
				{
					// Object to extend the base settings
					oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
			
					// Restore for next time around
					ajax.data = ajaxData;
				}
			}
			
			
			/**
			 * Update the table using an Ajax call
			 *  @param {object} settings dataTables settings object
			 *  @returns {boolean} Block the table drawing or not
			 *  @memberof DataTable#oApi
			 */
			function _fnAjaxUpdate( settings )
			{
				if ( settings.bAjaxDataGet ) {
					settings.iDraw++;
					_fnProcessingDisplay( settings, true );
			
					_fnBuildAjax(
						settings,
						_fnAjaxParameters( settings ),
						function(json) {
							_fnAjaxUpdateDraw( settings, json );
						}
					);
			
					return false;
				}
				return true;
			}
			
			
			/**
			 * Build up the parameters in an object needed for a server-side processing
			 * request. Note that this is basically done twice, is different ways - a modern
			 * method which is used by default in DataTables 1.10 which uses objects and
			 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
			 * the sAjaxSource option is used in the initialisation, or the legacyAjax
			 * option is set.
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {bool} block the table drawing or not
			 *  @memberof DataTable#oApi
			 */
			function _fnAjaxParameters( settings )
			{
				var
					columns = settings.aoColumns,
					columnCount = columns.length,
					features = settings.oFeatures,
					preSearch = settings.oPreviousSearch,
					preColSearch = settings.aoPreSearchCols,
					i, data = [], dataProp, column, columnSearch,
					sort = _fnSortFlatten( settings ),
					displayStart = settings._iDisplayStart,
					displayLength = features.bPaginate !== false ?
						settings._iDisplayLength :
						-1;
			
				var param = function ( name, value ) {
					data.push( { 'name': name, 'value': value } );
				};
			
				// DataTables 1.9- compatible method
				param( 'sEcho',          settings.iDraw );
				param( 'iColumns',       columnCount );
				param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
				param( 'iDisplayStart',  displayStart );
				param( 'iDisplayLength', displayLength );
			
				// DataTables 1.10+ method
				var d = {
					draw:    settings.iDraw,
					columns: [],
					order:   [],
					start:   displayStart,
					length:  displayLength,
					search:  {
						value: preSearch.sSearch,
						regex: preSearch.bRegex
					}
				};
			
				for ( i=0 ; i<columnCount ; i++ ) {
					column = columns[i];
					columnSearch = preColSearch[i];
					dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
			
					d.columns.push( {
						data:       dataProp,
						name:       column.sName,
						searchable: column.bSearchable,
						orderable:  column.bSortable,
						search:     {
							value: columnSearch.sSearch,
							regex: columnSearch.bRegex
						}
					} );
			
					param( "mDataProp_"+i, dataProp );
			
					if ( features.bFilter ) {
						param( 'sSearch_'+i,     columnSearch.sSearch );
						param( 'bRegex_'+i,      columnSearch.bRegex );
						param( 'bSearchable_'+i, column.bSearchable );
					}
			
					if ( features.bSort ) {
						param( 'bSortable_'+i, column.bSortable );
					}
				}
			
				if ( features.bFilter ) {
					param( 'sSearch', preSearch.sSearch );
					param( 'bRegex', preSearch.bRegex );
				}
			
				if ( features.bSort ) {
					$.each( sort, function ( i, val ) {
						d.order.push( { column: val.col, dir: val.dir } );
			
						param( 'iSortCol_'+i, val.col );
						param( 'sSortDir_'+i, val.dir );
					} );
			
					param( 'iSortingCols', sort.length );
				}
			
				// If the legacy.ajax parameter is null, then we automatically decide which
				// form to use, based on sAjaxSource
				var legacy = DataTable.ext.legacy.ajax;
				if ( legacy === null ) {
					return settings.sAjaxSource ? data : d;
				}
			
				// Otherwise, if legacy has been specified then we use that to decide on the
				// form
				return legacy ? data : d;
			}
			
			
			/**
			 * Data the data from the server (nuking the old) and redraw the table
			 *  @param {object} oSettings dataTables settings object
			 *  @param {object} json json data return from the server.
			 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
			 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
			 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
			 *  @param {array} json.aaData The data to display on this page
			 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
			 *  @memberof DataTable#oApi
			 */
			function _fnAjaxUpdateDraw ( settings, json )
			{
				// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
				// Support both
				var compat = function ( old, modern ) {
					return json[old] !== undefined ? json[old] : json[modern];
				};
			
				var data = _fnAjaxDataSrc( settings, json );
				var draw            = compat( 'sEcho',                'draw' );
				var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
				var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
			
				if ( draw ) {
					// Protect against out of sequence returns
					if ( draw*1 < settings.iDraw ) {
						return;
					}
					settings.iDraw = draw * 1;
				}
			
				_fnClearTable( settings );
				settings._iRecordsTotal   = parseInt(recordsTotal, 10);
				settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
			
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					_fnAddData( settings, data[i] );
				}
				settings.aiDisplay = settings.aiDisplayMaster.slice();
			
				settings.bAjaxDataGet = false;
				_fnDraw( settings );
			
				if ( ! settings._bInitComplete ) {
					_fnInitComplete( settings, json );
				}
			
				settings.bAjaxDataGet = true;
				_fnProcessingDisplay( settings, false );
			}
			
			
			/**
			 * Get the data from the JSON data source to use for drawing a table. Using
			 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
			 * source object, or from a processing function.
			 *  @param {object} oSettings dataTables settings object
			 *  @param  {object} json Data source object / array from the server
			 *  @return {array} Array of data to use
			 */
			function _fnAjaxDataSrc ( oSettings, json )
			{
				var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
					oSettings.ajax.dataSrc :
					oSettings.sAjaxDataProp; // Compatibility with 1.9-.
			
				// Compatibility with 1.9-. In order to read from aaData, check if the
				// default has been changed, if not, check for aaData
				if ( dataSrc === 'data' ) {
					return json.aaData || json[dataSrc];
				}
			
				return dataSrc !== "" ?
					_fnGetObjectDataFn( dataSrc )( json ) :
					json;
			}
			
			/**
			 * Generate the node required for filtering text
			 *  @returns {node} Filter control element
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlFilter ( settings )
			{
				var classes = settings.oClasses;
				var tableId = settings.sTableId;
				var language = settings.oLanguage;
				var previousSearch = settings.oPreviousSearch;
				var features = settings.aanFeatures;
				var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
			
				var str = language.sSearch;
				str = str.match(/_INPUT_/) ?
					str.replace('_INPUT_', input) :
					str+input;
			
				var filter = $('<div/>', {
						'id': ! features.f ? tableId+'_filter' : null,
						'class': classes.sFilter
					} )
					.append( $('<label/>' ).append( str ) );
			
				var searchFn = function() {
					/* Update all other filter input elements for the new display */
					var n = features.f;
					var val = !this.value ? "" : this.value; // mental IE8 fix :-(
			
					/* Now do the filter */
					if ( val != previousSearch.sSearch ) {
						_fnFilterComplete( settings, {
							"sSearch": val,
							"bRegex": previousSearch.bRegex,
							"bSmart": previousSearch.bSmart ,
							"bCaseInsensitive": previousSearch.bCaseInsensitive
						} );
			
						// Need to redraw, without resorting
						settings._iDisplayStart = 0;
						_fnDraw( settings );
					}
				};
			
				var searchDelay = settings.searchDelay !== null ?
					settings.searchDelay :
					_fnDataSource( settings ) === 'ssp' ?
						400 :
						0;
			
				var jqFilter = $('input', filter)
					.val( previousSearch.sSearch )
					.attr( 'placeholder', language.sSearchPlaceholder )
					.bind(
						'keyup.DT search.DT input.DT paste.DT cut.DT',
						searchDelay ?
							_fnThrottle( searchFn, searchDelay ) :
							searchFn
					)
					.bind( 'keypress.DT', function(e) {
						/* Prevent form submission */
						if ( e.keyCode == 13 ) {
							return false;
						}
					} )
					.attr('aria-controls', tableId);
			
				// Update the input elements whenever the table is filtered
				$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
					if ( settings === s ) {
						// IE9 throws an 'unknown error' if document.activeElement is used
						// inside an iframe or frame...
						try {
							if ( jqFilter[0] !== document.activeElement ) {
								jqFilter.val( previousSearch.sSearch );
							}
						}
						catch ( e ) {}
					}
				} );
			
				return filter[0];
			}
			
			
			/**
			 * Filter the table using both the global filter and column based filtering
			 *  @param {object} oSettings dataTables settings object
			 *  @param {object} oSearch search information
			 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
			 *  @memberof DataTable#oApi
			 */
			function _fnFilterComplete ( oSettings, oInput, iForce )
			{
				var oPrevSearch = oSettings.oPreviousSearch;
				var aoPrevSearch = oSettings.aoPreSearchCols;
				var fnSaveFilter = function ( oFilter ) {
					/* Save the filtering values */
					oPrevSearch.sSearch = oFilter.sSearch;
					oPrevSearch.bRegex = oFilter.bRegex;
					oPrevSearch.bSmart = oFilter.bSmart;
					oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
				};
				var fnRegex = function ( o ) {
					// Backwards compatibility with the bEscapeRegex option
					return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
				};
			
				// Resolve any column types that are unknown due to addition or invalidation
				// @todo As per sort - can this be moved into an event handler?
				_fnColumnTypes( oSettings );
			
				/* In server-side processing all filtering is done by the server, so no point hanging around here */
				if ( _fnDataSource( oSettings ) != 'ssp' )
				{
					/* Global filter */
					_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
					fnSaveFilter( oInput );
			
					/* Now do the individual column filter */
					for ( var i=0 ; i<aoPrevSearch.length ; i++ )
					{
						_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
							aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
					}
			
					/* Custom filtering */
					_fnFilterCustom( oSettings );
				}
				else
				{
					fnSaveFilter( oInput );
				}
			
				/* Tell the draw function we have been filtering */
				oSettings.bFiltered = true;
				_fnCallbackFire( oSettings, null, 'search', [oSettings] );
			}
			
			
			/**
			 * Apply custom filtering functions
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnFilterCustom( settings )
			{
				var filters = DataTable.ext.search;
				var displayRows = settings.aiDisplay;
				var row, rowIdx;
			
				for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
					var rows = [];
			
					// Loop over each row and see if it should be included
					for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
						rowIdx = displayRows[ j ];
						row = settings.aoData[ rowIdx ];
			
						if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
							rows.push( rowIdx );
						}
					}
			
					// So the array reference doesn't break set the results into the
					// existing array
					displayRows.length = 0;
					$.merge( displayRows, rows );
				}
			}
			
			
			/**
			 * Filter the table on a per-column basis
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string} sInput string to filter on
			 *  @param {int} iColumn column to filter
			 *  @param {bool} bRegex treat search string as a regular expression or not
			 *  @param {bool} bSmart use smart filtering or not
			 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
			 *  @memberof DataTable#oApi
			 */
			function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
			{
				if ( searchStr === '' ) {
					return;
				}
			
				var data;
				var display = settings.aiDisplay;
				var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
			
				for ( var i=display.length-1 ; i>=0 ; i-- ) {
					data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
			
					if ( ! rpSearch.test( data ) ) {
						display.splice( i, 1 );
					}
				}
			}
			
			
			/**
			 * Filter the data table based on user input and draw the table
			 *  @param {object} settings dataTables settings object
			 *  @param {string} input string to filter on
			 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
			 *  @param {bool} regex treat as a regular expression or not
			 *  @param {bool} smart perform smart filtering or not
			 *  @param {bool} caseInsensitive Do case insenstive matching or not
			 *  @memberof DataTable#oApi
			 */
			function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
			{
				var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
				var prevSearch = settings.oPreviousSearch.sSearch;
				var displayMaster = settings.aiDisplayMaster;
				var display, invalidated, i;
			
				// Need to take account of custom filtering functions - always filter
				if ( DataTable.ext.search.length !== 0 ) {
					force = true;
				}
			
				// Check if any of the rows were invalidated
				invalidated = _fnFilterData( settings );
			
				// If the input is blank - we just want the full data set
				if ( input.length <= 0 ) {
					settings.aiDisplay = displayMaster.slice();
				}
				else {
					// New search - start from the master array
					if ( invalidated ||
						 force ||
						 prevSearch.length > input.length ||
						 input.indexOf(prevSearch) !== 0 ||
						 settings.bSorted // On resort, the display master needs to be
						                  // re-filtered since indexes will have changed
					) {
						settings.aiDisplay = displayMaster.slice();
					}
			
					// Search the display array
					display = settings.aiDisplay;
			
					for ( i=display.length-1 ; i>=0 ; i-- ) {
						if ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
							display.splice( i, 1 );
						}
					}
				}
			}
			
			
			/**
			 * Build a regular expression object suitable for searching a table
			 *  @param {string} sSearch string to search for
			 *  @param {bool} bRegex treat as a regular expression or not
			 *  @param {bool} bSmart perform smart filtering or not
			 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
			 *  @returns {RegExp} constructed object
			 *  @memberof DataTable#oApi
			 */
			function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
			{
				search = regex ?
					search :
					_fnEscapeRegex( search );
				
				if ( smart ) {
					/* For smart filtering we want to allow the search to work regardless of
					 * word order. We also want double quoted text to be preserved, so word
					 * order is important - a la google. So this is what we want to
					 * generate:
					 * 
					 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
					 */
					var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
						if ( word.charAt(0) === '"' ) {
							var m = word.match( /^"(.*)"$/ );
							word = m ? m[1] : word;
						}
			
						return word.replace('"', '');
					} );
			
					search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
				}
			
				return new RegExp( search, caseInsensitive ? 'i' : '' );
			}
			
			
			/**
			 * Escape a string such that it can be used in a regular expression
			 *  @param {string} sVal string to escape
			 *  @returns {string} escaped string
			 *  @memberof DataTable#oApi
			 */
			function _fnEscapeRegex ( sVal )
			{
				return sVal.replace( _re_escape_regex, '\\$1' );
			}
			
			
			
			var __filter_div = $('<div>')[0];
			var __filter_div_textContent = __filter_div.textContent !== undefined;
			
			// Update the filtering data for each row if needed (by invalidation or first run)
			function _fnFilterData ( settings )
			{
				var columns = settings.aoColumns;
				var column;
				var i, j, ien, jen, filterData, cellData, row;
				var fomatters = DataTable.ext.type.search;
				var wasInvalidated = false;
			
				for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
					row = settings.aoData[i];
			
					if ( ! row._aFilterData ) {
						filterData = [];
			
						for ( j=0, jen=columns.length ; j<jen ; j++ ) {
							column = columns[j];
			
							if ( column.bSearchable ) {
								cellData = _fnGetCellData( settings, i, j, 'filter' );
			
								if ( fomatters[ column.sType ] ) {
									cellData = fomatters[ column.sType ]( cellData );
								}
			
								// Search in DataTables 1.10 is string based. In 1.11 this
								// should be altered to also allow strict type checking.
								if ( cellData === null ) {
									cellData = '';
								}
			
								if ( typeof cellData !== 'string' && cellData.toString ) {
									cellData = cellData.toString();
								}
							}
							else {
								cellData = '';
							}
			
							// If it looks like there is an HTML entity in the string,
							// attempt to decode it so sorting works as expected. Note that
							// we could use a single line of jQuery to do this, but the DOM
							// method used here is much faster http://jsperf.com/html-decode
							if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
								__filter_div.innerHTML = cellData;
								cellData = __filter_div_textContent ?
									__filter_div.textContent :
									__filter_div.innerText;
							}
			
							if ( cellData.replace ) {
								cellData = cellData.replace(/[\r\n]/g, '');
							}
			
							filterData.push( cellData );
						}
			
						row._aFilterData = filterData;
						row._sFilterRow = filterData.join('  ');
						wasInvalidated = true;
					}
				}
			
				return wasInvalidated;
			}
			
			
			/**
			 * Convert from the internal Hungarian notation to camelCase for external
			 * interaction
			 *  @param {object} obj Object to convert
			 *  @returns {object} Inverted object
			 *  @memberof DataTable#oApi
			 */
			function _fnSearchToCamel ( obj )
			{
				return {
					search:          obj.sSearch,
					smart:           obj.bSmart,
					regex:           obj.bRegex,
					caseInsensitive: obj.bCaseInsensitive
				};
			}
			
			
			
			/**
			 * Convert from camelCase notation to the internal Hungarian. We could use the
			 * Hungarian convert function here, but this is cleaner
			 *  @param {object} obj Object to convert
			 *  @returns {object} Inverted object
			 *  @memberof DataTable#oApi
			 */
			function _fnSearchToHung ( obj )
			{
				return {
					sSearch:          obj.search,
					bSmart:           obj.smart,
					bRegex:           obj.regex,
					bCaseInsensitive: obj.caseInsensitive
				};
			}
			
			/**
			 * Generate the node required for the info display
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {node} Information element
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlInfo ( settings )
			{
				var
					tid = settings.sTableId,
					nodes = settings.aanFeatures.i,
					n = $('<div/>', {
						'class': settings.oClasses.sInfo,
						'id': ! nodes ? tid+'_info' : null
					} );
			
				if ( ! nodes ) {
					// Update display on each draw
					settings.aoDrawCallback.push( {
						"fn": _fnUpdateInfo,
						"sName": "information"
					} );
			
					n
						.attr( 'role', 'status' )
						.attr( 'aria-live', 'polite' );
			
					// Table is described by our info div
					$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
				}
			
				return n[0];
			}
			
			
			/**
			 * Update the information elements in the display
			 *  @param {object} settings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnUpdateInfo ( settings )
			{
				/* Show information about the table */
				var nodes = settings.aanFeatures.i;
				if ( nodes.length === 0 ) {
					return;
				}
			
				var
					lang  = settings.oLanguage,
					start = settings._iDisplayStart+1,
					end   = settings.fnDisplayEnd(),
					max   = settings.fnRecordsTotal(),
					total = settings.fnRecordsDisplay(),
					out   = total ?
						lang.sInfo :
						lang.sInfoEmpty;
			
				if ( total !== max ) {
					/* Record set after filtering */
					out += ' ' + lang.sInfoFiltered;
				}
			
				// Convert the macros
				out += lang.sInfoPostFix;
				out = _fnInfoMacros( settings, out );
			
				var callback = lang.fnInfoCallback;
				if ( callback !== null ) {
					out = callback.call( settings.oInstance,
						settings, start, end, max, total, out
					);
				}
			
				$(nodes).html( out );
			}
			
			
			function _fnInfoMacros ( settings, str )
			{
				// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
				// internally
				var
					formatter  = settings.fnFormatNumber,
					start      = settings._iDisplayStart+1,
					len        = settings._iDisplayLength,
					vis        = settings.fnRecordsDisplay(),
					all        = len === -1;
			
				return str.
					replace(/_START_/g, formatter.call( settings, start ) ).
					replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
					replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
					replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
					replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
					replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
			}
			
			
			
			/**
			 * Draw the table for the first time, adding all required features
			 *  @param {object} settings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnInitialise ( settings )
			{
				var i, iLen, iAjaxStart=settings.iInitDisplayStart;
				var columns = settings.aoColumns, column;
				var features = settings.oFeatures;
				var deferLoading = settings.bDeferLoading; // value modified by the draw
			
				/* Ensure that the table data is fully initialised */
				if ( ! settings.bInitialised ) {
					setTimeout( function(){ _fnInitialise( settings ); }, 200 );
					return;
				}
			
				/* Show the display HTML options */
				_fnAddOptionsHtml( settings );
			
				/* Build and draw the header / footer for the table */
				_fnBuildHead( settings );
				_fnDrawHead( settings, settings.aoHeader );
				_fnDrawHead( settings, settings.aoFooter );
			
				/* Okay to show that something is going on now */
				_fnProcessingDisplay( settings, true );
			
				/* Calculate sizes for columns */
				if ( features.bAutoWidth ) {
					_fnCalculateColumnWidths( settings );
				}
			
				for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
					column = columns[i];
			
					if ( column.sWidth ) {
						column.nTh.style.width = _fnStringToCss( column.sWidth );
					}
				}
			
				_fnCallbackFire( settings, null, 'preInit', [settings] );
			
				// If there is default sorting required - let's do it. The sort function
				// will do the drawing for us. Otherwise we draw the table regardless of the
				// Ajax source - this allows the table to look initialised for Ajax sourcing
				// data (show 'loading' message possibly)
				_fnReDraw( settings );
			
				// Server-side processing init complete is done by _fnAjaxUpdateDraw
				var dataSrc = _fnDataSource( settings );
				if ( dataSrc != 'ssp' || deferLoading ) {
					// if there is an ajax source load the data
					if ( dataSrc == 'ajax' ) {
						_fnBuildAjax( settings, [], function(json) {
							var aData = _fnAjaxDataSrc( settings, json );
			
							// Got the data - add it to the table
							for ( i=0 ; i<aData.length ; i++ ) {
								_fnAddData( settings, aData[i] );
							}
			
							// Reset the init display for cookie saving. We've already done
							// a filter, and therefore cleared it before. So we need to make
							// it appear 'fresh'
							settings.iInitDisplayStart = iAjaxStart;
			
							_fnReDraw( settings );
			
							_fnProcessingDisplay( settings, false );
							_fnInitComplete( settings, json );
						}, settings );
					}
					else {
						_fnProcessingDisplay( settings, false );
						_fnInitComplete( settings );
					}
				}
			}
			
			
			/**
			 * Draw the table for the first time, adding all required features
			 *  @param {object} oSettings dataTables settings object
			 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
			 *    with client-side processing (optional)
			 *  @memberof DataTable#oApi
			 */
			function _fnInitComplete ( settings, json )
			{
				settings._bInitComplete = true;
			
				// When data was added after the initialisation (data or Ajax) we need to
				// calculate the column sizing
				if ( json || settings.oInit.aaData ) {
					_fnAdjustColumnSizing( settings );
				}
			
				_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
			}
			
			
			function _fnLengthChange ( settings, val )
			{
				var len = parseInt( val, 10 );
				settings._iDisplayLength = len;
			
				_fnLengthOverflow( settings );
			
				// Fire length change event
				_fnCallbackFire( settings, null, 'length', [settings, len] );
			}
			
			
			/**
			 * Generate the node required for user display length changing
			 *  @param {object} settings dataTables settings object
			 *  @returns {node} Display length feature node
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlLength ( settings )
			{
				var
					classes  = settings.oClasses,
					tableId  = settings.sTableId,
					menu     = settings.aLengthMenu,
					d2       = $.isArray( menu[0] ),
					lengths  = d2 ? menu[0] : menu,
					language = d2 ? menu[1] : menu;
			
				var select = $('<select/>', {
					'name':          tableId+'_length',
					'aria-controls': tableId,
					'class':         classes.sLengthSelect
				} );
			
				for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
					select[0][ i ] = new Option( language[i], lengths[i] );
				}
			
				var div = $('<div><label/></div>').addClass( classes.sLength );
				if ( ! settings.aanFeatures.l ) {
					div[0].id = tableId+'_length';
				}
			
				div.children().append(
					settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
				);
			
				// Can't use `select` variable as user might provide their own and the
				// reference is broken by the use of outerHTML
				$('select', div)
					.val( settings._iDisplayLength )
					.bind( 'change.DT', function(e) {
						_fnLengthChange( settings, $(this).val() );
						_fnDraw( settings );
					} );
			
				// Update node value whenever anything changes the table's length
				$(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {
					if ( settings === s ) {
						$('select', div).val( len );
					}
				} );
			
				return div[0];
			}
			
			
			
			/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
			 * Note that most of the paging logic is done in
			 * DataTable.ext.pager
			 */
			
			/**
			 * Generate the node required for default pagination
			 *  @param {object} oSettings dataTables settings object
			 *  @returns {node} Pagination feature node
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlPaginate ( settings )
			{
				var
					type   = settings.sPaginationType,
					plugin = DataTable.ext.pager[ type ],
					modern = typeof plugin === 'function',
					redraw = function( settings ) {
						_fnDraw( settings );
					},
					node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
					features = settings.aanFeatures;
			
				if ( ! modern ) {
					plugin.fnInit( settings, node, redraw );
				}
			
				/* Add a draw callback for the pagination on first instance, to update the paging display */
				if ( ! features.p )
				{
					node.id = settings.sTableId+'_paginate';
			
					settings.aoDrawCallback.push( {
						"fn": function( settings ) {
							if ( modern ) {
								var
									start      = settings._iDisplayStart,
									len        = settings._iDisplayLength,
									visRecords = settings.fnRecordsDisplay(),
									all        = len === -1,
									page = all ? 0 : Math.ceil( start / len ),
									pages = all ? 1 : Math.ceil( visRecords / len ),
									buttons = plugin(page, pages),
									i, ien;
			
								for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
									_fnRenderer( settings, 'pageButton' )(
										settings, features.p[i], i, buttons, page, pages
									);
								}
							}
							else {
								plugin.fnUpdate( settings, redraw );
							}
						},
						"sName": "pagination"
					} );
				}
			
				return node;
			}
			
			
			/**
			 * Alter the display settings to change the page
			 *  @param {object} settings DataTables settings object
			 *  @param {string|int} action Paging action to take: "first", "previous",
			 *    "next" or "last" or page number to jump to (integer)
			 *  @param [bool] redraw Automatically draw the update or not
			 *  @returns {bool} true page has changed, false - no change
			 *  @memberof DataTable#oApi
			 */
			function _fnPageChange ( settings, action, redraw )
			{
				var
					start     = settings._iDisplayStart,
					len       = settings._iDisplayLength,
					records   = settings.fnRecordsDisplay();
			
				if ( records === 0 || len === -1 )
				{
					start = 0;
				}
				else if ( typeof action === "number" )
				{
					start = action * len;
			
					if ( start > records )
					{
						start = 0;
					}
				}
				else if ( action == "first" )
				{
					start = 0;
				}
				else if ( action == "previous" )
				{
					start = len >= 0 ?
						start - len :
						0;
			
					if ( start < 0 )
					{
					  start = 0;
					}
				}
				else if ( action == "next" )
				{
					if ( start + len < records )
					{
						start += len;
					}
				}
				else if ( action == "last" )
				{
					start = Math.floor( (records-1) / len) * len;
				}
				else
				{
					_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
				}
			
				var changed = settings._iDisplayStart !== start;
				settings._iDisplayStart = start;
			
				if ( changed ) {
					_fnCallbackFire( settings, null, 'page', [settings] );
			
					if ( redraw ) {
						_fnDraw( settings );
					}
				}
			
				return changed;
			}
			
			
			
			/**
			 * Generate the node required for the processing node
			 *  @param {object} settings dataTables settings object
			 *  @returns {node} Processing element
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlProcessing ( settings )
			{
				return $('<div/>', {
						'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
						'class': settings.oClasses.sProcessing
					} )
					.html( settings.oLanguage.sProcessing )
					.insertBefore( settings.nTable )[0];
			}
			
			
			/**
			 * Display or hide the processing indicator
			 *  @param {object} settings dataTables settings object
			 *  @param {bool} show Show the processing indicator (true) or not (false)
			 *  @memberof DataTable#oApi
			 */
			function _fnProcessingDisplay ( settings, show )
			{
				if ( settings.oFeatures.bProcessing ) {
					$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
				}
			
				_fnCallbackFire( settings, null, 'processing', [settings, show] );
			}
			
			/**
			 * Add any control elements for the table - specifically scrolling
			 *  @param {object} settings dataTables settings object
			 *  @returns {node} Node to add to the DOM
			 *  @memberof DataTable#oApi
			 */
			function _fnFeatureHtmlTable ( settings )
			{
				var table = $(settings.nTable);
			
				// Add the ARIA grid role to the table
				table.attr( 'role', 'grid' );
			
				// Scrolling from here on in
				var scroll = settings.oScroll;
			
				if ( scroll.sX === '' && scroll.sY === '' ) {
					return settings.nTable;
				}
			
				var scrollX = scroll.sX;
				var scrollY = scroll.sY;
				var classes = settings.oClasses;
				var caption = table.children('caption');
				var captionSide = caption.length ? caption[0]._captionSide : null;
				var headerClone = $( table[0].cloneNode(false) );
				var footerClone = $( table[0].cloneNode(false) );
				var footer = table.children('tfoot');
				var _div = '<div/>';
				var size = function ( s ) {
					return !s ? null : _fnStringToCss( s );
				};
			
				// This is fairly messy, but with x scrolling enabled, if the table has a
				// width attribute, regardless of any width applied using the column width
				// options, the browser will shrink or grow the table as needed to fit into
				// that 100%. That would make the width options useless. So we remove it.
				// This is okay, under the assumption that width:100% is applied to the
				// table in CSS (it is in the default stylesheet) which will set the table
				// width as appropriate (the attribute and css behave differently...)
				if ( scroll.sX && table.attr('width') === '100%' ) {
					table.removeAttr('width');
				}
			
				if ( ! footer.length ) {
					footer = null;
				}
			
				/*
				 * The HTML structure that we want to generate in this function is:
				 *  div - scroller
				 *    div - scroll head
				 *      div - scroll head inner
				 *        table - scroll head table
				 *          thead - thead
				 *    div - scroll body
				 *      table - table (master table)
				 *        thead - thead clone for sizing
				 *        tbody - tbody
				 *    div - scroll foot
				 *      div - scroll foot inner
				 *        table - scroll foot table
				 *          tfoot - tfoot
				 */
				var scroller = $( _div, { 'class': classes.sScrollWrapper } )
					.append(
						$(_div, { 'class': classes.sScrollHead } )
							.css( {
								overflow: 'hidden',
								position: 'relative',
								border: 0,
								width: scrollX ? size(scrollX) : '100%'
							} )
							.append(
								$(_div, { 'class': classes.sScrollHeadInner } )
									.css( {
										'box-sizing': 'content-box',
										width: scroll.sXInner || '100%'
									} )
									.append(
										headerClone
											.removeAttr('id')
											.css( 'margin-left', 0 )
											.append( captionSide === 'top' ? caption : null )
											.append(
												table.children('thead')
											)
									)
							)
					)
					.append(
						$(_div, { 'class': classes.sScrollBody } )
							.css( {
								position: 'relative',
								overflow: 'auto',
								width: size( scrollX )
							} )
							.append( table )
					);
			
				if ( footer ) {
					scroller.append(
						$(_div, { 'class': classes.sScrollFoot } )
							.css( {
								overflow: 'hidden',
								border: 0,
								width: scrollX ? size(scrollX) : '100%'
							} )
							.append(
								$(_div, { 'class': classes.sScrollFootInner } )
									.append(
										footerClone
											.removeAttr('id')
											.css( 'margin-left', 0 )
											.append( captionSide === 'bottom' ? caption : null )
											.append(
												table.children('tfoot')
											)
									)
							)
					);
				}
			
				var children = scroller.children();
				var scrollHead = children[0];
				var scrollBody = children[1];
				var scrollFoot = footer ? children[2] : null;
			
				// When the body is scrolled, then we also want to scroll the headers
				if ( scrollX ) {
					$(scrollBody).on( 'scroll.DT', function (e) {
						var scrollLeft = this.scrollLeft;
			
						scrollHead.scrollLeft = scrollLeft;
			
						if ( footer ) {
							scrollFoot.scrollLeft = scrollLeft;
						}
					} );
				}
			
				$(scrollBody).css(
					scrollY && scroll.bCollapse ? 'max-height' : 'height', 
					scrollY
				);
			
				settings.nScrollHead = scrollHead;
				settings.nScrollBody = scrollBody;
				settings.nScrollFoot = scrollFoot;
			
				// On redraw - align columns
				settings.aoDrawCallback.push( {
					"fn": _fnScrollDraw,
					"sName": "scrolling"
				} );
			
				return scroller[0];
			}
			
			
			
			/**
			 * Update the header, footer and body tables for resizing - i.e. column
			 * alignment.
			 *
			 * Welcome to the most horrible function DataTables. The process that this
			 * function follows is basically:
			 *   1. Re-create the table inside the scrolling div
			 *   2. Take live measurements from the DOM
			 *   3. Apply the measurements to align the columns
			 *   4. Clean up
			 *
			 *  @param {object} settings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnScrollDraw ( settings )
			{
				// Given that this is such a monster function, a lot of variables are use
				// to try and keep the minimised size as small as possible
				var
					scroll         = settings.oScroll,
					scrollX        = scroll.sX,
					scrollXInner   = scroll.sXInner,
					scrollY        = scroll.sY,
					barWidth       = scroll.iBarWidth,
					divHeader      = $(settings.nScrollHead),
					divHeaderStyle = divHeader[0].style,
					divHeaderInner = divHeader.children('div'),
					divHeaderInnerStyle = divHeaderInner[0].style,
					divHeaderTable = divHeaderInner.children('table'),
					divBodyEl      = settings.nScrollBody,
					divBody        = $(divBodyEl),
					divBodyStyle   = divBodyEl.style,
					divFooter      = $(settings.nScrollFoot),
					divFooterInner = divFooter.children('div'),
					divFooterTable = divFooterInner.children('table'),
					header         = $(settings.nTHead),
					table          = $(settings.nTable),
					tableEl        = table[0],
					tableStyle     = tableEl.style,
					footer         = settings.nTFoot ? $(settings.nTFoot) : null,
					browser        = settings.oBrowser,
					ie67           = browser.bScrollOversize,
					headerTrgEls, footerTrgEls,
					headerSrcEls, footerSrcEls,
					headerCopy, footerCopy,
					headerWidths=[], footerWidths=[],
					headerContent=[],
					idx, correction, sanityWidth,
					zeroOut = function(nSizer) {
						var style = nSizer.style;
						style.paddingTop = "0";
						style.paddingBottom = "0";
						style.borderTopWidth = "0";
						style.borderBottomWidth = "0";
						style.height = 0;
					};
			
				/*
				 * 1. Re-create the table inside the scrolling div
				 */
			
				// Remove the old minimised thead and tfoot elements in the inner table
				table.children('thead, tfoot').remove();
			
				// Clone the current header and footer elements and then place it into the inner table
				headerCopy = header.clone().prependTo( table );
				headerTrgEls = header.find('tr'); // original header is in its own table
				headerSrcEls = headerCopy.find('tr');
				headerCopy.find('th, td').removeAttr('tabindex');
			
				if ( footer ) {
					footerCopy = footer.clone().prependTo( table );
					footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
					footerSrcEls = footerCopy.find('tr');
				}
			
			
				/*
				 * 2. Take live measurements from the DOM - do not alter the DOM itself!
				 */
			
				// Remove old sizing and apply the calculated column widths
				// Get the unique column headers in the newly created (cloned) header. We want to apply the
				// calculated sizes to this header
				if ( ! scrollX )
				{
					divBodyStyle.width = '100%';
					divHeader[0].style.width = '100%';
				}
			
				$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
					idx = _fnVisibleToColumnIndex( settings, i );
					el.style.width = settings.aoColumns[idx].sWidth;
				} );
			
				if ( footer ) {
					_fnApplyToChildren( function(n) {
						n.style.width = "";
					}, footerSrcEls );
				}
			
				// Size the table as a whole
				sanityWidth = table.outerWidth();
				if ( scrollX === "" ) {
					// No x scrolling
					tableStyle.width = "100%";
			
					// IE7 will make the width of the table when 100% include the scrollbar
					// - which is shouldn't. When there is a scrollbar we need to take this
					// into account.
					if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
						divBody.css('overflow-y') == "scroll")
					) {
						tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
					}
			
					// Recalculate the sanity width
					sanityWidth = table.outerWidth();
				}
				else if ( scrollXInner !== "" ) {
					// legacy x scroll inner has been given - use it
					tableStyle.width = _fnStringToCss(scrollXInner);
			
					// Recalculate the sanity width
					sanityWidth = table.outerWidth();
				}
			
				// Hidden header should have zero height, so remove padding and borders. Then
				// set the width based on the real headers
			
				// Apply all styles in one pass
				_fnApplyToChildren( zeroOut, headerSrcEls );
			
				// Read all widths in next pass
				_fnApplyToChildren( function(nSizer) {
					headerContent.push( nSizer.innerHTML );
					headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
				}, headerSrcEls );
			
				// Apply all widths in final pass
				_fnApplyToChildren( function(nToSize, i) {
					nToSize.style.width = headerWidths[i];
				}, headerTrgEls );
			
				$(headerSrcEls).height(0);
			
				/* Same again with the footer if we have one */
				if ( footer )
				{
					_fnApplyToChildren( zeroOut, footerSrcEls );
			
					_fnApplyToChildren( function(nSizer) {
						footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
					}, footerSrcEls );
			
					_fnApplyToChildren( function(nToSize, i) {
						nToSize.style.width = footerWidths[i];
					}, footerTrgEls );
			
					$(footerSrcEls).height(0);
				}
			
			
				/*
				 * 3. Apply the measurements
				 */
			
				// "Hide" the header and footer that we used for the sizing. We need to keep
				// the content of the cell so that the width applied to the header and body
				// both match, but we want to hide it completely. We want to also fix their
				// width to what they currently are
				_fnApplyToChildren( function(nSizer, i) {
					nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+headerContent[i]+'</div>';
					nSizer.style.width = headerWidths[i];
				}, headerSrcEls );
			
				if ( footer )
				{
					_fnApplyToChildren( function(nSizer, i) {
						nSizer.innerHTML = "";
						nSizer.style.width = footerWidths[i];
					}, footerSrcEls );
				}
			
				// Sanity check that the table is of a sensible width. If not then we are going to get
				// misalignment - try to prevent this by not allowing the table to shrink below its min width
				if ( table.outerWidth() < sanityWidth )
				{
					// The min width depends upon if we have a vertical scrollbar visible or not */
					correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
						divBody.css('overflow-y') == "scroll")) ?
							sanityWidth+barWidth :
							sanityWidth;
			
					// IE6/7 are a law unto themselves...
					if ( ie67 && (divBodyEl.scrollHeight >
						divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
					) {
						tableStyle.width = _fnStringToCss( correction-barWidth );
					}
			
					// And give the user a warning that we've stopped the table getting too small
					if ( scrollX === "" || scrollXInner !== "" ) {
						_fnLog( settings, 1, 'Possible column misalignment', 6 );
					}
				}
				else
				{
					correction = '100%';
				}
			
				// Apply to the container elements
				divBodyStyle.width = _fnStringToCss( correction );
				divHeaderStyle.width = _fnStringToCss( correction );
			
				if ( footer ) {
					settings.nScrollFoot.style.width = _fnStringToCss( correction );
				}
			
			
				/*
				 * 4. Clean up
				 */
				if ( ! scrollY ) {
					/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
					 * the scrollbar height from the visible display, rather than adding it on. We need to
					 * set the height in order to sort this. Don't want to do it in any other browsers.
					 */
					if ( ie67 ) {
						divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
					}
				}
			
				/* Finally set the width's of the header and footer tables */
				var iOuterWidth = table.outerWidth();
				divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
				divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
			
				// Figure out if there are scrollbar present - if so then we need a the header and footer to
				// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
				var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
				var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
				divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
			
				if ( footer ) {
					divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
					divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
					divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
				}
			
				/* Adjust the position of the header in case we loose the y-scrollbar */
				divBody.scroll();
			
				// If sorting or filtering has occurred, jump the scrolling back to the top
				// only if we aren't holding the position
				if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
					divBodyEl.scrollTop = 0;
				}
			}
			
			
			
			/**
			 * Apply a given function to the display child nodes of an element array (typically
			 * TD children of TR rows
			 *  @param {function} fn Method to apply to the objects
			 *  @param array {nodes} an1 List of elements to look through for display children
			 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
			 *  @memberof DataTable#oApi
			 */
			function _fnApplyToChildren( fn, an1, an2 )
			{
				var index=0, i=0, iLen=an1.length;
				var nNode1, nNode2;
			
				while ( i < iLen ) {
					nNode1 = an1[i].firstChild;
					nNode2 = an2 ? an2[i].firstChild : null;
			
					while ( nNode1 ) {
						if ( nNode1.nodeType === 1 ) {
							if ( an2 ) {
								fn( nNode1, nNode2, index );
							}
							else {
								fn( nNode1, index );
							}
			
							index++;
						}
			
						nNode1 = nNode1.nextSibling;
						nNode2 = an2 ? nNode2.nextSibling : null;
					}
			
					i++;
				}
			}
			
			
			
			var __re_html_remove = /<.*?>/g;
			
			
			/**
			 * Calculate the width of columns for the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnCalculateColumnWidths ( oSettings )
			{
				var
					table = oSettings.nTable,
					columns = oSettings.aoColumns,
					scroll = oSettings.oScroll,
					scrollY = scroll.sY,
					scrollX = scroll.sX,
					scrollXInner = scroll.sXInner,
					columnCount = columns.length,
					visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
					headerCells = $('th', oSettings.nTHead),
					tableWidthAttr = table.getAttribute('width'), // from DOM element
					tableContainer = table.parentNode,
					userInputs = false,
					i, column, columnIdx, width, outerWidth,
					browser = oSettings.oBrowser,
					ie67 = browser.bScrollOversize;
			
				var styleWidth = table.style.width;
				if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
					tableWidthAttr = styleWidth;
				}
			
				/* Convert any user input sizes into pixel sizes */
				for ( i=0 ; i<visibleColumns.length ; i++ ) {
					column = columns[ visibleColumns[i] ];
			
					if ( column.sWidth !== null ) {
						column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );
			
						userInputs = true;
					}
				}
			
				/* If the number of columns in the DOM equals the number that we have to
				 * process in DataTables, then we can use the offsets that are created by
				 * the web- browser. No custom sizes can be set in order for this to happen,
				 * nor scrolling used
				 */
				if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
				     columnCount == _fnVisbleColumns( oSettings ) &&
				     columnCount == headerCells.length
				) {
					for ( i=0 ; i<columnCount ; i++ ) {
						var colIdx = _fnVisibleToColumnIndex( oSettings, i );
			
						if ( colIdx ) {
							columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
						}
					}
				}
				else
				{
					// Otherwise construct a single row, worst case, table with the widest
					// node in the data, assign any user defined widths, then insert it into
					// the DOM and allow the browser to do all the hard work of calculating
					// table widths
					var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
						.css( 'visibility', 'hidden' )
						.removeAttr( 'id' );
			
					// Clean up the table body
					tmpTable.find('tbody tr').remove();
					var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );
			
					// Clone the table header and footer - we can't use the header / footer
					// from the cloned table, since if scrolling is active, the table's
					// real header and footer are contained in different table tags
					tmpTable.find('thead, tfoot').remove();
					tmpTable
						.append( $(oSettings.nTHead).clone() )
						.append( $(oSettings.nTFoot).clone() );
			
					// Remove any assigned widths from the footer (from scrolling)
					tmpTable.find('tfoot th, tfoot td').css('width', '');
			
					// Apply custom sizing to the cloned header
					headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
			
					for ( i=0 ; i<visibleColumns.length ; i++ ) {
						column = columns[ visibleColumns[i] ];
			
						headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
							_fnStringToCss( column.sWidthOrig ) :
							'';
					}
			
					// Find the widest cell for each column and put it into the table
					if ( oSettings.aoData.length ) {
						for ( i=0 ; i<visibleColumns.length ; i++ ) {
							columnIdx = visibleColumns[i];
							column = columns[ columnIdx ];
			
							$( _fnGetWidestNode( oSettings, columnIdx ) )
								.clone( false )
								.append( column.sContentPadding )
								.appendTo( tr );
						}
					}
			
					// Table has been built, attach to the document so we can work with it.
					// A holding element is used, positioned at the top of the container
					// with minimal height, so it has no effect on if the container scrolls
					// or not. Otherwise it might trigger scrolling when it actually isn't
					// needed
					var holder = $('<div/>').css( scrollX || scrollY ?
							{
								position: 'absolute',
								top: 0,
								left: 0,
								height: 1,
								right: 0,
								overflow: 'hidden'
							} :
							{}
						)
						.append( tmpTable )
						.appendTo( tableContainer );
			
					// When scrolling (X or Y) we want to set the width of the table as 
					// appropriate. However, when not scrolling leave the table width as it
					// is. This results in slightly different, but I think correct behaviour
					if ( scrollX && scrollXInner ) {
						tmpTable.width( scrollXInner );
					}
					else if ( scrollX ) {
						tmpTable.css( 'width', 'auto' );
			
						if ( tmpTable.width() < tableContainer.clientWidth ) {
							tmpTable.width( tableContainer.clientWidth );
						}
					}
					else if ( scrollY ) {
						tmpTable.width( tableContainer.clientWidth );
					}
					else if ( tableWidthAttr ) {
						tmpTable.width( tableWidthAttr );
					}
			
					// Browsers need a bit of a hand when a width is assigned to any columns
					// when x-scrolling as they tend to collapse the table to the min-width,
					// even if we sent the column widths. So we need to keep track of what
					// the table width should be by summing the user given values, and the
					// automatic values
					if ( scrollX )
					{
						var total = 0;
			
						for ( i=0 ; i<visibleColumns.length ; i++ ) {
							column = columns[ visibleColumns[i] ];
			
							// Much prefer to use getBoundingClientRect due to its sub-pixel
							// resolution, but IE8- do not support the width property.
							outerWidth = browser.bBounding ?
								headerCells[i].getBoundingClientRect().width :
								$(headerCells[i]).outerWidth();
			
							total += column.sWidthOrig === null ?
								outerWidth :
								parseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();
						}
			
						tmpTable.width( _fnStringToCss( total ) );
						table.style.width = _fnStringToCss( total );
					}
			
					// Get the width of each column in the constructed table
					for ( i=0 ; i<visibleColumns.length ; i++ ) {
						column = columns[ visibleColumns[i] ];
						width = $(headerCells[i]).width();
			
						if ( width ) {
							column.sWidth = _fnStringToCss( width );
						}
					}
			
					table.style.width = _fnStringToCss( tmpTable.css('width') );
			
					// Finished with the table - ditch it
					holder.remove();
				}
			
				// If there is a width attr, we want to attach an event listener which
				// allows the table sizing to automatically adjust when the window is
				// resized. Use the width attr rather than CSS, since we can't know if the
				// CSS is a relative value or absolute - DOM read is always px.
				if ( tableWidthAttr ) {
					table.style.width = _fnStringToCss( tableWidthAttr );
				}
			
				if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
					var bindResize = function () {
						$(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
							_fnAdjustColumnSizing( oSettings );
						} ) );
					};
			
					// IE6/7 will crash if we bind a resize event handler on page load.
					// To be removed in 1.11 which drops IE6/7 support
					if ( ie67 ) {
						setTimeout( bindResize, 1000 );
					}
					else {
						bindResize();
					}
			
					oSettings._reszEvt = true;
				}
			}
			
			
			/**
			 * Throttle the calls to a function. Arguments and context are maintained for
			 * the throttled function
			 *  @param {function} fn Function to be called
			 *  @param {int} [freq=200] call frequency in mS
			 *  @returns {function} wrapped function
			 *  @memberof DataTable#oApi
			 */
			function _fnThrottle( fn, freq ) {
				var
					frequency = freq !== undefined ? freq : 200,
					last,
					timer;
			
				return function () {
					var
						that = this,
						now  = +new Date(),
						args = arguments;
			
					if ( last && now < last + frequency ) {
						clearTimeout( timer );
			
						timer = setTimeout( function () {
							last = undefined;
							fn.apply( that, args );
						}, frequency );
					}
					else {
						last = now;
						fn.apply( that, args );
					}
				};
			}
			
			
			/**
			 * Convert a CSS unit width to pixels (e.g. 2em)
			 *  @param {string} width width to be converted
			 *  @param {node} parent parent to get the with for (required for relative widths) - optional
			 *  @returns {int} width in pixels
			 *  @memberof DataTable#oApi
			 */
			function _fnConvertToWidth ( width, parent )
			{
				if ( ! width ) {
					return 0;
				}
			
				var n = $('<div/>')
					.css( 'width', _fnStringToCss( width ) )
					.appendTo( parent || document.body );
			
				var val = n[0].offsetWidth;
				n.remove();
			
				return val;
			}
			
			
			/**
			 * Get the widest node
			 *  @param {object} settings dataTables settings object
			 *  @param {int} colIdx column of interest
			 *  @returns {node} widest table node
			 *  @memberof DataTable#oApi
			 */
			function _fnGetWidestNode( settings, colIdx )
			{
				var idx = _fnGetMaxLenString( settings, colIdx );
				if ( idx < 0 ) {
					return null;
				}
			
				var data = settings.aoData[ idx ];
				return ! data.nTr ? // Might not have been created when deferred rendering
					$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
					data.anCells[ colIdx ];
			}
			
			
			/**
			 * Get the maximum strlen for each data column
			 *  @param {object} settings dataTables settings object
			 *  @param {int} colIdx column of interest
			 *  @returns {string} max string length for each column
			 *  @memberof DataTable#oApi
			 */
			function _fnGetMaxLenString( settings, colIdx )
			{
				var s, max=-1, maxIdx = -1;
			
				for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
					s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
					s = s.replace( __re_html_remove, '' );
			
					if ( s.length > max ) {
						max = s.length;
						maxIdx = i;
					}
				}
			
				return maxIdx;
			}
			
			
			/**
			 * Append a CSS unit (only if required) to a string
			 *  @param {string} value to css-ify
			 *  @returns {string} value with css unit
			 *  @memberof DataTable#oApi
			 */
			function _fnStringToCss( s )
			{
				if ( s === null ) {
					return '0px';
				}
			
				if ( typeof s == 'number' ) {
					return s < 0 ?
						'0px' :
						s+'px';
				}
			
				// Check it has a unit character already
				return s.match(/\d$/) ?
					s+'px' :
					s;
			}
			
			
			
			function _fnSortFlatten ( settings )
			{
				var
					i, iLen, k, kLen,
					aSort = [],
					aiOrig = [],
					aoColumns = settings.aoColumns,
					aDataSort, iCol, sType, srcCol,
					fixed = settings.aaSortingFixed,
					fixedObj = $.isPlainObject( fixed ),
					nestedSort = [],
					add = function ( a ) {
						if ( a.length && ! $.isArray( a[0] ) ) {
							// 1D array
							nestedSort.push( a );
						}
						else {
							// 2D array
							$.merge( nestedSort, a );
						}
					};
			
				// Build the sort array, with pre-fix and post-fix options if they have been
				// specified
				if ( $.isArray( fixed ) ) {
					add( fixed );
				}
			
				if ( fixedObj && fixed.pre ) {
					add( fixed.pre );
				}
			
				add( settings.aaSorting );
			
				if (fixedObj && fixed.post ) {
					add( fixed.post );
				}
			
				for ( i=0 ; i<nestedSort.length ; i++ )
				{
					srcCol = nestedSort[i][0];
					aDataSort = aoColumns[ srcCol ].aDataSort;
			
					for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
					{
						iCol = aDataSort[k];
						sType = aoColumns[ iCol ].sType || 'string';
			
						if ( nestedSort[i]._idx === undefined ) {
							nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
						}
			
						aSort.push( {
							src:       srcCol,
							col:       iCol,
							dir:       nestedSort[i][1],
							index:     nestedSort[i]._idx,
							type:      sType,
							formatter: DataTable.ext.type.order[ sType+"-pre" ]
						} );
					}
				}
			
				return aSort;
			}
			
			/**
			 * Change the order of the table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 *  @todo This really needs split up!
			 */
			function _fnSort ( oSettings )
			{
				var
					i, ien, iLen, j, jLen, k, kLen,
					sDataType, nTh,
					aiOrig = [],
					oExtSort = DataTable.ext.type.order,
					aoData = oSettings.aoData,
					aoColumns = oSettings.aoColumns,
					aDataSort, data, iCol, sType, oSort,
					formatters = 0,
					sortCol,
					displayMaster = oSettings.aiDisplayMaster,
					aSort;
			
				// Resolve any column types that are unknown due to addition or invalidation
				// @todo Can this be moved into a 'data-ready' handler which is called when
				//   data is going to be used in the table?
				_fnColumnTypes( oSettings );
			
				aSort = _fnSortFlatten( oSettings );
			
				for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
					sortCol = aSort[i];
			
					// Track if we can use the fast sort algorithm
					if ( sortCol.formatter ) {
						formatters++;
					}
			
					// Load the data needed for the sort, for each cell
					_fnSortData( oSettings, sortCol.col );
				}
			
				/* No sorting required if server-side or no sorting array */
				if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
				{
					// Create a value - key array of the current row positions such that we can use their
					// current position during the sort, if values match, in order to perform stable sorting
					for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
						aiOrig[ displayMaster[i] ] = i;
					}
			
					/* Do the sort - here we want multi-column sorting based on a given data source (column)
					 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
					 * follow on it's own, but this is what we want (example two column sorting):
					 *  fnLocalSorting = function(a,b){
					 *    var iTest;
					 *    iTest = oSort['string-asc']('data11', 'data12');
					 *      if (iTest !== 0)
					 *        return iTest;
					 *    iTest = oSort['numeric-desc']('data21', 'data22');
					 *    if (iTest !== 0)
					 *      return iTest;
					 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
					 *  }
					 * Basically we have a test for each sorting column, if the data in that column is equal,
					 * test the next column. If all columns match, then we use a numeric sort on the row
					 * positions in the original data array to provide a stable sort.
					 *
					 * Note - I know it seems excessive to have two sorting methods, but the first is around
					 * 15% faster, so the second is only maintained for backwards compatibility with sorting
					 * methods which do not have a pre-sort formatting function.
					 */
					if ( formatters === aSort.length ) {
						// All sort types have formatting functions
						displayMaster.sort( function ( a, b ) {
							var
								x, y, k, test, sort,
								len=aSort.length,
								dataA = aoData[a]._aSortData,
								dataB = aoData[b]._aSortData;
			
							for ( k=0 ; k<len ; k++ ) {
								sort = aSort[k];
			
								x = dataA[ sort.col ];
								y = dataB[ sort.col ];
			
								test = x<y ? -1 : x>y ? 1 : 0;
								if ( test !== 0 ) {
									return sort.dir === 'asc' ? test : -test;
								}
							}
			
							x = aiOrig[a];
							y = aiOrig[b];
							return x<y ? -1 : x>y ? 1 : 0;
						} );
					}
					else {
						// Depreciated - remove in 1.11 (providing a plug-in option)
						// Not all sort types have formatting methods, so we have to call their sorting
						// methods.
						displayMaster.sort( function ( a, b ) {
							var
								x, y, k, l, test, sort, fn,
								len=aSort.length,
								dataA = aoData[a]._aSortData,
								dataB = aoData[b]._aSortData;
			
							for ( k=0 ; k<len ; k++ ) {
								sort = aSort[k];
			
								x = dataA[ sort.col ];
								y = dataB[ sort.col ];
			
								fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
								test = fn( x, y );
								if ( test !== 0 ) {
									return test;
								}
							}
			
							x = aiOrig[a];
							y = aiOrig[b];
							return x<y ? -1 : x>y ? 1 : 0;
						} );
					}
				}
			
				/* Tell the draw function that we have sorted the data */
				oSettings.bSorted = true;
			}
			
			
			function _fnSortAria ( settings )
			{
				var label;
				var nextSort;
				var columns = settings.aoColumns;
				var aSort = _fnSortFlatten( settings );
				var oAria = settings.oLanguage.oAria;
			
				// ARIA attributes - need to loop all columns, to update all (removing old
				// attributes as needed)
				for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
				{
					var col = columns[i];
					var asSorting = col.asSorting;
					var sTitle = col.sTitle.replace( /<.*?>/g, "" );
					var th = col.nTh;
			
					// IE7 is throwing an error when setting these properties with jQuery's
					// attr() and removeAttr() methods...
					th.removeAttribute('aria-sort');
			
					/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
					if ( col.bSortable ) {
						if ( aSort.length > 0 && aSort[0].col == i ) {
							th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
							nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
						}
						else {
							nextSort = asSorting[0];
						}
			
						label = sTitle + ( nextSort === "asc" ?
							oAria.sSortAscending :
							oAria.sSortDescending
						);
					}
					else {
						label = sTitle;
					}
			
					th.setAttribute('aria-label', label);
				}
			}
			
			
			/**
			 * Function to run on user sort request
			 *  @param {object} settings dataTables settings object
			 *  @param {node} attachTo node to attach the handler to
			 *  @param {int} colIdx column sorting index
			 *  @param {boolean} [append=false] Append the requested sort to the existing
			 *    sort if true (i.e. multi-column sort)
			 *  @param {function} [callback] callback function
			 *  @memberof DataTable#oApi
			 */
			function _fnSortListener ( settings, colIdx, append, callback )
			{
				var col = settings.aoColumns[ colIdx ];
				var sorting = settings.aaSorting;
				var asSorting = col.asSorting;
				var nextSortIdx;
				var next = function ( a, overflow ) {
					var idx = a._idx;
					if ( idx === undefined ) {
						idx = $.inArray( a[1], asSorting );
					}
			
					return idx+1 < asSorting.length ?
						idx+1 :
						overflow ?
							null :
							0;
				};
			
				// Convert to 2D array if needed
				if ( typeof sorting[0] === 'number' ) {
					sorting = settings.aaSorting = [ sorting ];
				}
			
				// If appending the sort then we are multi-column sorting
				if ( append && settings.oFeatures.bSortMulti ) {
					// Are we already doing some kind of sort on this column?
					var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
			
					if ( sortIdx !== -1 ) {
						// Yes, modify the sort
						nextSortIdx = next( sorting[sortIdx], true );
			
						if ( nextSortIdx === null && sorting.length === 1 ) {
							nextSortIdx = 0; // can't remove sorting completely
						}
			
						if ( nextSortIdx === null ) {
							sorting.splice( sortIdx, 1 );
						}
						else {
							sorting[sortIdx][1] = asSorting[ nextSortIdx ];
							sorting[sortIdx]._idx = nextSortIdx;
						}
					}
					else {
						// No sort on this column yet
						sorting.push( [ colIdx, asSorting[0], 0 ] );
						sorting[sorting.length-1]._idx = 0;
					}
				}
				else if ( sorting.length && sorting[0][0] == colIdx ) {
					// Single column - already sorting on this column, modify the sort
					nextSortIdx = next( sorting[0] );
			
					sorting.length = 1;
					sorting[0][1] = asSorting[ nextSortIdx ];
					sorting[0]._idx = nextSortIdx;
				}
				else {
					// Single column - sort only on this column
					sorting.length = 0;
					sorting.push( [ colIdx, asSorting[0] ] );
					sorting[0]._idx = 0;
				}
			
				// Run the sort by calling a full redraw
				_fnReDraw( settings );
			
				// callback used for async user interaction
				if ( typeof callback == 'function' ) {
					callback( settings );
				}
			}
			
			
			/**
			 * Attach a sort handler (click) to a node
			 *  @param {object} settings dataTables settings object
			 *  @param {node} attachTo node to attach the handler to
			 *  @param {int} colIdx column sorting index
			 *  @param {function} [callback] callback function
			 *  @memberof DataTable#oApi
			 */
			function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
			{
				var col = settings.aoColumns[ colIdx ];
			
				_fnBindAction( attachTo, {}, function (e) {
					/* If the column is not sortable - don't to anything */
					if ( col.bSortable === false ) {
						return;
					}
			
					// If processing is enabled use a timeout to allow the processing
					// display to be shown - otherwise to it synchronously
					if ( settings.oFeatures.bProcessing ) {
						_fnProcessingDisplay( settings, true );
			
						setTimeout( function() {
							_fnSortListener( settings, colIdx, e.shiftKey, callback );
			
							// In server-side processing, the draw callback will remove the
							// processing display
							if ( _fnDataSource( settings ) !== 'ssp' ) {
								_fnProcessingDisplay( settings, false );
							}
						}, 0 );
					}
					else {
						_fnSortListener( settings, colIdx, e.shiftKey, callback );
					}
				} );
			}
			
			
			/**
			 * Set the sorting classes on table's body, Note: it is safe to call this function
			 * when bSort and bSortClasses are false
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnSortingClasses( settings )
			{
				var oldSort = settings.aLastSort;
				var sortClass = settings.oClasses.sSortColumn;
				var sort = _fnSortFlatten( settings );
				var features = settings.oFeatures;
				var i, ien, colIdx;
			
				if ( features.bSort && features.bSortClasses ) {
					// Remove old sorting classes
					for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
						colIdx = oldSort[i].src;
			
						// Remove column sorting
						$( _pluck( settings.aoData, 'anCells', colIdx ) )
							.removeClass( sortClass + (i<2 ? i+1 : 3) );
					}
			
					// Add new column sorting
					for ( i=0, ien=sort.length ; i<ien ; i++ ) {
						colIdx = sort[i].src;
			
						$( _pluck( settings.aoData, 'anCells', colIdx ) )
							.addClass( sortClass + (i<2 ? i+1 : 3) );
					}
				}
			
				settings.aLastSort = sort;
			}
			
			
			// Get the data to sort a column, be it from cache, fresh (populating the
			// cache), or from a sort formatter
			function _fnSortData( settings, idx )
			{
				// Custom sorting function - provided by the sort data type
				var column = settings.aoColumns[ idx ];
				var customSort = DataTable.ext.order[ column.sSortDataType ];
				var customData;
			
				if ( customSort ) {
					customData = customSort.call( settings.oInstance, settings, idx,
						_fnColumnIndexToVisible( settings, idx )
					);
				}
			
				// Use / populate cache
				var row, cellData;
				var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
			
				for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
					row = settings.aoData[i];
			
					if ( ! row._aSortData ) {
						row._aSortData = [];
					}
			
					if ( ! row._aSortData[idx] || customSort ) {
						cellData = customSort ?
							customData[i] : // If there was a custom sort function, use data from there
							_fnGetCellData( settings, i, idx, 'sort' );
			
						row._aSortData[ idx ] = formatter ?
							formatter( cellData ) :
							cellData;
					}
				}
			}
			
			
			
			/**
			 * Save the state of a table
			 *  @param {object} oSettings dataTables settings object
			 *  @memberof DataTable#oApi
			 */
			function _fnSaveState ( settings )
			{
				if ( !settings.oFeatures.bStateSave || settings.bDestroying )
				{
					return;
				}
			
				/* Store the interesting variables */
				var state = {
					time:    +new Date(),
					start:   settings._iDisplayStart,
					length:  settings._iDisplayLength,
					order:   $.extend( true, [], settings.aaSorting ),
					search:  _fnSearchToCamel( settings.oPreviousSearch ),
					columns: $.map( settings.aoColumns, function ( col, i ) {
						return {
							visible: col.bVisible,
							search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
						};
					} )
				};
			
				_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
			
				settings.oSavedState = state;
				settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
			}
			
			
			/**
			 * Attempt to load a saved table state
			 *  @param {object} oSettings dataTables settings object
			 *  @param {object} oInit DataTables init object so we can override settings
			 *  @memberof DataTable#oApi
			 */
			function _fnLoadState ( settings, oInit )
			{
				var i, ien;
				var columns = settings.aoColumns;
			
				if ( ! settings.oFeatures.bStateSave ) {
					return;
				}
			
				var state = settings.fnStateLoadCallback.call( settings.oInstance, settings );
				if ( ! state || ! state.time ) {
					return;
				}
			
				/* Allow custom and plug-in manipulation functions to alter the saved data set and
				 * cancelling of loading by returning false
				 */
				var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );
				if ( $.inArray( false, abStateLoad ) !== -1 ) {
					return;
				}
			
				/* Reject old data */
				var duration = settings.iStateDuration;
				if ( duration > 0 && state.time < +new Date() - (duration*1000) ) {
					return;
				}
			
				// Number of columns have changed - all bets are off, no restore of settings
				if ( columns.length !== state.columns.length ) {
					return;
				}
			
				// Store the saved state so it might be accessed at any time
				settings.oLoadedState = $.extend( true, {}, state );
			
				// Restore key features - todo - for 1.11 this needs to be done by
				// subscribed events
				if ( state.start !== undefined ) {
					settings._iDisplayStart    = state.start;
					settings.iInitDisplayStart = state.start;
				}
				if ( state.length !== undefined ) {
					settings._iDisplayLength   = state.length;
				}
			
				// Order
				if ( state.order !== undefined ) {
					settings.aaSorting = [];
					$.each( state.order, function ( i, col ) {
						settings.aaSorting.push( col[0] >= columns.length ?
							[ 0, col[1] ] :
							col
						);
					} );
				}
			
				// Search
				if ( state.search !== undefined ) {
					$.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );
				}
			
				// Columns
				for ( i=0, ien=state.columns.length ; i<ien ; i++ ) {
					var col = state.columns[i];
			
					// Visibility
					if ( col.visible !== undefined ) {
						columns[i].bVisible = col.visible;
					}
			
					// Search
					if ( col.search !== undefined ) {
						$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
					}
				}
			
				_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );
			}
			
			
			/**
			 * Return the settings object for a particular table
			 *  @param {node} table table we are using as a dataTable
			 *  @returns {object} Settings object - or null if not found
			 *  @memberof DataTable#oApi
			 */
			function _fnSettingsFromNode ( table )
			{
				var settings = DataTable.settings;
				var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
			
				return idx !== -1 ?
					settings[ idx ] :
					null;
			}
			
			
			/**
			 * Log an error message
			 *  @param {object} settings dataTables settings object
			 *  @param {int} level log error messages, or display them to the user
			 *  @param {string} msg error message
			 *  @param {int} tn Technical note id to get more information about the error.
			 *  @memberof DataTable#oApi
			 */
			function _fnLog( settings, level, msg, tn )
			{
				msg = 'DataTables warning: '+
					(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;
			
				if ( tn ) {
					msg += '. For more information about this error, please see '+
					'http://datatables.net/tn/'+tn;
				}
			
				if ( ! level  ) {
					// Backwards compatibility pre 1.10
					var ext = DataTable.ext;
					var type = ext.sErrMode || ext.errMode;
			
					if ( settings ) {
						_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
					}
			
					if ( type == 'alert' ) {
						alert( msg );
					}
					else if ( type == 'throw' ) {
						throw new Error(msg);
					}
					else if ( typeof type == 'function' ) {
						type( settings, tn, msg );
					}
				}
				else if ( window.console && console.log ) {
					console.log( msg );
				}
			}
			
			
			/**
			 * See if a property is defined on one object, if so assign it to the other object
			 *  @param {object} ret target object
			 *  @param {object} src source object
			 *  @param {string} name property
			 *  @param {string} [mappedName] name to map too - optional, name used if not given
			 *  @memberof DataTable#oApi
			 */
			function _fnMap( ret, src, name, mappedName )
			{
				if ( $.isArray( name ) ) {
					$.each( name, function (i, val) {
						if ( $.isArray( val ) ) {
							_fnMap( ret, src, val[0], val[1] );
						}
						else {
							_fnMap( ret, src, val );
						}
					} );
			
					return;
				}
			
				if ( mappedName === undefined ) {
					mappedName = name;
				}
			
				if ( src[name] !== undefined ) {
					ret[mappedName] = src[name];
				}
			}
			
			
			/**
			 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
			 * shallow copy arrays. The reason we need to do this, is that we don't want to
			 * deep copy array init values (such as aaSorting) since the dev wouldn't be
			 * able to override them, but we do want to deep copy arrays.
			 *  @param {object} out Object to extend
			 *  @param {object} extender Object from which the properties will be applied to
			 *      out
			 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
			 *      independent copy with the exception of the `data` or `aaData` parameters
			 *      if they are present. This is so you can pass in a collection to
			 *      DataTables and have that used as your data source without breaking the
			 *      references
			 *  @returns {object} out Reference, just for convenience - out === the return.
			 *  @memberof DataTable#oApi
			 *  @todo This doesn't take account of arrays inside the deep copied objects.
			 */
			function _fnExtend( out, extender, breakRefs )
			{
				var val;
			
				for ( var prop in extender ) {
					if ( extender.hasOwnProperty(prop) ) {
						val = extender[prop];
			
						if ( $.isPlainObject( val ) ) {
							if ( ! $.isPlainObject( out[prop] ) ) {
								out[prop] = {};
							}
							$.extend( true, out[prop], val );
						}
						else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
							out[prop] = val.slice();
						}
						else {
							out[prop] = val;
						}
					}
				}
			
				return out;
			}
			
			
			/**
			 * Bind an event handers to allow a click or return key to activate the callback.
			 * This is good for accessibility since a return on the keyboard will have the
			 * same effect as a click, if the element has focus.
			 *  @param {element} n Element to bind the action to
			 *  @param {object} oData Data object to pass to the triggered function
			 *  @param {function} fn Callback function for when the event is triggered
			 *  @memberof DataTable#oApi
			 */
			function _fnBindAction( n, oData, fn )
			{
				$(n)
					.bind( 'click.DT', oData, function (e) {
							n.blur(); // Remove focus outline for mouse users
							fn(e);
						} )
					.bind( 'keypress.DT', oData, function (e){
							if ( e.which === 13 ) {
								e.preventDefault();
								fn(e);
							}
						} )
					.bind( 'selectstart.DT', function () {
							/* Take the brutal approach to cancelling text selection */
							return false;
						} );
			}
			
			
			/**
			 * Register a callback function. Easily allows a callback function to be added to
			 * an array store of callback functions that can then all be called together.
			 *  @param {object} oSettings dataTables settings object
			 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
			 *  @param {function} fn Function to be called back
			 *  @param {string} sName Identifying name for the callback (i.e. a label)
			 *  @memberof DataTable#oApi
			 */
			function _fnCallbackReg( oSettings, sStore, fn, sName )
			{
				if ( fn )
				{
					oSettings[sStore].push( {
						"fn": fn,
						"sName": sName
					} );
				}
			}
			
			
			/**
			 * Fire callback functions and trigger events. Note that the loop over the
			 * callback array store is done backwards! Further note that you do not want to
			 * fire off triggers in time sensitive applications (for example cell creation)
			 * as its slow.
			 *  @param {object} settings dataTables settings object
			 *  @param {string} callbackArr Name of the array storage for the callbacks in
			 *      oSettings
			 *  @param {string} eventName Name of the jQuery custom event to trigger. If
			 *      null no trigger is fired
			 *  @param {array} args Array of arguments to pass to the callback function /
			 *      trigger
			 *  @memberof DataTable#oApi
			 */
			function _fnCallbackFire( settings, callbackArr, eventName, args )
			{
				var ret = [];
			
				if ( callbackArr ) {
					ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
						return val.fn.apply( settings.oInstance, args );
					} );
				}
			
				if ( eventName !== null ) {
					var e = $.Event( eventName+'.dt' );
			
					$(settings.nTable).trigger( e, args );
			
					ret.push( e.result );
				}
			
				return ret;
			}
			
			
			function _fnLengthOverflow ( settings )
			{
				var
					start = settings._iDisplayStart,
					end = settings.fnDisplayEnd(),
					len = settings._iDisplayLength;
			
				/* If we have space to show extra rows (backing up from the end point - then do so */
				if ( start >= end )
				{
					start = end - len;
				}
			
				// Keep the start record on the current page
				start -= (start % len);
			
				if ( len === -1 || start < 0 )
				{
					start = 0;
				}
			
				settings._iDisplayStart = start;
			}
			
			
			function _fnRenderer( settings, type )
			{
				var renderer = settings.renderer;
				var host = DataTable.ext.renderer[type];
			
				if ( $.isPlainObject( renderer ) && renderer[type] ) {
					// Specific renderer for this type. If available use it, otherwise use
					// the default.
					return host[renderer[type]] || host._;
				}
				else if ( typeof renderer === 'string' ) {
					// Common renderer - if there is one available for this type use it,
					// otherwise use the default
					return host[renderer] || host._;
				}
			
				// Use the default
				return host._;
			}
			
			
			/**
			 * Detect the data source being used for the table. Used to simplify the code
			 * a little (ajax) and to make it compress a little smaller.
			 *
			 *  @param {object} settings dataTables settings object
			 *  @returns {string} Data source
			 *  @memberof DataTable#oApi
			 */
			function _fnDataSource ( settings )
			{
				if ( settings.oFeatures.bServerSide ) {
					return 'ssp';
				}
				else if ( settings.ajax || settings.sAjaxSource ) {
					return 'ajax';
				}
				return 'dom';
			}
			

			DataTable = function( options )
			{
				/**
				 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
				 * return the resulting jQuery object.
				 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
				 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
				 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
				 *    criterion ("applied") or all TR elements (i.e. no filter).
				 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
				 *    Can be either 'current', whereby the current sorting of the table is used, or
				 *    'original' whereby the original order the data was read into the table is used.
				 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
				 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
				 *    'current' and filter is 'applied', regardless of what they might be given as.
				 *  @returns {object} jQuery object, filtered by the given selector.
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Highlight every second row
				 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
				 *    } );
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Filter to rows with 'Webkit' in them, add a background colour and then
				 *      // remove the filter, thus highlighting the 'Webkit' rows only.
				 *      oTable.fnFilter('Webkit');
				 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
				 *      oTable.fnFilter('');
				 *    } );
				 */
				this.$ = function ( sSelector, oOpts )
				{
					return this.api(true).$( sSelector, oOpts );
				};
				
				
				/**
				 * Almost identical to $ in operation, but in this case returns the data for the matched
				 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
				 * rather than any descendants, so the data can be obtained for the row/cell. If matching
				 * rows are found, the data returned is the original data array/object that was used to
				 * create the row (or a generated array if from a DOM source).
				 *
				 * This method is often useful in-combination with $ where both functions are given the
				 * same parameters and the array indexes will match identically.
				 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
				 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
				 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
				 *    criterion ("applied") or all elements (i.e. no filter).
				 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
				 *    Can be either 'current', whereby the current sorting of the table is used, or
				 *    'original' whereby the original order the data was read into the table is used.
				 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
				 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
				 *    'current' and filter is 'applied', regardless of what they might be given as.
				 *  @returns {array} Data for the matched elements. If any elements, as a result of the
				 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
				 *    entry in the array.
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Get the data from the first row in the table
				 *      var data = oTable._('tr:first');
				 *
				 *      // Do something useful with the data
				 *      alert( "First cell is: "+data[0] );
				 *    } );
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Filter to 'Webkit' and get all data for
				 *      oTable.fnFilter('Webkit');
				 *      var data = oTable._('tr', {"search": "applied"});
				 *
				 *      // Do something with the data
				 *      alert( data.length+" rows matched the search" );
				 *    } );
				 */
				this._ = function ( sSelector, oOpts )
				{
					return this.api(true).rows( sSelector, oOpts ).data();
				};
				
				
				/**
				 * Create a DataTables Api instance, with the currently selected tables for
				 * the Api's context.
				 * @param {boolean} [traditional=false] Set the API instance's context to be
				 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
				 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
				 *   or if all tables captured in the jQuery object should be used.
				 * @return {DataTables.Api}
				 */
				this.api = function ( traditional )
				{
					return traditional ?
						new _Api(
							_fnSettingsFromNode( this[ _ext.iApiIndex ] )
						) :
						new _Api( this );
				};
				
				
				/**
				 * Add a single new row or multiple rows of data to the table. Please note
				 * that this is suitable for client-side processing only - if you are using
				 * server-side processing (i.e. "bServerSide": true), then to add data, you
				 * must add it to the data source, i.e. the server-side, through an Ajax call.
				 *  @param {array|object} data The data to be added to the table. This can be:
				 *    <ul>
				 *      <li>1D array of data - add a single row with the data provided</li>
				 *      <li>2D array of arrays - add multiple rows in a single call</li>
				 *      <li>object - data object when using <i>mData</i></li>
				 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
				 *    </ul>
				 *  @param {bool} [redraw=true] redraw the table or not
				 *  @returns {array} An array of integers, representing the list of indexes in
				 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
				 *    the table.
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    // Global var for counter
				 *    var giCount = 2;
				 *
				 *    $(document).ready(function() {
				 *      $('#example').dataTable();
				 *    } );
				 *
				 *    function fnClickAddRow() {
				 *      $('#example').dataTable().fnAddData( [
				 *        giCount+".1",
				 *        giCount+".2",
				 *        giCount+".3",
				 *        giCount+".4" ]
				 *      );
				 *
				 *      giCount++;
				 *    }
				 */
				this.fnAddData = function( data, redraw )
				{
					var api = this.api( true );
				
					/* Check if we want to add multiple rows or not */
					var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
						api.rows.add( data ) :
						api.row.add( data );
				
					if ( redraw === undefined || redraw ) {
						api.draw();
					}
				
					return rows.flatten().toArray();
				};
				
				
				/**
				 * This function will make DataTables recalculate the column sizes, based on the data
				 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
				 * through the sWidth parameter). This can be useful when the width of the table's
				 * parent element changes (for example a window resize).
				 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable( {
				 *        "sScrollY": "200px",
				 *        "bPaginate": false
				 *      } );
				 *
				 *      $(window).bind('resize', function () {
				 *        oTable.fnAdjustColumnSizing();
				 *      } );
				 *    } );
				 */
				this.fnAdjustColumnSizing = function ( bRedraw )
				{
					var api = this.api( true ).columns.adjust();
					var settings = api.settings()[0];
					var scroll = settings.oScroll;
				
					if ( bRedraw === undefined || bRedraw ) {
						api.draw( false );
					}
					else if ( scroll.sX !== "" || scroll.sY !== "" ) {
						/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
						_fnScrollDraw( settings );
					}
				};
				
				
				/**
				 * Quickly and simply clear a table
				 *  @param {bool} [bRedraw=true] redraw the table or not
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
				 *      oTable.fnClearTable();
				 *    } );
				 */
				this.fnClearTable = function( bRedraw )
				{
					var api = this.api( true ).clear();
				
					if ( bRedraw === undefined || bRedraw ) {
						api.draw();
					}
				};
				
				
				/**
				 * The exact opposite of 'opening' a row, this function will close any rows which
				 * are currently 'open'.
				 *  @param {node} nTr the table row to 'close'
				 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable;
				 *
				 *      // 'open' an information row when a row is clicked on
				 *      $('#example tbody tr').click( function () {
				 *        if ( oTable.fnIsOpen(this) ) {
				 *          oTable.fnClose( this );
				 *        } else {
				 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
				 *        }
				 *      } );
				 *
				 *      oTable = $('#example').dataTable();
				 *    } );
				 */
				this.fnClose = function( nTr )
				{
					this.api( true ).row( nTr ).child.hide();
				};
				
				
				/**
				 * Remove a row for the table
				 *  @param {mixed} target The index of the row from aoData to be deleted, or
				 *    the TR element you want to delete
				 *  @param {function|null} [callBack] Callback function
				 *  @param {bool} [redraw=true] Redraw the table or not
				 *  @returns {array} The row that was deleted
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Immediately remove the first row
				 *      oTable.fnDeleteRow( 0 );
				 *    } );
				 */
				this.fnDeleteRow = function( target, callback, redraw )
				{
					var api = this.api( true );
					var rows = api.rows( target );
					var settings = rows.settings()[0];
					var data = settings.aoData[ rows[0][0] ];
				
					rows.remove();
				
					if ( callback ) {
						callback.call( this, settings, data );
					}
				
					if ( redraw === undefined || redraw ) {
						api.draw();
					}
				
					return data;
				};
				
				
				/**
				 * Restore the table to it's original state in the DOM by removing all of DataTables
				 * enhancements, alterations to the DOM structure of the table and event listeners.
				 *  @param {boolean} [remove=false] Completely remove the table from the DOM
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
				 *      var oTable = $('#example').dataTable();
				 *      oTable.fnDestroy();
				 *    } );
				 */
				this.fnDestroy = function ( remove )
				{
					this.api( true ).destroy( remove );
				};
				
				
				/**
				 * Redraw the table
				 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
				 *      oTable.fnDraw();
				 *    } );
				 */
				this.fnDraw = function( complete )
				{
					// Note that this isn't an exact match to the old call to _fnDraw - it takes
					// into account the new data, but can hold position.
					this.api( true ).draw( complete );
				};
				
				
				/**
				 * Filter the input based on data
				 *  @param {string} sInput String to filter the table on
				 *  @param {int|null} [iColumn] Column to limit filtering to
				 *  @param {bool} [bRegex=false] Treat as regular expression or not
				 *  @param {bool} [bSmart=true] Perform smart filtering or not
				 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
				 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Sometime later - filter...
				 *      oTable.fnFilter( 'test string' );
				 *    } );
				 */
				this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
				{
					var api = this.api( true );
				
					if ( iColumn === null || iColumn === undefined ) {
						api.search( sInput, bRegex, bSmart, bCaseInsensitive );
					}
					else {
						api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
					}
				
					api.draw();
				};
				
				
				/**
				 * Get the data for the whole table, an individual row or an individual cell based on the
				 * provided parameters.
				 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
				 *    a TR node then the data source for the whole row will be returned. If given as a
				 *    TD/TH cell node then iCol will be automatically calculated and the data for the
				 *    cell returned. If given as an integer, then this is treated as the aoData internal
				 *    data index for the row (see fnGetPosition) and the data for that row used.
				 *  @param {int} [col] Optional column index that you want the data of.
				 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
				 *    returned. If mRow is defined, just data for that row, and is iCol is
				 *    defined, only data for the designated cell is returned.
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    // Row data
				 *    $(document).ready(function() {
				 *      oTable = $('#example').dataTable();
				 *
				 *      oTable.$('tr').click( function () {
				 *        var data = oTable.fnGetData( this );
				 *        // ... do something with the array / object of data for the row
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Individual cell data
				 *    $(document).ready(function() {
				 *      oTable = $('#example').dataTable();
				 *
				 *      oTable.$('td').click( function () {
				 *        var sData = oTable.fnGetData( this );
				 *        alert( 'The cell clicked on had the value of '+sData );
				 *      } );
				 *    } );
				 */
				this.fnGetData = function( src, col )
				{
					var api = this.api( true );
				
					if ( src !== undefined ) {
						var type = src.nodeName ? src.nodeName.toLowerCase() : '';
				
						return col !== undefined || type == 'td' || type == 'th' ?
							api.cell( src, col ).data() :
							api.row( src ).data() || null;
					}
				
					return api.data().toArray();
				};
				
				
				/**
				 * Get an array of the TR nodes that are used in the table's body. Note that you will
				 * typically want to use the '$' API method in preference to this as it is more
				 * flexible.
				 *  @param {int} [iRow] Optional row index for the TR element you want
				 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
				 *    in the table's body, or iRow is defined, just the TR element requested.
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Get the nodes from the table
				 *      var nNodes = oTable.fnGetNodes( );
				 *    } );
				 */
				this.fnGetNodes = function( iRow )
				{
					var api = this.api( true );
				
					return iRow !== undefined ?
						api.row( iRow ).node() :
						api.rows().nodes().flatten().toArray();
				};
				
				
				/**
				 * Get the array indexes of a particular cell from it's DOM element
				 * and column index including hidden columns
				 *  @param {node} node this can either be a TR, TD or TH in the table's body
				 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
				 *    if given as a cell, an array of [row index, column index (visible),
				 *    column index (all)] is given.
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      $('#example tbody td').click( function () {
				 *        // Get the position of the current data from the node
				 *        var aPos = oTable.fnGetPosition( this );
				 *
				 *        // Get the data array for this row
				 *        var aData = oTable.fnGetData( aPos[0] );
				 *
				 *        // Update the data array and return the value
				 *        aData[ aPos[1] ] = 'clicked';
				 *        this.innerHTML = 'clicked';
				 *      } );
				 *
				 *      // Init DataTables
				 *      oTable = $('#example').dataTable();
				 *    } );
				 */
				this.fnGetPosition = function( node )
				{
					var api = this.api( true );
					var nodeName = node.nodeName.toUpperCase();
				
					if ( nodeName == 'TR' ) {
						return api.row( node ).index();
					}
					else if ( nodeName == 'TD' || nodeName == 'TH' ) {
						var cell = api.cell( node ).index();
				
						return [
							cell.row,
							cell.columnVisible,
							cell.column
						];
					}
					return null;
				};
				
				
				/**
				 * Check to see if a row is 'open' or not.
				 *  @param {node} nTr the table row to check
				 *  @returns {boolean} true if the row is currently open, false otherwise
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable;
				 *
				 *      // 'open' an information row when a row is clicked on
				 *      $('#example tbody tr').click( function () {
				 *        if ( oTable.fnIsOpen(this) ) {
				 *          oTable.fnClose( this );
				 *        } else {
				 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
				 *        }
				 *      } );
				 *
				 *      oTable = $('#example').dataTable();
				 *    } );
				 */
				this.fnIsOpen = function( nTr )
				{
					return this.api( true ).row( nTr ).child.isShown();
				};
				
				
				/**
				 * This function will place a new row directly after a row which is currently
				 * on display on the page, with the HTML contents that is passed into the
				 * function. This can be used, for example, to ask for confirmation that a
				 * particular record should be deleted.
				 *  @param {node} nTr The table row to 'open'
				 *  @param {string|node|jQuery} mHtml The HTML to put into the row
				 *  @param {string} sClass Class to give the new TD cell
				 *  @returns {node} The row opened. Note that if the table row passed in as the
				 *    first parameter, is not found in the table, this method will silently
				 *    return.
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable;
				 *
				 *      // 'open' an information row when a row is clicked on
				 *      $('#example tbody tr').click( function () {
				 *        if ( oTable.fnIsOpen(this) ) {
				 *          oTable.fnClose( this );
				 *        } else {
				 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
				 *        }
				 *      } );
				 *
				 *      oTable = $('#example').dataTable();
				 *    } );
				 */
				this.fnOpen = function( nTr, mHtml, sClass )
				{
					return this.api( true )
						.row( nTr )
						.child( mHtml, sClass )
						.show()
						.child()[0];
				};
				
				
				/**
				 * Change the pagination - provides the internal logic for pagination in a simple API
				 * function. With this function you can have a DataTables table go to the next,
				 * previous, first or last pages.
				 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
				 *    or page number to jump to (integer), note that page 0 is the first page.
				 *  @param {bool} [bRedraw=true] Redraw the table or not
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *      oTable.fnPageChange( 'next' );
				 *    } );
				 */
				this.fnPageChange = function ( mAction, bRedraw )
				{
					var api = this.api( true ).page( mAction );
				
					if ( bRedraw === undefined || bRedraw ) {
						api.draw(false);
					}
				};
				
				
				/**
				 * Show a particular column
				 *  @param {int} iCol The column whose display should be changed
				 *  @param {bool} bShow Show (true) or hide (false) the column
				 *  @param {bool} [bRedraw=true] Redraw the table or not
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Hide the second column after initialisation
				 *      oTable.fnSetColumnVis( 1, false );
				 *    } );
				 */
				this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
				{
					var api = this.api( true ).column( iCol ).visible( bShow );
				
					if ( bRedraw === undefined || bRedraw ) {
						api.columns.adjust().draw();
					}
				};
				
				
				/**
				 * Get the settings for a particular table for external manipulation
				 *  @returns {object} DataTables settings object. See
				 *    {@link DataTable.models.oSettings}
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *      var oSettings = oTable.fnSettings();
				 *
				 *      // Show an example parameter from the settings
				 *      alert( oSettings._iDisplayStart );
				 *    } );
				 */
				this.fnSettings = function()
				{
					return _fnSettingsFromNode( this[_ext.iApiIndex] );
				};
				
				
				/**
				 * Sort the table by a particular column
				 *  @param {int} iCol the data index to sort on. Note that this will not match the
				 *    'display index' if you have hidden data entries
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Sort immediately with columns 0 and 1
				 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
				 *    } );
				 */
				this.fnSort = function( aaSort )
				{
					this.api( true ).order( aaSort ).draw();
				};
				
				
				/**
				 * Attach a sort listener to an element for a given column
				 *  @param {node} nNode the element to attach the sort listener to
				 *  @param {int} iColumn the column that a click on this node will sort on
				 *  @param {function} [fnCallback] callback function when sort is run
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *
				 *      // Sort on column 1, when 'sorter' is clicked on
				 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
				 *    } );
				 */
				this.fnSortListener = function( nNode, iColumn, fnCallback )
				{
					this.api( true ).order.listener( nNode, iColumn, fnCallback );
				};
				
				
				/**
				 * Update a table cell or row - this method will accept either a single value to
				 * update the cell with, an array of values with one element for each column or
				 * an object in the same format as the original data source. The function is
				 * self-referencing in order to make the multi column updates easier.
				 *  @param {object|array|string} mData Data to update the cell/row with
				 *  @param {node|int} mRow TR element you want to update or the aoData index
				 *  @param {int} [iColumn] The column to update, give as null or undefined to
				 *    update a whole row.
				 *  @param {bool} [bRedraw=true] Redraw the table or not
				 *  @param {bool} [bAction=true] Perform pre-draw actions or not
				 *  @returns {int} 0 on success, 1 on error
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
				 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
				 *    } );
				 */
				this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
				{
					var api = this.api( true );
				
					if ( iColumn === undefined || iColumn === null ) {
						api.row( mRow ).data( mData );
					}
					else {
						api.cell( mRow, iColumn ).data( mData );
					}
				
					if ( bAction === undefined || bAction ) {
						api.columns.adjust();
					}
				
					if ( bRedraw === undefined || bRedraw ) {
						api.draw();
					}
					return 0;
				};
				
				
				/**
				 * Provide a common method for plug-ins to check the version of DataTables being used, in order
				 * to ensure compatibility.
				 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
				 *    formats "X" and "X.Y" are also acceptable.
				 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
				 *    version, or false if this version of DataTales is not suitable
				 *  @method
				 *  @dtopt API
				 *  @deprecated Since v1.10
				 *
				 *  @example
				 *    $(document).ready(function() {
				 *      var oTable = $('#example').dataTable();
				 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
				 *    } );
				 */
				this.fnVersionCheck = _ext.fnVersionCheck;
				

				var _that = this;
				var emptyInit = options === undefined;
				var len = this.length;

				if ( emptyInit ) {
					options = {};
				}

				this.oApi = this.internal = _ext.internal;

				// Extend with old style plug-in API methods
				for ( var fn in DataTable.ext.internal ) {
					if ( fn ) {
						this[fn] = _fnExternApiFunc(fn);
					}
				}

				this.each(function() {
					// For each initialisation we want to give it a clean initialisation
					// object that can be bashed around
					var o = {};
					var oInit = len > 1 ? // optimisation for single table case
						_fnExtend( o, options, true ) :
						options;

					/*global oInit,_that,emptyInit*/
					var i=0, iLen, j, jLen, k, kLen;
					var sId = this.getAttribute( 'id' );
					var bInitHandedOff = false;
					var defaults = DataTable.defaults;
					var $this = $(this);
					
					
					/* Sanity check */
					if ( this.nodeName.toLowerCase() != 'table' )
					{
						_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
						return;
					}
					
					/* Backwards compatibility for the defaults */
					_fnCompatOpts( defaults );
					_fnCompatCols( defaults.column );
					
					/* Convert the camel-case defaults to Hungarian */
					_fnCamelToHungarian( defaults, defaults, true );
					_fnCamelToHungarian( defaults.column, defaults.column, true );
					
					/* Setting up the initialisation object */
					_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );
					
					
					
					/* Check to see if we are re-initialising a table */
					var allSettings = DataTable.settings;
					for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
					{
						var s = allSettings[i];
					
						/* Base check on table node */
						if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )
						{
							var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
							var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
					
							if ( emptyInit || bRetrieve )
							{
								return s.oInstance;
							}
							else if ( bDestroy )
							{
								s.oInstance.fnDestroy();
								break;
							}
							else
							{
								_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
								return;
							}
						}
					
						/* If the element we are initialising has the same ID as a table which was previously
						 * initialised, but the table nodes don't match (from before) then we destroy the old
						 * instance by simply deleting it. This is under the assumption that the table has been
						 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
						 */
						if ( s.sTableId == this.id )
						{
							allSettings.splice( i, 1 );
							break;
						}
					}
					
					/* Ensure the table has an ID - required for accessibility */
					if ( sId === null || sId === "" )
					{
						sId = "DataTables_Table_"+(DataTable.ext._unique++);
						this.id = sId;
					}
					
					/* Create the settings object for this table and set some of the default parameters */
					var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
						"sDestroyWidth": $this[0].style.width,
						"sInstance":     sId,
						"sTableId":      sId
					} );
					oSettings.nTable = this;
					oSettings.oApi   = _that.internal;
					oSettings.oInit  = oInit;
					
					allSettings.push( oSettings );
					
					// Need to add the instance after the instance after the settings object has been added
					// to the settings array, so we can self reference the table instance if more than one
					oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
					
					// Backwards compatibility, before we apply all the defaults
					_fnCompatOpts( oInit );
					
					if ( oInit.oLanguage )
					{
						_fnLanguageCompat( oInit.oLanguage );
					}
					
					// If the length menu is given, but the init display length is not, use the length menu
					if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
					{
						oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
							oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
					}
					
					// Apply the defaults and init options to make a single init object will all
					// options defined from defaults and instance options.
					oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
					
					
					// Map the initialisation options onto the settings object
					_fnMap( oSettings.oFeatures, oInit, [
						"bPaginate",
						"bLengthChange",
						"bFilter",
						"bSort",
						"bSortMulti",
						"bInfo",
						"bProcessing",
						"bAutoWidth",
						"bSortClasses",
						"bServerSide",
						"bDeferRender"
					] );
					_fnMap( oSettings, oInit, [
						"asStripeClasses",
						"ajax",
						"fnServerData",
						"fnFormatNumber",
						"sServerMethod",
						"aaSorting",
						"aaSortingFixed",
						"aLengthMenu",
						"sPaginationType",
						"sAjaxSource",
						"sAjaxDataProp",
						"iStateDuration",
						"sDom",
						"bSortCellsTop",
						"iTabIndex",
						"fnStateLoadCallback",
						"fnStateSaveCallback",
						"renderer",
						"searchDelay",
						"rowId",
						[ "iCookieDuration", "iStateDuration" ], // backwards compat
						[ "oSearch", "oPreviousSearch" ],
						[ "aoSearchCols", "aoPreSearchCols" ],
						[ "iDisplayLength", "_iDisplayLength" ],
						[ "bJQueryUI", "bJUI" ]
					] );
					_fnMap( oSettings.oScroll, oInit, [
						[ "sScrollX", "sX" ],
						[ "sScrollXInner", "sXInner" ],
						[ "sScrollY", "sY" ],
						[ "bScrollCollapse", "bCollapse" ]
					] );
					_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
					
					/* Callback functions which are array driven */
					_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
					_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
					_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
					_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
					_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
					_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
					_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
					_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
					_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
					_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
					_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
					
					oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
					
					/* Browser support detection */
					_fnBrowserDetect( oSettings );
					
					var oClasses = oSettings.oClasses;
					
					// @todo Remove in 1.11
					if ( oInit.bJQueryUI )
					{
						/* Use the JUI classes object for display. You could clone the oStdClasses object if
						 * you want to have multiple tables with multiple independent classes
						 */
						$.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );
					
						if ( oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip" )
						{
							/* Set the DOM to use a layout suitable for jQuery UI's theming */
							oSettings.sDom = '<"H"lfr>t<"F"ip>';
						}
					
						if ( ! oSettings.renderer ) {
							oSettings.renderer = 'jqueryui';
						}
						else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {
							oSettings.renderer.header = 'jqueryui';
						}
					}
					else
					{
						$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
					}
					$this.addClass( oClasses.sTable );
					
					
					if ( oSettings.iInitDisplayStart === undefined )
					{
						/* Display start point, taking into account the save saving */
						oSettings.iInitDisplayStart = oInit.iDisplayStart;
						oSettings._iDisplayStart = oInit.iDisplayStart;
					}
					
					if ( oInit.iDeferLoading !== null )
					{
						oSettings.bDeferLoading = true;
						var tmp = $.isArray( oInit.iDeferLoading );
						oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
						oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
					}
					
					/* Language definitions */
					var oLanguage = oSettings.oLanguage;
					$.extend( true, oLanguage, oInit.oLanguage );
					
					if ( oLanguage.sUrl !== "" )
					{
						/* Get the language definitions from a file - because this Ajax call makes the language
						 * get async to the remainder of this function we use bInitHandedOff to indicate that
						 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
						 */
						$.ajax( {
							dataType: 'json',
							url: oLanguage.sUrl,
							success: function ( json ) {
								_fnLanguageCompat( json );
								_fnCamelToHungarian( defaults.oLanguage, json );
								$.extend( true, oLanguage, json );
								_fnInitialise( oSettings );
							},
							error: function () {
								// Error occurred loading language file, continue on as best we can
								_fnInitialise( oSettings );
							}
						} );
						bInitHandedOff = true;
					}
					
					/*
					 * Stripes
					 */
					if ( oInit.asStripeClasses === null )
					{
						oSettings.asStripeClasses =[
							oClasses.sStripeOdd,
							oClasses.sStripeEven
						];
					}
					
					/* Remove row stripe classes if they are already on the table row */
					var stripeClasses = oSettings.asStripeClasses;
					var rowOne = $this.children('tbody').find('tr').eq(0);
					if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
						return rowOne.hasClass(el);
					} ) ) !== -1 ) {
						$('tbody tr', this).removeClass( stripeClasses.join(' ') );
						oSettings.asDestroyStripes = stripeClasses.slice();
					}
					
					/*
					 * Columns
					 * See if we should load columns automatically or use defined ones
					 */
					var anThs = [];
					var aoColumnsInit;
					var nThead = this.getElementsByTagName('thead');
					if ( nThead.length !== 0 )
					{
						_fnDetectHeader( oSettings.aoHeader, nThead[0] );
						anThs = _fnGetUniqueThs( oSettings );
					}
					
					/* If not given a column array, generate one with nulls */
					if ( oInit.aoColumns === null )
					{
						aoColumnsInit = [];
						for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
						{
							aoColumnsInit.push( null );
						}
					}
					else
					{
						aoColumnsInit = oInit.aoColumns;
					}
					
					/* Add the columns */
					for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
					{
						_fnAddColumn( oSettings, anThs ? anThs[i] : null );
					}
					
					/* Apply the column definitions */
					_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
						_fnColumnOptions( oSettings, iCol, oDef );
					} );
					
					/* HTML5 attribute detection - build an mData object automatically if the
					 * attributes are found
					 */
					if ( rowOne.length ) {
						var a = function ( cell, name ) {
							return cell.getAttribute( 'data-'+name ) !== null ? name : null;
						};
					
						$( rowOne[0] ).children('th, td').each( function (i, cell) {
							var col = oSettings.aoColumns[i];
					
							if ( col.mData === i ) {
								var sort = a( cell, 'sort' ) || a( cell, 'order' );
								var filter = a( cell, 'filter' ) || a( cell, 'search' );
					
								if ( sort !== null || filter !== null ) {
									col.mData = {
										_:      i+'.display',
										sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
										type:   sort !== null   ? i+'.@data-'+sort   : undefined,
										filter: filter !== null ? i+'.@data-'+filter : undefined
									};
					
									_fnColumnOptions( oSettings, i );
								}
							}
						} );
					}
					
					var features = oSettings.oFeatures;
					
					/* Must be done after everything which can be overridden by the state saving! */
					if ( oInit.bStateSave )
					{
						features.bStateSave = true;
						_fnLoadState( oSettings, oInit );
						_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
					}
					
					
					/*
					 * Sorting
					 * @todo For modularisation (1.11) this needs to do into a sort start up handler
					 */
					
					// If aaSorting is not defined, then we use the first indicator in asSorting
					// in case that has been altered, so the default sort reflects that option
					if ( oInit.aaSorting === undefined )
					{
						var sorting = oSettings.aaSorting;
						for ( i=0, iLen=sorting.length ; i<iLen ; i++ )
						{
							sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
						}
					}
					
					/* Do a first pass on the sorting classes (allows any size changes to be taken into
					 * account, and also will apply sorting disabled classes if disabled
					 */
					_fnSortingClasses( oSettings );
					
					if ( features.bSort )
					{
						_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
							if ( oSettings.bSorted ) {
								var aSort = _fnSortFlatten( oSettings );
								var sortedColumns = {};
					
								$.each( aSort, function (i, val) {
									sortedColumns[ val.src ] = val.dir;
								} );
					
								_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
								_fnSortAria( oSettings );
							}
						} );
					}
					
					_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
						if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
							_fnSortingClasses( oSettings );
						}
					}, 'sc' );
					
					
					/*
					 * Final init
					 * Cache the header, body and footer as required, creating them if needed
					 */
					
					// Work around for Webkit bug 83867 - store the caption-side before removing from doc
					var captions = $this.children('caption').each( function () {
						this._captionSide = $this.css('caption-side');
					} );
					
					var thead = $this.children('thead');
					if ( thead.length === 0 )
					{
						thead = $('<thead/>').appendTo(this);
					}
					oSettings.nTHead = thead[0];
					
					var tbody = $this.children('tbody');
					if ( tbody.length === 0 )
					{
						tbody = $('<tbody/>').appendTo(this);
					}
					oSettings.nTBody = tbody[0];
					
					var tfoot = $this.children('tfoot');
					if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") )
					{
						// If we are a scrolling table, and no footer has been given, then we need to create
						// a tfoot element for the caption element to be appended to
						tfoot = $('<tfoot/>').appendTo(this);
					}
					
					if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
						$this.addClass( oClasses.sNoFooter );
					}
					else if ( tfoot.length > 0 ) {
						oSettings.nTFoot = tfoot[0];
						_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
					}
					
					/* Check if there is data passing into the constructor */
					if ( oInit.aaData )
					{
						for ( i=0 ; i<oInit.aaData.length ; i++ )
						{
							_fnAddData( oSettings, oInit.aaData[ i ] );
						}
					}
					else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )
					{
						/* Grab the data from the page - only do this when deferred loading or no Ajax
						 * source since there is no point in reading the DOM data if we are then going
						 * to replace it with Ajax data
						 */
						_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
					}
					
					/* Copy the data index array */
					oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
					
					/* Initialisation complete - table can be drawn */
					oSettings.bInitialised = true;
					
					/* Check if we need to initialise the table (it might not have been handed off to the
					 * language processor)
					 */
					if ( bInitHandedOff === false )
					{
						_fnInitialise( oSettings );
					}
				} );
				_that = null;
				return this;
			};

			
			
			/**
			 * Computed structure of the DataTables API, defined by the options passed to
			 * `DataTable.Api.register()` when building the API.
			 *
			 * The structure is built in order to speed creation and extension of the Api
			 * objects since the extensions are effectively pre-parsed.
			 *
			 * The array is an array of objects with the following structure, where this
			 * base array represents the Api prototype base:
			 *
			 *     [
			 *       {
			 *         name:      'data'                -- string   - Property name
			 *         val:       function () {},       -- function - Api method (or undefined if just an object
			 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
			 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
			 *       },
			 *       {
			 *         name:     'row'
			 *         val:       {},
			 *         methodExt: [ ... ],
			 *         propExt:   [
			 *           {
			 *             name:      'data'
			 *             val:       function () {},
			 *             methodExt: [ ... ],
			 *             propExt:   [ ... ]
			 *           },
			 *           ...
			 *         ]
			 *       }
			 *     ]
			 *
			 * @type {Array}
			 * @ignore
			 */
			var __apiStruct = [];
			
			
			/**
			 * `Array.prototype` reference.
			 *
			 * @type object
			 * @ignore
			 */
			var __arrayProto = Array.prototype;
			
			
			/**
			 * Abstraction for `context` parameter of the `Api` constructor to allow it to
			 * take several different forms for ease of use.
			 *
			 * Each of the input parameter types will be converted to a DataTables settings
			 * object where possible.
			 *
			 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
			 *   of:
			 *
			 *   * `string` - jQuery selector. Any DataTables' matching the given selector
			 *     with be found and used.
			 *   * `node` - `TABLE` node which has already been formed into a DataTable.
			 *   * `jQuery` - A jQuery object of `TABLE` nodes.
			 *   * `object` - DataTables settings object
			 *   * `DataTables.Api` - API instance
			 * @return {array|null} Matching DataTables settings objects. `null` or
			 *   `undefined` is returned if no matching DataTable is found.
			 * @ignore
			 */
			var _toSettings = function ( mixed )
			{
				var idx, jq;
				var settings = DataTable.settings;
				var tables = $.map( settings, function (el, i) {
					return el.nTable;
				} );
			
				if ( ! mixed ) {
					return [];
				}
				else if ( mixed.nTable && mixed.oApi ) {
					// DataTables settings object
					return [ mixed ];
				}
				else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
					// Table node
					idx = $.inArray( mixed, tables );
					return idx !== -1 ? [ settings[idx] ] : null;
				}
				else if ( mixed && typeof mixed.settings === 'function' ) {
					return mixed.settings().toArray();
				}
				else if ( typeof mixed === 'string' ) {
					// jQuery selector
					jq = $(mixed);
				}
				else if ( mixed instanceof $ ) {
					// jQuery object (also DataTables instance)
					jq = mixed;
				}
			
				if ( jq ) {
					return jq.map( function(i) {
						idx = $.inArray( this, tables );
						return idx !== -1 ? settings[idx] : null;
					} ).toArray();
				}
			};
			
			
			/**
			 * DataTables API class - used to control and interface with  one or more
			 * DataTables enhanced tables.
			 *
			 * The API class is heavily based on jQuery, presenting a chainable interface
			 * that you can use to interact with tables. Each instance of the API class has
			 * a "context" - i.e. the tables that it will operate on. This could be a single
			 * table, all tables on a page or a sub-set thereof.
			 *
			 * Additionally the API is designed to allow you to easily work with the data in
			 * the tables, retrieving and manipulating it as required. This is done by
			 * presenting the API class as an array like interface. The contents of the
			 * array depend upon the actions requested by each method (for example
			 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
			 * return an array of objects or arrays depending upon your table's
			 * configuration). The API object has a number of array like methods (`push`,
			 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
			 * `unique` etc) to assist your working with the data held in a table.
			 *
			 * Most methods (those which return an Api instance) are chainable, which means
			 * the return from a method call also has all of the methods available that the
			 * top level object had. For example, these two calls are equivalent:
			 *
			 *     // Not chained
			 *     api.row.add( {...} );
			 *     api.draw();
			 *
			 *     // Chained
			 *     api.row.add( {...} ).draw();
			 *
			 * @class DataTable.Api
			 * @param {array|object|string|jQuery} context DataTable identifier. This is
			 *   used to define which DataTables enhanced tables this API will operate on.
			 *   Can be one of:
			 *
			 *   * `string` - jQuery selector. Any DataTables' matching the given selector
			 *     with be found and used.
			 *   * `node` - `TABLE` node which has already been formed into a DataTable.
			 *   * `jQuery` - A jQuery object of `TABLE` nodes.
			 *   * `object` - DataTables settings object
			 * @param {array} [data] Data to initialise the Api instance with.
			 *
			 * @example
			 *   // Direct initialisation during DataTables construction
			 *   var api = $('#example').DataTable();
			 *
			 * @example
			 *   // Initialisation using a DataTables jQuery object
			 *   var api = $('#example').dataTable().api();
			 *
			 * @example
			 *   // Initialisation as a constructor
			 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
			 */
			_Api = function ( context, data )
			{
				if ( ! (this instanceof _Api) ) {
					return new _Api( context, data );
				}
			
				var settings = [];
				var ctxSettings = function ( o ) {
					var a = _toSettings( o );
					if ( a ) {
						settings = settings.concat( a );
					}
				};
			
				if ( $.isArray( context ) ) {
					for ( var i=0, ien=context.length ; i<ien ; i++ ) {
						ctxSettings( context[i] );
					}
				}
				else {
					ctxSettings( context );
				}
			
				// Remove duplicates
				this.context = _unique( settings );
			
				// Initial data
				if ( data ) {
					$.merge( this, data );
				}
			
				// selector
				this.selector = {
					rows: null,
					cols: null,
					opts: null
				};
			
				_Api.extend( this, this, __apiStruct );
			};
			
			DataTable.Api = _Api;
			
			// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
			// isPlainObject.
			$.extend( _Api.prototype, {
				any: function ()
				{
					return this.count() !== 0;
				},
			
			
				concat:  __arrayProto.concat,
			
			
				context: [], // array of table settings objects
			
			
				count: function ()
				{
					return this.flatten().length;
				},
			
			
				each: function ( fn )
				{
					for ( var i=0, ien=this.length ; i<ien; i++ ) {
						fn.call( this, this[i], i, this );
					}
			
					return this;
				},
			
			
				eq: function ( idx )
				{
					var ctx = this.context;
			
					return ctx.length > idx ?
						new _Api( ctx[idx], this[idx] ) :
						null;
				},
			
			
				filter: function ( fn )
				{
					var a = [];
			
					if ( __arrayProto.filter ) {
						a = __arrayProto.filter.call( this, fn, this );
					}
					else {
						// Compatibility for browsers without EMCA-252-5 (JS 1.6)
						for ( var i=0, ien=this.length ; i<ien ; i++ ) {
							if ( fn.call( this, this[i], i, this ) ) {
								a.push( this[i] );
							}
						}
					}
			
					return new _Api( this.context, a );
				},
			
			
				flatten: function ()
				{
					var a = [];
					return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
				},
			
			
				join:    __arrayProto.join,
			
			
				indexOf: __arrayProto.indexOf || function (obj, start)
				{
					for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
						if ( this[i] === obj ) {
							return i;
						}
					}
					return -1;
				},
			
				iterator: function ( flatten, type, fn, alwaysNew ) {
					var
						a = [], ret,
						i, ien, j, jen,
						context = this.context,
						rows, items, item,
						selector = this.selector;
			
					// Argument shifting
					if ( typeof flatten === 'string' ) {
						alwaysNew = fn;
						fn = type;
						type = flatten;
						flatten = false;
					}
			
					for ( i=0, ien=context.length ; i<ien ; i++ ) {
						var apiInst = new _Api( context[i] );
			
						if ( type === 'table' ) {
							ret = fn.call( apiInst, context[i], i );
			
							if ( ret !== undefined ) {
								a.push( ret );
							}
						}
						else if ( type === 'columns' || type === 'rows' ) {
							// this has same length as context - one entry for each table
							ret = fn.call( apiInst, context[i], this[i], i );
			
							if ( ret !== undefined ) {
								a.push( ret );
							}
						}
						else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
							// columns and rows share the same structure.
							// 'this' is an array of column indexes for each context
							items = this[i];
			
							if ( type === 'column-rows' ) {
								rows = _selector_row_indexes( context[i], selector.opts );
							}
			
							for ( j=0, jen=items.length ; j<jen ; j++ ) {
								item = items[j];
			
								if ( type === 'cell' ) {
									ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
								}
								else {
									ret = fn.call( apiInst, context[i], item, i, j, rows );
								}
			
								if ( ret !== undefined ) {
									a.push( ret );
								}
							}
						}
					}
			
					if ( a.length || alwaysNew ) {
						var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
						var apiSelector = api.selector;
						apiSelector.rows = selector.rows;
						apiSelector.cols = selector.cols;
						apiSelector.opts = selector.opts;
						return api;
					}
					return this;
				},
			
			
				lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
				{
					// Bit cheeky...
					return this.indexOf.apply( this.toArray.reverse(), arguments );
				},
			
			
				length:  0,
			
			
				map: function ( fn )
				{
					var a = [];
			
					if ( __arrayProto.map ) {
						a = __arrayProto.map.call( this, fn, this );
					}
					else {
						// Compatibility for browsers without EMCA-252-5 (JS 1.6)
						for ( var i=0, ien=this.length ; i<ien ; i++ ) {
							a.push( fn.call( this, this[i], i ) );
						}
					}
			
					return new _Api( this.context, a );
				},
			
			
				pluck: function ( prop )
				{
					return this.map( function ( el ) {
						return el[ prop ];
					} );
				},
			
				pop:     __arrayProto.pop,
			
			
				push:    __arrayProto.push,
			
			
				// Does not return an API instance
				reduce: __arrayProto.reduce || function ( fn, init )
				{
					return _fnReduce( this, fn, init, 0, this.length, 1 );
				},
			
			
				reduceRight: __arrayProto.reduceRight || function ( fn, init )
				{
					return _fnReduce( this, fn, init, this.length-1, -1, -1 );
				},
			
			
				reverse: __arrayProto.reverse,
			
			
				// Object with rows, columns and opts
				selector: null,
			
			
				shift:   __arrayProto.shift,
			
			
				sort:    __arrayProto.sort, // ? name - order?
			
			
				splice:  __arrayProto.splice,
			
			
				toArray: function ()
				{
					return __arrayProto.slice.call( this );
				},
			
			
				to$: function ()
				{
					return $( this );
				},
			
			
				toJQuery: function ()
				{
					return $( this );
				},
			
			
				unique: function ()
				{
					return new _Api( this.context, _unique(this) );
				},
			
			
				unshift: __arrayProto.unshift
			} );
			
			
			_Api.extend = function ( scope, obj, ext )
			{
				// Only extend API instances and static properties of the API
				if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
					return;
				}
			
				var
					i, ien,
					j, jen,
					struct, inner,
					methodScoping = function ( scope, fn, struc ) {
						return function () {
							var ret = fn.apply( scope, arguments );
			
							// Method extension
							_Api.extend( ret, ret, struc.methodExt );
							return ret;
						};
					};
			
				for ( i=0, ien=ext.length ; i<ien ; i++ ) {
					struct = ext[i];
			
					// Value
					obj[ struct.name ] = typeof struct.val === 'function' ?
						methodScoping( scope, struct.val, struct ) :
						$.isPlainObject( struct.val ) ?
							{} :
							struct.val;
			
					obj[ struct.name ].__dt_wrapper = true;
			
					// Property extension
					_Api.extend( scope, obj[ struct.name ], struct.propExt );
				}
			};
			
			
			// @todo - Is there need for an augment function?
			// _Api.augment = function ( inst, name )
			// {
			// 	// Find src object in the structure from the name
			// 	var parts = name.split('.');
			
			// 	_Api.extend( inst, obj );
			// };
			
			
			//     [
			//       {
			//         name:      'data'                -- string   - Property name
			//         val:       function () {},       -- function - Api method (or undefined if just an object
			//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
			//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
			//       },
			//       {
			//         name:     'row'
			//         val:       {},
			//         methodExt: [ ... ],
			//         propExt:   [
			//           {
			//             name:      'data'
			//             val:       function () {},
			//             methodExt: [ ... ],
			//             propExt:   [ ... ]
			//           },
			//           ...
			//         ]
			//       }
			//     ]
			
			_Api.register = _api_register = function ( name, val )
			{
				if ( $.isArray( name ) ) {
					for ( var j=0, jen=name.length ; j<jen ; j++ ) {
						_Api.register( name[j], val );
					}
					return;
				}
			
				var
					i, ien,
					heir = name.split('.'),
					struct = __apiStruct,
					key, method;
			
				var find = function ( src, name ) {
					for ( var i=0, ien=src.length ; i<ien ; i++ ) {
						if ( src[i].name === name ) {
							return src[i];
						}
					}
					return null;
				};
			
				for ( i=0, ien=heir.length ; i<ien ; i++ ) {
					method = heir[i].indexOf('()') !== -1;
					key = method ?
						heir[i].replace('()', '') :
						heir[i];
			
					var src = find( struct, key );
					if ( ! src ) {
						src = {
							name:      key,
							val:       {},
							methodExt: [],
							propExt:   []
						};
						struct.push( src );
					}
			
					if ( i === ien-1 ) {
						src.val = val;
					}
					else {
						struct = method ?
							src.methodExt :
							src.propExt;
					}
				}
			};
			
			
			_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
				_Api.register( pluralName, val );
			
				_Api.register( singularName, function () {
					var ret = val.apply( this, arguments );
			
					if ( ret === this ) {
						// Returned item is the API instance that was passed in, return it
						return this;
					}
					else if ( ret instanceof _Api ) {
						// New API instance returned, want the value from the first item
						// in the returned array for the singular result.
						return ret.length ?
							$.isArray( ret[0] ) ?
								new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
								ret[0] :
							undefined;
					}
			
					// Non-API return - just fire it back
					return ret;
				} );
			};
			
			
			/**
			 * Selector for HTML tables. Apply the given selector to the give array of
			 * DataTables settings objects.
			 *
			 * @param {string|integer} [selector] jQuery selector string or integer
			 * @param  {array} Array of DataTables settings objects to be filtered
			 * @return {array}
			 * @ignore
			 */
			var __table_selector = function ( selector, a )
			{
				// Integer is used to pick out a table by index
				if ( typeof selector === 'number' ) {
					return [ a[ selector ] ];
				}
			
				// Perform a jQuery selector on the table nodes
				var nodes = $.map( a, function (el, i) {
					return el.nTable;
				} );
			
				return $(nodes)
					.filter( selector )
					.map( function (i) {
						// Need to translate back from the table node to the settings
						var idx = $.inArray( this, nodes );
						return a[ idx ];
					} )
					.toArray();
			};
			
			
			
			/**
			 * Context selector for the API's context (i.e. the tables the API instance
			 * refers to.
			 *
			 * @name    DataTable.Api#tables
			 * @param {string|integer} [selector] Selector to pick which tables the iterator
			 *   should operate on. If not given, all tables in the current context are
			 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
			 *   select multiple tables or as an integer to select a single table.
			 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
			 */
			_api_register( 'tables()', function ( selector ) {
				// A new instance is created if there was a selector specified
				return selector ?
					new _Api( __table_selector( selector, this.context ) ) :
					this;
			} );
			
			
			_api_register( 'table()', function ( selector ) {
				var tables = this.tables( selector );
				var ctx = tables.context;
			
				// Truncate to the first matched table
				return ctx.length ?
					new _Api( ctx[0] ) :
					tables;
			} );
			
			
			_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
				return this.iterator( 'table', function ( ctx ) {
					return ctx.nTable;
				}, 1 );
			} );
			
			
			_api_registerPlural( 'tables().body()', 'table().body()' , function () {
				return this.iterator( 'table', function ( ctx ) {
					return ctx.nTBody;
				}, 1 );
			} );
			
			
			_api_registerPlural( 'tables().header()', 'table().header()' , function () {
				return this.iterator( 'table', function ( ctx ) {
					return ctx.nTHead;
				}, 1 );
			} );
			
			
			_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
				return this.iterator( 'table', function ( ctx ) {
					return ctx.nTFoot;
				}, 1 );
			} );
			
			
			_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
				return this.iterator( 'table', function ( ctx ) {
					return ctx.nTableWrapper;
				}, 1 );
			} );
			
			
			
			/**
			 * Redraw the tables in the current context.
			 */
			_api_register( 'draw()', function ( paging ) {
				return this.iterator( 'table', function ( settings ) {
					if ( paging === 'page' ) {
						_fnDraw( settings );
					}
					else {
						if ( typeof paging === 'string' ) {
							paging = paging === 'full-hold' ?
								false :
								true;
						}
			
						_fnReDraw( settings, paging===false );
					}
				} );
			} );
			
			
			
			/**
			 * Get the current page index.
			 *
			 * @return {integer} Current page index (zero based)
			 *//**
			 * Set the current page.
			 *
			 * Note that if you attempt to show a page which does not exist, DataTables will
			 * not throw an error, but rather reset the paging.
			 *
			 * @param {integer|string} action The paging action to take. This can be one of:
			 *  * `integer` - The page index to jump to
			 *  * `string` - An action to take:
			 *    * `first` - Jump to first page.
			 *    * `next` - Jump to the next page
			 *    * `previous` - Jump to previous page
			 *    * `last` - Jump to the last page.
			 * @returns {DataTables.Api} this
			 */
			_api_register( 'page()', function ( action ) {
				if ( action === undefined ) {
					return this.page.info().page; // not an expensive call
				}
			
				// else, have an action to take on all tables
				return this.iterator( 'table', function ( settings ) {
					_fnPageChange( settings, action );
				} );
			} );
			
			
			/**
			 * Paging information for the first table in the current context.
			 *
			 * If you require paging information for another table, use the `table()` method
			 * with a suitable selector.
			 *
			 * @return {object} Object with the following properties set:
			 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
			 *  * `pages` - Total number of pages
			 *  * `start` - Display index for the first record shown on the current page
			 *  * `end` - Display index for the last record shown on the current page
			 *  * `length` - Display length (number of records). Note that generally `start
			 *    + length = end`, but this is not always true, for example if there are
			 *    only 2 records to show on the final page, with a length of 10.
			 *  * `recordsTotal` - Full data set length
			 *  * `recordsDisplay` - Data set length once the current filtering criterion
			 *    are applied.
			 */
			_api_register( 'page.info()', function ( action ) {
				if ( this.context.length === 0 ) {
					return undefined;
				}
			
				var
					settings   = this.context[0],
					start      = settings._iDisplayStart,
					len        = settings._iDisplayLength,
					visRecords = settings.fnRecordsDisplay(),
					all        = len === -1;
			
				return {
					"page":           all ? 0 : Math.floor( start / len ),
					"pages":          all ? 1 : Math.ceil( visRecords / len ),
					"start":          start,
					"end":            settings.fnDisplayEnd(),
					"length":         len,
					"recordsTotal":   settings.fnRecordsTotal(),
					"recordsDisplay": visRecords,
					"serverSide":     _fnDataSource( settings ) === 'ssp'
				};
			} );
			
			
			/**
			 * Get the current page length.
			 *
			 * @return {integer} Current page length. Note `-1` indicates that all records
			 *   are to be shown.
			 *//**
			 * Set the current page length.
			 *
			 * @param {integer} Page length to set. Use `-1` to show all records.
			 * @returns {DataTables.Api} this
			 */
			_api_register( 'page.len()', function ( len ) {
				// Note that we can't call this function 'length()' because `length`
				// is a Javascript property of functions which defines how many arguments
				// the function expects.
				if ( len === undefined ) {
					return this.context.length !== 0 ?
						this.context[0]._iDisplayLength :
						undefined;
				}
			
				// else, set the page length
				return this.iterator( 'table', function ( settings ) {
					_fnLengthChange( settings, len );
				} );
			} );
			
			
			
			var __reload = function ( settings, holdPosition, callback ) {
				// Use the draw event to trigger a callback
				if ( callback ) {
					var api = new _Api( settings );
			
					api.one( 'draw', function () {
						callback( api.ajax.json() );
					} );
				}
			
				if ( _fnDataSource( settings ) == 'ssp' ) {
					_fnReDraw( settings, holdPosition );
				}
				else {
					_fnProcessingDisplay( settings, true );
			
					// Cancel an existing request
					var xhr = settings.jqXHR;
					if ( xhr && xhr.readyState !== 4 ) {
						xhr.abort();
					}
			
					// Trigger xhr
					_fnBuildAjax( settings, [], function( json ) {
						_fnClearTable( settings );
			
						var data = _fnAjaxDataSrc( settings, json );
						for ( var i=0, ien=data.length ; i<ien ; i++ ) {
							_fnAddData( settings, data[i] );
						}
			
						_fnReDraw( settings, holdPosition );
						_fnProcessingDisplay( settings, false );
					} );
				}
			};
			
			
			/**
			 * Get the JSON response from the last Ajax request that DataTables made to the
			 * server. Note that this returns the JSON from the first table in the current
			 * context.
			 *
			 * @return {object} JSON received from the server.
			 */
			_api_register( 'ajax.json()', function () {
				var ctx = this.context;
			
				if ( ctx.length > 0 ) {
					return ctx[0].json;
				}
			
				// else return undefined;
			} );
			
			
			/**
			 * Get the data submitted in the last Ajax request
			 */
			_api_register( 'ajax.params()', function () {
				var ctx = this.context;
			
				if ( ctx.length > 0 ) {
					return ctx[0].oAjaxData;
				}
			
				// else return undefined;
			} );
			
			
			/**
			 * Reload tables from the Ajax data source. Note that this function will
			 * automatically re-draw the table when the remote data has been loaded.
			 *
			 * @param {boolean} [reset=true] Reset (default) or hold the current paging
			 *   position. A full re-sort and re-filter is performed when this method is
			 *   called, which is why the pagination reset is the default action.
			 * @returns {DataTables.Api} this
			 */
			_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
				return this.iterator( 'table', function (settings) {
					__reload( settings, resetPaging===false, callback );
				} );
			} );
			
			
			/**
			 * Get the current Ajax URL. Note that this returns the URL from the first
			 * table in the current context.
			 *
			 * @return {string} Current Ajax source URL
			 *//**
			 * Set the Ajax URL. Note that this will set the URL for all tables in the
			 * current context.
			 *
			 * @param {string} url URL to set.
			 * @returns {DataTables.Api} this
			 */
			_api_register( 'ajax.url()', function ( url ) {
				var ctx = this.context;
			
				if ( url === undefined ) {
					// get
					if ( ctx.length === 0 ) {
						return undefined;
					}
					ctx = ctx[0];
			
					return ctx.ajax ?
						$.isPlainObject( ctx.ajax ) ?
							ctx.ajax.url :
							ctx.ajax :
						ctx.sAjaxSource;
				}
			
				// set
				return this.iterator( 'table', function ( settings ) {
					if ( $.isPlainObject( settings.ajax ) ) {
						settings.ajax.url = url;
					}
					else {
						settings.ajax = url;
					}
					// No need to consider sAjaxSource here since DataTables gives priority
					// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
					// value of `sAjaxSource` redundant.
				} );
			} );
			
			
			/**
			 * Load data from the newly set Ajax URL. Note that this method is only
			 * available when `ajax.url()` is used to set a URL. Additionally, this method
			 * has the same effect as calling `ajax.reload()` but is provided for
			 * convenience when setting a new URL. Like `ajax.reload()` it will
			 * automatically redraw the table once the remote data has been loaded.
			 *
			 * @returns {DataTables.Api} this
			 */
			_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
				// Same as a reload, but makes sense to present it for easy access after a
				// url change
				return this.iterator( 'table', function ( ctx ) {
					__reload( ctx, resetPaging===false, callback );
				} );
			} );
			
			
			
			
			var _selector_run = function ( type, selector, selectFn, settings, opts )
			{
				var
					out = [], res,
					a, i, ien, j, jen,
					selectorType = typeof selector;
			
				// Can't just check for isArray here, as an API or jQuery instance might be
				// given with their array like look
				if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
					selector = [ selector ];
				}
			
				for ( i=0, ien=selector.length ; i<ien ; i++ ) {
					a = selector[i] && selector[i].split ?
						selector[i].split(',') :
						[ selector[i] ];
			
					for ( j=0, jen=a.length ; j<jen ; j++ ) {
						res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );
			
						if ( res && res.length ) {
							out = out.concat( res );
						}
					}
				}
			
				// selector extensions
				var ext = _ext.selector[ type ];
				if ( ext.length ) {
					for ( i=0, ien=ext.length ; i<ien ; i++ ) {
						out = ext[i]( settings, opts, out );
					}
				}
			
				return _unique( out );
			};
			
			
			var _selector_opts = function ( opts )
			{
				if ( ! opts ) {
					opts = {};
				}
			
				// Backwards compatibility for 1.9- which used the terminology filter rather
				// than search
				if ( opts.filter && opts.search === undefined ) {
					opts.search = opts.filter;
				}
			
				return $.extend( {
					search: 'none',
					order: 'current',
					page: 'all'
				}, opts );
			};
			
			
			var _selector_first = function ( inst )
			{
				// Reduce the API instance to the first item found
				for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
					if ( inst[i].length > 0 ) {
						// Assign the first element to the first item in the instance
						// and truncate the instance and context
						inst[0] = inst[i];
						inst[0].length = 1;
						inst.length = 1;
						inst.context = [ inst.context[i] ];
			
						return inst;
					}
				}
			
				// Not found - return an empty instance
				inst.length = 0;
				return inst;
			};
			
			
			var _selector_row_indexes = function ( settings, opts )
			{
				var
					i, ien, tmp, a=[],
					displayFiltered = settings.aiDisplay,
					displayMaster = settings.aiDisplayMaster;
			
				var
					search = opts.search,  // none, applied, removed
					order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
					page   = opts.page;    // all, current
			
				if ( _fnDataSource( settings ) == 'ssp' ) {
					// In server-side processing mode, most options are irrelevant since
					// rows not shown don't exist and the index order is the applied order
					// Removed is a special case - for consistency just return an empty
					// array
					return search === 'removed' ?
						[] :
						_range( 0, displayMaster.length );
				}
				else if ( page == 'current' ) {
					// Current page implies that order=current and fitler=applied, since it is
					// fairly senseless otherwise, regardless of what order and search actually
					// are
					for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
						a.push( displayFiltered[i] );
					}
				}
				else if ( order == 'current' || order == 'applied' ) {
					a = search == 'none' ?
						displayMaster.slice() :                      // no search
						search == 'applied' ?
							displayFiltered.slice() :                // applied search
							$.map( displayMaster, function (el, i) { // removed search
								return $.inArray( el, displayFiltered ) === -1 ? el : null;
							} );
				}
				else if ( order == 'index' || order == 'original' ) {
					for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
						if ( search == 'none' ) {
							a.push( i );
						}
						else { // applied | removed
							tmp = $.inArray( i, displayFiltered );
			
							if ((tmp === -1 && search == 'removed') ||
								(tmp >= 0   && search == 'applied') )
							{
								a.push( i );
							}
						}
					}
				}
			
				return a;
			};
			
			
			/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
			 * Rows
			 *
			 * {}          - no selector - use all available rows
			 * {integer}   - row aoData index
			 * {node}      - TR node
			 * {string}    - jQuery selector to apply to the TR elements
			 * {array}     - jQuery array of nodes, or simply an array of TR nodes
			 *
			 */
			
			
			var __row_selector = function ( settings, selector, opts )
			{
				var run = function ( sel ) {
					var selInt = _intVal( sel );
					var i, ien;
			
					// Short cut - selector is a number and no options provided (default is
					// all records, so no need to check if the index is in there, since it
					// must be - dev error if the index doesn't exist).
					if ( selInt !== null && ! opts ) {
						return [ selInt ];
					}
			
					var rows = _selector_row_indexes( settings, opts );
			
					if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
						// Selector - integer
						return [ selInt ];
					}
					else if ( ! sel ) {
						// Selector - none
						return rows;
					}
			
					// Selector - function
					if ( typeof sel === 'function' ) {
						return $.map( rows, function (idx) {
							var row = settings.aoData[ idx ];
							return sel( idx, row._aData, row.nTr ) ? idx : null;
						} );
					}
			
					// Get nodes in the order from the `rows` array with null values removed
					var nodes = _removeEmpty(
						_pluck_order( settings.aoData, rows, 'nTr' )
					);
			
					// Selector - node
					if ( sel.nodeName ) {
						if ( $.inArray( sel, nodes ) !== -1 ) {
							return [ sel._DT_RowIndex ]; // sel is a TR node that is in the table
							                             // and DataTables adds a prop for fast lookup
						}
					}
			
					// ID selector. Want to always be able to select rows by id, regardless
					// of if the tr element has been created or not, so can't rely upon
					// jQuery here - hence a custom implementation. This does not match
					// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
					// but to select it using a CSS selector engine (like Sizzle or
					// querySelect) it would need to need to be escaped for some characters.
					// DataTables simplifies this for row selectors since you can select
					// only a row. A # indicates an id any anything that follows is the id -
					// unescaped.
					if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
						// get row index from id
						var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
						if ( rowObj !== undefined ) {
							return [ rowObj.idx ];
						}
			
						// need to fall through to jQuery in case there is DOM id that
						// matches
					}
			
					// Selector - jQuery selector string, array of nodes or jQuery object/
					// As jQuery's .filter() allows jQuery objects to be passed in filter,
					// it also allows arrays, so this will cope with all three options
					return $(nodes)
						.filter( sel )
						.map( function () {
							return this._DT_RowIndex;
						} )
						.toArray();
				};
			
				return _selector_run( 'row', selector, run, settings, opts );
			};
			
			
			_api_register( 'rows()', function ( selector, opts ) {
				// argument shifting
				if ( selector === undefined ) {
					selector = '';
				}
				else if ( $.isPlainObject( selector ) ) {
					opts = selector;
					selector = '';
				}
			
				opts = _selector_opts( opts );
			
				var inst = this.iterator( 'table', function ( settings ) {
					return __row_selector( settings, selector, opts );
				}, 1 );
			
				// Want argument shifting here and in __row_selector?
				inst.selector.rows = selector;
				inst.selector.opts = opts;
			
				return inst;
			} );
			
			_api_register( 'rows().nodes()', function () {
				return this.iterator( 'row', function ( settings, row ) {
					return settings.aoData[ row ].nTr || undefined;
				}, 1 );
			} );
			
			_api_register( 'rows().data()', function () {
				return this.iterator( true, 'rows', function ( settings, rows ) {
					return _pluck_order( settings.aoData, rows, '_aData' );
				}, 1 );
			} );
			
			_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
				return this.iterator( 'row', function ( settings, row ) {
					var r = settings.aoData[ row ];
					return type === 'search' ? r._aFilterData : r._aSortData;
				}, 1 );
			} );
			
			_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
				return this.iterator( 'row', function ( settings, row ) {
					_fnInvalidate( settings, row, src );
				} );
			} );
			
			_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
				return this.iterator( 'row', function ( settings, row ) {
					return row;
				}, 1 );
			} );
			
			_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
				var a = [];
				var context = this.context;
			
				// `iterator` will drop undefined values, but in this case we want them
				for ( var i=0, ien=context.length ; i<ien ; i++ ) {
					for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
						var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
						a.push( (hash === true ? '#' : '' )+ id );
					}
				}
			
				return new _Api( context, a );
			} );
			
			_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
				var that = this;
			
				this.iterator( 'row', function ( settings, row, thatIdx ) {
					var data = settings.aoData;
					var rowData = data[ row ];
			
					data.splice( row, 1 );
			
					// Update the _DT_RowIndex parameter on all rows in the table
					for ( var i=0, ien=data.length ; i<ien ; i++ ) {
						if ( data[i].nTr !== null ) {
							data[i].nTr._DT_RowIndex = i;
						}
					}
			
					// Delete from the display arrays
					_fnDeleteIndex( settings.aiDisplayMaster, row );
					_fnDeleteIndex( settings.aiDisplay, row );
					_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
			
					// Check for an 'overflow' they case for displaying the table
					_fnLengthOverflow( settings );
			
					// Remove the row's ID reference if there is one
					var id = settings.rowIdFn( rowData._aData );
					if ( id !== undefined ) {
						delete settings.aIds[ id ];
					}
				} );
			
				this.iterator( 'table', function ( settings ) {
					for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
						settings.aoData[i].idx = i;
					}
				} );
			
				return this;
			} );
			
			
			_api_register( 'rows.add()', function ( rows ) {
				var newRows = this.iterator( 'table', function ( settings ) {
						var row, i, ien;
						var out = [];
			
						for ( i=0, ien=rows.length ; i<ien ; i++ ) {
							row = rows[i];
			
							if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
								out.push( _fnAddTr( settings, row )[0] );
							}
							else {
								out.push( _fnAddData( settings, row ) );
							}
						}
			
						return out;
					}, 1 );
			
				// Return an Api.rows() extended instance, so rows().nodes() etc can be used
				var modRows = this.rows( -1 );
				modRows.pop();
				$.merge( modRows, newRows );
			
				return modRows;
			} );
			
			
			
			
			
			/**
			 *
			 */
			_api_register( 'row()', function ( selector, opts ) {
				return _selector_first( this.rows( selector, opts ) );
			} );
			
			
			_api_register( 'row().data()', function ( data ) {
				var ctx = this.context;
			
				if ( data === undefined ) {
					// Get
					return ctx.length && this.length ?
						ctx[0].aoData[ this[0] ]._aData :
						undefined;
				}
			
				// Set
				ctx[0].aoData[ this[0] ]._aData = data;
			
				// Automatically invalidate
				_fnInvalidate( ctx[0], this[0], 'data' );
			
				return this;
			} );
			
			
			_api_register( 'row().node()', function () {
				var ctx = this.context;
			
				return ctx.length && this.length ?
					ctx[0].aoData[ this[0] ].nTr || null :
					null;
			} );
			
			
			_api_register( 'row.add()', function ( row ) {
				// Allow a jQuery object to be passed in - only a single row is added from
				// it though - the first element in the set
				if ( row instanceof $ && row.length ) {
					row = row[0];
				}
			
				var rows = this.iterator( 'table', function ( settings ) {
					if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
						return _fnAddTr( settings, row )[0];
					}
					return _fnAddData( settings, row );
				} );
			
				// Return an Api.rows() extended instance, with the newly added row selected
				return this.row( rows[0] );
			} );
			
			
			
			var __details_add = function ( ctx, row, data, klass )
			{
				// Convert to array of TR elements
				var rows = [];
				var addRow = function ( r, k ) {
					// Recursion to allow for arrays of jQuery objects
					if ( $.isArray( r ) || r instanceof $ ) {
						for ( var i=0, ien=r.length ; i<ien ; i++ ) {
							addRow( r[i], k );
						}
						return;
					}
			
					// If we get a TR element, then just add it directly - up to the dev
					// to add the correct number of columns etc
					if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
						rows.push( r );
					}
					else {
						// Otherwise create a row with a wrapper
						var created = $('<tr><td/></tr>').addClass( k );
						$('td', created)
							.addClass( k )
							.html( r )
							[0].colSpan = _fnVisbleColumns( ctx );
			
						rows.push( created[0] );
					}
				};
			
				addRow( data, klass );
			
				if ( row._details ) {
					row._details.remove();
				}
			
				row._details = $(rows);
			
				// If the children were already shown, that state should be retained
				if ( row._detailsShow ) {
					row._details.insertAfter( row.nTr );
				}
			};
			
			
			var __details_remove = function ( api, idx )
			{
				var ctx = api.context;
			
				if ( ctx.length ) {
					var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];
			
					if ( row && row._details ) {
						row._details.remove();
			
						row._detailsShow = undefined;
						row._details = undefined;
					}
				}
			};
			
			
			var __details_display = function ( api, show ) {
				var ctx = api.context;
			
				if ( ctx.length && api.length ) {
					var row = ctx[0].aoData[ api[0] ];
			
					if ( row._details ) {
						row._detailsShow = show;
			
						if ( show ) {
							row._details.insertAfter( row.nTr );
						}
						else {
							row._details.detach();
						}
			
						__details_events( ctx[0] );
					}
				}
			};
			
			
			var __details_events = function ( settings )
			{
				var api = new _Api( settings );
				var namespace = '.dt.DT_details';
				var drawEvent = 'draw'+namespace;
				var colvisEvent = 'column-visibility'+namespace;
				var destroyEvent = 'destroy'+namespace;
				var data = settings.aoData;
			
				api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
			
				if ( _pluck( data, '_details' ).length > 0 ) {
					// On each draw, insert the required elements into the document
					api.on( drawEvent, function ( e, ctx ) {
						if ( settings !== ctx ) {
							return;
						}
			
						api.rows( {page:'current'} ).eq(0).each( function (idx) {
							// Internal data grab
							var row = data[ idx ];
			
							if ( row._detailsShow ) {
								row._details.insertAfter( row.nTr );
							}
						} );
					} );
			
					// Column visibility change - update the colspan
					api.on( colvisEvent, function ( e, ctx, idx, vis ) {
						if ( settings !== ctx ) {
							return;
						}
			
						// Update the colspan for the details rows (note, only if it already has
						// a colspan)
						var row, visible = _fnVisbleColumns( ctx );
			
						for ( var i=0, ien=data.length ; i<ien ; i++ ) {
							row = data[i];
			
							if ( row._details ) {
								row._details.children('td[colspan]').attr('colspan', visible );
							}
						}
					} );
			
					// Table destroyed - nuke any child rows
					api.on( destroyEvent, function ( e, ctx ) {
						if ( settings !== ctx ) {
							return;
						}
			
						for ( var i=0, ien=data.length ; i<ien ; i++ ) {
							if ( data[i]._details ) {
								__details_remove( api, i );
							}
						}
					} );
				}
			};
			
			// Strings for the method names to help minification
			var _emp = '';
			var _child_obj = _emp+'row().child';
			var _child_mth = _child_obj+'()';
			
			// data can be:
			//  tr
			//  string
			//  jQuery or array of any of the above
			_api_register( _child_mth, function ( data, klass ) {
				var ctx = this.context;
			
				if ( data === undefined ) {
					// get
					return ctx.length && this.length ?
						ctx[0].aoData[ this[0] ]._details :
						undefined;
				}
				else if ( data === true ) {
					// show
					this.child.show();
				}
				else if ( data === false ) {
					// remove
					__details_remove( this );
				}
				else if ( ctx.length && this.length ) {
					// set
					__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
				}
			
				return this;
			} );
			
			
			_api_register( [
				_child_obj+'.show()',
				_child_mth+'.show()' // only when `child()` was called with parameters (without
			], function ( show ) {   // it returns an object and this method is not executed)
				__details_display( this, true );
				return this;
			} );
			
			
			_api_register( [
				_child_obj+'.hide()',
				_child_mth+'.hide()' // only when `child()` was called with parameters (without
			], function () {         // it returns an object and this method is not executed)
				__details_display( this, false );
				return this;
			} );
			
			
			_api_register( [
				_child_obj+'.remove()',
				_child_mth+'.remove()' // only when `child()` was called with parameters (without
			], function () {           // it returns an object and this method is not executed)
				__details_remove( this );
				return this;
			} );
			
			
			_api_register( _child_obj+'.isShown()', function () {
				var ctx = this.context;
			
				if ( ctx.length && this.length ) {
					// _detailsShown as false or undefined will fall through to return false
					return ctx[0].aoData[ this[0] ]._detailsShow || false;
				}
				return false;
			} );
			
			
			
			/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
			 * Columns
			 *
			 * {integer}           - column index (>=0 count from left, <0 count from right)
			 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
			 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
			 * "{string}:name"     - column name
			 * "{string}"          - jQuery selector on column header nodes
			 *
			 */
			
			// can be an array of these items, comma separated list, or an array of comma
			// separated lists
			
			var __re_column_selector = /^(.+):(name|visIdx|visible)$/;
			
			
			// r1 and r2 are redundant - but it means that the parameters match for the
			// iterator callback in columns().data()
			var __columnData = function ( settings, column, r1, r2, rows ) {
				var a = [];
				for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
					a.push( _fnGetCellData( settings, rows[row], column ) );
				}
				return a;
			};
			
			
			var __column_selector = function ( settings, selector, opts )
			{
				var
					columns = settings.aoColumns,
					names = _pluck( columns, 'sName' ),
					nodes = _pluck( columns, 'nTh' );
			
				var run = function ( s ) {
					var selInt = _intVal( s );
			
					// Selector - all
					if ( s === '' ) {
						return _range( columns.length );
					}
					
					// Selector - index
					if ( selInt !== null ) {
						return [ selInt >= 0 ?
							selInt : // Count from left
							columns.length + selInt // Count from right (+ because its a negative value)
						];
					}
					
					// Selector = function
					if ( typeof s === 'function' ) {
						var rows = _selector_row_indexes( settings, opts );
			
						return $.map( columns, function (col, idx) {
							return s(
									idx,
									__columnData( settings, idx, 0, 0, rows ),
									nodes[ idx ]
								) ? idx : null;
						} );
					}
			
					// jQuery or string selector
					var match = typeof s === 'string' ?
						s.match( __re_column_selector ) :
						'';
			
					if ( match ) {
						switch( match[2] ) {
							case 'visIdx':
							case 'visible':
								var idx = parseInt( match[1], 10 );
								// Visible index given, convert to column index
								if ( idx < 0 ) {
									// Counting from the right
									var visColumns = $.map( columns, function (col,i) {
										return col.bVisible ? i : null;
									} );
									return [ visColumns[ visColumns.length + idx ] ];
								}
								// Counting from the left
								return [ _fnVisibleToColumnIndex( settings, idx ) ];
			
							case 'name':
								// match by name. `names` is column index complete and in order
								return $.map( names, function (name, i) {
									return name === match[1] ? i : null;
								} );
						}
					}
					else {
						// jQuery selector on the TH elements for the columns
						return $( nodes )
							.filter( s )
							.map( function () {
								return $.inArray( this, nodes ); // `nodes` is column index complete and in order
							} )
							.toArray();
					}
				};
			
				return _selector_run( 'column', selector, run, settings, opts );
			};
			
			
			var __setColumnVis = function ( settings, column, vis, recalc ) {
				var
					cols = settings.aoColumns,
					col  = cols[ column ],
					data = settings.aoData,
					row, cells, i, ien, tr;
			
				// Get
				if ( vis === undefined ) {
					return col.bVisible;
				}
			
				// Set
				// No change
				if ( col.bVisible === vis ) {
					return;
				}
			
				if ( vis ) {
					// Insert column
					// Need to decide if we should use appendChild or insertBefore
					var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
			
					for ( i=0, ien=data.length ; i<ien ; i++ ) {
						tr = data[i].nTr;
						cells = data[i].anCells;
			
						if ( tr ) {
							// insertBefore can act like appendChild if 2nd arg is null
							tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
						}
					}
				}
				else {
					// Remove column
					$( _pluck( settings.aoData, 'anCells', column ) ).detach();
				}
			
				// Common actions
				col.bVisible = vis;
				_fnDrawHead( settings, settings.aoHeader );
				_fnDrawHead( settings, settings.aoFooter );
			
				if ( recalc === undefined || recalc ) {
					// Automatically adjust column sizing
					_fnAdjustColumnSizing( settings );
			
					// Realign columns for scrolling
					if ( settings.oScroll.sX || settings.oScroll.sY ) {
						_fnScrollDraw( settings );
					}
				}
			
				_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );
			
				_fnSaveState( settings );
			};
			
			
			_api_register( 'columns()', function ( selector, opts ) {
				// argument shifting
				if ( selector === undefined ) {
					selector = '';
				}
				else if ( $.isPlainObject( selector ) ) {
					opts = selector;
					selector = '';
				}
			
				opts = _selector_opts( opts );
			
				var inst = this.iterator( 'table', function ( settings ) {
					return __column_selector( settings, selector, opts );
				}, 1 );
			
				// Want argument shifting here and in _row_selector?
				inst.selector.cols = selector;
				inst.selector.opts = opts;
			
				return inst;
			} );
			
			_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
				return this.iterator( 'column', function ( settings, column ) {
					return settings.aoColumns[column].nTh;
				}, 1 );
			} );
			
			_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
				return this.iterator( 'column', function ( settings, column ) {
					return settings.aoColumns[column].nTf;
				}, 1 );
			} );
			
			_api_registerPlural( 'columns().data()', 'column().data()', function () {
				return this.iterator( 'column-rows', __columnData, 1 );
			} );
			
			_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
				return this.iterator( 'column', function ( settings, column ) {
					return settings.aoColumns[column].mData;
				}, 1 );
			} );
			
			_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
				return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
					return _pluck_order( settings.aoData, rows,
						type === 'search' ? '_aFilterData' : '_aSortData', column
					);
				}, 1 );
			} );
			
			_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
				return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
					return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
				}, 1 );
			} );
			
			_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
				return this.iterator( 'column', function ( settings, column ) {
					if ( vis === undefined ) {
						return settings.aoColumns[ column ].bVisible;
					} // else
					__setColumnVis( settings, column, vis, calc );
				} );
			} );
			
			_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
				return this.iterator( 'column', function ( settings, column ) {
					return type === 'visible' ?
						_fnColumnIndexToVisible( settings, column ) :
						column;
				}, 1 );
			} );
			
			_api_register( 'columns.adjust()', function () {
				return this.iterator( 'table', function ( settings ) {
					_fnAdjustColumnSizing( settings );
				}, 1 );
			} );
			
			_api_register( 'column.index()', function ( type, idx ) {
				if ( this.context.length !== 0 ) {
					var ctx = this.context[0];
			
					if ( type === 'fromVisible' || type === 'toData' ) {
						return _fnVisibleToColumnIndex( ctx, idx );
					}
					else if ( type === 'fromData' || type === 'toVisible' ) {
						return _fnColumnIndexToVisible( ctx, idx );
					}
				}
			} );
			
			_api_register( 'column()', function ( selector, opts ) {
				return _selector_first( this.columns( selector, opts ) );
			} );
			
			
			
			
			var __cell_selector = function ( settings, selector, opts )
			{
				var data = settings.aoData;
				var rows = _selector_row_indexes( settings, opts );
				var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
				var allCells = $( [].concat.apply([], cells) );
				var row;
				var columns = settings.aoColumns.length;
				var a, i, ien, j, o, host;
			
				var run = function ( s ) {
					var fnSelector = typeof s === 'function';
			
					if ( s === null || s === undefined || fnSelector ) {
						// All cells and function selectors
						a = [];
			
						for ( i=0, ien=rows.length ; i<ien ; i++ ) {
							row = rows[i];
			
							for ( j=0 ; j<columns ; j++ ) {
								o = {
									row: row,
									column: j
								};
			
								if ( fnSelector ) {
									// Selector - function
									host = data[ row ];
			
									if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
										a.push( o );
									}
								}
								else {
									// Selector - all
									a.push( o );
								}
							}
						}
			
						return a;
					}
					
					// Selector - index
					if ( $.isPlainObject( s ) ) {
						return [s];
					}
			
					// Selector - jQuery filtered cells
					return allCells
						.filter( s )
						.map( function (i, el) {
							if ( el.parentNode ) {
								row = el.parentNode._DT_RowIndex;
							}
							else {
								// If no parent node, then the cell is hidden and we'll need
								// to traverse the array to find it
								for ( i=0, ien=data.length ; i<ien ; i++ ) {
									if ( $.inArray( el, data[i].anCells ) !== -1 ) {
										row = i;
										break;
									}
								}
							}
			
							return {
								row: row,
								column: $.inArray( el, data[ row ].anCells )
							};
						} )
						.toArray();
				};
			
				return _selector_run( 'cell', selector, run, settings, opts );
			};
			
			
			
			
			_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
				// Argument shifting
				if ( $.isPlainObject( rowSelector ) ) {
					// Indexes
					if ( rowSelector.row === undefined ) {
						// Selector options in first parameter
						opts = rowSelector;
						rowSelector = null;
					}
					else {
						// Cell index objects in first parameter
						opts = columnSelector;
						columnSelector = null;
					}
				}
				if ( $.isPlainObject( columnSelector ) ) {
					opts = columnSelector;
					columnSelector = null;
				}
			
				// Cell selector
				if ( columnSelector === null || columnSelector === undefined ) {
					return this.iterator( 'table', function ( settings ) {
						return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
					} );
				}
			
				// Row + column selector
				var columns = this.columns( columnSelector, opts );
				var rows = this.rows( rowSelector, opts );
				var a, i, ien, j, jen;
			
				var cells = this.iterator( 'table', function ( settings, idx ) {
					a = [];
			
					for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
						for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
							a.push( {
								row:    rows[idx][i],
								column: columns[idx][j]
							} );
						}
					}
			
					return a;
				}, 1 );
			
				$.extend( cells.selector, {
					cols: columnSelector,
					rows: rowSelector,
					opts: opts
				} );
			
				return cells;
			} );
			
			
			_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
				return this.iterator( 'cell', function ( settings, row, column ) {
					var cells = settings.aoData[ row ].anCells;
					return cells ?
						cells[ column ] :
						undefined;
				}, 1 );
			} );
			
			
			_api_register( 'cells().data()', function () {
				return this.iterator( 'cell', function ( settings, row, column ) {
					return _fnGetCellData( settings, row, column );
				}, 1 );
			} );
			
			
			_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
				type = type === 'search' ? '_aFilterData' : '_aSortData';
			
				return this.iterator( 'cell', function ( settings, row, column ) {
					return settings.aoData[ row ][ type ][ column ];
				}, 1 );
			} );
			
			
			_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
				return this.iterator( 'cell', function ( settings, row, column ) {
					return _fnGetCellData( settings, row, column, type );
				}, 1 );
			} );
			
			
			_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
				return this.iterator( 'cell', function ( settings, row, column ) {
					return {
						row: row,
						column: column,
						columnVisible: _fnColumnIndexToVisible( settings, column )
					};
				}, 1 );
			} );
			
			
			_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
				return this.iterator( 'cell', function ( settings, row, column ) {
					_fnInvalidate( settings, row, src, column );
				} );
			} );
			
			
			
			_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
				return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
			} );
			
			
			_api_register( 'cell().data()', function ( data ) {
				var ctx = this.context;
				var cell = this[0];
			
				if ( data === undefined ) {
					// Get
					return ctx.length && cell.length ?
						_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
						undefined;
				}
			
				// Set
				_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
				_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
			
				return this;
			} );
			
			
			
			/**
			 * Get current ordering (sorting) that has been applied to the table.
			 *
			 * @returns {array} 2D array containing the sorting information for the first
			 *   table in the current context. Each element in the parent array represents
			 *   a column being sorted upon (i.e. multi-sorting with two columns would have
			 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
			 *   the column index that the sorting condition applies to, the second is the
			 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
			 *   index of the sorting order from the `column.sorting` initialisation array.
			 *//**
			 * Set the ordering for the table.
			 *
			 * @param {integer} order Column index to sort upon.
			 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
			 * @returns {DataTables.Api} this
			 *//**
			 * Set the ordering for the table.
			 *
			 * @param {array} order 1D array of sorting information to be applied.
			 * @param {array} [...] Optional additional sorting conditions
			 * @returns {DataTables.Api} this
			 *//**
			 * Set the ordering for the table.
			 *
			 * @param {array} order 2D array of sorting information to be applied.
			 * @returns {DataTables.Api} this
			 */
			_api_register( 'order()', function ( order, dir ) {
				var ctx = this.context;
			
				if ( order === undefined ) {
					// get
					return ctx.length !== 0 ?
						ctx[0].aaSorting :
						undefined;
				}
			
				// set
				if ( typeof order === 'number' ) {
					// Simple column / direction passed in
					order = [ [ order, dir ] ];
				}
				else if ( ! $.isArray( order[0] ) ) {
					// Arguments passed in (list of 1D arrays)
					order = Array.prototype.slice.call( arguments );
				}
				// otherwise a 2D array was passed in
			
				return this.iterator( 'table', function ( settings ) {
					settings.aaSorting = order.slice();
				} );
			} );
			
			
			/**
			 * Attach a sort listener to an element for a given column
			 *
			 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
			 *   listener to. This can take the form of a single DOM node, a jQuery
			 *   collection of nodes or a jQuery selector which will identify the node(s).
			 * @param {integer} column the column that a click on this node will sort on
			 * @param {function} [callback] callback function when sort is run
			 * @returns {DataTables.Api} this
			 */
			_api_register( 'order.listener()', function ( node, column, callback ) {
				return this.iterator( 'table', function ( settings ) {
					_fnSortAttachListener( settings, node, column, callback );
				} );
			} );
			
			
			// Order by the selected column(s)
			_api_register( [
				'columns().order()',
				'column().order()'
			], function ( dir ) {
				var that = this;
			
				return this.iterator( 'table', function ( settings, i ) {
					var sort = [];
			
					$.each( that[i], function (j, col) {
						sort.push( [ col, dir ] );
					} );
			
					settings.aaSorting = sort;
				} );
			} );
			
			
			
			_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
				var ctx = this.context;
			
				if ( input === undefined ) {
					// get
					return ctx.length !== 0 ?
						ctx[0].oPreviousSearch.sSearch :
						undefined;
				}
			
				// set
				return this.iterator( 'table', function ( settings ) {
					if ( ! settings.oFeatures.bFilter ) {
						return;
					}
			
					_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
						"sSearch": input+"",
						"bRegex":  regex === null ? false : regex,
						"bSmart":  smart === null ? true  : smart,
						"bCaseInsensitive": caseInsen === null ? true : caseInsen
					} ), 1 );
				} );
			} );
			
			
			_api_registerPlural(
				'columns().search()',
				'column().search()',
				function ( input, regex, smart, caseInsen ) {
					return this.iterator( 'column', function ( settings, column ) {
						var preSearch = settings.aoPreSearchCols;
			
						if ( input === undefined ) {
							// get
							return preSearch[ column ].sSearch;
						}
			
						// set
						if ( ! settings.oFeatures.bFilter ) {
							return;
						}
			
						$.extend( preSearch[ column ], {
							"sSearch": input+"",
							"bRegex":  regex === null ? false : regex,
							"bSmart":  smart === null ? true  : smart,
							"bCaseInsensitive": caseInsen === null ? true : caseInsen
						} );
			
						_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
					} );
				}
			);
			
			/*
			 * State API methods
			 */
			
			_api_register( 'state()', function () {
				return this.context.length ?
					this.context[0].oSavedState :
					null;
			} );
			
			
			_api_register( 'state.clear()', function () {
				return this.iterator( 'table', function ( settings ) {
					// Save an empty object
					settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
				} );
			} );
			
			
			_api_register( 'state.loaded()', function () {
				return this.context.length ?
					this.context[0].oLoadedState :
					null;
			} );
			
			
			_api_register( 'state.save()', function () {
				return this.iterator( 'table', function ( settings ) {
					_fnSaveState( settings );
				} );
			} );
			
			
			
			/**
			 * Provide a common method for plug-ins to check the version of DataTables being
			 * used, in order to ensure compatibility.
			 *
			 *  @param {string} version Version string to check for, in the format "X.Y.Z".
			 *    Note that the formats "X" and "X.Y" are also acceptable.
			 *  @returns {boolean} true if this version of DataTables is greater or equal to
			 *    the required version, or false if this version of DataTales is not
			 *    suitable
			 *  @static
			 *  @dtopt API-Static
			 *
			 *  @example
			 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
			 */
			DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
			{
				var aThis = DataTable.version.split('.');
				var aThat = version.split('.');
				var iThis, iThat;
			
				for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
					iThis = parseInt( aThis[i], 10 ) || 0;
					iThat = parseInt( aThat[i], 10 ) || 0;
			
					// Parts are the same, keep comparing
					if (iThis === iThat) {
						continue;
					}
			
					// Parts are different, return immediately
					return iThis > iThat;
				}
			
				return true;
			};
			
			
			/**
			 * Check if a `<table>` node is a DataTable table already or not.
			 *
			 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
			 *      selector for the table to test. Note that if more than more than one
			 *      table is passed on, only the first will be checked
			 *  @returns {boolean} true the table given is a DataTable, or false otherwise
			 *  @static
			 *  @dtopt API-Static
			 *
			 *  @example
			 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
			 *      $('#example').dataTable();
			 *    }
			 */
			DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
			{
				var t = $(table).get(0);
				var is = false;
			
				$.each( DataTable.settings, function (i, o) {
					var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
					var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
			
					if ( o.nTable === t || head === t || foot === t ) {
						is = true;
					}
				} );
			
				return is;
			};
			
			
			/**
			 * Get all DataTable tables that have been initialised - optionally you can
			 * select to get only currently visible tables.
			 *
			 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
			 *    or visible tables only.
			 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
			 *    DataTables
			 *  @static
			 *  @dtopt API-Static
			 *
			 *  @example
			 *    $.each( $.fn.dataTable.tables(true), function () {
			 *      $(table).DataTable().columns.adjust();
			 *    } );
			 */
			DataTable.tables = DataTable.fnTables = function ( visible )
			{
				var api = false;
			
				if ( $.isPlainObject( visible ) ) {
					api = visible.api;
					visible = visible.visible;
				}
			
				var a = $.map( DataTable.settings, function (o) {
					if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
						return o.nTable;
					}
				} );
			
				return api ?
					new _Api( a ) :
					a;
			};
			
			
			/**
			 * DataTables utility methods
			 * 
			 * This namespace provides helper methods that DataTables uses internally to
			 * create a DataTable, but which are not exclusively used only for DataTables.
			 * These methods can be used by extension authors to save the duplication of
			 * code.
			 *
			 *  @namespace
			 */
			DataTable.util = {
				/**
				 * Throttle the calls to a function. Arguments and context are maintained
				 * for the throttled function.
				 *
				 * @param {function} fn Function to be called
				 * @param {integer} freq Call frequency in mS
				 * @return {function} Wrapped function
				 */
				throttle: _fnThrottle,
			
			
				/**
				 * Escape a string such that it can be used in a regular expression
				 *
				 *  @param {string} sVal string to escape
				 *  @returns {string} escaped string
				 */
				escapeRegex: _fnEscapeRegex
			};
			
			
			/**
			 * Convert from camel case parameters to Hungarian notation. This is made public
			 * for the extensions to provide the same ability as DataTables core to accept
			 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
			 * parameters.
			 *
			 *  @param {object} src The model object which holds all parameters that can be
			 *    mapped.
			 *  @param {object} user The object to convert from camel case to Hungarian.
			 *  @param {boolean} force When set to `true`, properties which already have a
			 *    Hungarian value in the `user` object will be overwritten. Otherwise they
			 *    won't be.
			 */
			DataTable.camelToHungarian = _fnCamelToHungarian;
			
			
			
			/**
			 *
			 */
			_api_register( '$()', function ( selector, opts ) {
				var
					rows   = this.rows( opts ).nodes(), // Get all rows
					jqRows = $(rows);
			
				return $( [].concat(
					jqRows.filter( selector ).toArray(),
					jqRows.find( selector ).toArray()
				) );
			} );
			
			
			// jQuery functions to operate on the tables
			$.each( [ 'on', 'one', 'off' ], function (i, key) {
				_api_register( key+'()', function ( /* event, handler */ ) {
					var args = Array.prototype.slice.call(arguments);
			
					// Add the `dt` namespace automatically if it isn't already present
					if ( ! args[0].match(/\.dt\b/) ) {
						args[0] += '.dt';
					}
			
					var inst = $( this.tables().nodes() );
					inst[key].apply( inst, args );
					return this;
				} );
			} );
			
			
			_api_register( 'clear()', function () {
				return this.iterator( 'table', function ( settings ) {
					_fnClearTable( settings );
				} );
			} );
			
			
			_api_register( 'settings()', function () {
				return new _Api( this.context, this.context );
			} );
			
			
			_api_register( 'init()', function () {
				var ctx = this.context;
				return ctx.length ? ctx[0].oInit : null;
			} );
			
			
			_api_register( 'data()', function () {
				return this.iterator( 'table', function ( settings ) {
					return _pluck( settings.aoData, '_aData' );
				} ).flatten();
			} );
			
			
			_api_register( 'destroy()', function ( remove ) {
				remove = remove || false;
			
				return this.iterator( 'table', function ( settings ) {
					var orig      = settings.nTableWrapper.parentNode;
					var classes   = settings.oClasses;
					var table     = settings.nTable;
					var tbody     = settings.nTBody;
					var thead     = settings.nTHead;
					var tfoot     = settings.nTFoot;
					var jqTable   = $(table);
					var jqTbody   = $(tbody);
					var jqWrapper = $(settings.nTableWrapper);
					var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
					var i, ien;
			
					// Flag to note that the table is currently being destroyed - no action
					// should be taken
					settings.bDestroying = true;
			
					// Fire off the destroy callbacks for plug-ins etc
					_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
			
					// If not being removed from the document, make all columns visible
					if ( ! remove ) {
						new _Api( settings ).columns().visible( true );
					}
			
					// Blitz all `DT` namespaced events (these are internal events, the
					// lowercase, `dt` events are user subscribed and they are responsible
					// for removing them
					jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');
					$(window).unbind('.DT-'+settings.sInstance);
			
					// When scrolling we had to break the table up - restore it
					if ( table != thead.parentNode ) {
						jqTable.children('thead').detach();
						jqTable.append( thead );
					}
			
					if ( tfoot && table != tfoot.parentNode ) {
						jqTable.children('tfoot').detach();
						jqTable.append( tfoot );
					}
			
					settings.aaSorting = [];
					settings.aaSortingFixed = [];
					_fnSortingClasses( settings );
			
					$( rows ).removeClass( settings.asStripeClasses.join(' ') );
			
					$('th, td', thead).removeClass( classes.sSortable+' '+
						classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
					);
			
					if ( settings.bJUI ) {
						$('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();
						$('th, td', thead).each( function () {
							var wrapper = $('div.'+classes.sSortJUIWrapper, this);
							$(this).append( wrapper.contents() );
							wrapper.detach();
						} );
					}
			
					// Add the TR elements back into the table in their original order
					jqTbody.children().detach();
					jqTbody.append( rows );
			
					// Remove the DataTables generated nodes, events and classes
					var removedMethod = remove ? 'remove' : 'detach';
					jqTable[ removedMethod ]();
					jqWrapper[ removedMethod ]();
			
					// If we need to reattach the table to the document
					if ( ! remove && orig ) {
						// insertBefore acts like appendChild if !arg[1]
						orig.insertBefore( table, settings.nTableReinsertBefore );
			
						// Restore the width of the original table - was read from the style property,
						// so we can restore directly to that
						jqTable
							.css( 'width', settings.sDestroyWidth )
							.removeClass( classes.sTable );
			
						// If the were originally stripe classes - then we add them back here.
						// Note this is not fool proof (for example if not all rows had stripe
						// classes - but it's a good effort without getting carried away
						ien = settings.asDestroyStripes.length;
			
						if ( ien ) {
							jqTbody.children().each( function (i) {
								$(this).addClass( settings.asDestroyStripes[i % ien] );
							} );
						}
					}
			
					/* Remove the settings object from the settings array */
					var idx = $.inArray( settings, DataTable.settings );
					if ( idx !== -1 ) {
						DataTable.settings.splice( idx, 1 );
					}
				} );
			} );
			
			
			// Add the `every()` method for rows, columns and cells in a compact form
			$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
				_api_register( type+'s().every()', function ( fn ) {
					return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
						// Rows and columns:
						//  arg1 - index
						//  arg2 - table counter
						//  arg3 - loop counter
						//  arg4 - undefined
						// Cells:
						//  arg1 - row index
						//  arg2 - column index
						//  arg3 - table counter
						//  arg4 - loop counter
						fn.call(
							new _Api( settings )[ type ]( arg1, type==='cell' ? arg2 : undefined ),
							arg1, arg2, arg3, arg4
						);
					} );
				} );
			} );
			
			
			// i18n method for extensions to be able to use the language object from the
			// DataTable
			_api_register( 'i18n()', function ( token, def, plural ) {
				var ctx = this.context[0];
				var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );
			
				if ( resolved === undefined ) {
					resolved = def;
				}
			
				if ( plural !== undefined && $.isPlainObject( resolved ) ) {
					resolved = resolved[ plural ] !== undefined ?
						resolved[ plural ] :
						resolved._;
				}
			
				return resolved.replace( '%d', plural ); // nb: plural might be undefined,
			} );

			/**
			 * Version string for plug-ins to check compatibility. Allowed format is
			 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
			 * only for non-release builds. See http://semver.org/ for more information.
			 *  @member
			 *  @type string
			 *  @default Version number
			 */
			DataTable.version = "1.10.9";

			/**
			 * Private data store, containing all of the settings objects that are
			 * created for the tables on a given page.
			 *
			 * Note that the `DataTable.settings` object is aliased to
			 * `jQuery.fn.dataTableExt` through which it may be accessed and
			 * manipulated, or `jQuery.fn.dataTable.settings`.
			 *  @member
			 *  @type array
			 *  @default []
			 *  @private
			 */
			DataTable.settings = [];

			/**
			 * Object models container, for the various models that DataTables has
			 * available to it. These models define the objects that are used to hold
			 * the active state and configuration of the table.
			 *  @namespace
			 */
			DataTable.models = {};
			
			
			
			/**
			 * Template object for the way in which DataTables holds information about
			 * search information for the global filter and individual column filters.
			 *  @namespace
			 */
			DataTable.models.oSearch = {
				/**
				 * Flag to indicate if the filtering should be case insensitive or not
				 *  @type boolean
				 *  @default true
				 */
				"bCaseInsensitive": true,
			
				/**
				 * Applied search term
				 *  @type string
				 *  @default <i>Empty string</i>
				 */
				"sSearch": "",
			
				/**
				 * Flag to indicate if the search term should be interpreted as a
				 * regular expression (true) or not (false) and therefore and special
				 * regex characters escaped.
				 *  @type boolean
				 *  @default false
				 */
				"bRegex": false,
			
				/**
				 * Flag to indicate if DataTables is to use its smart filtering or not.
				 *  @type boolean
				 *  @default true
				 */
				"bSmart": true
			};
			
			
			
			
			/**
			 * Template object for the way in which DataTables holds information about
			 * each individual row. This is the object format used for the settings
			 * aoData array.
			 *  @namespace
			 */
			DataTable.models.oRow = {
				/**
				 * TR element for the row
				 *  @type node
				 *  @default null
				 */
				"nTr": null,
			
				/**
				 * Array of TD elements for each row. This is null until the row has been
				 * created.
				 *  @type array nodes
				 *  @default []
				 */
				"anCells": null,
			
				/**
				 * Data object from the original data source for the row. This is either
				 * an array if using the traditional form of DataTables, or an object if
				 * using mData options. The exact type will depend on the passed in
				 * data from the data source, or will be an array if using DOM a data
				 * source.
				 *  @type array|object
				 *  @default []
				 */
				"_aData": [],
			
				/**
				 * Sorting data cache - this array is ostensibly the same length as the
				 * number of columns (although each index is generated only as it is
				 * needed), and holds the data that is used for sorting each column in the
				 * row. We do this cache generation at the start of the sort in order that
				 * the formatting of the sort data need be done only once for each cell
				 * per sort. This array should not be read from or written to by anything
				 * other than the master sorting methods.
				 *  @type array
				 *  @default null
				 *  @private
				 */
				"_aSortData": null,
			
				/**
				 * Per cell filtering data cache. As per the sort data cache, used to
				 * increase the performance of the filtering in DataTables
				 *  @type array
				 *  @default null
				 *  @private
				 */
				"_aFilterData": null,
			
				/**
				 * Filtering data cache. This is the same as the cell filtering cache, but
				 * in this case a string rather than an array. This is easily computed with
				 * a join on `_aFilterData`, but is provided as a cache so the join isn't
				 * needed on every search (memory traded for performance)
				 *  @type array
				 *  @default null
				 *  @private
				 */
				"_sFilterRow": null,
			
				/**
				 * Cache of the class name that DataTables has applied to the row, so we
				 * can quickly look at this variable rather than needing to do a DOM check
				 * on className for the nTr property.
				 *  @type string
				 *  @default <i>Empty string</i>
				 *  @private
				 */
				"_sRowStripe": "",
			
				/**
				 * Denote if the original data source was from the DOM, or the data source
				 * object. This is used for invalidating data, so DataTables can
				 * automatically read data from the original source, unless uninstructed
				 * otherwise.
				 *  @type string
				 *  @default null
				 *  @private
				 */
				"src": null,
			
				/**
				 * Index in the aoData array. This saves an indexOf lookup when we have the
				 * object, but want to know the index
				 *  @type integer
				 *  @default -1
				 *  @private
				 */
				"idx": -1
			};
			
			
			/**
			 * Template object for the column information object in DataTables. This object
			 * is held in the settings aoColumns array and contains all the information that
			 * DataTables needs about each individual column.
			 *
			 * Note that this object is related to {@link DataTable.defaults.column}
			 * but this one is the internal data store for DataTables's cache of columns.
			 * It should NOT be manipulated outside of DataTables. Any configuration should
			 * be done through the initialisation options.
			 *  @namespace
			 */
			DataTable.models.oColumn = {
				/**
				 * Column index. This could be worked out on-the-fly with $.inArray, but it
				 * is faster to just hold it as a variable
				 *  @type integer
				 *  @default null
				 */
				"idx": null,
			
				/**
				 * A list of the columns that sorting should occur on when this column
				 * is sorted. That this property is an array allows multi-column sorting
				 * to be defined for a column (for example first name / last name columns
				 * would benefit from this). The values are integers pointing to the
				 * columns to be sorted on (typically it will be a single integer pointing
				 * at itself, but that doesn't need to be the case).
				 *  @type array
				 */
				"aDataSort": null,
			
				/**
				 * Define the sorting directions that are applied to the column, in sequence
				 * as the column is repeatedly sorted upon - i.e. the first value is used
				 * as the sorting direction when the column if first sorted (clicked on).
				 * Sort it again (click again) and it will move on to the next index.
				 * Repeat until loop.
				 *  @type array
				 */
				"asSorting": null,
			
				/**
				 * Flag to indicate if the column is searchable, and thus should be included
				 * in the filtering or not.
				 *  @type boolean
				 */
				"bSearchable": null,
			
				/**
				 * Flag to indicate if the column is sortable or not.
				 *  @type boolean
				 */
				"bSortable": null,
			
				/**
				 * Flag to indicate if the column is currently visible in the table or not
				 *  @type boolean
				 */
				"bVisible": null,
			
				/**
				 * Store for manual type assignment using the `column.type` option. This
				 * is held in store so we can manipulate the column's `sType` property.
				 *  @type string
				 *  @default null
				 *  @private
				 */
				"_sManualType": null,
			
				/**
				 * Flag to indicate if HTML5 data attributes should be used as the data
				 * source for filtering or sorting. True is either are.
				 *  @type boolean
				 *  @default false
				 *  @private
				 */
				"_bAttrSrc": false,
			
				/**
				 * Developer definable function that is called whenever a cell is created (Ajax source,
				 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
				 * allowing you to modify the DOM element (add background colour for example) when the
				 * element is available.
				 *  @type function
				 *  @param {element} nTd The TD node that has been created
				 *  @param {*} sData The Data for the cell
				 *  @param {array|object} oData The data for the whole row
				 *  @param {int} iRow The row index for the aoData data store
				 *  @default null
				 */
				"fnCreatedCell": null,
			
				/**
				 * Function to get data from a cell in a column. You should <b>never</b>
				 * access data directly through _aData internally in DataTables - always use
				 * the method attached to this property. It allows mData to function as
				 * required. This function is automatically assigned by the column
				 * initialisation method
				 *  @type function
				 *  @param {array|object} oData The data array/object for the array
				 *    (i.e. aoData[]._aData)
				 *  @param {string} sSpecific The specific data type you want to get -
				 *    'display', 'type' 'filter' 'sort'
				 *  @returns {*} The data for the cell from the given row's data
				 *  @default null
				 */
				"fnGetData": null,
			
				/**
				 * Function to set data for a cell in the column. You should <b>never</b>
				 * set the data directly to _aData internally in DataTables - always use
				 * this method. It allows mData to function as required. This function
				 * is automatically assigned by the column initialisation method
				 *  @type function
				 *  @param {array|object} oData The data array/object for the array
				 *    (i.e. aoData[]._aData)
				 *  @param {*} sValue Value to set
				 *  @default null
				 */
				"fnSetData": null,
			
				/**
				 * Property to read the value for the cells in the column from the data
				 * source array / object. If null, then the default content is used, if a
				 * function is given then the return from the function is used.
				 *  @type function|int|string|null
				 *  @default null
				 */
				"mData": null,
			
				/**
				 * Partner property to mData which is used (only when defined) to get
				 * the data - i.e. it is basically the same as mData, but without the
				 * 'set' option, and also the data fed to it is the result from mData.
				 * This is the rendering method to match the data method of mData.
				 *  @type function|int|string|null
				 *  @default null
				 */
				"mRender": null,
			
				/**
				 * Unique header TH/TD element for this column - this is what the sorting
				 * listener is attached to (if sorting is enabled.)
				 *  @type node
				 *  @default null
				 */
				"nTh": null,
			
				/**
				 * Unique footer TH/TD element for this column (if there is one). Not used
				 * in DataTables as such, but can be used for plug-ins to reference the
				 * footer for each column.
				 *  @type node
				 *  @default null
				 */
				"nTf": null,
			
				/**
				 * The class to apply to all TD elements in the table's TBODY for the column
				 *  @type string
				 *  @default null
				 */
				"sClass": null,
			
				/**
				 * When DataTables calculates the column widths to assign to each column,
				 * it finds the longest string in each column and then constructs a
				 * temporary table and reads the widths from that. The problem with this
				 * is that "mmm" is much wider then "iiii", but the latter is a longer
				 * string - thus the calculation can go wrong (doing it properly and putting
				 * it into an DOM object and measuring that is horribly(!) slow). Thus as
				 * a "work around" we provide this option. It will append its value to the
				 * text that is found to be the longest string for the column - i.e. padding.
				 *  @type string
				 */
				"sContentPadding": null,
			
				/**
				 * Allows a default value to be given for a column's data, and will be used
				 * whenever a null data source is encountered (this can be because mData
				 * is set to null, or because the data source itself is null).
				 *  @type string
				 *  @default null
				 */
				"sDefaultContent": null,
			
				/**
				 * Name for the column, allowing reference to the column by name as well as
				 * by index (needs a lookup to work by name).
				 *  @type string
				 */
				"sName": null,
			
				/**
				 * Custom sorting data type - defines which of the available plug-ins in
				 * afnSortData the custom sorting will use - if any is defined.
				 *  @type string
				 *  @default std
				 */
				"sSortDataType": 'std',
			
				/**
				 * Class to be applied to the header element when sorting on this column
				 *  @type string
				 *  @default null
				 */
				"sSortingClass": null,
			
				/**
				 * Class to be applied to the header element when sorting on this column -
				 * when jQuery UI theming is used.
				 *  @type string
				 *  @default null
				 */
				"sSortingClassJUI": null,
			
				/**
				 * Title of the column - what is seen in the TH element (nTh).
				 *  @type string
				 */
				"sTitle": null,
			
				/**
				 * Column sorting and filtering type
				 *  @type string
				 *  @default null
				 */
				"sType": null,
			
				/**
				 * Width of the column
				 *  @type string
				 *  @default null
				 */
				"sWidth": null,
			
				/**
				 * Width of the column when it was first "encountered"
				 *  @type string
				 *  @default null
				 */
				"sWidthOrig": null
			};
			
			
			/*
			 * Developer note: The properties of the object below are given in Hungarian
			 * notation, that was used as the interface for DataTables prior to v1.10, however
			 * from v1.10 onwards the primary interface is camel case. In order to avoid
			 * breaking backwards compatibility utterly with this change, the Hungarian
			 * version is still, internally the primary interface, but is is not documented
			 * - hence the @name tags in each doc comment. This allows a Javascript function
			 * to create a map from Hungarian notation to camel case (going the other direction
			 * would require each property to be listed, which would at around 3K to the size
			 * of DataTables, while this method is about a 0.5K hit.
			 *
			 * Ultimately this does pave the way for Hungarian notation to be dropped
			 * completely, but that is a massive amount of work and will break current
			 * installs (therefore is on-hold until v2).
			 */
			
			/**
			 * Initialisation options that can be given to DataTables at initialisation
			 * time.
			 *  @namespace
			 */
			DataTable.defaults = {
				/**
				 * An array of data to use for the table, passed in at initialisation which
				 * will be used in preference to any data which is already in the DOM. This is
				 * particularly useful for constructing tables purely in Javascript, for
				 * example with a custom Ajax call.
				 *  @type array
				 *  @default null
				 *
				 *  @dtopt Option
				 *  @name DataTable.defaults.data
				 *
				 *  @example
				 *    // Using a 2D array data source
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "data": [
				 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
				 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
				 *        ],
				 *        "columns": [
				 *          { "title": "Engine" },
				 *          { "title": "Browser" },
				 *          { "title": "Platform" },
				 *          { "title": "Version" },
				 *          { "title": "Grade" }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using an array of objects as a data source (`data`)
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "data": [
				 *          {
				 *            "engine":   "Trident",
				 *            "browser":  "Internet Explorer 4.0",
				 *            "platform": "Win 95+",
				 *            "version":  4,
				 *            "grade":    "X"
				 *          },
				 *          {
				 *            "engine":   "Trident",
				 *            "browser":  "Internet Explorer 5.0",
				 *            "platform": "Win 95+",
				 *            "version":  5,
				 *            "grade":    "C"
				 *          }
				 *        ],
				 *        "columns": [
				 *          { "title": "Engine",   "data": "engine" },
				 *          { "title": "Browser",  "data": "browser" },
				 *          { "title": "Platform", "data": "platform" },
				 *          { "title": "Version",  "data": "version" },
				 *          { "title": "Grade",    "data": "grade" }
				 *        ]
				 *      } );
				 *    } );
				 */
				"aaData": null,
			
			
				/**
				 * If ordering is enabled, then DataTables will perform a first pass sort on
				 * initialisation. You can define which column(s) the sort is performed
				 * upon, and the sorting direction, with this variable. The `sorting` array
				 * should contain an array for each column to be sorted initially containing
				 * the column's index and a direction string ('asc' or 'desc').
				 *  @type array
				 *  @default [[0,'asc']]
				 *
				 *  @dtopt Option
				 *  @name DataTable.defaults.order
				 *
				 *  @example
				 *    // Sort by 3rd column first, and then 4th column
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "order": [[2,'asc'], [3,'desc']]
				 *      } );
				 *    } );
				 *
				 *    // No initial sorting
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "order": []
				 *      } );
				 *    } );
				 */
				"aaSorting": [[0,'asc']],
			
			
				/**
				 * This parameter is basically identical to the `sorting` parameter, but
				 * cannot be overridden by user interaction with the table. What this means
				 * is that you could have a column (visible or hidden) which the sorting
				 * will always be forced on first - any sorting after that (from the user)
				 * will then be performed as required. This can be useful for grouping rows
				 * together.
				 *  @type array
				 *  @default null
				 *
				 *  @dtopt Option
				 *  @name DataTable.defaults.orderFixed
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "orderFixed": [[0,'asc']]
				 *      } );
				 *    } )
				 */
				"aaSortingFixed": [],
			
			
				/**
				 * DataTables can be instructed to load data to display in the table from a
				 * Ajax source. This option defines how that Ajax call is made and where to.
				 *
				 * The `ajax` property has three different modes of operation, depending on
				 * how it is defined. These are:
				 *
				 * * `string` - Set the URL from where the data should be loaded from.
				 * * `object` - Define properties for `jQuery.ajax`.
				 * * `function` - Custom data get function
				 *
				 * `string`
				 * --------
				 *
				 * As a string, the `ajax` property simply defines the URL from which
				 * DataTables will load data.
				 *
				 * `object`
				 * --------
				 *
				 * As an object, the parameters in the object are passed to
				 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
				 * of the Ajax request. DataTables has a number of default parameters which
				 * you can override using this option. Please refer to the jQuery
				 * documentation for a full description of the options available, although
				 * the following parameters provide additional options in DataTables or
				 * require special consideration:
				 *
				 * * `data` - As with jQuery, `data` can be provided as an object, but it
				 *   can also be used as a function to manipulate the data DataTables sends
				 *   to the server. The function takes a single parameter, an object of
				 *   parameters with the values that DataTables has readied for sending. An
				 *   object may be returned which will be merged into the DataTables
				 *   defaults, or you can add the items to the object that was passed in and
				 *   not return anything from the function. This supersedes `fnServerParams`
				 *   from DataTables 1.9-.
				 *
				 * * `dataSrc` - By default DataTables will look for the property `data` (or
				 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
				 *   from an Ajax source or for server-side processing - this parameter
				 *   allows that property to be changed. You can use Javascript dotted
				 *   object notation to get a data source for multiple levels of nesting, or
				 *   it my be used as a function. As a function it takes a single parameter,
				 *   the JSON returned from the server, which can be manipulated as
				 *   required, with the returned value being that used by DataTables as the
				 *   data source for the table. This supersedes `sAjaxDataProp` from
				 *   DataTables 1.9-.
				 *
				 * * `success` - Should not be overridden it is used internally in
				 *   DataTables. To manipulate / transform the data returned by the server
				 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
				 *
				 * `function`
				 * ----------
				 *
				 * As a function, making the Ajax call is left up to yourself allowing
				 * complete control of the Ajax request. Indeed, if desired, a method other
				 * than Ajax could be used to obtain the required data, such as Web storage
				 * or an AIR database.
				 *
				 * The function is given four parameters and no return is required. The
				 * parameters are:
				 *
				 * 1. _object_ - Data to send to the server
				 * 2. _function_ - Callback function that must be executed when the required
				 *    data has been obtained. That data should be passed into the callback
				 *    as the only parameter
				 * 3. _object_ - DataTables settings object for the table
				 *
				 * Note that this supersedes `fnServerData` from DataTables 1.9-.
				 *
				 *  @type string|object|function
				 *  @default null
				 *
				 *  @dtopt Option
				 *  @name DataTable.defaults.ajax
				 *  @since 1.10.0
				 *
				 * @example
				 *   // Get JSON data from a file via Ajax.
				 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
				 *   $('#example').dataTable( {
				 *     "ajax": "data.json"
				 *   } );
				 *
				 * @example
				 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
				 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
				 *   $('#example').dataTable( {
				 *     "ajax": {
				 *       "url": "data.json",
				 *       "dataSrc": "tableData"
				 *     }
				 *   } );
				 *
				 * @example
				 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
				 *   // from a plain array rather than an array in an object
				 *   $('#example').dataTable( {
				 *     "ajax": {
				 *       "url": "data.json",
				 *       "dataSrc": ""
				 *     }
				 *   } );
				 *
				 * @example
				 *   // Manipulate the data returned from the server - add a link to data
				 *   // (note this can, should, be done using `render` for the column - this
				 *   // is just a simple example of how the data can be manipulated).
				 *   $('#example').dataTable( {
				 *     "ajax": {
				 *       "url": "data.json",
				 *       "dataSrc": function ( json ) {
				 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
				 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
				 *         }
				 *         return json;
				 *       }
				 *     }
				 *   } );
				 *
				 * @example
				 *   // Add data to the request
				 *   $('#example').dataTable( {
				 *     "ajax": {
				 *       "url": "data.json",
				 *       "data": function ( d ) {
				 *         return {
				 *           "extra_search": $('#extra').val()
				 *         };
				 *       }
				 *     }
				 *   } );
				 *
				 * @example
				 *   // Send request as POST
				 *   $('#example').dataTable( {
				 *     "ajax": {
				 *       "url": "data.json",
				 *       "type": "POST"
				 *     }
				 *   } );
				 *
				 * @example
				 *   // Get the data from localStorage (could interface with a form for
				 *   // adding, editing and removing rows).
				 *   $('#example').dataTable( {
				 *     "ajax": function (data, callback, settings) {
				 *       callback(
				 *         JSON.parse( localStorage.getItem('dataTablesData') )
				 *       );
				 *     }
				 *   } );
				 */
				"ajax": null,
			
			
				/**
				 * This parameter allows you to readily specify the entries in the length drop
				 * down menu that DataTables shows when pagination is enabled. It can be
				 * either a 1D array of options which will be used for both the displayed
				 * option and the value, or a 2D array which will use the array in the first
				 * position as the value, and the array in the second position as the
				 * displayed options (useful for language strings such as 'All').
				 *
				 * Note that the `pageLength` property will be automatically set to the
				 * first value given in this array, unless `pageLength` is also provided.
				 *  @type array
				 *  @default [ 10, 25, 50, 100 ]
				 *
				 *  @dtopt Option
				 *  @name DataTable.defaults.lengthMenu
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
				 *      } );
				 *    } );
				 */
				"aLengthMenu": [ 10, 25, 50, 100 ],
			
			
				/**
				 * The `columns` option in the initialisation parameter allows you to define
				 * details about the way individual columns behave. For a full list of
				 * column options that can be set, please see
				 * {@link DataTable.defaults.column}. Note that if you use `columns` to
				 * define your columns, you must have an entry in the array for every single
				 * column that you have in your table (these can be null if you don't which
				 * to specify any options).
				 *  @member
				 *
				 *  @name DataTable.defaults.column
				 */
				"aoColumns": null,
			
				/**
				 * Very similar to `columns`, `columnDefs` allows you to target a specific
				 * column, multiple columns, or all columns, using the `targets` property of
				 * each object in the array. This allows great flexibility when creating
				 * tables, as the `columnDefs` arrays can be of any length, targeting the
				 * columns you specifically want. `columnDefs` may use any of the column
				 * options available: {@link DataTable.defaults.column}, but it _must_
				 * have `targets` defined in each object in the array. Values in the `targets`
				 * array may be:
				 *   <ul>
				 *     <li>a string - class name will be matched on the TH for the column</li>
				 *     <li>0 or a positive integer - column index counting from the left</li>
				 *     <li>a negative integer - column index counting from the right</li>
				 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
				 *   </ul>
				 *  @member
				 *
				 *  @name DataTable.defaults.columnDefs
				 */
				"aoColumnDefs": null,
			
			
				/**
				 * Basically the same as `search`, this parameter defines the individual column
				 * filtering state at initialisation time. The array must be of the same size
				 * as the number of columns, and each element be an object with the parameters
				 * `search` and `escapeRegex` (the latter is optional). 'null' is also
				 * accepted and the default will be used.
				 *  @type array
				 *  @default []
				 *
				 *  @dtopt Option
				 *  @name DataTable.defaults.searchCols
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "searchCols": [
				 *          null,
				 *          { "search": "My filter" },
				 *          null,
				 *          { "search": "^[0-9]", "escapeRegex": false }
				 *        ]
				 *      } );
				 *    } )
				 */
				"aoSearchCols": [],
			
			
				/**
				 * An array of CSS classes that should be applied to displayed rows. This
				 * array may be of any length, and DataTables will apply each class
				 * sequentially, looping when required.
				 *  @type array
				 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
				 *    options</i>
				 *
				 *  @dtopt Option
				 *  @name DataTable.defaults.stripeClasses
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
				 *      } );
				 *    } )
				 */
				"asStripeClasses": null,
			
			
				/**
				 * Enable or disable automatic column width calculation. This can be disabled
				 * as an optimisation (it takes some time to calculate the widths) if the
				 * tables widths are passed in using `columns`.
				 *  @type boolean
				 *  @default true
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.autoWidth
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "autoWidth": false
				 *      } );
				 *    } );
				 */
				"bAutoWidth": true,
			
			
				/**
				 * Deferred rendering can provide DataTables with a huge speed boost when you
				 * are using an Ajax or JS data source for the table. This option, when set to
				 * true, will cause DataTables to defer the creation of the table elements for
				 * each row until they are needed for a draw - saving a significant amount of
				 * time.
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.deferRender
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "ajax": "sources/arrays.txt",
				 *        "deferRender": true
				 *      } );
				 *    } );
				 */
				"bDeferRender": false,
			
			
				/**
				 * Replace a DataTable which matches the given selector and replace it with
				 * one which has the properties of the new initialisation object passed. If no
				 * table matches the selector, then the new DataTable will be constructed as
				 * per normal.
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.destroy
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "srollY": "200px",
				 *        "paginate": false
				 *      } );
				 *
				 *      // Some time later....
				 *      $('#example').dataTable( {
				 *        "filter": false,
				 *        "destroy": true
				 *      } );
				 *    } );
				 */
				"bDestroy": false,
			
			
				/**
				 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
				 * that it allows the end user to input multiple words (space separated) and
				 * will match a row containing those words, even if not in the order that was
				 * specified (this allow matching across multiple columns). Note that if you
				 * wish to use filtering in DataTables this must remain 'true' - to remove the
				 * default filtering input box and retain filtering abilities, please use
				 * {@link DataTable.defaults.dom}.
				 *  @type boolean
				 *  @default true
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.searching
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "searching": false
				 *      } );
				 *    } );
				 */
				"bFilter": true,
			
			
				/**
				 * Enable or disable the table information display. This shows information
				 * about the data that is currently visible on the page, including information
				 * about filtered data if that action is being performed.
				 *  @type boolean
				 *  @default true
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.info
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "info": false
				 *      } );
				 *    } );
				 */
				"bInfo": true,
			
			
				/**
				 * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
				 * slightly different and additional mark-up from what DataTables has
				 * traditionally used).
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.jQueryUI
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "jQueryUI": true
				 *      } );
				 *    } );
				 */
				"bJQueryUI": false,
			
			
				/**
				 * Allows the end user to select the size of a formatted page from a select
				 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
				 *  @type boolean
				 *  @default true
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.lengthChange
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "lengthChange": false
				 *      } );
				 *    } );
				 */
				"bLengthChange": true,
			
			
				/**
				 * Enable or disable pagination.
				 *  @type boolean
				 *  @default true
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.paging
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "paging": false
				 *      } );
				 *    } );
				 */
				"bPaginate": true,
			
			
				/**
				 * Enable or disable the display of a 'processing' indicator when the table is
				 * being processed (e.g. a sort). This is particularly useful for tables with
				 * large amounts of data where it can take a noticeable amount of time to sort
				 * the entries.
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.processing
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "processing": true
				 *      } );
				 *    } );
				 */
				"bProcessing": false,
			
			
				/**
				 * Retrieve the DataTables object for the given selector. Note that if the
				 * table has already been initialised, this parameter will cause DataTables
				 * to simply return the object that has already been set up - it will not take
				 * account of any changes you might have made to the initialisation object
				 * passed to DataTables (setting this parameter to true is an acknowledgement
				 * that you understand this). `destroy` can be used to reinitialise a table if
				 * you need.
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.retrieve
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      initTable();
				 *      tableActions();
				 *    } );
				 *
				 *    function initTable ()
				 *    {
				 *      return $('#example').dataTable( {
				 *        "scrollY": "200px",
				 *        "paginate": false,
				 *        "retrieve": true
				 *      } );
				 *    }
				 *
				 *    function tableActions ()
				 *    {
				 *      var table = initTable();
				 *      // perform API operations with oTable
				 *    }
				 */
				"bRetrieve": false,
			
			
				/**
				 * When vertical (y) scrolling is enabled, DataTables will force the height of
				 * the table's viewport to the given height at all times (useful for layout).
				 * However, this can look odd when filtering data down to a small data set,
				 * and the footer is left "floating" further down. This parameter (when
				 * enabled) will cause DataTables to collapse the table's viewport down when
				 * the result set will fit within the given Y height.
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.scrollCollapse
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "scrollY": "200",
				 *        "scrollCollapse": true
				 *      } );
				 *    } );
				 */
				"bScrollCollapse": false,
			
			
				/**
				 * Configure DataTables to use server-side processing. Note that the
				 * `ajax` parameter must also be given in order to give DataTables a
				 * source to obtain the required data for each draw.
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Features
				 *  @dtopt Server-side
				 *  @name DataTable.defaults.serverSide
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "serverSide": true,
				 *        "ajax": "xhr.php"
				 *      } );
				 *    } );
				 */
				"bServerSide": false,
			
			
				/**
				 * Enable or disable sorting of columns. Sorting of individual columns can be
				 * disabled by the `sortable` option for each column.
				 *  @type boolean
				 *  @default true
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.ordering
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "ordering": false
				 *      } );
				 *    } );
				 */
				"bSort": true,
			
			
				/**
				 * Enable or display DataTables' ability to sort multiple columns at the
				 * same time (activated by shift-click by the user).
				 *  @type boolean
				 *  @default true
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.orderMulti
				 *
				 *  @example
				 *    // Disable multiple column sorting ability
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "orderMulti": false
				 *      } );
				 *    } );
				 */
				"bSortMulti": true,
			
			
				/**
				 * Allows control over whether DataTables should use the top (true) unique
				 * cell that is found for a single column, or the bottom (false - default).
				 * This is useful when using complex headers.
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.orderCellsTop
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "orderCellsTop": true
				 *      } );
				 *    } );
				 */
				"bSortCellsTop": false,
			
			
				/**
				 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
				 * `sorting\_3` to the columns which are currently being sorted on. This is
				 * presented as a feature switch as it can increase processing time (while
				 * classes are removed and added) so for large data sets you might want to
				 * turn this off.
				 *  @type boolean
				 *  @default true
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.orderClasses
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "orderClasses": false
				 *      } );
				 *    } );
				 */
				"bSortClasses": true,
			
			
				/**
				 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
				 * used to save table display information such as pagination information,
				 * display length, filtering and sorting. As such when the end user reloads
				 * the page the display display will match what thy had previously set up.
				 *
				 * Due to the use of `localStorage` the default state saving is not supported
				 * in IE6 or 7. If state saving is required in those browsers, use
				 * `stateSaveCallback` to provide a storage solution such as cookies.
				 *  @type boolean
				 *  @default false
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.stateSave
				 *
				 *  @example
				 *    $(document).ready( function () {
				 *      $('#example').dataTable( {
				 *        "stateSave": true
				 *      } );
				 *    } );
				 */
				"bStateSave": false,
			
			
				/**
				 * This function is called when a TR element is created (and all TD child
				 * elements have been inserted), or registered if using a DOM source, allowing
				 * manipulation of the TR element (adding classes etc).
				 *  @type function
				 *  @param {node} row "TR" element for the current row
				 *  @param {array} data Raw data array for this row
				 *  @param {int} dataIndex The index of this row in the internal aoData array
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.createdRow
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "createdRow": function( row, data, dataIndex ) {
				 *          // Bold the grade for all 'A' grade browsers
				 *          if ( data[4] == "A" )
				 *          {
				 *            $('td:eq(4)', row).html( '<b>A</b>' );
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"fnCreatedRow": null,
			
			
				/**
				 * This function is called on every 'draw' event, and allows you to
				 * dynamically modify any aspect you want about the created DOM.
				 *  @type function
				 *  @param {object} settings DataTables settings object
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.drawCallback
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "drawCallback": function( settings ) {
				 *          alert( 'DataTables has redrawn the table' );
				 *        }
				 *      } );
				 *    } );
				 */
				"fnDrawCallback": null,
			
			
				/**
				 * Identical to fnHeaderCallback() but for the table footer this function
				 * allows you to modify the table footer on every 'draw' event.
				 *  @type function
				 *  @param {node} foot "TR" element for the footer
				 *  @param {array} data Full table data (as derived from the original HTML)
				 *  @param {int} start Index for the current display starting point in the
				 *    display array
				 *  @param {int} end Index for the current display ending point in the
				 *    display array
				 *  @param {array int} display Index array to translate the visual position
				 *    to the full data array
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.footerCallback
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "footerCallback": function( tfoot, data, start, end, display ) {
				 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
				 *        }
				 *      } );
				 *    } )
				 */
				"fnFooterCallback": null,
			
			
				/**
				 * When rendering large numbers in the information element for the table
				 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
				 * to have a comma separator for the 'thousands' units (e.g. 1 million is
				 * rendered as "1,000,000") to help readability for the end user. This
				 * function will override the default method DataTables uses.
				 *  @type function
				 *  @member
				 *  @param {int} toFormat number to be formatted
				 *  @returns {string} formatted string for DataTables to show the number
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.formatNumber
				 *
				 *  @example
				 *    // Format a number using a single quote for the separator (note that
				 *    // this can also be done with the language.thousands option)
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "formatNumber": function ( toFormat ) {
				 *          return toFormat.toString().replace(
				 *            /\B(?=(\d{3})+(?!\d))/g, "'"
				 *          );
				 *        };
				 *      } );
				 *    } );
				 */
				"fnFormatNumber": function ( toFormat ) {
					return toFormat.toString().replace(
						/\B(?=(\d{3})+(?!\d))/g,
						this.oLanguage.sThousands
					);
				},
			
			
				/**
				 * This function is called on every 'draw' event, and allows you to
				 * dynamically modify the header row. This can be used to calculate and
				 * display useful information about the table.
				 *  @type function
				 *  @param {node} head "TR" element for the header
				 *  @param {array} data Full table data (as derived from the original HTML)
				 *  @param {int} start Index for the current display starting point in the
				 *    display array
				 *  @param {int} end Index for the current display ending point in the
				 *    display array
				 *  @param {array int} display Index array to translate the visual position
				 *    to the full data array
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.headerCallback
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "fheaderCallback": function( head, data, start, end, display ) {
				 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
				 *        }
				 *      } );
				 *    } )
				 */
				"fnHeaderCallback": null,
			
			
				/**
				 * The information element can be used to convey information about the current
				 * state of the table. Although the internationalisation options presented by
				 * DataTables are quite capable of dealing with most customisations, there may
				 * be times where you wish to customise the string further. This callback
				 * allows you to do exactly that.
				 *  @type function
				 *  @param {object} oSettings DataTables settings object
				 *  @param {int} start Starting position in data for the draw
				 *  @param {int} end End position in data for the draw
				 *  @param {int} max Total number of rows in the table (regardless of
				 *    filtering)
				 *  @param {int} total Total number of rows in the data set, after filtering
				 *  @param {string} pre The string that DataTables has formatted using it's
				 *    own rules
				 *  @returns {string} The string to be displayed in the information element.
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.infoCallback
				 *
				 *  @example
				 *    $('#example').dataTable( {
				 *      "infoCallback": function( settings, start, end, max, total, pre ) {
				 *        return start +" to "+ end;
				 *      }
				 *    } );
				 */
				"fnInfoCallback": null,
			
			
				/**
				 * Called when the table has been initialised. Normally DataTables will
				 * initialise sequentially and there will be no need for this function,
				 * however, this does not hold true when using external language information
				 * since that is obtained using an async XHR call.
				 *  @type function
				 *  @param {object} settings DataTables settings object
				 *  @param {object} json The JSON object request from the server - only
				 *    present if client-side Ajax sourced data is used
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.initComplete
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "initComplete": function(settings, json) {
				 *          alert( 'DataTables has finished its initialisation.' );
				 *        }
				 *      } );
				 *    } )
				 */
				"fnInitComplete": null,
			
			
				/**
				 * Called at the very start of each table draw and can be used to cancel the
				 * draw by returning false, any other return (including undefined) results in
				 * the full draw occurring).
				 *  @type function
				 *  @param {object} settings DataTables settings object
				 *  @returns {boolean} False will cancel the draw, anything else (including no
				 *    return) will allow it to complete.
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.preDrawCallback
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "preDrawCallback": function( settings ) {
				 *          if ( $('#test').val() == 1 ) {
				 *            return false;
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"fnPreDrawCallback": null,
			
			
				/**
				 * This function allows you to 'post process' each row after it have been
				 * generated for each table draw, but before it is rendered on screen. This
				 * function might be used for setting the row class name etc.
				 *  @type function
				 *  @param {node} row "TR" element for the current row
				 *  @param {array} data Raw data array for this row
				 *  @param {int} displayIndex The display index for the current table draw
				 *  @param {int} displayIndexFull The index of the data in the full list of
				 *    rows (after filtering)
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.rowCallback
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
				 *          // Bold the grade for all 'A' grade browsers
				 *          if ( data[4] == "A" ) {
				 *            $('td:eq(4)', row).html( '<b>A</b>' );
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"fnRowCallback": null,
			
			
				/**
				 * __Deprecated__ The functionality provided by this parameter has now been
				 * superseded by that provided through `ajax`, which should be used instead.
				 *
				 * This parameter allows you to override the default function which obtains
				 * the data from the server so something more suitable for your application.
				 * For example you could use POST data, or pull information from a Gears or
				 * AIR database.
				 *  @type function
				 *  @member
				 *  @param {string} source HTTP source to obtain the data from (`ajax`)
				 *  @param {array} data A key/value pair object containing the data to send
				 *    to the server
				 *  @param {function} callback to be called on completion of the data get
				 *    process that will draw the data on the page.
				 *  @param {object} settings DataTables settings object
				 *
				 *  @dtopt Callbacks
				 *  @dtopt Server-side
				 *  @name DataTable.defaults.serverData
				 *
				 *  @deprecated 1.10. Please use `ajax` for this functionality now.
				 */
				"fnServerData": null,
			
			
				/**
				 * __Deprecated__ The functionality provided by this parameter has now been
				 * superseded by that provided through `ajax`, which should be used instead.
				 *
				 *  It is often useful to send extra data to the server when making an Ajax
				 * request - for example custom filtering information, and this callback
				 * function makes it trivial to send extra information to the server. The
				 * passed in parameter is the data set that has been constructed by
				 * DataTables, and you can add to this or modify it as you require.
				 *  @type function
				 *  @param {array} data Data array (array of objects which are name/value
				 *    pairs) that has been constructed by DataTables and will be sent to the
				 *    server. In the case of Ajax sourced data with server-side processing
				 *    this will be an empty array, for server-side processing there will be a
				 *    significant number of parameters!
				 *  @returns {undefined} Ensure that you modify the data array passed in,
				 *    as this is passed by reference.
				 *
				 *  @dtopt Callbacks
				 *  @dtopt Server-side
				 *  @name DataTable.defaults.serverParams
				 *
				 *  @deprecated 1.10. Please use `ajax` for this functionality now.
				 */
				"fnServerParams": null,
			
			
				/**
				 * Load the table state. With this function you can define from where, and how, the
				 * state of a table is loaded. By default DataTables will load from `localStorage`
				 * but you might wish to use a server-side database or cookies.
				 *  @type function
				 *  @member
				 *  @param {object} settings DataTables settings object
				 *  @return {object} The DataTables state object to be loaded
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.stateLoadCallback
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "stateSave": true,
				 *        "stateLoadCallback": function (settings) {
				 *          var o;
				 *
				 *          // Send an Ajax request to the server to get the data. Note that
				 *          // this is a synchronous request.
				 *          $.ajax( {
				 *            "url": "/state_load",
				 *            "async": false,
				 *            "dataType": "json",
				 *            "success": function (json) {
				 *              o = json;
				 *            }
				 *          } );
				 *
				 *          return o;
				 *        }
				 *      } );
				 *    } );
				 */
				"fnStateLoadCallback": function ( settings ) {
					try {
						return JSON.parse(
							(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
								'DataTables_'+settings.sInstance+'_'+location.pathname
							)
						);
					} catch (e) {}
				},
			
			
				/**
				 * Callback which allows modification of the saved state prior to loading that state.
				 * This callback is called when the table is loading state from the stored data, but
				 * prior to the settings object being modified by the saved state. Note that for
				 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
				 * a plug-in.
				 *  @type function
				 *  @param {object} settings DataTables settings object
				 *  @param {object} data The state object that is to be loaded
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.stateLoadParams
				 *
				 *  @example
				 *    // Remove a saved filter, so filtering is never loaded
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "stateSave": true,
				 *        "stateLoadParams": function (settings, data) {
				 *          data.oSearch.sSearch = "";
				 *        }
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Disallow state loading by returning false
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "stateSave": true,
				 *        "stateLoadParams": function (settings, data) {
				 *          return false;
				 *        }
				 *      } );
				 *    } );
				 */
				"fnStateLoadParams": null,
			
			
				/**
				 * Callback that is called when the state has been loaded from the state saving method
				 * and the DataTables settings object has been modified as a result of the loaded state.
				 *  @type function
				 *  @param {object} settings DataTables settings object
				 *  @param {object} data The state object that was loaded
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.stateLoaded
				 *
				 *  @example
				 *    // Show an alert with the filtering value that was saved
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "stateSave": true,
				 *        "stateLoaded": function (settings, data) {
				 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
				 *        }
				 *      } );
				 *    } );
				 */
				"fnStateLoaded": null,
			
			
				/**
				 * Save the table state. This function allows you to define where and how the state
				 * information for the table is stored By default DataTables will use `localStorage`
				 * but you might wish to use a server-side database or cookies.
				 *  @type function
				 *  @member
				 *  @param {object} settings DataTables settings object
				 *  @param {object} data The state object to be saved
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.stateSaveCallback
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "stateSave": true,
				 *        "stateSaveCallback": function (settings, data) {
				 *          // Send an Ajax request to the server with the state object
				 *          $.ajax( {
				 *            "url": "/state_save",
				 *            "data": data,
				 *            "dataType": "json",
				 *            "method": "POST"
				 *            "success": function () {}
				 *          } );
				 *        }
				 *      } );
				 *    } );
				 */
				"fnStateSaveCallback": function ( settings, data ) {
					try {
						(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
							'DataTables_'+settings.sInstance+'_'+location.pathname,
							JSON.stringify( data )
						);
					} catch (e) {}
				},
			
			
				/**
				 * Callback which allows modification of the state to be saved. Called when the table
				 * has changed state a new state save is required. This method allows modification of
				 * the state saving object prior to actually doing the save, including addition or
				 * other state properties or modification. Note that for plug-in authors, you should
				 * use the `stateSaveParams` event to save parameters for a plug-in.
				 *  @type function
				 *  @param {object} settings DataTables settings object
				 *  @param {object} data The state object to be saved
				 *
				 *  @dtopt Callbacks
				 *  @name DataTable.defaults.stateSaveParams
				 *
				 *  @example
				 *    // Remove a saved filter, so filtering is never saved
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "stateSave": true,
				 *        "stateSaveParams": function (settings, data) {
				 *          data.oSearch.sSearch = "";
				 *        }
				 *      } );
				 *    } );
				 */
				"fnStateSaveParams": null,
			
			
				/**
				 * Duration for which the saved state information is considered valid. After this period
				 * has elapsed the state will be returned to the default.
				 * Value is given in seconds.
				 *  @type int
				 *  @default 7200 <i>(2 hours)</i>
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.stateDuration
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "stateDuration": 60*60*24; // 1 day
				 *      } );
				 *    } )
				 */
				"iStateDuration": 7200,
			
			
				/**
				 * When enabled DataTables will not make a request to the server for the first
				 * page draw - rather it will use the data already on the page (no sorting etc
				 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
				 * is used to indicate that deferred loading is required, but it is also used
				 * to tell DataTables how many records there are in the full table (allowing
				 * the information element and pagination to be displayed correctly). In the case
				 * where a filtering is applied to the table on initial load, this can be
				 * indicated by giving the parameter as an array, where the first element is
				 * the number of records available after filtering and the second element is the
				 * number of records without filtering (allowing the table information element
				 * to be shown correctly).
				 *  @type int | array
				 *  @default null
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.deferLoading
				 *
				 *  @example
				 *    // 57 records available in the table, no filtering applied
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "serverSide": true,
				 *        "ajax": "scripts/server_processing.php",
				 *        "deferLoading": 57
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "serverSide": true,
				 *        "ajax": "scripts/server_processing.php",
				 *        "deferLoading": [ 57, 100 ],
				 *        "search": {
				 *          "search": "my_filter"
				 *        }
				 *      } );
				 *    } );
				 */
				"iDeferLoading": null,
			
			
				/**
				 * Number of rows to display on a single page when using pagination. If
				 * feature enabled (`lengthChange`) then the end user will be able to override
				 * this to a custom setting using a pop-up menu.
				 *  @type int
				 *  @default 10
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.pageLength
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "pageLength": 50
				 *      } );
				 *    } )
				 */
				"iDisplayLength": 10,
			
			
				/**
				 * Define the starting point for data display when using DataTables with
				 * pagination. Note that this parameter is the number of records, rather than
				 * the page number, so if you have 10 records per page and want to start on
				 * the third page, it should be "20".
				 *  @type int
				 *  @default 0
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.displayStart
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "displayStart": 20
				 *      } );
				 *    } )
				 */
				"iDisplayStart": 0,
			
			
				/**
				 * By default DataTables allows keyboard navigation of the table (sorting, paging,
				 * and filtering) by adding a `tabindex` attribute to the required elements. This
				 * allows you to tab through the controls and press the enter key to activate them.
				 * The tabindex is default 0, meaning that the tab follows the flow of the document.
				 * You can overrule this using this parameter if you wish. Use a value of -1 to
				 * disable built-in keyboard navigation.
				 *  @type int
				 *  @default 0
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.tabIndex
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "tabIndex": 1
				 *      } );
				 *    } );
				 */
				"iTabIndex": 0,
			
			
				/**
				 * Classes that DataTables assigns to the various components and features
				 * that it adds to the HTML table. This allows classes to be configured
				 * during initialisation in addition to through the static
				 * {@link DataTable.ext.oStdClasses} object).
				 *  @namespace
				 *  @name DataTable.defaults.classes
				 */
				"oClasses": {},
			
			
				/**
				 * All strings that DataTables uses in the user interface that it creates
				 * are defined in this object, allowing you to modified them individually or
				 * completely replace them all as required.
				 *  @namespace
				 *  @name DataTable.defaults.language
				 */
				"oLanguage": {
					/**
					 * Strings that are used for WAI-ARIA labels and controls only (these are not
					 * actually visible on the page, but will be read by screenreaders, and thus
					 * must be internationalised as well).
					 *  @namespace
					 *  @name DataTable.defaults.language.aria
					 */
					"oAria": {
						/**
						 * ARIA label that is added to the table headers when the column may be
						 * sorted ascending by activing the column (click or return when focused).
						 * Note that the column header is prefixed to this string.
						 *  @type string
						 *  @default : activate to sort column ascending
						 *
						 *  @dtopt Language
						 *  @name DataTable.defaults.language.aria.sortAscending
						 *
						 *  @example
						 *    $(document).ready( function() {
						 *      $('#example').dataTable( {
						 *        "language": {
						 *          "aria": {
						 *            "sortAscending": " - click/return to sort ascending"
						 *          }
						 *        }
						 *      } );
						 *    } );
						 */
						"sSortAscending": ": activate to sort column ascending",
			
						/**
						 * ARIA label that is added to the table headers when the column may be
						 * sorted descending by activing the column (click or return when focused).
						 * Note that the column header is prefixed to this string.
						 *  @type string
						 *  @default : activate to sort column ascending
						 *
						 *  @dtopt Language
						 *  @name DataTable.defaults.language.aria.sortDescending
						 *
						 *  @example
						 *    $(document).ready( function() {
						 *      $('#example').dataTable( {
						 *        "language": {
						 *          "aria": {
						 *            "sortDescending": " - click/return to sort descending"
						 *          }
						 *        }
						 *      } );
						 *    } );
						 */
						"sSortDescending": ": activate to sort column descending"
					},
			
					/**
					 * Pagination string used by DataTables for the built-in pagination
					 * control types.
					 *  @namespace
					 *  @name DataTable.defaults.language.paginate
					 */
					"oPaginate": {
						/**
						 * Text to use when using the 'full_numbers' type of pagination for the
						 * button to take the user to the first page.
						 *  @type string
						 *  @default First
						 *
						 *  @dtopt Language
						 *  @name DataTable.defaults.language.paginate.first
						 *
						 *  @example
						 *    $(document).ready( function() {
						 *      $('#example').dataTable( {
						 *        "language": {
						 *          "paginate": {
						 *            "first": "First page"
						 *          }
						 *        }
						 *      } );
						 *    } );
						 */
						"sFirst": "First",
			
			
						/**
						 * Text to use when using the 'full_numbers' type of pagination for the
						 * button to take the user to the last page.
						 *  @type string
						 *  @default Last
						 *
						 *  @dtopt Language
						 *  @name DataTable.defaults.language.paginate.last
						 *
						 *  @example
						 *    $(document).ready( function() {
						 *      $('#example').dataTable( {
						 *        "language": {
						 *          "paginate": {
						 *            "last": "Last page"
						 *          }
						 *        }
						 *      } );
						 *    } );
						 */
						"sLast": "Last",
			
			
						/**
						 * Text to use for the 'next' pagination button (to take the user to the
						 * next page).
						 *  @type string
						 *  @default Next
						 *
						 *  @dtopt Language
						 *  @name DataTable.defaults.language.paginate.next
						 *
						 *  @example
						 *    $(document).ready( function() {
						 *      $('#example').dataTable( {
						 *        "language": {
						 *          "paginate": {
						 *            "next": "Next page"
						 *          }
						 *        }
						 *      } );
						 *    } );
						 */
						"sNext": "Next",
			
			
						/**
						 * Text to use for the 'previous' pagination button (to take the user to
						 * the previous page).
						 *  @type string
						 *  @default Previous
						 *
						 *  @dtopt Language
						 *  @name DataTable.defaults.language.paginate.previous
						 *
						 *  @example
						 *    $(document).ready( function() {
						 *      $('#example').dataTable( {
						 *        "language": {
						 *          "paginate": {
						 *            "previous": "Previous page"
						 *          }
						 *        }
						 *      } );
						 *    } );
						 */
						"sPrevious": "Previous"
					},
			
					/**
					 * This string is shown in preference to `zeroRecords` when the table is
					 * empty of data (regardless of filtering). Note that this is an optional
					 * parameter - if it is not given, the value of `zeroRecords` will be used
					 * instead (either the default or given value).
					 *  @type string
					 *  @default No data available in table
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.emptyTable
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "emptyTable": "No data available in table"
					 *        }
					 *      } );
					 *    } );
					 */
					"sEmptyTable": "No data available in table",
			
			
					/**
					 * This string gives information to the end user about the information
					 * that is current on display on the page. The following tokens can be
					 * used in the string and will be dynamically replaced as the table
					 * display updates. This tokens can be placed anywhere in the string, or
					 * removed as needed by the language requires:
					 *
					 * * `\_START\_` - Display index of the first record on the current page
					 * * `\_END\_` - Display index of the last record on the current page
					 * * `\_TOTAL\_` - Number of records in the table after filtering
					 * * `\_MAX\_` - Number of records in the table without filtering
					 * * `\_PAGE\_` - Current page number
					 * * `\_PAGES\_` - Total number of pages of data in the table
					 *
					 *  @type string
					 *  @default Showing _START_ to _END_ of _TOTAL_ entries
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.info
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "info": "Showing page _PAGE_ of _PAGES_"
					 *        }
					 *      } );
					 *    } );
					 */
					"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
			
			
					/**
					 * Display information string for when the table is empty. Typically the
					 * format of this string should match `info`.
					 *  @type string
					 *  @default Showing 0 to 0 of 0 entries
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.infoEmpty
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "infoEmpty": "No entries to show"
					 *        }
					 *      } );
					 *    } );
					 */
					"sInfoEmpty": "Showing 0 to 0 of 0 entries",
			
			
					/**
					 * When a user filters the information in a table, this string is appended
					 * to the information (`info`) to give an idea of how strong the filtering
					 * is. The variable _MAX_ is dynamically updated.
					 *  @type string
					 *  @default (filtered from _MAX_ total entries)
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.infoFiltered
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "infoFiltered": " - filtering from _MAX_ records"
					 *        }
					 *      } );
					 *    } );
					 */
					"sInfoFiltered": "(filtered from _MAX_ total entries)",
			
			
					/**
					 * If can be useful to append extra information to the info string at times,
					 * and this variable does exactly that. This information will be appended to
					 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
					 * being used) at all times.
					 *  @type string
					 *  @default <i>Empty string</i>
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.infoPostFix
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "infoPostFix": "All records shown are derived from real information."
					 *        }
					 *      } );
					 *    } );
					 */
					"sInfoPostFix": "",
			
			
					/**
					 * This decimal place operator is a little different from the other
					 * language options since DataTables doesn't output floating point
					 * numbers, so it won't ever use this for display of a number. Rather,
					 * what this parameter does is modify the sort methods of the table so
					 * that numbers which are in a format which has a character other than
					 * a period (`.`) as a decimal place will be sorted numerically.
					 *
					 * Note that numbers with different decimal places cannot be shown in
					 * the same table and still be sortable, the table must be consistent.
					 * However, multiple different tables on the page can use different
					 * decimal place characters.
					 *  @type string
					 *  @default 
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.decimal
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "decimal": ","
					 *          "thousands": "."
					 *        }
					 *      } );
					 *    } );
					 */
					"sDecimal": "",
			
			
					/**
					 * DataTables has a build in number formatter (`formatNumber`) which is
					 * used to format large numbers that are used in the table information.
					 * By default a comma is used, but this can be trivially changed to any
					 * character you wish with this parameter.
					 *  @type string
					 *  @default ,
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.thousands
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "thousands": "'"
					 *        }
					 *      } );
					 *    } );
					 */
					"sThousands": ",",
			
			
					/**
					 * Detail the action that will be taken when the drop down menu for the
					 * pagination length option is changed. The '_MENU_' variable is replaced
					 * with a default select list of 10, 25, 50 and 100, and can be replaced
					 * with a custom select box if required.
					 *  @type string
					 *  @default Show _MENU_ entries
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.lengthMenu
					 *
					 *  @example
					 *    // Language change only
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "lengthMenu": "Display _MENU_ records"
					 *        }
					 *      } );
					 *    } );
					 *
					 *  @example
					 *    // Language and options change
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "lengthMenu": 'Display <select>'+
					 *            '<option value="10">10</option>'+
					 *            '<option value="20">20</option>'+
					 *            '<option value="30">30</option>'+
					 *            '<option value="40">40</option>'+
					 *            '<option value="50">50</option>'+
					 *            '<option value="-1">All</option>'+
					 *            '</select> records'
					 *        }
					 *      } );
					 *    } );
					 */
					"sLengthMenu": "Show _MENU_ entries",
			
			
					/**
					 * When using Ajax sourced data and during the first draw when DataTables is
					 * gathering the data, this message is shown in an empty row in the table to
					 * indicate to the end user the the data is being loaded. Note that this
					 * parameter is not used when loading data by server-side processing, just
					 * Ajax sourced data with client-side processing.
					 *  @type string
					 *  @default Loading...
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.loadingRecords
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "loadingRecords": "Please wait - loading..."
					 *        }
					 *      } );
					 *    } );
					 */
					"sLoadingRecords": "Loading...",
			
			
					/**
					 * Text which is displayed when the table is processing a user action
					 * (usually a sort command or similar).
					 *  @type string
					 *  @default Processing...
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.processing
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "processing": "DataTables is currently busy"
					 *        }
					 *      } );
					 *    } );
					 */
					"sProcessing": "Processing...",
			
			
					/**
					 * Details the actions that will be taken when the user types into the
					 * filtering input text box. The variable "_INPUT_", if used in the string,
					 * is replaced with the HTML text box for the filtering input allowing
					 * control over where it appears in the string. If "_INPUT_" is not given
					 * then the input box is appended to the string automatically.
					 *  @type string
					 *  @default Search:
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.search
					 *
					 *  @example
					 *    // Input text box will be appended at the end automatically
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "search": "Filter records:"
					 *        }
					 *      } );
					 *    } );
					 *
					 *  @example
					 *    // Specify where the filter should appear
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "search": "Apply filter _INPUT_ to table"
					 *        }
					 *      } );
					 *    } );
					 */
					"sSearch": "Search:",
			
			
					/**
					 * Assign a `placeholder` attribute to the search `input` element
					 *  @type string
					 *  @default 
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.searchPlaceholder
					 */
					"sSearchPlaceholder": "",
			
			
					/**
					 * All of the language information can be stored in a file on the
					 * server-side, which DataTables will look up if this parameter is passed.
					 * It must store the URL of the language file, which is in a JSON format,
					 * and the object has the same properties as the oLanguage object in the
					 * initialiser object (i.e. the above parameters). Please refer to one of
					 * the example language files to see how this works in action.
					 *  @type string
					 *  @default <i>Empty string - i.e. disabled</i>
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.url
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
					 *        }
					 *      } );
					 *    } );
					 */
					"sUrl": "",
			
			
					/**
					 * Text shown inside the table records when the is no information to be
					 * displayed after filtering. `emptyTable` is shown when there is simply no
					 * information in the table at all (regardless of filtering).
					 *  @type string
					 *  @default No matching records found
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.zeroRecords
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "zeroRecords": "No records to display"
					 *        }
					 *      } );
					 *    } );
					 */
					"sZeroRecords": "No matching records found"
				},
			
			
				/**
				 * This parameter allows you to have define the global filtering state at
				 * initialisation time. As an object the `search` parameter must be
				 * defined, but all other parameters are optional. When `regex` is true,
				 * the search string will be treated as a regular expression, when false
				 * (default) it will be treated as a straight string. When `smart`
				 * DataTables will use it's smart filtering methods (to word match at
				 * any point in the data), when false this will not be done.
				 *  @namespace
				 *  @extends DataTable.models.oSearch
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.search
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "search": {"search": "Initial search"}
				 *      } );
				 *    } )
				 */
				"oSearch": $.extend( {}, DataTable.models.oSearch ),
			
			
				/**
				 * __Deprecated__ The functionality provided by this parameter has now been
				 * superseded by that provided through `ajax`, which should be used instead.
				 *
				 * By default DataTables will look for the property `data` (or `aaData` for
				 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
				 * source or for server-side processing - this parameter allows that
				 * property to be changed. You can use Javascript dotted object notation to
				 * get a data source for multiple levels of nesting.
				 *  @type string
				 *  @default data
				 *
				 *  @dtopt Options
				 *  @dtopt Server-side
				 *  @name DataTable.defaults.ajaxDataProp
				 *
				 *  @deprecated 1.10. Please use `ajax` for this functionality now.
				 */
				"sAjaxDataProp": "data",
			
			
				/**
				 * __Deprecated__ The functionality provided by this parameter has now been
				 * superseded by that provided through `ajax`, which should be used instead.
				 *
				 * You can instruct DataTables to load data from an external
				 * source using this parameter (use aData if you want to pass data in you
				 * already have). Simply provide a url a JSON object can be obtained from.
				 *  @type string
				 *  @default null
				 *
				 *  @dtopt Options
				 *  @dtopt Server-side
				 *  @name DataTable.defaults.ajaxSource
				 *
				 *  @deprecated 1.10. Please use `ajax` for this functionality now.
				 */
				"sAjaxSource": null,
			
			
				/**
				 * This initialisation variable allows you to specify exactly where in the
				 * DOM you want DataTables to inject the various controls it adds to the page
				 * (for example you might want the pagination controls at the top of the
				 * table). DIV elements (with or without a custom class) can also be added to
				 * aid styling. The follow syntax is used:
				 *   <ul>
				 *     <li>The following options are allowed:
				 *       <ul>
				 *         <li>'l' - Length changing</li>
				 *         <li>'f' - Filtering input</li>
				 *         <li>'t' - The table!</li>
				 *         <li>'i' - Information</li>
				 *         <li>'p' - Pagination</li>
				 *         <li>'r' - pRocessing</li>
				 *       </ul>
				 *     </li>
				 *     <li>The following constants are allowed:
				 *       <ul>
				 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
				 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
				 *       </ul>
				 *     </li>
				 *     <li>The following syntax is expected:
				 *       <ul>
				 *         <li>'&lt;' and '&gt;' - div elements</li>
				 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
				 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
				 *       </ul>
				 *     </li>
				 *     <li>Examples:
				 *       <ul>
				 *         <li>'&lt;"wrapper"flipt&gt;'</li>
				 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
				 *       </ul>
				 *     </li>
				 *   </ul>
				 *  @type string
				 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
				 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.dom
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
				 *      } );
				 *    } );
				 */
				"sDom": "lfrtip",
			
			
				/**
				 * Search delay option. This will throttle full table searches that use the
				 * DataTables provided search input element (it does not effect calls to
				 * `dt-api search()`, providing a delay before the search is made.
				 *  @type integer
				 *  @default 0
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.searchDelay
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "searchDelay": 200
				 *      } );
				 *    } )
				 */
				"searchDelay": null,
			
			
				/**
				 * DataTables features four different built-in options for the buttons to
				 * display for pagination control:
				 *
				 * * `simple` - 'Previous' and 'Next' buttons only
				 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
				 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
				 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus
				 *   page numbers
				 *  
				 * Further methods can be added using {@link DataTable.ext.oPagination}.
				 *  @type string
				 *  @default simple_numbers
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.pagingType
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "pagingType": "full_numbers"
				 *      } );
				 *    } )
				 */
				"sPaginationType": "simple_numbers",
			
			
				/**
				 * Enable horizontal scrolling. When a table is too wide to fit into a
				 * certain layout, or you have a large number of columns in the table, you
				 * can enable x-scrolling to show the table in a viewport, which can be
				 * scrolled. This property can be `true` which will allow the table to
				 * scroll horizontally when needed, or any CSS unit, or a number (in which
				 * case it will be treated as a pixel measurement). Setting as simply `true`
				 * is recommended.
				 *  @type boolean|string
				 *  @default <i>blank string - i.e. disabled</i>
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.scrollX
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "scrollX": true,
				 *        "scrollCollapse": true
				 *      } );
				 *    } );
				 */
				"sScrollX": "",
			
			
				/**
				 * This property can be used to force a DataTable to use more width than it
				 * might otherwise do when x-scrolling is enabled. For example if you have a
				 * table which requires to be well spaced, this parameter is useful for
				 * "over-sizing" the table, and thus forcing scrolling. This property can by
				 * any CSS unit, or a number (in which case it will be treated as a pixel
				 * measurement).
				 *  @type string
				 *  @default <i>blank string - i.e. disabled</i>
				 *
				 *  @dtopt Options
				 *  @name DataTable.defaults.scrollXInner
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "scrollX": "100%",
				 *        "scrollXInner": "110%"
				 *      } );
				 *    } );
				 */
				"sScrollXInner": "",
			
			
				/**
				 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
				 * to the given height, and enable scrolling for any data which overflows the
				 * current viewport. This can be used as an alternative to paging to display
				 * a lot of data in a small area (although paging and scrolling can both be
				 * enabled at the same time). This property can be any CSS unit, or a number
				 * (in which case it will be treated as a pixel measurement).
				 *  @type string
				 *  @default <i>blank string - i.e. disabled</i>
				 *
				 *  @dtopt Features
				 *  @name DataTable.defaults.scrollY
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "scrollY": "200px",
				 *        "paginate": false
				 *      } );
				 *    } );
				 */
				"sScrollY": "",
			
			
				/**
				 * __Deprecated__ The functionality provided by this parameter has now been
				 * superseded by that provided through `ajax`, which should be used instead.
				 *
				 * Set the HTTP method that is used to make the Ajax call for server-side
				 * processing or Ajax sourced data.
				 *  @type string
				 *  @default GET
				 *
				 *  @dtopt Options
				 *  @dtopt Server-side
				 *  @name DataTable.defaults.serverMethod
				 *
				 *  @deprecated 1.10. Please use `ajax` for this functionality now.
				 */
				"sServerMethod": "GET",
			
			
				/**
				 * DataTables makes use of renderers when displaying HTML elements for
				 * a table. These renderers can be added or modified by plug-ins to
				 * generate suitable mark-up for a site. For example the Bootstrap
				 * integration plug-in for DataTables uses a paging button renderer to
				 * display pagination buttons in the mark-up required by Bootstrap.
				 *
				 * For further information about the renderers available see
				 * DataTable.ext.renderer
				 *  @type string|object
				 *  @default null
				 *
				 *  @name DataTable.defaults.renderer
				 *
				 */
				"renderer": null,
			
			
				/**
				 * Set the data property name that DataTables should use to get a row's id
				 * to set as the `id` property in the node.
				 *  @type string
				 *  @default DT_RowId
				 *
				 *  @name DataTable.defaults.rowId
				 */
				"rowId": "DT_RowId"
			};
			
			_fnHungarianMap( DataTable.defaults );
			
			
			
			/*
			 * Developer note - See note in model.defaults.js about the use of Hungarian
			 * notation and camel case.
			 */
			
			/**
			 * Column options that can be given to DataTables at initialisation time.
			 *  @namespace
			 */
			DataTable.defaults.column = {
				/**
				 * Define which column(s) an order will occur on for this column. This
				 * allows a column's ordering to take multiple columns into account when
				 * doing a sort or use the data from a different column. For example first
				 * name / last name columns make sense to do a multi-column sort over the
				 * two columns.
				 *  @type array|int
				 *  @default null <i>Takes the value of the column index automatically</i>
				 *
				 *  @name DataTable.defaults.column.orderData
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
				 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
				 *          { "orderData": 2, "targets": [ 2 ] }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "orderData": [ 0, 1 ] },
				 *          { "orderData": [ 1, 0 ] },
				 *          { "orderData": 2 },
				 *          null,
				 *          null
				 *        ]
				 *      } );
				 *    } );
				 */
				"aDataSort": null,
				"iDataSort": -1,
			
			
				/**
				 * You can control the default ordering direction, and even alter the
				 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
				 * using this parameter.
				 *  @type array
				 *  @default [ 'asc', 'desc' ]
				 *
				 *  @name DataTable.defaults.column.orderSequence
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
				 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
				 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          null,
				 *          { "orderSequence": [ "asc" ] },
				 *          { "orderSequence": [ "desc", "asc", "asc" ] },
				 *          { "orderSequence": [ "desc" ] },
				 *          null
				 *        ]
				 *      } );
				 *    } );
				 */
				"asSorting": [ 'asc', 'desc' ],
			
			
				/**
				 * Enable or disable filtering on the data in this column.
				 *  @type boolean
				 *  @default true
				 *
				 *  @name DataTable.defaults.column.searchable
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "searchable": false, "targets": [ 0 ] }
				 *        ] } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "searchable": false },
				 *          null,
				 *          null,
				 *          null,
				 *          null
				 *        ] } );
				 *    } );
				 */
				"bSearchable": true,
			
			
				/**
				 * Enable or disable ordering on this column.
				 *  @type boolean
				 *  @default true
				 *
				 *  @name DataTable.defaults.column.orderable
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "orderable": false, "targets": [ 0 ] }
				 *        ] } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "orderable": false },
				 *          null,
				 *          null,
				 *          null,
				 *          null
				 *        ] } );
				 *    } );
				 */
				"bSortable": true,
			
			
				/**
				 * Enable or disable the display of this column.
				 *  @type boolean
				 *  @default true
				 *
				 *  @name DataTable.defaults.column.visible
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "visible": false, "targets": [ 0 ] }
				 *        ] } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "visible": false },
				 *          null,
				 *          null,
				 *          null,
				 *          null
				 *        ] } );
				 *    } );
				 */
				"bVisible": true,
			
			
				/**
				 * Developer definable function that is called whenever a cell is created (Ajax source,
				 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
				 * allowing you to modify the DOM element (add background colour for example) when the
				 * element is available.
				 *  @type function
				 *  @param {element} td The TD node that has been created
				 *  @param {*} cellData The Data for the cell
				 *  @param {array|object} rowData The data for the whole row
				 *  @param {int} row The row index for the aoData data store
				 *  @param {int} col The column index for aoColumns
				 *
				 *  @name DataTable.defaults.column.createdCell
				 *  @dtopt Columns
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [ {
				 *          "targets": [3],
				 *          "createdCell": function (td, cellData, rowData, row, col) {
				 *            if ( cellData == "1.7" ) {
				 *              $(td).css('color', 'blue')
				 *            }
				 *          }
				 *        } ]
				 *      });
				 *    } );
				 */
				"fnCreatedCell": null,
			
			
				/**
				 * This parameter has been replaced by `data` in DataTables to ensure naming
				 * consistency. `dataProp` can still be used, as there is backwards
				 * compatibility in DataTables for this option, but it is strongly
				 * recommended that you use `data` in preference to `dataProp`.
				 *  @name DataTable.defaults.column.dataProp
				 */
			
			
				/**
				 * This property can be used to read data from any data source property,
				 * including deeply nested objects / properties. `data` can be given in a
				 * number of different ways which effect its behaviour:
				 *
				 * * `integer` - treated as an array index for the data source. This is the
				 *   default that DataTables uses (incrementally increased for each column).
				 * * `string` - read an object property from the data source. There are
				 *   three 'special' options that can be used in the string to alter how
				 *   DataTables reads the data from the source object:
				 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
				 *      Javascript to read from nested objects, so to can the options
				 *      specified in `data`. For example: `browser.version` or
				 *      `browser.name`. If your object parameter name contains a period, use
				 *      `\\` to escape it - i.e. `first\\.name`.
				 *    * `[]` - Array notation. DataTables can automatically combine data
				 *      from and array source, joining the data with the characters provided
				 *      between the two brackets. For example: `name[, ]` would provide a
				 *      comma-space separated list from the source array. If no characters
				 *      are provided between the brackets, the original array source is
				 *      returned.
				 *    * `()` - Function notation. Adding `()` to the end of a parameter will
				 *      execute a function of the name given. For example: `browser()` for a
				 *      simple function on the data source, `browser.version()` for a
				 *      function in a nested property or even `browser().version` to get an
				 *      object property if the function called returns an object. Note that
				 *      function notation is recommended for use in `render` rather than
				 *      `data` as it is much simpler to use as a renderer.
				 * * `null` - use the original data source for the row rather than plucking
				 *   data directly from it. This action has effects on two other
				 *   initialisation options:
				 *    * `defaultContent` - When null is given as the `data` option and
				 *      `defaultContent` is specified for the column, the value defined by
				 *      `defaultContent` will be used for the cell.
				 *    * `render` - When null is used for the `data` option and the `render`
				 *      option is specified for the column, the whole data source for the
				 *      row is used for the renderer.
				 * * `function` - the function given will be executed whenever DataTables
				 *   needs to set or get the data for a cell in the column. The function
				 *   takes three parameters:
				 *    * Parameters:
				 *      * `{array|object}` The data source for the row
				 *      * `{string}` The type call data requested - this will be 'set' when
				 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
				 *        when gathering data. Note that when `undefined` is given for the
				 *        type DataTables expects to get the raw data for the object back<
				 *      * `{*}` Data to set when the second parameter is 'set'.
				 *    * Return:
				 *      * The return value from the function is not required when 'set' is
				 *        the type of call, but otherwise the return is what will be used
				 *        for the data requested.
				 *
				 * Note that `data` is a getter and setter option. If you just require
				 * formatting of data for output, you will likely want to use `render` which
				 * is simply a getter and thus simpler to use.
				 *
				 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
				 * name change reflects the flexibility of this property and is consistent
				 * with the naming of mRender. If 'mDataProp' is given, then it will still
				 * be used by DataTables, as it automatically maps the old name to the new
				 * if required.
				 *
				 *  @type string|int|function|null
				 *  @default null <i>Use automatically calculated column index</i>
				 *
				 *  @name DataTable.defaults.column.data
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Read table data from objects
				 *    // JSON structure for each row:
				 *    //   {
				 *    //      "engine": {value},
				 *    //      "browser": {value},
				 *    //      "platform": {value},
				 *    //      "version": {value},
				 *    //      "grade": {value}
				 *    //   }
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "ajaxSource": "sources/objects.txt",
				 *        "columns": [
				 *          { "data": "engine" },
				 *          { "data": "browser" },
				 *          { "data": "platform" },
				 *          { "data": "version" },
				 *          { "data": "grade" }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Read information from deeply nested objects
				 *    // JSON structure for each row:
				 *    //   {
				 *    //      "engine": {value},
				 *    //      "browser": {value},
				 *    //      "platform": {
				 *    //         "inner": {value}
				 *    //      },
				 *    //      "details": [
				 *    //         {value}, {value}
				 *    //      ]
				 *    //   }
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "ajaxSource": "sources/deep.txt",
				 *        "columns": [
				 *          { "data": "engine" },
				 *          { "data": "browser" },
				 *          { "data": "platform.inner" },
				 *          { "data": "platform.details.0" },
				 *          { "data": "platform.details.1" }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `data` as a function to provide different information for
				 *    // sorting, filtering and display. In this case, currency (price)
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [ {
				 *          "targets": [ 0 ],
				 *          "data": function ( source, type, val ) {
				 *            if (type === 'set') {
				 *              source.price = val;
				 *              // Store the computed dislay and filter values for efficiency
				 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
				 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
				 *              return;
				 *            }
				 *            else if (type === 'display') {
				 *              return source.price_display;
				 *            }
				 *            else if (type === 'filter') {
				 *              return source.price_filter;
				 *            }
				 *            // 'sort', 'type' and undefined all just use the integer
				 *            return source.price;
				 *          }
				 *        } ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using default content
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [ {
				 *          "targets": [ 0 ],
				 *          "data": null,
				 *          "defaultContent": "Click to edit"
				 *        } ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using array notation - outputting a list from an array
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [ {
				 *          "targets": [ 0 ],
				 *          "data": "name[, ]"
				 *        } ]
				 *      } );
				 *    } );
				 *
				 */
				"mData": null,
			
			
				/**
				 * This property is the rendering partner to `data` and it is suggested that
				 * when you want to manipulate data for display (including filtering,
				 * sorting etc) without altering the underlying data for the table, use this
				 * property. `render` can be considered to be the the read only companion to
				 * `data` which is read / write (then as such more complex). Like `data`
				 * this option can be given in a number of different ways to effect its
				 * behaviour:
				 *
				 * * `integer` - treated as an array index for the data source. This is the
				 *   default that DataTables uses (incrementally increased for each column).
				 * * `string` - read an object property from the data source. There are
				 *   three 'special' options that can be used in the string to alter how
				 *   DataTables reads the data from the source object:
				 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
				 *      Javascript to read from nested objects, so to can the options
				 *      specified in `data`. For example: `browser.version` or
				 *      `browser.name`. If your object parameter name contains a period, use
				 *      `\\` to escape it - i.e. `first\\.name`.
				 *    * `[]` - Array notation. DataTables can automatically combine data
				 *      from and array source, joining the data with the characters provided
				 *      between the two brackets. For example: `name[, ]` would provide a
				 *      comma-space separated list from the source array. If no characters
				 *      are provided between the brackets, the original array source is
				 *      returned.
				 *    * `()` - Function notation. Adding `()` to the end of a parameter will
				 *      execute a function of the name given. For example: `browser()` for a
				 *      simple function on the data source, `browser.version()` for a
				 *      function in a nested property or even `browser().version` to get an
				 *      object property if the function called returns an object.
				 * * `object` - use different data for the different data types requested by
				 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
				 *   of the object is the data type the property refers to and the value can
				 *   defined using an integer, string or function using the same rules as
				 *   `render` normally does. Note that an `_` option _must_ be specified.
				 *   This is the default value to use if you haven't specified a value for
				 *   the data type requested by DataTables.
				 * * `function` - the function given will be executed whenever DataTables
				 *   needs to set or get the data for a cell in the column. The function
				 *   takes three parameters:
				 *    * Parameters:
				 *      * {array|object} The data source for the row (based on `data`)
				 *      * {string} The type call data requested - this will be 'filter',
				 *        'display', 'type' or 'sort'.
				 *      * {array|object} The full data source for the row (not based on
				 *        `data`)
				 *    * Return:
				 *      * The return value from the function is what will be used for the
				 *        data requested.
				 *
				 *  @type string|int|function|object|null
				 *  @default null Use the data source value.
				 *
				 *  @name DataTable.defaults.column.render
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Create a comma separated list from an array of objects
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "ajaxSource": "sources/deep.txt",
				 *        "columns": [
				 *          { "data": "engine" },
				 *          { "data": "browser" },
				 *          {
				 *            "data": "platform",
				 *            "render": "[, ].name"
				 *          }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Execute a function to obtain data
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [ {
				 *          "targets": [ 0 ],
				 *          "data": null, // Use the full data source object for the renderer's source
				 *          "render": "browserName()"
				 *        } ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // As an object, extracting different data for the different types
				 *    // This would be used with a data source such as:
				 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
				 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
				 *    // (which has both forms) is used for filtering for if a user inputs either format, while
				 *    // the formatted phone number is the one that is shown in the table.
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [ {
				 *          "targets": [ 0 ],
				 *          "data": null, // Use the full data source object for the renderer's source
				 *          "render": {
				 *            "_": "phone",
				 *            "filter": "phone_filter",
				 *            "display": "phone_display"
				 *          }
				 *        } ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Use as a function to create a link from the data source
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [ {
				 *          "targets": [ 0 ],
				 *          "data": "download_link",
				 *          "render": function ( data, type, full ) {
				 *            return '<a href="'+data+'">Download</a>';
				 *          }
				 *        } ]
				 *      } );
				 *    } );
				 */
				"mRender": null,
			
			
				/**
				 * Change the cell type created for the column - either TD cells or TH cells. This
				 * can be useful as TH cells have semantic meaning in the table body, allowing them
				 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
				 *  @type string
				 *  @default td
				 *
				 *  @name DataTable.defaults.column.cellType
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Make the first column use TH cells
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [ {
				 *          "targets": [ 0 ],
				 *          "cellType": "th"
				 *        } ]
				 *      } );
				 *    } );
				 */
				"sCellType": "td",
			
			
				/**
				 * Class to give to each cell in this column.
				 *  @type string
				 *  @default <i>Empty string</i>
				 *
				 *  @name DataTable.defaults.column.class
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "class": "my_class", "targets": [ 0 ] }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "class": "my_class" },
				 *          null,
				 *          null,
				 *          null,
				 *          null
				 *        ]
				 *      } );
				 *    } );
				 */
				"sClass": "",
			
				/**
				 * When DataTables calculates the column widths to assign to each column,
				 * it finds the longest string in each column and then constructs a
				 * temporary table and reads the widths from that. The problem with this
				 * is that "mmm" is much wider then "iiii", but the latter is a longer
				 * string - thus the calculation can go wrong (doing it properly and putting
				 * it into an DOM object and measuring that is horribly(!) slow). Thus as
				 * a "work around" we provide this option. It will append its value to the
				 * text that is found to be the longest string for the column - i.e. padding.
				 * Generally you shouldn't need this!
				 *  @type string
				 *  @default <i>Empty string<i>
				 *
				 *  @name DataTable.defaults.column.contentPadding
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          null,
				 *          null,
				 *          null,
				 *          {
				 *            "contentPadding": "mmm"
				 *          }
				 *        ]
				 *      } );
				 *    } );
				 */
				"sContentPadding": "",
			
			
				/**
				 * Allows a default value to be given for a column's data, and will be used
				 * whenever a null data source is encountered (this can be because `data`
				 * is set to null, or because the data source itself is null).
				 *  @type string
				 *  @default null
				 *
				 *  @name DataTable.defaults.column.defaultContent
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          {
				 *            "data": null,
				 *            "defaultContent": "Edit",
				 *            "targets": [ -1 ]
				 *          }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          null,
				 *          null,
				 *          null,
				 *          {
				 *            "data": null,
				 *            "defaultContent": "Edit"
				 *          }
				 *        ]
				 *      } );
				 *    } );
				 */
				"sDefaultContent": null,
			
			
				/**
				 * This parameter is only used in DataTables' server-side processing. It can
				 * be exceptionally useful to know what columns are being displayed on the
				 * client side, and to map these to database fields. When defined, the names
				 * also allow DataTables to reorder information from the server if it comes
				 * back in an unexpected order (i.e. if you switch your columns around on the
				 * client-side, your server-side code does not also need updating).
				 *  @type string
				 *  @default <i>Empty string</i>
				 *
				 *  @name DataTable.defaults.column.name
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "name": "engine", "targets": [ 0 ] },
				 *          { "name": "browser", "targets": [ 1 ] },
				 *          { "name": "platform", "targets": [ 2 ] },
				 *          { "name": "version", "targets": [ 3 ] },
				 *          { "name": "grade", "targets": [ 4 ] }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "name": "engine" },
				 *          { "name": "browser" },
				 *          { "name": "platform" },
				 *          { "name": "version" },
				 *          { "name": "grade" }
				 *        ]
				 *      } );
				 *    } );
				 */
				"sName": "",
			
			
				/**
				 * Defines a data source type for the ordering which can be used to read
				 * real-time information from the table (updating the internally cached
				 * version) prior to ordering. This allows ordering to occur on user
				 * editable elements such as form inputs.
				 *  @type string
				 *  @default std
				 *
				 *  @name DataTable.defaults.column.orderDataType
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
				 *          { "type": "numeric", "targets": [ 3 ] },
				 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
				 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          null,
				 *          null,
				 *          { "orderDataType": "dom-text" },
				 *          { "orderDataType": "dom-text", "type": "numeric" },
				 *          { "orderDataType": "dom-select" },
				 *          { "orderDataType": "dom-checkbox" }
				 *        ]
				 *      } );
				 *    } );
				 */
				"sSortDataType": "std",
			
			
				/**
				 * The title of this column.
				 *  @type string
				 *  @default null <i>Derived from the 'TH' value for this column in the
				 *    original HTML table.</i>
				 *
				 *  @name DataTable.defaults.column.title
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "title": "My column title", "targets": [ 0 ] }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "title": "My column title" },
				 *          null,
				 *          null,
				 *          null,
				 *          null
				 *        ]
				 *      } );
				 *    } );
				 */
				"sTitle": null,
			
			
				/**
				 * The type allows you to specify how the data for this column will be
				 * ordered. Four types (string, numeric, date and html (which will strip
				 * HTML tags before ordering)) are currently available. Note that only date
				 * formats understood by Javascript's Date() object will be accepted as type
				 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
				 * 'numeric', 'date' or 'html' (by default). Further types can be adding
				 * through plug-ins.
				 *  @type string
				 *  @default null <i>Auto-detected from raw data</i>
				 *
				 *  @name DataTable.defaults.column.type
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "type": "html", "targets": [ 0 ] }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "type": "html" },
				 *          null,
				 *          null,
				 *          null,
				 *          null
				 *        ]
				 *      } );
				 *    } );
				 */
				"sType": null,
			
			
				/**
				 * Defining the width of the column, this parameter may take any CSS value
				 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
				 * been given a specific width through this interface ensuring that the table
				 * remains readable.
				 *  @type string
				 *  @default null <i>Automatic</i>
				 *
				 *  @name DataTable.defaults.column.width
				 *  @dtopt Columns
				 *
				 *  @example
				 *    // Using `columnDefs`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columnDefs": [
				 *          { "width": "20%", "targets": [ 0 ] }
				 *        ]
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Using `columns`
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "columns": [
				 *          { "width": "20%" },
				 *          null,
				 *          null,
				 *          null,
				 *          null
				 *        ]
				 *      } );
				 *    } );
				 */
				"sWidth": null
			};
			
			_fnHungarianMap( DataTable.defaults.column );
			
			
			
			/**
			 * DataTables settings object - this holds all the information needed for a
			 * given table, including configuration, data and current application of the
			 * table options. DataTables does not have a single instance for each DataTable
			 * with the settings attached to that instance, but rather instances of the
			 * DataTable "class" are created on-the-fly as needed (typically by a
			 * $().dataTable() call) and the settings object is then applied to that
			 * instance.
			 *
			 * Note that this object is related to {@link DataTable.defaults} but this
			 * one is the internal data store for DataTables's cache of columns. It should
			 * NOT be manipulated outside of DataTables. Any configuration should be done
			 * through the initialisation options.
			 *  @namespace
			 *  @todo Really should attach the settings object to individual instances so we
			 *    don't need to create new instances on each $().dataTable() call (if the
			 *    table already exists). It would also save passing oSettings around and
			 *    into every single function. However, this is a very significant
			 *    architecture change for DataTables and will almost certainly break
			 *    backwards compatibility with older installations. This is something that
			 *    will be done in 2.0.
			 */
			DataTable.models.oSettings = {
				/**
				 * Primary features of DataTables and their enablement state.
				 *  @namespace
				 */
				"oFeatures": {
			
					/**
					 * Flag to say if DataTables should automatically try to calculate the
					 * optimum table and columns widths (true) or not (false).
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bAutoWidth": null,
			
					/**
					 * Delay the creation of TR and TD elements until they are actually
					 * needed by a driven page draw. This can give a significant speed
					 * increase for Ajax source and Javascript source data, but makes no
					 * difference at all fro DOM and server-side processing tables.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bDeferRender": null,
			
					/**
					 * Enable filtering on the table or not. Note that if this is disabled
					 * then there is no filtering at all on the table, including fnFilter.
					 * To just remove the filtering input use sDom and remove the 'f' option.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bFilter": null,
			
					/**
					 * Table information element (the 'Showing x of y records' div) enable
					 * flag.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bInfo": null,
			
					/**
					 * Present a user control allowing the end user to change the page size
					 * when pagination is enabled.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bLengthChange": null,
			
					/**
					 * Pagination enabled or not. Note that if this is disabled then length
					 * changing must also be disabled.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bPaginate": null,
			
					/**
					 * Processing indicator enable flag whenever DataTables is enacting a
					 * user request - typically an Ajax request for server-side processing.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bProcessing": null,
			
					/**
					 * Server-side processing enabled flag - when enabled DataTables will
					 * get all data from the server for every draw - there is no filtering,
					 * sorting or paging done on the client-side.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bServerSide": null,
			
					/**
					 * Sorting enablement flag.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bSort": null,
			
					/**
					 * Multi-column sorting
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bSortMulti": null,
			
					/**
					 * Apply a class to the columns which are being sorted to provide a
					 * visual highlight or not. This can slow things down when enabled since
					 * there is a lot of DOM interaction.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bSortClasses": null,
			
					/**
					 * State saving enablement flag.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bStateSave": null
				},
			
			
				/**
				 * Scrolling settings for a table.
				 *  @namespace
				 */
				"oScroll": {
					/**
					 * When the table is shorter in height than sScrollY, collapse the
					 * table container down to the height of the table (when true).
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type boolean
					 */
					"bCollapse": null,
			
					/**
					 * Width of the scrollbar for the web-browser's platform. Calculated
					 * during table initialisation.
					 *  @type int
					 *  @default 0
					 */
					"iBarWidth": 0,
			
					/**
					 * Viewport width for horizontal scrolling. Horizontal scrolling is
					 * disabled if an empty string.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type string
					 */
					"sX": null,
			
					/**
					 * Width to expand the table to when using x-scrolling. Typically you
					 * should not need to use this.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type string
					 *  @deprecated
					 */
					"sXInner": null,
			
					/**
					 * Viewport height for vertical scrolling. Vertical scrolling is disabled
					 * if an empty string.
					 * Note that this parameter will be set by the initialisation routine. To
					 * set a default use {@link DataTable.defaults}.
					 *  @type string
					 */
					"sY": null
				},
			
				/**
				 * Language information for the table.
				 *  @namespace
				 *  @extends DataTable.defaults.oLanguage
				 */
				"oLanguage": {
					/**
					 * Information callback function. See
					 * {@link DataTable.defaults.fnInfoCallback}
					 *  @type function
					 *  @default null
					 */
					"fnInfoCallback": null
				},
			
				/**
				 * Browser support parameters
				 *  @namespace
				 */
				"oBrowser": {
					/**
					 * Indicate if the browser incorrectly calculates width:100% inside a
					 * scrolling element (IE6/7)
					 *  @type boolean
					 *  @default false
					 */
					"bScrollOversize": false,
			
					/**
					 * Determine if the vertical scrollbar is on the right or left of the
					 * scrolling container - needed for rtl language layout, although not
					 * all browsers move the scrollbar (Safari).
					 *  @type boolean
					 *  @default false
					 */
					"bScrollbarLeft": false,
			
					/**
					 * Flag for if `getBoundingClientRect` is fully supported or not
					 *  @type boolean
					 *  @default false
					 */
					"bBounding": false,
			
					/**
					 * Browser scrollbar width
					 *  @type integer
					 *  @default 0
					 */
					"barWidth": 0
				},
			
			
				"ajax": null,
			
			
				/**
				 * Array referencing the nodes which are used for the features. The
				 * parameters of this object match what is allowed by sDom - i.e.
				 *   <ul>
				 *     <li>'l' - Length changing</li>
				 *     <li>'f' - Filtering input</li>
				 *     <li>'t' - The table!</li>
				 *     <li>'i' - Information</li>
				 *     <li>'p' - Pagination</li>
				 *     <li>'r' - pRocessing</li>
				 *   </ul>
				 *  @type array
				 *  @default []
				 */
				"aanFeatures": [],
			
				/**
				 * Store data information - see {@link DataTable.models.oRow} for detailed
				 * information.
				 *  @type array
				 *  @default []
				 */
				"aoData": [],
			
				/**
				 * Array of indexes which are in the current display (after filtering etc)
				 *  @type array
				 *  @default []
				 */
				"aiDisplay": [],
			
				/**
				 * Array of indexes for display - no filtering
				 *  @type array
				 *  @default []
				 */
				"aiDisplayMaster": [],
			
				/**
				 * Map of row ids to data indexes
				 *  @type object
				 *  @default {}
				 */
				"aIds": {},
			
				/**
				 * Store information about each column that is in use
				 *  @type array
				 *  @default []
				 */
				"aoColumns": [],
			
				/**
				 * Store information about the table's header
				 *  @type array
				 *  @default []
				 */
				"aoHeader": [],
			
				/**
				 * Store information about the table's footer
				 *  @type array
				 *  @default []
				 */
				"aoFooter": [],
			
				/**
				 * Store the applied global search information in case we want to force a
				 * research or compare the old search to a new one.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @namespace
				 *  @extends DataTable.models.oSearch
				 */
				"oPreviousSearch": {},
			
				/**
				 * Store the applied search for each column - see
				 * {@link DataTable.models.oSearch} for the format that is used for the
				 * filtering information for each column.
				 *  @type array
				 *  @default []
				 */
				"aoPreSearchCols": [],
			
				/**
				 * Sorting that is applied to the table. Note that the inner arrays are
				 * used in the following manner:
				 * <ul>
				 *   <li>Index 0 - column number</li>
				 *   <li>Index 1 - current sorting direction</li>
				 * </ul>
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type array
				 *  @todo These inner arrays should really be objects
				 */
				"aaSorting": null,
			
				/**
				 * Sorting that is always applied to the table (i.e. prefixed in front of
				 * aaSorting).
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type array
				 *  @default []
				 */
				"aaSortingFixed": [],
			
				/**
				 * Classes to use for the striping of a table.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type array
				 *  @default []
				 */
				"asStripeClasses": null,
			
				/**
				 * If restoring a table - we should restore its striping classes as well
				 *  @type array
				 *  @default []
				 */
				"asDestroyStripes": [],
			
				/**
				 * If restoring a table - we should restore its width
				 *  @type int
				 *  @default 0
				 */
				"sDestroyWidth": 0,
			
				/**
				 * Callback functions array for every time a row is inserted (i.e. on a draw).
				 *  @type array
				 *  @default []
				 */
				"aoRowCallback": [],
			
				/**
				 * Callback functions for the header on each draw.
				 *  @type array
				 *  @default []
				 */
				"aoHeaderCallback": [],
			
				/**
				 * Callback function for the footer on each draw.
				 *  @type array
				 *  @default []
				 */
				"aoFooterCallback": [],
			
				/**
				 * Array of callback functions for draw callback functions
				 *  @type array
				 *  @default []
				 */
				"aoDrawCallback": [],
			
				/**
				 * Array of callback functions for row created function
				 *  @type array
				 *  @default []
				 */
				"aoRowCreatedCallback": [],
			
				/**
				 * Callback functions for just before the table is redrawn. A return of
				 * false will be used to cancel the draw.
				 *  @type array
				 *  @default []
				 */
				"aoPreDrawCallback": [],
			
				/**
				 * Callback functions for when the table has been initialised.
				 *  @type array
				 *  @default []
				 */
				"aoInitComplete": [],
			
			
				/**
				 * Callbacks for modifying the settings to be stored for state saving, prior to
				 * saving state.
				 *  @type array
				 *  @default []
				 */
				"aoStateSaveParams": [],
			
				/**
				 * Callbacks for modifying the settings that have been stored for state saving
				 * prior to using the stored values to restore the state.
				 *  @type array
				 *  @default []
				 */
				"aoStateLoadParams": [],
			
				/**
				 * Callbacks for operating on the settings object once the saved state has been
				 * loaded
				 *  @type array
				 *  @default []
				 */
				"aoStateLoaded": [],
			
				/**
				 * Cache the table ID for quick access
				 *  @type string
				 *  @default <i>Empty string</i>
				 */
				"sTableId": "",
			
				/**
				 * The TABLE node for the main table
				 *  @type node
				 *  @default null
				 */
				"nTable": null,
			
				/**
				 * Permanent ref to the thead element
				 *  @type node
				 *  @default null
				 */
				"nTHead": null,
			
				/**
				 * Permanent ref to the tfoot element - if it exists
				 *  @type node
				 *  @default null
				 */
				"nTFoot": null,
			
				/**
				 * Permanent ref to the tbody element
				 *  @type node
				 *  @default null
				 */
				"nTBody": null,
			
				/**
				 * Cache the wrapper node (contains all DataTables controlled elements)
				 *  @type node
				 *  @default null
				 */
				"nTableWrapper": null,
			
				/**
				 * Indicate if when using server-side processing the loading of data
				 * should be deferred until the second draw.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 *  @default false
				 */
				"bDeferLoading": false,
			
				/**
				 * Indicate if all required information has been read in
				 *  @type boolean
				 *  @default false
				 */
				"bInitialised": false,
			
				/**
				 * Information about open rows. Each object in the array has the parameters
				 * 'nTr' and 'nParent'
				 *  @type array
				 *  @default []
				 */
				"aoOpenRows": [],
			
				/**
				 * Dictate the positioning of DataTables' control elements - see
				 * {@link DataTable.model.oInit.sDom}.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 *  @default null
				 */
				"sDom": null,
			
				/**
				 * Search delay (in mS)
				 *  @type integer
				 *  @default null
				 */
				"searchDelay": null,
			
				/**
				 * Which type of pagination should be used.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 *  @default two_button
				 */
				"sPaginationType": "two_button",
			
				/**
				 * The state duration (for `stateSave`) in seconds.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type int
				 *  @default 0
				 */
				"iStateDuration": 0,
			
				/**
				 * Array of callback functions for state saving. Each array element is an
				 * object with the following parameters:
				 *   <ul>
				 *     <li>function:fn - function to call. Takes two parameters, oSettings
				 *       and the JSON string to save that has been thus far created. Returns
				 *       a JSON string to be inserted into a json object
				 *       (i.e. '"param": [ 0, 1, 2]')</li>
				 *     <li>string:sName - name of callback</li>
				 *   </ul>
				 *  @type array
				 *  @default []
				 */
				"aoStateSave": [],
			
				/**
				 * Array of callback functions for state loading. Each array element is an
				 * object with the following parameters:
				 *   <ul>
				 *     <li>function:fn - function to call. Takes two parameters, oSettings
				 *       and the object stored. May return false to cancel state loading</li>
				 *     <li>string:sName - name of callback</li>
				 *   </ul>
				 *  @type array
				 *  @default []
				 */
				"aoStateLoad": [],
			
				/**
				 * State that was saved. Useful for back reference
				 *  @type object
				 *  @default null
				 */
				"oSavedState": null,
			
				/**
				 * State that was loaded. Useful for back reference
				 *  @type object
				 *  @default null
				 */
				"oLoadedState": null,
			
				/**
				 * Source url for AJAX data for the table.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 *  @default null
				 */
				"sAjaxSource": null,
			
				/**
				 * Property from a given object from which to read the table data from. This
				 * can be an empty string (when not server-side processing), in which case
				 * it is  assumed an an array is given directly.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 */
				"sAjaxDataProp": null,
			
				/**
				 * Note if draw should be blocked while getting data
				 *  @type boolean
				 *  @default true
				 */
				"bAjaxDataGet": true,
			
				/**
				 * The last jQuery XHR object that was used for server-side data gathering.
				 * This can be used for working with the XHR information in one of the
				 * callbacks
				 *  @type object
				 *  @default null
				 */
				"jqXHR": null,
			
				/**
				 * JSON returned from the server in the last Ajax request
				 *  @type object
				 *  @default undefined
				 */
				"json": undefined,
			
				/**
				 * Data submitted as part of the last Ajax request
				 *  @type object
				 *  @default undefined
				 */
				"oAjaxData": undefined,
			
				/**
				 * Function to get the server-side data.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type function
				 */
				"fnServerData": null,
			
				/**
				 * Functions which are called prior to sending an Ajax request so extra
				 * parameters can easily be sent to the server
				 *  @type array
				 *  @default []
				 */
				"aoServerParams": [],
			
				/**
				 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
				 * required).
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 */
				"sServerMethod": null,
			
				/**
				 * Format numbers for display.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type function
				 */
				"fnFormatNumber": null,
			
				/**
				 * List of options that can be used for the user selectable length menu.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type array
				 *  @default []
				 */
				"aLengthMenu": null,
			
				/**
				 * Counter for the draws that the table does. Also used as a tracker for
				 * server-side processing
				 *  @type int
				 *  @default 0
				 */
				"iDraw": 0,
			
				/**
				 * Indicate if a redraw is being done - useful for Ajax
				 *  @type boolean
				 *  @default false
				 */
				"bDrawing": false,
			
				/**
				 * Draw index (iDraw) of the last error when parsing the returned data
				 *  @type int
				 *  @default -1
				 */
				"iDrawError": -1,
			
				/**
				 * Paging display length
				 *  @type int
				 *  @default 10
				 */
				"_iDisplayLength": 10,
			
				/**
				 * Paging start point - aiDisplay index
				 *  @type int
				 *  @default 0
				 */
				"_iDisplayStart": 0,
			
				/**
				 * Server-side processing - number of records in the result set
				 * (i.e. before filtering), Use fnRecordsTotal rather than
				 * this property to get the value of the number of records, regardless of
				 * the server-side processing setting.
				 *  @type int
				 *  @default 0
				 *  @private
				 */
				"_iRecordsTotal": 0,
			
				/**
				 * Server-side processing - number of records in the current display set
				 * (i.e. after filtering). Use fnRecordsDisplay rather than
				 * this property to get the value of the number of records, regardless of
				 * the server-side processing setting.
				 *  @type boolean
				 *  @default 0
				 *  @private
				 */
				"_iRecordsDisplay": 0,
			
				/**
				 * Flag to indicate if jQuery UI marking and classes should be used.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bJUI": null,
			
				/**
				 * The classes to use for the table
				 *  @type object
				 *  @default {}
				 */
				"oClasses": {},
			
				/**
				 * Flag attached to the settings object so you can check in the draw
				 * callback if filtering has been done in the draw. Deprecated in favour of
				 * events.
				 *  @type boolean
				 *  @default false
				 *  @deprecated
				 */
				"bFiltered": false,
			
				/**
				 * Flag attached to the settings object so you can check in the draw
				 * callback if sorting has been done in the draw. Deprecated in favour of
				 * events.
				 *  @type boolean
				 *  @default false
				 *  @deprecated
				 */
				"bSorted": false,
			
				/**
				 * Indicate that if multiple rows are in the header and there is more than
				 * one unique cell per column, if the top one (true) or bottom one (false)
				 * should be used for sorting / title by DataTables.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bSortCellsTop": null,
			
				/**
				 * Initialisation object that is used for the table
				 *  @type object
				 *  @default null
				 */
				"oInit": null,
			
				/**
				 * Destroy callback functions - for plug-ins to attach themselves to the
				 * destroy so they can clean up markup and events.
				 *  @type array
				 *  @default []
				 */
				"aoDestroyCallback": [],
			
			
				/**
				 * Get the number of records in the current record set, before filtering
				 *  @type function
				 */
				"fnRecordsTotal": function ()
				{
					return _fnDataSource( this ) == 'ssp' ?
						this._iRecordsTotal * 1 :
						this.aiDisplayMaster.length;
				},
			
				/**
				 * Get the number of records in the current record set, after filtering
				 *  @type function
				 */
				"fnRecordsDisplay": function ()
				{
					return _fnDataSource( this ) == 'ssp' ?
						this._iRecordsDisplay * 1 :
						this.aiDisplay.length;
				},
			
				/**
				 * Get the display end point - aiDisplay index
				 *  @type function
				 */
				"fnDisplayEnd": function ()
				{
					var
						len      = this._iDisplayLength,
						start    = this._iDisplayStart,
						calc     = start + len,
						records  = this.aiDisplay.length,
						features = this.oFeatures,
						paginate = features.bPaginate;
			
					if ( features.bServerSide ) {
						return paginate === false || len === -1 ?
							start + records :
							Math.min( start+len, this._iRecordsDisplay );
					}
					else {
						return ! paginate || calc>records || len===-1 ?
							records :
							calc;
					}
				},
			
				/**
				 * The DataTables object for this table
				 *  @type object
				 *  @default null
				 */
				"oInstance": null,
			
				/**
				 * Unique identifier for each instance of the DataTables object. If there
				 * is an ID on the table node, then it takes that value, otherwise an
				 * incrementing internal counter is used.
				 *  @type string
				 *  @default null
				 */
				"sInstance": null,
			
				/**
				 * tabindex attribute value that is added to DataTables control elements, allowing
				 * keyboard navigation of the table and its controls.
				 */
				"iTabIndex": 0,
			
				/**
				 * DIV container for the footer scrolling table if scrolling
				 */
				"nScrollHead": null,
			
				/**
				 * DIV container for the footer scrolling table if scrolling
				 */
				"nScrollFoot": null,
			
				/**
				 * Last applied sort
				 *  @type array
				 *  @default []
				 */
				"aLastSort": [],
			
				/**
				 * Stored plug-in instances
				 *  @type object
				 *  @default {}
				 */
				"oPlugins": {},
			
				/**
				 * Function used to get a row's id from the row's data
				 *  @type function
				 *  @default null
				 */
				"rowIdFn": null,
			
				/**
				 * Data location where to store a row's id
				 *  @type string
				 *  @default null
				 */
				"rowId": null
			};

			/**
			 * Extension object for DataTables that is used to provide all extension
			 * options.
			 *
			 * Note that the `DataTable.ext` object is available through
			 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
			 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
			 *  @namespace
			 *  @extends DataTable.models.ext
			 */
			
			
			/**
			 * DataTables extensions
			 * 
			 * This namespace acts as a collection area for plug-ins that can be used to
			 * extend DataTables capabilities. Indeed many of the build in methods
			 * use this method to provide their own capabilities (sorting methods for
			 * example).
			 *
			 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
			 * reasons
			 *
			 *  @namespace
			 */
			DataTable.ext = _ext = {
				/**
				 * Buttons. For use with the Buttons extension for DataTables. This is
				 * defined here so other extensions can define buttons regardless of load
				 * order. It is _not_ used by DataTables core.
				 *
				 *  @type object
				 *  @default {}
				 */
				buttons: {},
			
			
				/**
				 * Element class names
				 *
				 *  @type object
				 *  @default {}
				 */
				classes: {},
			
			
				/**
				 * Error reporting.
				 * 
				 * How should DataTables report an error. Can take the value 'alert',
				 * 'throw', 'none' or a function.
				 *
				 *  @type string|function
				 *  @default alert
				 */
				errMode: "alert",
			
			
				/**
				 * Feature plug-ins.
				 * 
				 * This is an array of objects which describe the feature plug-ins that are
				 * available to DataTables. These feature plug-ins are then available for
				 * use through the `dom` initialisation option.
				 * 
				 * Each feature plug-in is described by an object which must have the
				 * following properties:
				 * 
				 * * `fnInit` - function that is used to initialise the plug-in,
				 * * `cFeature` - a character so the feature can be enabled by the `dom`
				 *   instillation option. This is case sensitive.
				 *
				 * The `fnInit` function has the following input parameters:
				 *
				 * 1. `{object}` DataTables settings object: see
				 *    {@link DataTable.models.oSettings}
				 *
				 * And the following return is expected:
				 * 
				 * * {node|null} The element which contains your feature. Note that the
				 *   return may also be void if your plug-in does not require to inject any
				 *   DOM elements into DataTables control (`dom`) - for example this might
				 *   be useful when developing a plug-in which allows table control via
				 *   keyboard entry
				 *
				 *  @type array
				 *
				 *  @example
				 *    $.fn.dataTable.ext.features.push( {
				 *      "fnInit": function( oSettings ) {
				 *        return new TableTools( { "oDTSettings": oSettings } );
				 *      },
				 *      "cFeature": "T"
				 *    } );
				 */
				feature: [],
			
			
				/**
				 * Row searching.
				 * 
				 * This method of searching is complimentary to the default type based
				 * searching, and a lot more comprehensive as it allows you complete control
				 * over the searching logic. Each element in this array is a function
				 * (parameters described below) that is called for every row in the table,
				 * and your logic decides if it should be included in the searching data set
				 * or not.
				 *
				 * Searching functions have the following input parameters:
				 *
				 * 1. `{object}` DataTables settings object: see
				 *    {@link DataTable.models.oSettings}
				 * 2. `{array|object}` Data for the row to be processed (same as the
				 *    original format that was passed in as the data source, or an array
				 *    from a DOM data source
				 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
				 *    can be useful to retrieve the `TR` element if you need DOM interaction.
				 *
				 * And the following return is expected:
				 *
				 * * {boolean} Include the row in the searched result set (true) or not
				 *   (false)
				 *
				 * Note that as with the main search ability in DataTables, technically this
				 * is "filtering", since it is subtractive. However, for consistency in
				 * naming we call it searching here.
				 *
				 *  @type array
				 *  @default []
				 *
				 *  @example
				 *    // The following example shows custom search being applied to the
				 *    // fourth column (i.e. the data[3] index) based on two input values
				 *    // from the end-user, matching the data in a certain range.
				 *    $.fn.dataTable.ext.search.push(
				 *      function( settings, data, dataIndex ) {
				 *        var min = document.getElementById('min').value * 1;
				 *        var max = document.getElementById('max').value * 1;
				 *        var version = data[3] == "-" ? 0 : data[3]*1;
				 *
				 *        if ( min == "" && max == "" ) {
				 *          return true;
				 *        }
				 *        else if ( min == "" && version < max ) {
				 *          return true;
				 *        }
				 *        else if ( min < version && "" == max ) {
				 *          return true;
				 *        }
				 *        else if ( min < version && version < max ) {
				 *          return true;
				 *        }
				 *        return false;
				 *      }
				 *    );
				 */
				search: [],
			
			
				/**
				 * Selector extensions
				 *
				 * The `selector` option can be used to extend the options available for the
				 * selector modifier options (`selector-modifier` object data type) that
				 * each of the three built in selector types offer (row, column and cell +
				 * their plural counterparts). For example the Select extension uses this
				 * mechanism to provide an option to select only rows, columns and cells
				 * that have been marked as selected by the end user (`{selected: true}`),
				 * which can be used in conjunction with the existing built in selector
				 * options.
				 *
				 * Each property is an array to which functions can be pushed. The functions
				 * take three attributes:
				 *
				 * * Settings object for the host table
				 * * Options object (`selector-modifier` object type)
				 * * Array of selected item indexes
				 *
				 * The return is an array of the resulting item indexes after the custom
				 * selector has been applied.
				 *
				 *  @type object
				 */
				selector: {
					cell: [],
					column: [],
					row: []
				},
			
			
				/**
				 * Internal functions, exposed for used in plug-ins.
				 * 
				 * Please note that you should not need to use the internal methods for
				 * anything other than a plug-in (and even then, try to avoid if possible).
				 * The internal function may change between releases.
				 *
				 *  @type object
				 *  @default {}
				 */
				internal: {},
			
			
				/**
				 * Legacy configuration options. Enable and disable legacy options that
				 * are available in DataTables.
				 *
				 *  @type object
				 */
				legacy: {
					/**
					 * Enable / disable DataTables 1.9 compatible server-side processing
					 * requests
					 *
					 *  @type boolean
					 *  @default null
					 */
					ajax: null
				},
			
			
				/**
				 * Pagination plug-in methods.
				 * 
				 * Each entry in this object is a function and defines which buttons should
				 * be shown by the pagination rendering method that is used for the table:
				 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
				 * buttons are displayed in the document, while the functions here tell it
				 * what buttons to display. This is done by returning an array of button
				 * descriptions (what each button will do).
				 *
				 * Pagination types (the four built in options and any additional plug-in
				 * options defined here) can be used through the `paginationType`
				 * initialisation parameter.
				 *
				 * The functions defined take two parameters:
				 *
				 * 1. `{int} page` The current page index
				 * 2. `{int} pages` The number of pages in the table
				 *
				 * Each function is expected to return an array where each element of the
				 * array can be one of:
				 *
				 * * `first` - Jump to first page when activated
				 * * `last` - Jump to last page when activated
				 * * `previous` - Show previous page when activated
				 * * `next` - Show next page when activated
				 * * `{int}` - Show page of the index given
				 * * `{array}` - A nested array containing the above elements to add a
				 *   containing 'DIV' element (might be useful for styling).
				 *
				 * Note that DataTables v1.9- used this object slightly differently whereby
				 * an object with two functions would be defined for each plug-in. That
				 * ability is still supported by DataTables 1.10+ to provide backwards
				 * compatibility, but this option of use is now decremented and no longer
				 * documented in DataTables 1.10+.
				 *
				 *  @type object
				 *  @default {}
				 *
				 *  @example
				 *    // Show previous, next and current page buttons only
				 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
				 *      return [ 'previous', page, 'next' ];
				 *    };
				 */
				pager: {},
			
			
				renderer: {
					pageButton: {},
					header: {}
				},
			
			
				/**
				 * Ordering plug-ins - custom data source
				 * 
				 * The extension options for ordering of data available here is complimentary
				 * to the default type based ordering that DataTables typically uses. It
				 * allows much greater control over the the data that is being used to
				 * order a column, but is necessarily therefore more complex.
				 * 
				 * This type of ordering is useful if you want to do ordering based on data
				 * live from the DOM (for example the contents of an 'input' element) rather
				 * than just the static string that DataTables knows of.
				 * 
				 * The way these plug-ins work is that you create an array of the values you
				 * wish to be ordering for the column in question and then return that
				 * array. The data in the array much be in the index order of the rows in
				 * the table (not the currently ordering order!). Which order data gathering
				 * function is run here depends on the `dt-init columns.orderDataType`
				 * parameter that is used for the column (if any).
				 *
				 * The functions defined take two parameters:
				 *
				 * 1. `{object}` DataTables settings object: see
				 *    {@link DataTable.models.oSettings}
				 * 2. `{int}` Target column index
				 *
				 * Each function is expected to return an array:
				 *
				 * * `{array}` Data for the column to be ordering upon
				 *
				 *  @type array
				 *
				 *  @example
				 *    // Ordering using `input` node values
				 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
				 *    {
				 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
				 *        return $('input', td).val();
				 *      } );
				 *    }
				 */
				order: {},
			
			
				/**
				 * Type based plug-ins.
				 *
				 * Each column in DataTables has a type assigned to it, either by automatic
				 * detection or by direct assignment using the `type` option for the column.
				 * The type of a column will effect how it is ordering and search (plug-ins
				 * can also make use of the column type if required).
				 *
				 * @namespace
				 */
				type: {
					/**
					 * Type detection functions.
					 *
					 * The functions defined in this object are used to automatically detect
					 * a column's type, making initialisation of DataTables super easy, even
					 * when complex data is in the table.
					 *
					 * The functions defined take two parameters:
					 *
				     *  1. `{*}` Data from the column cell to be analysed
				     *  2. `{settings}` DataTables settings object. This can be used to
				     *     perform context specific type detection - for example detection
				     *     based on language settings such as using a comma for a decimal
				     *     place. Generally speaking the options from the settings will not
				     *     be required
					 *
					 * Each function is expected to return:
					 *
					 * * `{string|null}` Data type detected, or null if unknown (and thus
					 *   pass it on to the other type detection functions.
					 *
					 *  @type array
					 *
					 *  @example
					 *    // Currency type detection plug-in:
					 *    $.fn.dataTable.ext.type.detect.push(
					 *      function ( data, settings ) {
					 *        // Check the numeric part
					 *        if ( ! $.isNumeric( data.substring(1) ) ) {
					 *          return null;
					 *        }
					 *
					 *        // Check prefixed by currency
					 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
					 *          return 'currency';
					 *        }
					 *        return null;
					 *      }
					 *    );
					 */
					detect: [],
			
			
					/**
					 * Type based search formatting.
					 *
					 * The type based searching functions can be used to pre-format the
					 * data to be search on. For example, it can be used to strip HTML
					 * tags or to de-format telephone numbers for numeric only searching.
					 *
					 * Note that is a search is not defined for a column of a given type,
					 * no search formatting will be performed.
					 * 
					 * Pre-processing of searching data plug-ins - When you assign the sType
					 * for a column (or have it automatically detected for you by DataTables
					 * or a type detection plug-in), you will typically be using this for
					 * custom sorting, but it can also be used to provide custom searching
					 * by allowing you to pre-processing the data and returning the data in
					 * the format that should be searched upon. This is done by adding
					 * functions this object with a parameter name which matches the sType
					 * for that target column. This is the corollary of <i>afnSortData</i>
					 * for searching data.
					 *
					 * The functions defined take a single parameter:
					 *
				     *  1. `{*}` Data from the column cell to be prepared for searching
					 *
					 * Each function is expected to return:
					 *
					 * * `{string|null}` Formatted string that will be used for the searching.
					 *
					 *  @type object
					 *  @default {}
					 *
					 *  @example
					 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
					 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
					 *    }
					 */
					search: {},
			
			
					/**
					 * Type based ordering.
					 *
					 * The column type tells DataTables what ordering to apply to the table
					 * when a column is sorted upon. The order for each type that is defined,
					 * is defined by the functions available in this object.
					 *
					 * Each ordering option can be described by three properties added to
					 * this object:
					 *
					 * * `{type}-pre` - Pre-formatting function
					 * * `{type}-asc` - Ascending order function
					 * * `{type}-desc` - Descending order function
					 *
					 * All three can be used together, only `{type}-pre` or only
					 * `{type}-asc` and `{type}-desc` together. It is generally recommended
					 * that only `{type}-pre` is used, as this provides the optimal
					 * implementation in terms of speed, although the others are provided
					 * for compatibility with existing Javascript sort functions.
					 *
					 * `{type}-pre`: Functions defined take a single parameter:
					 *
				     *  1. `{*}` Data from the column cell to be prepared for ordering
					 *
					 * And return:
					 *
					 * * `{*}` Data to be sorted upon
					 *
					 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
					 * functions, taking two parameters:
					 *
				     *  1. `{*}` Data to compare to the second parameter
				     *  2. `{*}` Data to compare to the first parameter
					 *
					 * And returning:
					 *
					 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
					 *   than the second parameter, ===0 if the two parameters are equal and
					 *   >0 if the first parameter should be sorted height than the second
					 *   parameter.
					 * 
					 *  @type object
					 *  @default {}
					 *
					 *  @example
					 *    // Numeric ordering of formatted numbers with a pre-formatter
					 *    $.extend( $.fn.dataTable.ext.type.order, {
					 *      "string-pre": function(x) {
					 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
					 *        return parseFloat( a );
					 *      }
					 *    } );
					 *
					 *  @example
					 *    // Case-sensitive string ordering, with no pre-formatting method
					 *    $.extend( $.fn.dataTable.ext.order, {
					 *      "string-case-asc": function(x,y) {
					 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
					 *      },
					 *      "string-case-desc": function(x,y) {
					 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
					 *      }
					 *    } );
					 */
					order: {}
				},
			
				/**
				 * Unique DataTables instance counter
				 *
				 * @type int
				 * @private
				 */
				_unique: 0,
			
			
				//
				// Depreciated
				// The following properties are retained for backwards compatiblity only.
				// The should not be used in new projects and will be removed in a future
				// version
				//
			
				/**
				 * Version check function.
				 *  @type function
				 *  @depreciated Since 1.10
				 */
				fnVersionCheck: DataTable.fnVersionCheck,
			
			
				/**
				 * Index for what 'this' index API functions should use
				 *  @type int
				 *  @deprecated Since v1.10
				 */
				iApiIndex: 0,
			
			
				/**
				 * jQuery UI class container
				 *  @type object
				 *  @deprecated Since v1.10
				 */
				oJUIClasses: {},
			
			
				/**
				 * Software version
				 *  @type string
				 *  @deprecated Since v1.10
				 */
				sVersion: DataTable.version
			};
			
			
			//
			// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
			//
			$.extend( _ext, {
				afnFiltering: _ext.search,
				aTypes:       _ext.type.detect,
				ofnSearch:    _ext.type.search,
				oSort:        _ext.type.order,
				afnSortData:  _ext.order,
				aoFeatures:   _ext.feature,
				oApi:         _ext.internal,
				oStdClasses:  _ext.classes,
				oPagination:  _ext.pager
			} );
			
			
			$.extend( DataTable.ext.classes, {
				"sTable": "dataTable",
				"sNoFooter": "no-footer",
			
				/* Paging buttons */
				"sPageButton": "paginate_button",
				"sPageButtonActive": "current",
				"sPageButtonDisabled": "disabled",
			
				/* Striping classes */
				"sStripeOdd": "odd",
				"sStripeEven": "even",
			
				/* Empty row */
				"sRowEmpty": "dataTables_empty",
			
				/* Features */
				"sWrapper": "dataTables_wrapper",
				"sFilter": "dataTables_filter",
				"sInfo": "dataTables_info",
				"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
				"sLength": "dataTables_length",
				"sProcessing": "dataTables_processing",
			
				/* Sorting */
				"sSortAsc": "sorting_asc",
				"sSortDesc": "sorting_desc",
				"sSortable": "sorting", /* Sortable in both directions */
				"sSortableAsc": "sorting_asc_disabled",
				"sSortableDesc": "sorting_desc_disabled",
				"sSortableNone": "sorting_disabled",
				"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
			
				/* Filtering */
				"sFilterInput": "",
			
				/* Page length */
				"sLengthSelect": "",
			
				/* Scrolling */
				"sScrollWrapper": "dataTables_scroll",
				"sScrollHead": "dataTables_scrollHead",
				"sScrollHeadInner": "dataTables_scrollHeadInner",
				"sScrollBody": "dataTables_scrollBody",
				"sScrollFoot": "dataTables_scrollFoot",
				"sScrollFootInner": "dataTables_scrollFootInner",
			
				/* Misc */
				"sHeaderTH": "",
				"sFooterTH": "",
			
				// Deprecated
				"sSortJUIAsc": "",
				"sSortJUIDesc": "",
				"sSortJUI": "",
				"sSortJUIAscAllowed": "",
				"sSortJUIDescAllowed": "",
				"sSortJUIWrapper": "",
				"sSortIcon": "",
				"sJUIHeader": "",
				"sJUIFooter": ""
			} );
			
			
			(function() {
			
			// Reused strings for better compression. Closure compiler appears to have a
			// weird edge case where it is trying to expand strings rather than use the
			// variable version. This results in about 200 bytes being added, for very
			// little preference benefit since it this run on script load only.
			var _empty = '';
			_empty = '';
			
			var _stateDefault = _empty + 'ui-state-default';
			var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';
			var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';
			
			$.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {
				/* Full numbers paging buttons */
				"sPageButton":         "fg-button ui-button "+_stateDefault,
				"sPageButtonActive":   "ui-state-disabled",
				"sPageButtonDisabled": "ui-state-disabled",
			
				/* Features */
				"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi "+
					"ui-buttonset-multi paging_", /* Note that the type is postfixed */
			
				/* Sorting */
				"sSortAsc":            _stateDefault+" sorting_asc",
				"sSortDesc":           _stateDefault+" sorting_desc",
				"sSortable":           _stateDefault+" sorting",
				"sSortableAsc":        _stateDefault+" sorting_asc_disabled",
				"sSortableDesc":       _stateDefault+" sorting_desc_disabled",
				"sSortableNone":       _stateDefault+" sorting_disabled",
				"sSortJUIAsc":         _sortIcon+"triangle-1-n",
				"sSortJUIDesc":        _sortIcon+"triangle-1-s",
				"sSortJUI":            _sortIcon+"carat-2-n-s",
				"sSortJUIAscAllowed":  _sortIcon+"carat-1-n",
				"sSortJUIDescAllowed": _sortIcon+"carat-1-s",
				"sSortJUIWrapper":     "DataTables_sort_wrapper",
				"sSortIcon":           "DataTables_sort_icon",
			
				/* Scrolling */
				"sScrollHead": "dataTables_scrollHead "+_stateDefault,
				"sScrollFoot": "dataTables_scrollFoot "+_stateDefault,
			
				/* Misc */
				"sHeaderTH":  _stateDefault,
				"sFooterTH":  _stateDefault,
				"sJUIHeader": _headerFooter+" ui-corner-tl ui-corner-tr",
				"sJUIFooter": _headerFooter+" ui-corner-bl ui-corner-br"
			} );
			
			}());
			
			
			
			var extPagination = DataTable.ext.pager;
			
			function _numbers ( page, pages ) {
				var
					numbers = [],
					buttons = extPagination.numbers_length,
					half = Math.floor( buttons / 2 ),
					i = 1;
			
				if ( pages <= buttons ) {
					numbers = _range( 0, pages );
				}
				else if ( page <= half ) {
					numbers = _range( 0, buttons-2 );
					numbers.push( 'ellipsis' );
					numbers.push( pages-1 );
				}
				else if ( page >= pages - 1 - half ) {
					numbers = _range( pages-(buttons-2), pages );
					numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
					numbers.splice( 0, 0, 0 );
				}
				else {
					numbers = _range( page-half+2, page+half-1 );
					numbers.push( 'ellipsis' );
					numbers.push( pages-1 );
					numbers.splice( 0, 0, 'ellipsis' );
					numbers.splice( 0, 0, 0 );
				}
			
				numbers.DT_el = 'span';
				return numbers;
			}
			
			
			$.extend( extPagination, {
				simple: function ( page, pages ) {
					return [ 'previous', 'next' ];
				},
			
				full: function ( page, pages ) {
					return [  'first', 'previous', 'next', 'last' ];
				},
			
				numbers: function ( page, pages ) {
					return [ _numbers(page, pages) ];
				},
			
				simple_numbers: function ( page, pages ) {
					return [ 'previous', _numbers(page, pages), 'next' ];
				},
			
				full_numbers: function ( page, pages ) {
					return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
				},
			
				// For testing and plug-ins to use
				_numbers: _numbers,
			
				// Number of number buttons (including ellipsis) to show. _Must be odd!_
				numbers_length: 7
			} );
			
			
			$.extend( true, DataTable.ext.renderer, {
				pageButton: {
					_: function ( settings, host, idx, buttons, page, pages ) {
						var classes = settings.oClasses;
						var lang = settings.oLanguage.oPaginate;
						var btnDisplay, btnClass, counter=0;
			
						var attach = function( container, buttons ) {
							var i, ien, node, button;
							var clickHandler = function ( e ) {
								_fnPageChange( settings, e.data.action, true );
							};
			
							for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
								button = buttons[i];
			
								if ( $.isArray( button ) ) {
									var inner = $( '<'+(button.DT_el || 'div')+'/>' )
										.appendTo( container );
									attach( inner, button );
								}
								else {
									btnDisplay = null;
									btnClass = '';
			
									switch ( button ) {
										case 'ellipsis':
											container.append('<span class="ellipsis">&#x2026;</span>');
											break;
			
										case 'first':
											btnDisplay = lang.sFirst;
											btnClass = button + (page > 0 ?
												'' : ' '+classes.sPageButtonDisabled);
											break;
			
										case 'previous':
											btnDisplay = lang.sPrevious;
											btnClass = button + (page > 0 ?
												'' : ' '+classes.sPageButtonDisabled);
											break;
			
										case 'next':
											btnDisplay = lang.sNext;
											btnClass = button + (page < pages-1 ?
												'' : ' '+classes.sPageButtonDisabled);
											break;
			
										case 'last':
											btnDisplay = lang.sLast;
											btnClass = button + (page < pages-1 ?
												'' : ' '+classes.sPageButtonDisabled);
											break;
			
										default:
											btnDisplay = button + 1;
											btnClass = page === button ?
												classes.sPageButtonActive : '';
											break;
									}
			
									if ( btnDisplay !== null ) {
										node = $('<a>', {
												'class': classes.sPageButton+' '+btnClass,
												'aria-controls': settings.sTableId,
												'data-dt-idx': counter,
												'tabindex': settings.iTabIndex,
												'id': idx === 0 && typeof button === 'string' ?
													settings.sTableId +'_'+ button :
													null
											} )
											.html( btnDisplay )
											.appendTo( container );
			
										_fnBindAction(
											node, {action: button}, clickHandler
										);
			
										counter++;
									}
								}
							}
						};
			
						// IE9 throws an 'unknown error' if document.activeElement is used
						// inside an iframe or frame. Try / catch the error. Not good for
						// accessibility, but neither are frames.
						var activeEl;
			
						try {
							// Because this approach is destroying and recreating the paging
							// elements, focus is lost on the select button which is bad for
							// accessibility. So we want to restore focus once the draw has
							// completed
							activeEl = $(host).find(document.activeElement).data('dt-idx');
						}
						catch (e) {}
			
						attach( $(host).empty(), buttons );
			
						if ( activeEl ) {
							$(host).find( '[data-dt-idx='+activeEl+']' ).focus();
						}
					}
				}
			} );
			
			
			
			// Built in type detection. See model.ext.aTypes for information about
			// what is required from this methods.
			$.extend( DataTable.ext.type.detect, [
				// Plain numbers - first since V8 detects some plain numbers as dates
				// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
				function ( d, settings )
				{
					var decimal = settings.oLanguage.sDecimal;
					return _isNumber( d, decimal ) ? 'num'+decimal : null;
				},
			
				// Dates (only those recognised by the browser's Date.parse)
				function ( d, settings )
				{
					// V8 will remove any unknown characters at the start and end of the
					// expression, leading to false matches such as `$245.12` or `10%` being
					// a valid date. See forum thread 18941 for detail.
					if ( d && !(d instanceof Date) && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {
						return null;
					}
					var parsed = Date.parse(d);
					return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
				},
			
				// Formatted numbers
				function ( d, settings )
				{
					var decimal = settings.oLanguage.sDecimal;
					return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
				},
			
				// HTML numeric
				function ( d, settings )
				{
					var decimal = settings.oLanguage.sDecimal;
					return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
				},
			
				// HTML numeric, formatted
				function ( d, settings )
				{
					var decimal = settings.oLanguage.sDecimal;
					return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
				},
			
				// HTML (this is strict checking - there must be html)
				function ( d, settings )
				{
					return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
						'html' : null;
				}
			] );
			
			
			
			// Filter formatting functions. See model.ext.ofnSearch for information about
			// what is required from these methods.
			// 
			// Note that additional search methods are added for the html numbers and
			// html formatted numbers by `_addNumericSort()` when we know what the decimal
			// place is
			
			
			$.extend( DataTable.ext.type.search, {
				html: function ( data ) {
					return _empty(data) ?
						data :
						typeof data === 'string' ?
							data
								.replace( _re_new_lines, " " )
								.replace( _re_html, "" ) :
							'';
				},
			
				string: function ( data ) {
					return _empty(data) ?
						data :
						typeof data === 'string' ?
							data.replace( _re_new_lines, " " ) :
							data;
				}
			} );
			
			
			
			var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
				if ( d !== 0 && (!d || d === '-') ) {
					return -Infinity;
				}
			
				// If a decimal place other than `.` is used, it needs to be given to the
				// function so we can detect it and replace with a `.` which is the only
				// decimal place Javascript recognises - it is not locale aware.
				if ( decimalPlace ) {
					d = _numToDecimal( d, decimalPlace );
				}
			
				if ( d.replace ) {
					if ( re1 ) {
						d = d.replace( re1, '' );
					}
			
					if ( re2 ) {
						d = d.replace( re2, '' );
					}
				}
			
				return d * 1;
			};
			
			
			// Add the numeric 'deformatting' functions for sorting and search. This is done
			// in a function to provide an easy ability for the language options to add
			// additional methods if a non-period decimal place is used.
			function _addNumericSort ( decimalPlace ) {
				$.each(
					{
						// Plain numbers
						"num": function ( d ) {
							return __numericReplace( d, decimalPlace );
						},
			
						// Formatted numbers
						"num-fmt": function ( d ) {
							return __numericReplace( d, decimalPlace, _re_formatted_numeric );
						},
			
						// HTML numeric
						"html-num": function ( d ) {
							return __numericReplace( d, decimalPlace, _re_html );
						},
			
						// HTML numeric, formatted
						"html-num-fmt": function ( d ) {
							return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
						}
					},
					function ( key, fn ) {
						// Add the ordering method
						_ext.type.order[ key+decimalPlace+'-pre' ] = fn;
			
						// For HTML types add a search formatter that will strip the HTML
						if ( key.match(/^html\-/) ) {
							_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
						}
					}
				);
			}
			
			
			// Default sort methods
			$.extend( _ext.type.order, {
				// Dates
				"date-pre": function ( d ) {
					return Date.parse( d ) || 0;
				},
			
				// html
				"html-pre": function ( a ) {
					return _empty(a) ?
						'' :
						a.replace ?
							a.replace( /<.*?>/g, "" ).toLowerCase() :
							a+'';
				},
			
				// string
				"string-pre": function ( a ) {
					// This is a little complex, but faster than always calling toString,
					// http://jsperf.com/tostring-v-check
					return _empty(a) ?
						'' :
						typeof a === 'string' ?
							a.toLowerCase() :
							! a.toString ?
								'' :
								a.toString();
				},
			
				// string-asc and -desc are retained only for compatibility with the old
				// sort methods
				"string-asc": function ( x, y ) {
					return ((x < y) ? -1 : ((x > y) ? 1 : 0));
				},
			
				"string-desc": function ( x, y ) {
					return ((x < y) ? 1 : ((x > y) ? -1 : 0));
				}
			} );
			
			
			// Numeric sorting types - order doesn't matter here
			_addNumericSort( '' );
			
			
			$.extend( true, DataTable.ext.renderer, {
				header: {
					_: function ( settings, cell, column, classes ) {
						// No additional mark-up required
						// Attach a sort listener to update on sort - note that using the
						// `DT` namespace will allow the event to be removed automatically
						// on destroy, while the `dt` namespaced event is the one we are
						// listening for
						$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
							if ( settings !== ctx ) { // need to check this this is the host
								return;               // table, not a nested one
							}
			
							var colIdx = column.idx;
			
							cell
								.removeClass(
									column.sSortingClass +' '+
									classes.sSortAsc +' '+
									classes.sSortDesc
								)
								.addClass( columns[ colIdx ] == 'asc' ?
									classes.sSortAsc : columns[ colIdx ] == 'desc' ?
										classes.sSortDesc :
										column.sSortingClass
								);
						} );
					},
			
					jqueryui: function ( settings, cell, column, classes ) {
						$('<div/>')
							.addClass( classes.sSortJUIWrapper )
							.append( cell.contents() )
							.append( $('<span/>')
								.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
							)
							.appendTo( cell );
			
						// Attach a sort listener to update on sort
						$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
							if ( settings !== ctx ) {
								return;
							}
			
							var colIdx = column.idx;
			
							cell
								.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
								.addClass( columns[ colIdx ] == 'asc' ?
									classes.sSortAsc : columns[ colIdx ] == 'desc' ?
										classes.sSortDesc :
										column.sSortingClass
								);
			
							cell
								.find( 'span.'+classes.sSortIcon )
								.removeClass(
									classes.sSortJUIAsc +" "+
									classes.sSortJUIDesc +" "+
									classes.sSortJUI +" "+
									classes.sSortJUIAscAllowed +" "+
									classes.sSortJUIDescAllowed
								)
								.addClass( columns[ colIdx ] == 'asc' ?
									classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
										classes.sSortJUIDesc :
										column.sSortingClassJUI
								);
						} );
					}
				}
			} );
			
			/*
			 * Public helper functions. These aren't used internally by DataTables, or
			 * called by any of the options passed into DataTables, but they can be used
			 * externally by developers working with DataTables. They are helper functions
			 * to make working with DataTables a little bit easier.
			 */
			
			/**
			 * Helpers for `columns.render`.
			 *
			 * The options defined here can be used with the `columns.render` initialisation
			 * option to provide a display renderer. The following functions are defined:
			 *
			 * * `number` - Will format numeric data (defined by `columns.data`) for
			 *   display, retaining the original unformatted data for sorting and filtering.
			 *   It takes 5 parameters:
			 *   * `string` - Thousands grouping separator
			 *   * `string` - Decimal point indicator
			 *   * `integer` - Number of decimal points to show
			 *   * `string` (optional) - Prefix.
			 *   * `string` (optional) - Postfix (/suffix).
			 *
			 * @example
			 *   // Column definition using the number renderer
			 *   {
			 *     data: "salary",
			 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
			 *   }
			 *
			 * @namespace
			 */
			DataTable.render = {
				number: function ( thousands, decimal, precision, prefix, postfix ) {
					return {
						display: function ( d ) {
							if ( typeof d !== 'number' && typeof d !== 'string' ) {
								return d;
							}
			
							var negative = d < 0 ? '-' : '';
							d = Math.abs( parseFloat( d ) );
			
							var intPart = parseInt( d, 10 );
							var floatPart = precision ?
								decimal+(d - intPart).toFixed( precision ).substring( 2 ):
								'';
			
							return negative + (prefix||'') +
								intPart.toString().replace(
									/\B(?=(\d{3})+(?!\d))/g, thousands
								) +
								floatPart +
								(postfix||'');
						}
					};
				}
			};
			
			
			/*
			 * This is really a good bit rubbish this method of exposing the internal methods
			 * publicly... - To be fixed in 2.0 using methods on the prototype
			 */
			
			
			/**
			 * Create a wrapper function for exporting an internal functions to an external API.
			 *  @param {string} fn API function name
			 *  @returns {function} wrapped function
			 *  @memberof DataTable#internal
			 */
			function _fnExternApiFunc (fn)
			{
				return function() {
					var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
						Array.prototype.slice.call(arguments)
					);
					return DataTable.ext.internal[fn].apply( this, args );
				};
			}
			
			
			/**
			 * Reference to internal functions for use by plug-in developers. Note that
			 * these methods are references to internal functions and are considered to be
			 * private. If you use these methods, be aware that they are liable to change
			 * between versions.
			 *  @namespace
			 */
			$.extend( DataTable.ext.internal, {
				_fnExternApiFunc: _fnExternApiFunc,
				_fnBuildAjax: _fnBuildAjax,
				_fnAjaxUpdate: _fnAjaxUpdate,
				_fnAjaxParameters: _fnAjaxParameters,
				_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
				_fnAjaxDataSrc: _fnAjaxDataSrc,
				_fnAddColumn: _fnAddColumn,
				_fnColumnOptions: _fnColumnOptions,
				_fnAdjustColumnSizing: _fnAdjustColumnSizing,
				_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
				_fnColumnIndexToVisible: _fnColumnIndexToVisible,
				_fnVisbleColumns: _fnVisbleColumns,
				_fnGetColumns: _fnGetColumns,
				_fnColumnTypes: _fnColumnTypes,
				_fnApplyColumnDefs: _fnApplyColumnDefs,
				_fnHungarianMap: _fnHungarianMap,
				_fnCamelToHungarian: _fnCamelToHungarian,
				_fnLanguageCompat: _fnLanguageCompat,
				_fnBrowserDetect: _fnBrowserDetect,
				_fnAddData: _fnAddData,
				_fnAddTr: _fnAddTr,
				_fnNodeToDataIndex: _fnNodeToDataIndex,
				_fnNodeToColumnIndex: _fnNodeToColumnIndex,
				_fnGetCellData: _fnGetCellData,
				_fnSetCellData: _fnSetCellData,
				_fnSplitObjNotation: _fnSplitObjNotation,
				_fnGetObjectDataFn: _fnGetObjectDataFn,
				_fnSetObjectDataFn: _fnSetObjectDataFn,
				_fnGetDataMaster: _fnGetDataMaster,
				_fnClearTable: _fnClearTable,
				_fnDeleteIndex: _fnDeleteIndex,
				_fnInvalidate: _fnInvalidate,
				_fnGetRowElements: _fnGetRowElements,
				_fnCreateTr: _fnCreateTr,
				_fnBuildHead: _fnBuildHead,
				_fnDrawHead: _fnDrawHead,
				_fnDraw: _fnDraw,
				_fnReDraw: _fnReDraw,
				_fnAddOptionsHtml: _fnAddOptionsHtml,
				_fnDetectHeader: _fnDetectHeader,
				_fnGetUniqueThs: _fnGetUniqueThs,
				_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
				_fnFilterComplete: _fnFilterComplete,
				_fnFilterCustom: _fnFilterCustom,
				_fnFilterColumn: _fnFilterColumn,
				_fnFilter: _fnFilter,
				_fnFilterCreateSearch: _fnFilterCreateSearch,
				_fnEscapeRegex: _fnEscapeRegex,
				_fnFilterData: _fnFilterData,
				_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
				_fnUpdateInfo: _fnUpdateInfo,
				_fnInfoMacros: _fnInfoMacros,
				_fnInitialise: _fnInitialise,
				_fnInitComplete: _fnInitComplete,
				_fnLengthChange: _fnLengthChange,
				_fnFeatureHtmlLength: _fnFeatureHtmlLength,
				_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
				_fnPageChange: _fnPageChange,
				_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
				_fnProcessingDisplay: _fnProcessingDisplay,
				_fnFeatureHtmlTable: _fnFeatureHtmlTable,
				_fnScrollDraw: _fnScrollDraw,
				_fnApplyToChildren: _fnApplyToChildren,
				_fnCalculateColumnWidths: _fnCalculateColumnWidths,
				_fnThrottle: _fnThrottle,
				_fnConvertToWidth: _fnConvertToWidth,
				_fnGetWidestNode: _fnGetWidestNode,
				_fnGetMaxLenString: _fnGetMaxLenString,
				_fnStringToCss: _fnStringToCss,
				_fnSortFlatten: _fnSortFlatten,
				_fnSort: _fnSort,
				_fnSortAria: _fnSortAria,
				_fnSortListener: _fnSortListener,
				_fnSortAttachListener: _fnSortAttachListener,
				_fnSortingClasses: _fnSortingClasses,
				_fnSortData: _fnSortData,
				_fnSaveState: _fnSaveState,
				_fnLoadState: _fnLoadState,
				_fnSettingsFromNode: _fnSettingsFromNode,
				_fnLog: _fnLog,
				_fnMap: _fnMap,
				_fnBindAction: _fnBindAction,
				_fnCallbackReg: _fnCallbackReg,
				_fnCallbackFire: _fnCallbackFire,
				_fnLengthOverflow: _fnLengthOverflow,
				_fnRenderer: _fnRenderer,
				_fnDataSource: _fnDataSource,
				_fnRowAttributes: _fnRowAttributes,
				_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
				                                // in 1.10, so this dead-end function is
				                                // added to prevent errors
			} );
			

			// jQuery access
			$.fn.dataTable = DataTable;

			// Legacy aliases
			$.fn.dataTableSettings = DataTable.settings;
			$.fn.dataTableExt = DataTable.ext;

			// With a capital `D` we return a DataTables API instance rather than a
			// jQuery object
			$.fn.DataTable = function ( opts ) {
				return $(this).dataTable( opts ).api();
			};

			// All properties that are available to $.fn.dataTable should also be
			// available on $.fn.DataTable
			$.each( DataTable, function ( prop, val ) {
				$.fn.DataTable[ prop ] = val;
			} );


			// Information about events fired by DataTables - for documentation.
			/**
			 * Draw event, fired whenever the table is redrawn on the page, at the same
			 * point as fnDrawCallback. This may be useful for binding events or
			 * performing calculations when the table is altered at all.
			 *  @name DataTable#draw.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 */

			/**
			 * Search event, fired when the searching applied to the table (using the
			 * built-in global search, or column filters) is altered.
			 *  @name DataTable#search.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 */

			/**
			 * Page change event, fired when the paging of the table is altered.
			 *  @name DataTable#page.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 */

			/**
			 * Order event, fired when the ordering applied to the table is altered.
			 *  @name DataTable#order.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 */

			/**
			 * DataTables initialisation complete event, fired when the table is fully
			 * drawn, including Ajax data loaded, if Ajax data is required.
			 *  @name DataTable#init.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} json The JSON object request from the server - only
			 *    present if client-side Ajax sourced data is used</li></ol>
			 */

			/**
			 * State save event, fired when the table has changed state a new state save
			 * is required. This event allows modification of the state saving object
			 * prior to actually doing the save, including addition or other state
			 * properties (for plug-ins) or modification of a DataTables core property.
			 *  @name DataTable#stateSaveParams.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} json The state information to be saved
			 */

			/**
			 * State load event, fired when the table is loading state from the stored
			 * data, but prior to the settings object being modified by the saved state
			 * - allowing modification of the saved state is required or loading of
			 * state for a plug-in.
			 *  @name DataTable#stateLoadParams.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} json The saved state information
			 */

			/**
			 * State loaded event, fired when state has been loaded from stored data and
			 * the settings object has been modified by the loaded data.
			 *  @name DataTable#stateLoaded.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} oSettings DataTables settings object
			 *  @param {object} json The saved state information
			 */

			/**
			 * Processing event, fired when DataTables is doing some kind of processing
			 * (be it, order, searcg or anything else). It can be used to indicate to
			 * the end user that there is something happening, or that something has
			 * finished.
			 *  @name DataTable#processing.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} oSettings DataTables settings object
			 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
			 */

			/**
			 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
			 * request to made to the server for new data. This event is called before
			 * DataTables processed the returned data, so it can also be used to pre-
			 * process the data returned from the server, if needed.
			 *
			 * Note that this trigger is called in `fnServerData`, if you override
			 * `fnServerData` and which to use this event, you need to trigger it in you
			 * success function.
			 *  @name DataTable#xhr.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 *  @param {object} json JSON returned from the server
			 *
			 *  @example
			 *     // Use a custom property returned from the server in another DOM element
			 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
			 *       $('#status').html( json.status );
			 *     } );
			 *
			 *  @example
			 *     // Pre-process the data returned from the server
			 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
			 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
			 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
			 *       }
			 *       // Note no return - manipulate the data directly in the JSON object.
			 *     } );
			 */

			/**
			 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
			 * or passing the bDestroy:true parameter in the initialisation object. This
			 * can be used to remove bound events, added DOM nodes, etc.
			 *  @name DataTable#destroy.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 */

			/**
			 * Page length change event, fired when number of records to show on each
			 * page (the length) is changed.
			 *  @name DataTable#length.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 *  @param {integer} len New length
			 */

			/**
			 * Column sizing has changed.
			 *  @name DataTable#column-sizing.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 */

			/**
			 * Column visibility has changed.
			 *  @name DataTable#column-visibility.dt
			 *  @event
			 *  @param {event} e jQuery event object
			 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
			 *  @param {int} column Column index
			 *  @param {bool} vis `false` if column now hidden, or `true` if visible
			 */

			return $.fn.dataTable;
		}));

		}(window, document));



	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.Datamaps = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var Datamaps = exports.Datamaps = function (_React$Component) {
		    _inherits(Datamaps, _React$Component);

		    function Datamaps(props) {
		        _classCallCheck(this, Datamaps);

		        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Datamaps).call(this, props));

		        _this.state = {
		            chart: null
		        };
		        return _this;
		    }

		    _createClass(Datamaps, [{
		        key: 'componentDidMount',
		        value: function componentDidMount() {
		            this._initialize(this.props.options.params);
		        }
		    }, {
		        key: '_initialize',
		        value: function _initialize(params) {
		            var url = this.props.options.url.concat("?", $.param(params));
		            $.get(url, function (result) {
		                this.state.chart = new Datamap({
		                    element: document.getElementById(this.props.options.chartid),
		                    scope: 'usa',
		                    fills: result.fills,
		                    data: result.data
		                });
		            }.bind(this));
		        }
		    }, {
		        key: '_update',
		        value: function _update(params) {
		            var url = this.props.options.url.concat("?", $.param(params));
		            $.get(url, function (result) {
		                this.state.chart.updateChoropleth(result.data);
		            }.bind(this));
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            return _react2.default.createElement('div', {
		                id: this.props.options.chartid,
		                className: 'pyDataMap' });
		        }
		    }]);

		    return Datamaps;
		}(_react2.default.Component);
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.PlotlyAPI = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // import Plotly from 'plotly.js';


		var PlotlyAPI = exports.PlotlyAPI = function (_React$Component) {
		    _inherits(PlotlyAPI, _React$Component);

		    function PlotlyAPI(props) {
		        _classCallCheck(this, PlotlyAPI);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(PlotlyAPI).call(this, props));
		    }

		    _createClass(PlotlyAPI, [{
		        key: '_update',
		        value: function _update(params) {
		            var url = this.props.options.url.concat("?", $.param(params));
		            $.get(url, function (result) {
		                Plotly.newPlot(this.props.options.chartid, result.data, result.layout);
		            }.bind(this));
		        }
		    }, {
		        key: 'componentDidMount',
		        value: function componentDidMount() {
		            this._update(this.props.options.params);
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            return _react2.default.createElement(
		                'div',
		                null,
		                _react2.default.createElement('div', { id: this.props.options.chartid })
		            );
		        }
		    }]);

		    return PlotlyAPI;
		}(_react2.default.Component);
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 15 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_15__;

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.FilterFactory = exports.Filter = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _SelectButton = __webpack_require__(17);

		var _ConditionalSelectButton = __webpack_require__(264);

		var _ApiButton = __webpack_require__(265);

		var _DownloadButton = __webpack_require__(266);

		var _SliderInput = __webpack_require__(267);

		var _DynamicSearchInput = __webpack_require__(268);

		var _CheckboxGroup = __webpack_require__(269);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var FilterFactory = function FilterFactory(type) {
		    if (typeof FilterFactory[type] != 'function') {
		        throw new Error(type + ' is not a valid filter.');
		    }

		    return FilterFactory[type];
		};

		FilterFactory.SliderInput = _SliderInput.SliderInput;
		FilterFactory.SelectButton = _SelectButton.SelectButton;
		FilterFactory.ConditionalSelectButton = _ConditionalSelectButton.ConditionalSelectButton;
		FilterFactory.ApiButton = _ApiButton.ApiButton;
		FilterFactory.DownloadButton = _DownloadButton.DownloadButton;
		FilterFactory.DynamicSearch = _DynamicSearchInput.DynamicSearchInput;
		FilterFactory.CheckboxGroup = _CheckboxGroup.CheckboxGroup;

		var Filter = exports.Filter = function (_React$Component) {
		    _inherits(Filter, _React$Component);

		    function Filter(props) {
		        _classCallCheck(this, Filter);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(Filter).call(this, props));
		    }

		    _createClass(Filter, [{
		        key: 'render',
		        value: function render() {
		            var Z = FilterFactory(this.props.type);
		            return _react2.default.createElement(Z, {
		                ref: "filter",
		                dynamic: this.props.dynamic,
		                onChange: this.props.onChange,
		                options: this.props.options });
		        }
		    }]);

		    return Filter;
		}(_react2.default.Component);

		exports.FilterFactory = FilterFactory;

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.SelectButton = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _BaseFilter2 = __webpack_require__(18);

		var _BaseFilter3 = _interopRequireDefault(_BaseFilter2);

		var _reactBootstrap = __webpack_require__(19);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var SelectButton = exports.SelectButton = function (_BaseFilter) {
		    _inherits(SelectButton, _BaseFilter);

		    function SelectButton(props) {
		        _classCallCheck(this, SelectButton);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(SelectButton).call(this, props));
		    }

		    _createClass(SelectButton, [{
		        key: '_handleClick',
		        value: function _handleClick(index, text, e) {
		            e.preventDefault();
		            this.setState({
		                selected: index,
		                value: text
		            });

		            if (this.props.dynamic) {
		                var result = {
		                    alias: this.props.options.alias,
		                    value: text
		                };
		                this.props.onChange([result]);
		            }
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            var items = this.props.options.items.map(function (item, index) {
		                return _react2.default.createElement(
		                    _reactBootstrap.MenuItem,
		                    {
		                        key: index,
		                        onSelect: this._handleClick.bind(this, index, item) },
		                    item
		                );
		            }.bind(this));
		            var label = this.state.value || this.props.options.label;
		            return _react2.default.createElement(
		                _reactBootstrap.DropdownButton,
		                {
		                    ref: "btn",
		                    id: this.props.id,
		                    title: label },
		                items
		            );
		        }
		    }]);

		    return SelectButton;
		}(_BaseFilter3.default);

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var BaseFilter = function (_React$Component) {
		    _inherits(BaseFilter, _React$Component);

		    function BaseFilter(props) {
		        _classCallCheck(this, BaseFilter);

		        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BaseFilter).call(this, props));

		        _this.state = {
		            value: null,
		            selected: 0
		        };
		        return _this;
		    }

		    _createClass(BaseFilter, [{
		        key: 'getCurrentState',
		        value: function getCurrentState() {
		            var result = {};
		            result[this.props.options.alias] = this.state.value || this.props.options.default;
		            return result;
		        }
		    }]);

		    return BaseFilter;
		}(_react2.default.Component);

		exports.default = BaseFilter;

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(20)['default'];

		var _interopRequireWildcard = __webpack_require__(21)['default'];

		exports.__esModule = true;

		var _utilsChildrenValueInputValidation = __webpack_require__(22);

		var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _Accordion2 = __webpack_require__(53);

		var _Accordion3 = _interopRequireDefault(_Accordion2);

		exports.Accordion = _Accordion3['default'];

		var _Alert2 = __webpack_require__(57);

		var _Alert3 = _interopRequireDefault(_Alert2);

		exports.Alert = _Alert3['default'];

		var _Badge2 = __webpack_require__(58);

		var _Badge3 = _interopRequireDefault(_Badge2);

		exports.Badge = _Badge3['default'];

		var _Breadcrumb2 = __webpack_require__(59);

		var _Breadcrumb3 = _interopRequireDefault(_Breadcrumb2);

		exports.Breadcrumb = _Breadcrumb3['default'];

		var _BreadcrumbItem2 = __webpack_require__(60);

		var _BreadcrumbItem3 = _interopRequireDefault(_BreadcrumbItem2);

		exports.BreadcrumbItem = _BreadcrumbItem3['default'];

		var _Button2 = __webpack_require__(70);

		var _Button3 = _interopRequireDefault(_Button2);

		exports.Button = _Button3['default'];

		var _ButtonGroup2 = __webpack_require__(73);

		var _ButtonGroup3 = _interopRequireDefault(_ButtonGroup2);

		exports.ButtonGroup = _ButtonGroup3['default'];

		var _ButtonInput2 = __webpack_require__(75);

		var _ButtonInput3 = _interopRequireDefault(_ButtonInput2);

		exports.ButtonInput = _ButtonInput3['default'];

		var _ButtonToolbar2 = __webpack_require__(79);

		var _ButtonToolbar3 = _interopRequireDefault(_ButtonToolbar2);

		exports.ButtonToolbar = _ButtonToolbar3['default'];

		var _Carousel2 = __webpack_require__(80);

		var _Carousel3 = _interopRequireDefault(_Carousel2);

		exports.Carousel = _Carousel3['default'];

		var _CarouselItem2 = __webpack_require__(81);

		var _CarouselItem3 = _interopRequireDefault(_CarouselItem2);

		exports.CarouselItem = _CarouselItem3['default'];

		var _Col2 = __webpack_require__(83);

		var _Col3 = _interopRequireDefault(_Col2);

		exports.Col = _Col3['default'];

		var _CollapsibleNav2 = __webpack_require__(84);

		var _CollapsibleNav3 = _interopRequireDefault(_CollapsibleNav2);

		exports.CollapsibleNav = _CollapsibleNav3['default'];

		var _Dropdown2 = __webpack_require__(100);

		var _Dropdown3 = _interopRequireDefault(_Dropdown2);

		exports.Dropdown = _Dropdown3['default'];

		var _DropdownButton2 = __webpack_require__(186);

		var _DropdownButton3 = _interopRequireDefault(_DropdownButton2);

		exports.DropdownButton = _DropdownButton3['default'];

		var _Glyphicon2 = __webpack_require__(78);

		var _Glyphicon3 = _interopRequireDefault(_Glyphicon2);

		exports.Glyphicon = _Glyphicon3['default'];

		var _Grid2 = __webpack_require__(188);

		var _Grid3 = _interopRequireDefault(_Grid2);

		exports.Grid = _Grid3['default'];

		var _Image2 = __webpack_require__(189);

		var _Image3 = _interopRequireDefault(_Image2);

		exports.Image = _Image3['default'];

		var _Input2 = __webpack_require__(190);

		var _Input3 = _interopRequireDefault(_Input2);

		exports.Input = _Input3['default'];

		var _Interpolate2 = __webpack_require__(193);

		var _Interpolate3 = _interopRequireDefault(_Interpolate2);

		exports.Interpolate = _Interpolate3['default'];

		var _Jumbotron2 = __webpack_require__(194);

		var _Jumbotron3 = _interopRequireDefault(_Jumbotron2);

		exports.Jumbotron = _Jumbotron3['default'];

		var _Label2 = __webpack_require__(195);

		var _Label3 = _interopRequireDefault(_Label2);

		exports.Label = _Label3['default'];

		var _ListGroup2 = __webpack_require__(196);

		var _ListGroup3 = _interopRequireDefault(_ListGroup2);

		exports.ListGroup = _ListGroup3['default'];

		var _ListGroupItem2 = __webpack_require__(197);

		var _ListGroupItem3 = _interopRequireDefault(_ListGroupItem2);

		exports.ListGroupItem = _ListGroupItem3['default'];

		var _MenuItem2 = __webpack_require__(198);

		var _MenuItem3 = _interopRequireDefault(_MenuItem2);

		exports.MenuItem = _MenuItem3['default'];

		var _Modal2 = __webpack_require__(199);

		var _Modal3 = _interopRequireDefault(_Modal2);

		exports.Modal = _Modal3['default'];

		var _ModalBody2 = __webpack_require__(206);

		var _ModalBody3 = _interopRequireDefault(_ModalBody2);

		exports.ModalBody = _ModalBody3['default'];

		var _ModalFooter2 = __webpack_require__(209);

		var _ModalFooter3 = _interopRequireDefault(_ModalFooter2);

		exports.ModalFooter = _ModalFooter3['default'];

		var _ModalHeader2 = __webpack_require__(207);

		var _ModalHeader3 = _interopRequireDefault(_ModalHeader2);

		exports.ModalHeader = _ModalHeader3['default'];

		var _ModalTitle2 = __webpack_require__(208);

		var _ModalTitle3 = _interopRequireDefault(_ModalTitle2);

		exports.ModalTitle = _ModalTitle3['default'];

		var _Nav2 = __webpack_require__(225);

		var _Nav3 = _interopRequireDefault(_Nav2);

		exports.Nav = _Nav3['default'];

		var _Navbar2 = __webpack_require__(226);

		var _Navbar3 = _interopRequireDefault(_Navbar2);

		exports.Navbar = _Navbar3['default'];

		var _NavBrand2 = __webpack_require__(228);

		var _NavBrand3 = _interopRequireDefault(_NavBrand2);

		exports.NavBrand = _NavBrand3['default'];

		var _NavbarBrand2 = __webpack_require__(229);

		var _NavbarBrand3 = _interopRequireDefault(_NavbarBrand2);

		exports.NavbarBrand = _NavbarBrand3['default'];

		var _NavDropdown2 = __webpack_require__(233);

		var _NavDropdown3 = _interopRequireDefault(_NavDropdown2);

		exports.NavDropdown = _NavDropdown3['default'];

		var _NavItem2 = __webpack_require__(234);

		var _NavItem3 = _interopRequireDefault(_NavItem2);

		exports.NavItem = _NavItem3['default'];

		var _Overlay2 = __webpack_require__(235);

		var _Overlay3 = _interopRequireDefault(_Overlay2);

		exports.Overlay = _Overlay3['default'];

		var _OverlayTrigger2 = __webpack_require__(244);

		var _OverlayTrigger3 = _interopRequireDefault(_OverlayTrigger2);

		exports.OverlayTrigger = _OverlayTrigger3['default'];

		var _PageHeader2 = __webpack_require__(245);

		var _PageHeader3 = _interopRequireDefault(_PageHeader2);

		exports.PageHeader = _PageHeader3['default'];

		var _PageItem2 = __webpack_require__(246);

		var _PageItem3 = _interopRequireDefault(_PageItem2);

		exports.PageItem = _PageItem3['default'];

		var _Pager2 = __webpack_require__(247);

		var _Pager3 = _interopRequireDefault(_Pager2);

		exports.Pager = _Pager3['default'];

		var _Pagination2 = __webpack_require__(248);

		var _Pagination3 = _interopRequireDefault(_Pagination2);

		exports.Pagination = _Pagination3['default'];

		var _Panel2 = __webpack_require__(251);

		var _Panel3 = _interopRequireDefault(_Panel2);

		exports.Panel = _Panel3['default'];

		var _PanelGroup2 = __webpack_require__(54);

		var _PanelGroup3 = _interopRequireDefault(_PanelGroup2);

		exports.PanelGroup = _PanelGroup3['default'];

		var _Popover2 = __webpack_require__(252);

		var _Popover3 = _interopRequireDefault(_Popover2);

		exports.Popover = _Popover3['default'];

		var _ProgressBar2 = __webpack_require__(253);

		var _ProgressBar3 = _interopRequireDefault(_ProgressBar2);

		exports.ProgressBar = _ProgressBar3['default'];

		var _ResponsiveEmbed2 = __webpack_require__(254);

		var _ResponsiveEmbed3 = _interopRequireDefault(_ResponsiveEmbed2);

		exports.ResponsiveEmbed = _ResponsiveEmbed3['default'];

		var _Row2 = __webpack_require__(255);

		var _Row3 = _interopRequireDefault(_Row2);

		exports.Row = _Row3['default'];

		var _SafeAnchor2 = __webpack_require__(61);

		var _SafeAnchor3 = _interopRequireDefault(_SafeAnchor2);

		exports.SafeAnchor = _SafeAnchor3['default'];

		var _SplitButton2 = __webpack_require__(256);

		var _SplitButton3 = _interopRequireDefault(_SplitButton2);

		exports.SplitButton = _SplitButton3['default'];

		var _Tab2 = __webpack_require__(258);

		var _Tab3 = _interopRequireDefault(_Tab2);

		exports.Tab = _Tab3['default'];

		var _Table2 = __webpack_require__(259);

		var _Table3 = _interopRequireDefault(_Table2);

		exports.Table = _Table3['default'];

		var _Tabs2 = __webpack_require__(260);

		var _Tabs3 = _interopRequireDefault(_Tabs2);

		exports.Tabs = _Tabs3['default'];

		var _Thumbnail2 = __webpack_require__(261);

		var _Thumbnail3 = _interopRequireDefault(_Thumbnail2);

		exports.Thumbnail = _Thumbnail3['default'];

		var _Tooltip2 = __webpack_require__(262);

		var _Tooltip3 = _interopRequireDefault(_Tooltip2);

		exports.Tooltip = _Tooltip3['default'];

		var _Well2 = __webpack_require__(263);

		var _Well3 = _interopRequireDefault(_Well2);

		exports.Well = _Well3['default'];

		var _Collapse2 = __webpack_require__(85);

		var _Collapse3 = _interopRequireDefault(_Collapse2);

		exports.Collapse = _Collapse3['default'];

		var _Fade2 = __webpack_require__(204);

		var _Fade3 = _interopRequireDefault(_Fade2);

		exports.Fade = _Fade3['default'];

		var _FormControls2 = __webpack_require__(191);

		var _FormControls = _interopRequireWildcard(_FormControls2);

		exports.FormControls = _FormControls;
		var utils = {
		  bootstrapUtils: _utilsBootstrapUtils2['default'],
		  childrenValueInputValidation: _utilsChildrenValueInputValidation2['default'],
		  createChainedFunction: _utilsCreateChainedFunction2['default'],
		  ValidComponentChildren: _utilsValidComponentChildren2['default']
		};
		exports.utils = utils;

	/***/ },
	/* 20 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		};

		exports.__esModule = true;

	/***/ },
	/* 21 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};

		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
		      }
		    }

		    newObj["default"] = obj;
		    return newObj;
		  }
		};

		exports.__esModule = true;

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;
		exports['default'] = valueValidation;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactPropTypesLibSinglePropFrom = __webpack_require__(23);

		var _reactPropTypesLibSinglePropFrom2 = _interopRequireDefault(_reactPropTypesLibSinglePropFrom);

		function valueValidation(props, propName, componentName) {
		  var error = _reactPropTypesLibSinglePropFrom2['default']('children', 'value')(props, propName, componentName);

		  if (!error) {
		    error = _react2['default'].PropTypes.node(props, propName, componentName);
		  }

		  return error;
		}

		module.exports = exports['default'];

	/***/ },
	/* 23 */
	/***/ function(module, exports) {

		/**
		 * Checks if only one of the listed properties is in use. An error is given
		 * if multiple have a value
		 *
		 * @param props
		 * @param propName
		 * @param componentName
		 * @returns {Error|undefined}
		 */
		'use strict';

		exports.__esModule = true;
		exports['default'] = createSinglePropFromChecker;

		function createSinglePropFromChecker() {
		  for (var _len = arguments.length, arrOfProps = Array(_len), _key = 0; _key < _len; _key++) {
		    arrOfProps[_key] = arguments[_key];
		  }

		  function validate(props, propName, componentName) {
		    var usedPropCount = arrOfProps.map(function (listedProp) {
		      return props[listedProp];
		    }).reduce(function (acc, curr) {
		      return acc + (curr !== undefined ? 1 : 0);
		    }, 0);

		    if (usedPropCount > 1) {
		      var first = arrOfProps[0];
		      var others = arrOfProps.slice(1);

		      var message = others.join(', ') + ' and ' + first;
		      return new Error('Invalid prop \'' + propName + '\', only one of the following ' + ('may be provided: ' + message));
		    }
		  }
		  return validate;
		}

		module.exports = exports['default'];

	/***/ },
	/* 24 */
	/***/ function(module, exports) {

		/**
		 * Safe chained function
		 *
		 * Will only create a new function if needed,
		 * otherwise will pass back existing functions or null.
		 *
		 * @param {function} functions to chain
		 * @returns {function|null}
		 */
		'use strict';

		exports.__esModule = true;
		function createChainedFunction() {
		  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
		    funcs[_key] = arguments[_key];
		  }

		  return funcs.filter(function (f) {
		    return f != null;
		  }).reduce(function (acc, f) {
		    if (typeof f !== 'function') {
		      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
		    }

		    if (acc === null) {
		      return f;
		    }

		    return function chainedFunction() {
		      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		        args[_key2] = arguments[_key2];
		      }

		      acc.apply(this, args);
		      f.apply(this, args);
		    };
		  }, null);
		}

		exports['default'] = createChainedFunction;
		module.exports = exports['default'];

	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		/**
		 * Maps children that are typically specified as `props.children`,
		 * but only iterates over children that are "valid components".
		 *
		 * The mapFunction provided index will be normalised to the components mapped,
		 * so an invalid component would not increase the index.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} mapFunction.
		 * @param {*} mapContext Context for mapFunction.
		 * @return {object} Object containing the ordered map of results.
		 */
		function mapValidComponents(children, func, context) {
		  var index = 0;

		  return _react2['default'].Children.map(children, function (child) {
		    if (_react2['default'].isValidElement(child)) {
		      var lastIndex = index;
		      index++;
		      return func.call(context, child, lastIndex);
		    }

		    return child;
		  });
		}

		/**
		 * Iterates through children that are typically specified as `props.children`,
		 * but only iterates over children that are "valid components".
		 *
		 * The provided forEachFunc(child, index) will be called for each
		 * leaf child with the index reflecting the position relative to "valid components".
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} forEachFunc.
		 * @param {*} forEachContext Context for forEachContext.
		 */
		function forEachValidComponents(children, func, context) {
		  var index = 0;

		  return _react2['default'].Children.forEach(children, function (child) {
		    if (_react2['default'].isValidElement(child)) {
		      func.call(context, child, index);
		      index++;
		    }
		  });
		}

		/**
		 * Count the number of "valid components" in the Children container.
		 *
		 * @param {?*} children Children tree container.
		 * @returns {number}
		 */
		function numberOfValidComponents(children) {
		  var count = 0;

		  _react2['default'].Children.forEach(children, function (child) {
		    if (_react2['default'].isValidElement(child)) {
		      count++;
		    }
		  });

		  return count;
		}

		/**
		 * Determine if the Child container has one or more "valid components".
		 *
		 * @param {?*} children Children tree container.
		 * @returns {boolean}
		 */
		function hasValidComponent(children) {
		  var hasValid = false;

		  _react2['default'].Children.forEach(children, function (child) {
		    if (!hasValid && _react2['default'].isValidElement(child)) {
		      hasValid = true;
		    }
		  });

		  return hasValid;
		}

		function find(children, finder) {
		  var child = undefined;

		  forEachValidComponents(children, function (c, idx) {
		    if (!child && finder(c, idx, children)) {
		      child = c;
		    }
		  });

		  return child;
		}

		/**
		 * Finds children that are typically specified as `props.children`,
		 * but only iterates over children that are "valid components".
		 *
		 * The provided forEachFunc(child, index) will be called for each
		 * leaf child with the index reflecting the position relative to "valid components".
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} findFunc.
		 * @param {*} findContext Context for findContext.
		 * @returns {array} of children that meet the findFunc return statement
		 */
		function findValidComponents(children, func, context) {
		  var index = 0;
		  var returnChildren = [];

		  _react2['default'].Children.forEach(children, function (child) {
		    if (_react2['default'].isValidElement(child)) {
		      if (func.call(context, child, index)) {
		        returnChildren.push(child);
		      }
		      index++;
		    }
		  });

		  return returnChildren;
		}

		exports['default'] = {
		  map: mapValidComponents,
		  forEach: forEachValidComponents,
		  numberOf: numberOfValidComponents,
		  find: find,
		  findValidComponents: findValidComponents,
		  hasValidComponent: hasValidComponent
		};
		module.exports = exports['default'];

	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _styleMaps = __webpack_require__(44);

		var _styleMaps2 = _interopRequireDefault(_styleMaps);

		var _invariant = __webpack_require__(51);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _warning = __webpack_require__(52);

		var _warning2 = _interopRequireDefault(_warning);

		function curry(fn) {
		  return function () {
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    var last = args[args.length - 1];
		    if (typeof last === 'function') {
		      return fn.apply(undefined, args);
		    }
		    return function (Component) {
		      return fn.apply(undefined, args.concat([Component]));
		    };
		  };
		}

		function prefix(props, variant) {
		  if (props === undefined) props = {};

		  !(props.bsClass || '').trim() ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'A `bsClass` prop is required for this component') : _invariant2['default'](false) : undefined;
		  return props.bsClass + (variant ? '-' + variant : '');
		}

		var bsClass = curry(function (defaultClass, Component) {
		  var propTypes = Component.propTypes || (Component.propTypes = {});
		  var defaultProps = Component.defaultProps || (Component.defaultProps = {});

		  propTypes.bsClass = _react.PropTypes.string;
		  defaultProps.bsClass = defaultClass;

		  return Component;
		});

		exports.bsClass = bsClass;
		var bsStyles = curry(function (styles, defaultStyle, Component) {
		  if (typeof defaultStyle !== 'string') {
		    Component = defaultStyle;
		    defaultStyle = undefined;
		  }

		  var existing = Component.STYLES || [];
		  var propTypes = Component.propTypes || {};

		  styles.forEach(function (style) {
		    if (existing.indexOf(style) === -1) {
		      existing.push(style);
		    }
		  });

		  var propType = _react.PropTypes.oneOf(existing);

		  // expose the values on the propType function for documentation
		  Component.STYLES = propType._values = existing;

		  Component.propTypes = _extends({}, propTypes, {
		    bsStyle: propType
		  });

		  if (defaultStyle !== undefined) {
		    var defaultProps = Component.defaultProps || (Component.defaultProps = {});
		    defaultProps.bsStyle = defaultStyle;
		  }

		  return Component;
		});

		exports.bsStyles = bsStyles;
		var bsSizes = curry(function (sizes, defaultSize, Component) {
		  if (typeof defaultSize !== 'string') {
		    Component = defaultSize;
		    defaultSize = undefined;
		  }

		  var existing = Component.SIZES || [];
		  var propTypes = Component.propTypes || {};

		  sizes.forEach(function (size) {
		    if (existing.indexOf(size) === -1) {
		      existing.push(size);
		    }
		  });

		  var values = existing.reduce(function (result, size) {
		    if (_styleMaps2['default'].SIZES[size] && _styleMaps2['default'].SIZES[size] !== size) {
		      result.push(_styleMaps2['default'].SIZES[size]);
		    }
		    return result.concat(size);
		  }, []);

		  var propType = _react.PropTypes.oneOf(values);

		  propType._values = values;

		  // expose the values on the propType function for documentation
		  Component.SIZES = existing;

		  Component.propTypes = _extends({}, propTypes, {
		    bsSize: propType
		  });

		  if (defaultSize !== undefined) {
		    var defaultProps = Component.defaultProps || (Component.defaultProps = {});
		    defaultProps.bsSize = defaultSize;
		  }

		  return Component;
		});

		exports.bsSizes = bsSizes;
		exports['default'] = {

		  prefix: prefix,

		  getClassSet: function getClassSet(props) {
		    var classes = {};
		    var bsClassName = prefix(props);

		    if (bsClassName) {
		      var bsSize = undefined;

		      classes[bsClassName] = true;

		      if (props.bsSize) {
		        bsSize = _styleMaps2['default'].SIZES[props.bsSize] || bsSize;
		      }

		      if (bsSize) {
		        classes[prefix(props, bsSize)] = true;
		      }

		      if (props.bsStyle) {
		        if (props.bsStyle.indexOf(prefix(props)) === 0) {
		          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, // small migration convenience, since the old method required manual prefixing
		          'bsStyle will automatically prefix custom values with the bsClass, so there is no ' + 'need to append it manually. (bsStyle: ' + props.bsStyle + ', bsClass: ' + prefix(props) + ')') : undefined;
		          classes[props.bsStyle] = true;
		        } else {
		          classes[prefix(props, props.bsStyle)] = true;
		        }
		      }
		    }

		    return classes;
		  },

		  /**
		   * Add a style variant to a Component. Mutates the propTypes of the component
		   * in order to validate the new variant.
		   */
		  addStyle: function addStyle(Component, styleVariant) {
		    bsStyles(styleVariant, Component);
		  }
		};
		var _curry = curry;
		exports._curry = _curry;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

	/***/ },
	/* 27 */
	/***/ function(module, exports) {

		// shim for using process in browser

		var process = module.exports = {};
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
		    draining = false;
		    if (currentQueue.length) {
		        queue = currentQueue.concat(queue);
		    } else {
		        queueIndex = -1;
		    }
		    if (queue.length) {
		        drainQueue();
		    }
		}

		function drainQueue() {
		    if (draining) {
		        return;
		    }
		    var timeout = setTimeout(cleanUpNextTick);
		    draining = true;

		    var len = queue.length;
		    while(len) {
		        currentQueue = queue;
		        queue = [];
		        while (++queueIndex < len) {
		            if (currentQueue) {
		                currentQueue[queueIndex].run();
		            }
		        }
		        queueIndex = -1;
		        len = queue.length;
		    }
		    currentQueue = null;
		    draining = false;
		    clearTimeout(timeout);
		}

		process.nextTick = function (fun) {
		    var args = new Array(arguments.length - 1);
		    if (arguments.length > 1) {
		        for (var i = 1; i < arguments.length; i++) {
		            args[i - 1] = arguments[i];
		        }
		    }
		    queue.push(new Item(fun, args));
		    if (queue.length === 1 && !draining) {
		        setTimeout(drainQueue, 0);
		    }
		};

		// v8 likes predictible objects
		function Item(fun, array) {
		    this.fun = fun;
		    this.array = array;
		}
		Item.prototype.run = function () {
		    this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;

		process.binding = function (name) {
		    throw new Error('process.binding is not supported');
		};

		process.cwd = function () { return '/' };
		process.chdir = function (dir) {
		    throw new Error('process.chdir is not supported');
		};
		process.umask = function() { return 0; };


	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		var _Object$assign = __webpack_require__(29)["default"];

		exports["default"] = _Object$assign || function (target) {
		  for (var i = 1; i < arguments.length; i++) {
		    var source = arguments[i];

		    for (var key in source) {
		      if (Object.prototype.hasOwnProperty.call(source, key)) {
		        target[key] = source[key];
		      }
		    }
		  }

		  return target;
		};

		exports.__esModule = true;

	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(30), __esModule: true };

	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(31);
		module.exports = __webpack_require__(34).Object.assign;

	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.3.1 Object.assign(target, source)
		var $export = __webpack_require__(32);

		$export($export.S + $export.F, 'Object', {assign: __webpack_require__(37)});

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		var global    = __webpack_require__(33)
		  , core      = __webpack_require__(34)
		  , ctx       = __webpack_require__(35)
		  , PROTOTYPE = 'prototype';

		var $export = function(type, name, source){
		  var IS_FORCED = type & $export.F
		    , IS_GLOBAL = type & $export.G
		    , IS_STATIC = type & $export.S
		    , IS_PROTO  = type & $export.P
		    , IS_BIND   = type & $export.B
		    , IS_WRAP   = type & $export.W
		    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
		    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
		    , key, own, out;
		  if(IS_GLOBAL)source = name;
		  for(key in source){
		    // contains in native
		    own = !IS_FORCED && target && key in target;
		    if(own && key in exports)continue;
		    // export native or passed
		    out = own ? target[key] : source[key];
		    // prevent global pollution for namespaces
		    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
		    // bind timers to global for call from export context
		    : IS_BIND && own ? ctx(out, global)
		    // wrap global constructors for prevent change them in library
		    : IS_WRAP && target[key] == out ? (function(C){
		      var F = function(param){
		        return this instanceof C ? new C(param) : C(param);
		      };
		      F[PROTOTYPE] = C[PROTOTYPE];
		      return F;
		    // make static versions for prototype methods
		    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
		    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
		  }
		};
		// type bitmap
		$export.F = 1;  // forced
		$export.G = 2;  // global
		$export.S = 4;  // static
		$export.P = 8;  // proto
		$export.B = 16; // bind
		$export.W = 32; // wrap
		module.exports = $export;

	/***/ },
	/* 33 */
	/***/ function(module, exports) {

		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		var global = module.exports = typeof window != 'undefined' && window.Math == Math
		  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

	/***/ },
	/* 34 */
	/***/ function(module, exports) {

		var core = module.exports = {version: '1.2.6'};
		if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {

		// optional / simple context binding
		var aFunction = __webpack_require__(36);
		module.exports = function(fn, that, length){
		  aFunction(fn);
		  if(that === undefined)return fn;
		  switch(length){
		    case 1: return function(a){
		      return fn.call(that, a);
		    };
		    case 2: return function(a, b){
		      return fn.call(that, a, b);
		    };
		    case 3: return function(a, b, c){
		      return fn.call(that, a, b, c);
		    };
		  }
		  return function(/* ...args */){
		    return fn.apply(that, arguments);
		  };
		};

	/***/ },
	/* 36 */
	/***/ function(module, exports) {

		module.exports = function(it){
		  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
		  return it;
		};

	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.2.1 Object.assign(target, source, ...)
		var $        = __webpack_require__(38)
		  , toObject = __webpack_require__(39)
		  , IObject  = __webpack_require__(41);

		// should work with symbols and should have deterministic property order (V8 bug)
		module.exports = __webpack_require__(43)(function(){
		  var a = Object.assign
		    , A = {}
		    , B = {}
		    , S = Symbol()
		    , K = 'abcdefghijklmnopqrst';
		  A[S] = 7;
		  K.split('').forEach(function(k){ B[k] = k; });
		  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
		}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
		  var T     = toObject(target)
		    , $$    = arguments
		    , $$len = $$.length
		    , index = 1
		    , getKeys    = $.getKeys
		    , getSymbols = $.getSymbols
		    , isEnum     = $.isEnum;
		  while($$len > index){
		    var S      = IObject($$[index++])
		      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
		      , length = keys.length
		      , j      = 0
		      , key;
		    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
		  }
		  return T;
		} : Object.assign;

	/***/ },
	/* 38 */
	/***/ function(module, exports) {

		var $Object = Object;
		module.exports = {
		  create:     $Object.create,
		  getProto:   $Object.getPrototypeOf,
		  isEnum:     {}.propertyIsEnumerable,
		  getDesc:    $Object.getOwnPropertyDescriptor,
		  setDesc:    $Object.defineProperty,
		  setDescs:   $Object.defineProperties,
		  getKeys:    $Object.keys,
		  getNames:   $Object.getOwnPropertyNames,
		  getSymbols: $Object.getOwnPropertySymbols,
		  each:       [].forEach
		};

	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {

		// 7.1.13 ToObject(argument)
		var defined = __webpack_require__(40);
		module.exports = function(it){
		  return Object(defined(it));
		};

	/***/ },
	/* 40 */
	/***/ function(module, exports) {

		// 7.2.1 RequireObjectCoercible(argument)
		module.exports = function(it){
		  if(it == undefined)throw TypeError("Can't call method on  " + it);
		  return it;
		};

	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

		// fallback for non-array-like ES3 and non-enumerable old V8 strings
		var cof = __webpack_require__(42);
		module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
		  return cof(it) == 'String' ? it.split('') : Object(it);
		};

	/***/ },
	/* 42 */
	/***/ function(module, exports) {

		var toString = {}.toString;

		module.exports = function(it){
		  return toString.call(it).slice(8, -1);
		};

	/***/ },
	/* 43 */
	/***/ function(module, exports) {

		module.exports = function(exec){
		  try {
		    return !!exec();
		  } catch(e){
		    return true;
		  }
		};

	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _Object$assign = __webpack_require__(29)['default'];

		var _Object$create = __webpack_require__(45)['default'];

		var _Object$keys = __webpack_require__(47)['default'];

		exports.__esModule = true;

		var constant = function constant(obj) {
		  return _Object$assign(_Object$create({
		    values: function values() {
		      var _this = this;

		      return _Object$keys(this).map(function (k) {
		        return _this[k];
		      });
		    }
		  }), obj);
		};

		var styleMaps = {

		  SIZES: {
		    'large': 'lg',
		    'medium': 'md',
		    'small': 'sm',
		    'xsmall': 'xs',
		    'lg': 'lg',
		    'md': 'md',
		    'sm': 'sm',
		    'xs': 'xs'
		  },
		  GRID_COLUMNS: 12
		};

		var Sizes = constant({
		  LARGE: 'large',
		  MEDIUM: 'medium',
		  SMALL: 'small',
		  XSMALL: 'xsmall'
		});

		exports.Sizes = Sizes;
		var State = constant({
		  SUCCESS: 'success',
		  WARNING: 'warning',
		  DANGER: 'danger',
		  INFO: 'info'
		});

		exports.State = State;
		var DEFAULT = 'default';
		exports.DEFAULT = DEFAULT;
		var PRIMARY = 'primary';
		exports.PRIMARY = PRIMARY;
		var LINK = 'link';
		exports.LINK = LINK;
		var INVERSE = 'inverse';

		exports.INVERSE = INVERSE;
		exports['default'] = styleMaps;

	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(46), __esModule: true };

	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {

		var $ = __webpack_require__(38);
		module.exports = function create(P, D){
		  return $.create(P, D);
		};

	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(48), __esModule: true };

	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(49);
		module.exports = __webpack_require__(34).Object.keys;

	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.2.14 Object.keys(O)
		var toObject = __webpack_require__(39);

		__webpack_require__(50)('keys', function($keys){
		  return function keys(it){
		    return $keys(toObject(it));
		  };
		});

	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {

		// most Object methods by ES6 should accept primitives
		var $export = __webpack_require__(32)
		  , core    = __webpack_require__(34)
		  , fails   = __webpack_require__(43);
		module.exports = function(KEY, exec){
		  var fn  = (core.Object || {})[KEY] || Object[KEY]
		    , exp = {};
		  exp[KEY] = exec(fn);
		  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
		};

	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */

		'use strict';

		/**
		 * Use invariant() to assert state which your program assumes to be true.
		 *
		 * Provide sprintf-style format (only %s is supported) and arguments
		 * to provide information about what broke and what you were
		 * expecting.
		 *
		 * The invariant message will be stripped in production, but the invariant
		 * will remain to ensure logic does not differ in production.
		 */

		var invariant = function(condition, format, a, b, c, d, e, f) {
		  if (process.env.NODE_ENV !== 'production') {
		    if (format === undefined) {
		      throw new Error('invariant requires an error message argument');
		    }
		  }

		  if (!condition) {
		    var error;
		    if (format === undefined) {
		      error = new Error(
		        'Minified exception occurred; use the non-minified dev environment ' +
		        'for the full error message and additional helpful warnings.'
		      );
		    } else {
		      var args = [a, b, c, d, e, f];
		      var argIndex = 0;
		      error = new Error(
		        format.replace(/%s/g, function() { return args[argIndex++]; })
		      );
		      error.name = 'Invariant Violation';
		    }

		    error.framesToPop = 1; // we don't care about invariant's own frame
		    throw error;
		  }
		};

		module.exports = invariant;

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */

		'use strict';

		/**
		 * Similar to invariant but only logs a warning if the condition is not met.
		 * This can be used to log issues in development environments in critical
		 * paths. Removing the logging code for production environments will keep the
		 * same logic and follow the same code paths.
		 */

		var warning = function() {};

		if (process.env.NODE_ENV !== 'production') {
		  warning = function(condition, format, args) {
		    var len = arguments.length;
		    args = new Array(len > 2 ? len - 2 : 0);
		    for (var key = 2; key < len; key++) {
		      args[key - 2] = arguments[key];
		    }
		    if (format === undefined) {
		      throw new Error(
		        '`warning(condition, format, ...args)` requires a warning ' +
		        'message argument'
		      );
		    }

		    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
		      throw new Error(
		        'The warning format should be able to uniquely identify this ' +
		        'warning. Please, use a more descriptive format than: ' + format
		      );
		    }

		    if (!condition) {
		      var argIndex = 0;
		      var message = 'Warning: ' +
		        format.replace(/%s/g, function() {
		          return args[argIndex++];
		        });
		      if (typeof console !== 'undefined') {
		        console.error(message);
		      }
		      try {
		        // This error was thrown as a convenience so that you can use this stack
		        // to find the callsite that caused this warning to fire.
		        throw new Error(message);
		      } catch(x) {}
		    }
		  };
		}

		module.exports = warning;

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _PanelGroup = __webpack_require__(54);

		var _PanelGroup2 = _interopRequireDefault(_PanelGroup);

		var Accordion = _react2['default'].createClass({
		  displayName: 'Accordion',

		  render: function render() {
		    return _react2['default'].createElement(
		      _PanelGroup2['default'],
		      _extends({}, this.props, { accordion: true }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Accordion;
		module.exports = exports['default'];

	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var PanelGroup = _react2['default'].createClass({
		  displayName: 'PanelGroup',

		  propTypes: {
		    accordion: _react2['default'].PropTypes.bool,
		    activeKey: _react2['default'].PropTypes.any,
		    className: _react2['default'].PropTypes.string,
		    children: _react2['default'].PropTypes.node,
		    defaultActiveKey: _react2['default'].PropTypes.any,
		    onSelect: _react2['default'].PropTypes.func
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      accordion: false
		    };
		  },

		  getInitialState: function getInitialState() {
		    var defaultActiveKey = this.props.defaultActiveKey;

		    return {
		      activeKey: defaultActiveKey
		    };
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    if (this.props.accordion) {
		      props.role = 'tablist';
		    }
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, { className: _classnames2['default'](className, classes), onSelect: null }),
		      _utilsValidComponentChildren2['default'].map(props.children, this.renderPanel)
		    );
		  },

		  renderPanel: function renderPanel(child, index) {
		    var activeKey = this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

		    var props = {
		      bsStyle: child.props.bsStyle || this.props.bsStyle,
		      key: child.key ? child.key : index,
		      ref: child.ref
		    };

		    if (this.props.accordion) {
		      props.headerRole = 'tab';
		      props.panelRole = 'tabpanel';
		      props.collapsible = true;
		      props.expanded = child.props.eventKey === activeKey;
		      props.onSelect = this.handleSelect;
		    }

		    return _react.cloneElement(child, props);
		  },

		  shouldComponentUpdate: function shouldComponentUpdate() {
		    // Defer any updates to this component during the `onSelect` handler.
		    return !this._isChanging;
		  },

		  handleSelect: function handleSelect(e, key) {
		    e.preventDefault();

		    if (this.props.onSelect) {
		      this._isChanging = true;
		      this.props.onSelect(key);
		      this._isChanging = false;
		    }

		    if (this.state.activeKey === key) {
		      key = null;
		    }

		    this.setState({
		      activeKey: key
		    });
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('panel-group', PanelGroup);
		module.exports = exports['default'];

	/***/ },
	/* 55 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (obj, keys) {
		  var target = {};

		  for (var i in obj) {
		    if (keys.indexOf(i) >= 0) continue;
		    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
		    target[i] = obj[i];
		  }

		  return target;
		};

		exports.__esModule = true;

	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
		  Copyright (c) 2016 Jed Watson.
		  Licensed under the MIT License (MIT), see
		  http://jedwatson.github.io/classnames
		*/
		/* global define */

		(function () {
			'use strict';

			var hasOwn = {}.hasOwnProperty;

			function classNames () {
				var classes = [];

				for (var i = 0; i < arguments.length; i++) {
					var arg = arguments[i];
					if (!arg) continue;

					var argType = typeof arg;

					if (argType === 'string' || argType === 'number') {
						classes.push(arg);
					} else if (Array.isArray(arg)) {
						classes.push(classNames.apply(null, arg));
					} else if (argType === 'object') {
						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					}
				}

				return classes.join(' ');
			}

			if (typeof module !== 'undefined' && module.exports) {
				module.exports = classNames;
			} else if (true) {
				// register as 'classnames', consistent with npm package name
				!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
					return classNames;
				}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else {
				window.classNames = classNames;
			}
		}());


	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var Alert = _react2['default'].createClass({
		  displayName: 'Alert',

		  propTypes: {
		    onDismiss: _react2['default'].PropTypes.func,
		    dismissAfter: _react2['default'].PropTypes.number,
		    closeLabel: _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      closeLabel: 'Close Alert'
		    };
		  },

		  renderDismissButton: function renderDismissButton() {
		    return _react2['default'].createElement(
		      'button',
		      {
		        type: 'button',
		        className: 'close',
		        onClick: this.props.onDismiss,
		        'aria-hidden': 'true',
		        tabIndex: '-1' },
		      _react2['default'].createElement(
		        'span',
		        null,
		        '×'
		      )
		    );
		  },

		  renderSrOnlyDismissButton: function renderSrOnlyDismissButton() {
		    return _react2['default'].createElement(
		      'button',
		      {
		        type: 'button',
		        className: 'close sr-only',
		        onClick: this.props.onDismiss },
		      this.props.closeLabel
		    );
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);
		    var isDismissable = !!this.props.onDismiss;

		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'dismissable')] = isDismissable;

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { role: 'alert', className: _classnames2['default'](this.props.className, classes) }),
		      isDismissable ? this.renderDismissButton() : null,
		      this.props.children,
		      isDismissable ? this.renderSrOnlyDismissButton() : null
		    );
		  },

		  componentDidMount: function componentDidMount() {
		    if (this.props.dismissAfter && this.props.onDismiss) {
		      this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
		    }
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    clearTimeout(this.dismissTimer);
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _styleMaps.State.INFO, _utilsBootstrapUtils.bsClass('alert', Alert));
		module.exports = exports['default'];

	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var Badge = _react2['default'].createClass({
		  displayName: 'Badge',

		  propTypes: {
		    pullRight: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      pullRight: false,
		      bsClass: 'badge'
		    };
		  },

		  hasContent: function hasContent() {
		    return _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || _react2['default'].Children.count(this.props.children) > 1 || typeof this.props.children === 'string' || typeof this.props.children === 'number';
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {
		      'pull-right': this.props.pullRight
		    }, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = this.hasContent(), _classes);
		    return _react2['default'].createElement(
		      'span',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Badge;
		module.exports = exports['default'];

	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var Breadcrumb = _react2['default'].createClass({
		  displayName: 'Breadcrumb',

		  propTypes: {
		    /**
		     * bootstrap className
		     * @private
		     */
		    bsClass: _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'breadcrumb'
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['className']);

		    return _react2['default'].createElement(
		      'ol',
		      _extends({}, props, {
		        role: 'navigation',
		        'aria-label': 'breadcrumbs',
		        className: _classnames2['default'](className, this.props.bsClass) }),
		      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderBreadcrumbItem)
		    );
		  },

		  renderBreadcrumbItem: function renderBreadcrumbItem(child, index) {
		    return _react.cloneElement(child, { key: child.key || index });
		  }
		});

		exports['default'] = Breadcrumb;
		module.exports = exports['default'];

	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _SafeAnchor = __webpack_require__(61);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var BreadcrumbItem = _react2['default'].createClass({
		  displayName: 'BreadcrumbItem',

		  propTypes: {
		    /**
		     * If set to true, renders `span` instead of `a`
		     */
		    active: _react2['default'].PropTypes.bool,
		    /**
		     * HTML id for the wrapper `li` element
		     */
		    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    /**
		     * HTML id for the inner `a` element
		     */
		    linkId: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    /**
		     * `href` attribute for the inner `a` element
		     */
		    href: _react2['default'].PropTypes.string,
		    /**
		     * `title` attribute for the inner `a` element
		     */
		    title: _react2['default'].PropTypes.node,
		    /**
		     * `target` attribute for the inner `a` element
		     */
		    target: _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      active: false
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var active = _props.active;
		    var className = _props.className;
		    var id = _props.id;
		    var linkId = _props.linkId;
		    var children = _props.children;
		    var href = _props.href;
		    var title = _props.title;
		    var target = _props.target;

		    var props = _objectWithoutProperties(_props, ['active', 'className', 'id', 'linkId', 'children', 'href', 'title', 'target']);

		    var linkProps = {
		      href: href,
		      title: title,
		      target: target,
		      id: linkId
		    };

		    return _react2['default'].createElement(
		      'li',
		      { id: id, className: _classnames2['default'](className, { active: active }) },
		      active ? _react2['default'].createElement(
		        'span',
		        props,
		        children
		      ) : _react2['default'].createElement(
		        _SafeAnchor2['default'],
		        _extends({}, props, linkProps),
		        children
		      )
		    );
		  }
		});

		exports['default'] = BreadcrumbItem;
		module.exports = exports['default'];

	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		/**
		 * Note: This is intended as a stop-gap for accessibility concerns that the
		 * Bootstrap CSS does not address as they have styled anchors and not buttons
		 * in many cases.
		 */

		var SafeAnchor = (function (_React$Component) {
		  _inherits(SafeAnchor, _React$Component);

		  function SafeAnchor(props) {
		    _classCallCheck(this, SafeAnchor);

		    _React$Component.call(this, props);

		    this.handleClick = this.handleClick.bind(this);
		  }

		  SafeAnchor.prototype.handleClick = function handleClick(event) {
		    if (this.props.href === undefined) {
		      event.preventDefault();
		    }
		  };

		  SafeAnchor.prototype.render = function render() {
		    return _react2['default'].createElement('a', _extends({ role: this.props.href ? undefined : 'button'
		    }, this.props, {
		      onClick: _utilsCreateChainedFunction2['default'](this.props.onClick, this.handleClick),
		      href: this.props.href || '' }));
		  };

		  return SafeAnchor;
		})(_react2['default'].Component);

		exports['default'] = SafeAnchor;

		SafeAnchor.propTypes = {
		  href: _react2['default'].PropTypes.string,
		  onClick: _react2['default'].PropTypes.func
		};
		module.exports = exports['default'];

	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		var _Object$create = __webpack_require__(45)["default"];

		var _Object$setPrototypeOf = __webpack_require__(63)["default"];

		exports["default"] = function (subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
		  }

		  subClass.prototype = _Object$create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      enumerable: false,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		};

		exports.__esModule = true;

	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(64), __esModule: true };

	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {

		__webpack_require__(65);
		module.exports = __webpack_require__(34).Object.setPrototypeOf;

	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {

		// 19.1.3.19 Object.setPrototypeOf(O, proto)
		var $export = __webpack_require__(32);
		$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(66).set});

	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {

		// Works with __proto__ only. Old v8 can't work with null proto objects.
		/* eslint-disable no-proto */
		var getDesc  = __webpack_require__(38).getDesc
		  , isObject = __webpack_require__(67)
		  , anObject = __webpack_require__(68);
		var check = function(O, proto){
		  anObject(O);
		  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
		};
		module.exports = {
		  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
		    function(test, buggy, set){
		      try {
		        set = __webpack_require__(35)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
		        set(test, []);
		        buggy = !(test instanceof Array);
		      } catch(e){ buggy = true; }
		      return function setPrototypeOf(O, proto){
		        check(O, proto);
		        if(buggy)O.__proto__ = proto;
		        else set(O, proto);
		        return O;
		      };
		    }({}, false) : undefined),
		  check: check
		};

	/***/ },
	/* 67 */
	/***/ function(module, exports) {

		module.exports = function(it){
		  return typeof it === 'object' ? it !== null : typeof it === 'function';
		};

	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(67);
		module.exports = function(it){
		  if(!isObject(it))throw TypeError(it + ' is not an object!');
		  return it;
		};

	/***/ },
	/* 69 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		};

		exports.__esModule = true;

	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var types = ['button', 'reset', 'submit'];

		var ButtonStyles = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY, _styleMaps.LINK);

		var Button = _react2['default'].createClass({
		  displayName: 'Button',

		  propTypes: {
		    active: _react2['default'].PropTypes.bool,
		    disabled: _react2['default'].PropTypes.bool,
		    block: _react2['default'].PropTypes.bool,
		    navItem: _react2['default'].PropTypes.bool,
		    navDropdown: _react2['default'].PropTypes.bool,
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default'],
		    href: _react2['default'].PropTypes.string,
		    target: _react2['default'].PropTypes.string,
		    /**
		     * Defines HTML button type Attribute
		     * @type {("button"|"reset"|"submit")}
		     * @defaultValue 'button'
		     */
		    type: _react2['default'].PropTypes.oneOf(types)
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      active: false,
		      block: false,
		      disabled: false,
		      navItem: false,
		      navDropdown: false
		    };
		  },

		  render: function render() {
		    var _extends2;

		    var classes = this.props.navDropdown ? {} : _utilsBootstrapUtils2['default'].getClassSet(this.props);
		    var renderFuncName = undefined;

		    var blockClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'block');

		    classes = _extends((_extends2 = {
		      active: this.props.active
		    }, _extends2[blockClass] = this.props.block, _extends2), classes);

		    if (this.props.navItem) {
		      return this.renderNavItem(classes);
		    }

		    renderFuncName = this.props.href || this.props.target || this.props.navDropdown ? 'renderAnchor' : 'renderButton';

		    return this[renderFuncName](classes);
		  },

		  renderAnchor: function renderAnchor(classes) {
		    var Component = this.props.componentClass || 'a';
		    var href = this.props.href || '#';
		    classes.disabled = this.props.disabled;

		    return _react2['default'].createElement(
		      Component,
		      _extends({}, this.props, {
		        href: href,
		        className: _classnames2['default'](this.props.className, classes),
		        role: 'button' }),
		      this.props.children
		    );
		  },

		  renderButton: function renderButton(classes) {
		    var Component = this.props.componentClass || 'button';

		    return _react2['default'].createElement(
		      Component,
		      _extends({}, this.props, {
		        type: this.props.type || 'button',
		        className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  },

		  renderNavItem: function renderNavItem(classes) {
		    var liClasses = {
		      active: this.props.active
		    };

		    return _react2['default'].createElement(
		      'li',
		      { className: _classnames2['default'](liClasses) },
		      this.renderAnchor(classes)
		    );
		  }
		});

		Button.types = types;

		exports['default'] = _utilsBootstrapUtils.bsStyles(ButtonStyles, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL, _styleMaps.Sizes.XSMALL], _utilsBootstrapUtils.bsClass('btn', Button)));
		module.exports = exports['default'];

	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _common = __webpack_require__(72);

		/**
		 * Checks whether a prop provides a type of element.
		 *
		 * The type of element can be provided in two forms:
		 * - tag name (string)
		 * - a return value of React.createClass(...)
		 *
		 * @param props
		 * @param propName
		 * @param componentName
		 * @returns {Error|undefined}
		 */

		function validate(props, propName, componentName) {
		  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

		  if (typeof props[propName] !== 'function') {
		    if (_react2['default'].isValidElement(props[propName])) {
		      return new Error(errBeginning + ', not an actual Element');
		    }

		    if (typeof props[propName] !== 'string') {
		      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
		    }
		  }
		}

		exports['default'] = _common.createChainableTypeChecker(validate);
		module.exports = exports['default'];

	/***/ },
	/* 72 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports.errMsg = errMsg;
		exports.createChainableTypeChecker = createChainableTypeChecker;

		function errMsg(props, propName, componentName, msgContinuation) {
		  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
		}

		/**
		 * Create chain-able isRequired validator
		 *
		 * Largely copied directly from:
		 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
		 */

		function createChainableTypeChecker(validate) {
		  function checkType(isRequired, props, propName, componentName) {
		    componentName = componentName || '<<anonymous>>';
		    if (props[propName] == null) {
		      if (isRequired) {
		        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
		      }
		    } else {
		      return validate(props, propName, componentName);
		    }
		  }

		  var chainedCheckType = checkType.bind(null, false);
		  chainedCheckType.isRequired = checkType.bind(null, true);

		  return chainedCheckType;
		}

	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _reactPropTypesLibAll = __webpack_require__(74);

		var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

		var _Button = __webpack_require__(70);

		var _Button2 = _interopRequireDefault(_Button);

		var ButtonGroup = _react2['default'].createClass({
		  displayName: 'ButtonGroup',

		  propTypes: {
		    vertical: _react2['default'].PropTypes.bool,
		    justified: _react2['default'].PropTypes.bool,
		    /**
		     * Display block buttons, only useful when used with the "vertical" prop.
		     * @type {bool}
		     */
		    block: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (props) {
		      if (props.block && !props.vertical) {
		        return new Error('The block property requires the vertical property to be set to have any effect');
		      }
		    })
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      block: false,
		      justified: false,
		      vertical: false
		    };
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = !this.props.vertical;
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'vertical')] = this.props.vertical;
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'justified')] = this.props.justified;

		    // this is annoying, since the class is `btn-block` not `btn-group-block`
		    classes[_utilsBootstrapUtils2['default'].prefix(_Button2['default'].defaultProps, 'block')] = this.props.block;

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('btn-group', ButtonGroup);
		module.exports = exports['default'];

	/***/ },
	/* 74 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports['default'] = all;

		function all() {
		  for (var _len = arguments.length, propTypes = Array(_len), _key = 0; _key < _len; _key++) {
		    propTypes[_key] = arguments[_key];
		  }

		  if (propTypes === undefined) {
		    throw new Error('No validations provided');
		  }

		  if (propTypes.some(function (propType) {
		    return typeof propType !== 'function';
		  })) {
		    throw new Error('Invalid arguments, must be functions');
		  }

		  if (propTypes.length === 0) {
		    throw new Error('No validations provided');
		  }

		  return function validate(props, propName, componentName) {
		    for (var i = 0; i < propTypes.length; i++) {
		      var result = propTypes[i](props, propName, componentName);

		      if (result !== undefined && result !== null) {
		        return result;
		      }
		    }
		  };
		}

		module.exports = exports['default'];

	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _Button = __webpack_require__(70);

		var _Button2 = _interopRequireDefault(_Button);

		var _FormGroup = __webpack_require__(76);

		var _FormGroup2 = _interopRequireDefault(_FormGroup);

		var _InputBase2 = __webpack_require__(77);

		var _InputBase3 = _interopRequireDefault(_InputBase2);

		var _utilsChildrenValueInputValidation = __webpack_require__(22);

		var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

		var ButtonInput = (function (_InputBase) {
		  _inherits(ButtonInput, _InputBase);

		  function ButtonInput() {
		    _classCallCheck(this, ButtonInput);

		    _InputBase.apply(this, arguments);
		  }

		  ButtonInput.prototype.renderFormGroup = function renderFormGroup(children) {
		    var _props = this.props;
		    var bsStyle = _props.bsStyle;
		    var value = _props.value;

		    var other = _objectWithoutProperties(_props, ['bsStyle', 'value']);

		    return _react2['default'].createElement(
		      _FormGroup2['default'],
		      other,
		      children
		    );
		  };

		  ButtonInput.prototype.renderInput = function renderInput() {
		    var _props2 = this.props;
		    var children = _props2.children;
		    var value = _props2.value;

		    var other = _objectWithoutProperties(_props2, ['children', 'value']);

		    var val = children ? children : value;
		    return _react2['default'].createElement(_Button2['default'], _extends({}, other, { componentClass: 'input', ref: 'input', key: 'input', value: val }));
		  };

		  return ButtonInput;
		})(_InputBase3['default']);

		ButtonInput.types = _Button2['default'].types;

		ButtonInput.defaultProps = {
		  type: 'button'
		};

		ButtonInput.propTypes = {
		  type: _react2['default'].PropTypes.oneOf(ButtonInput.types),
		  bsStyle: function bsStyle() {
		    // defer to Button propTypes of bsStyle
		    return null;
		  },
		  children: _utilsChildrenValueInputValidation2['default'],
		  value: _utilsChildrenValueInputValidation2['default']
		};

		exports['default'] = ButtonInput;
		module.exports = exports['default'];

	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var FormGroup = (function (_React$Component) {
		  _inherits(FormGroup, _React$Component);

		  function FormGroup() {
		    _classCallCheck(this, FormGroup);

		    _React$Component.apply(this, arguments);
		  }

		  FormGroup.prototype.render = function render() {
		    var classes = {
		      'form-group': !this.props.standalone,
		      'form-group-lg': !this.props.standalone && this.props.bsSize === 'large',
		      'form-group-sm': !this.props.standalone && this.props.bsSize === 'small',
		      'has-feedback': this.props.hasFeedback,
		      'has-success': this.props.bsStyle === 'success',
		      'has-warning': this.props.bsStyle === 'warning',
		      'has-error': this.props.bsStyle === 'error'
		    };

		    return _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](classes, this.props.groupClassName) },
		      this.props.children
		    );
		  };

		  return FormGroup;
		})(_react2['default'].Component);

		FormGroup.defaultProps = {
		  hasFeedback: false,
		  standalone: false
		};

		FormGroup.propTypes = {
		  standalone: _react2['default'].PropTypes.bool,
		  hasFeedback: _react2['default'].PropTypes.bool,
		  bsSize: function bsSize(props) {
		    if (props.standalone && props.bsSize !== undefined) {
		      return new Error('bsSize will not be used when `standalone` is set.');
		    }

		    return _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']).apply(null, arguments);
		  },
		  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
		  groupClassName: _react2['default'].PropTypes.string
		};

		exports['default'] = FormGroup;
		module.exports = exports['default'];

	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _FormGroup = __webpack_require__(76);

		var _FormGroup2 = _interopRequireDefault(_FormGroup);

		var _Glyphicon = __webpack_require__(78);

		var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

		var InputBase = (function (_React$Component) {
		  _inherits(InputBase, _React$Component);

		  function InputBase() {
		    _classCallCheck(this, InputBase);

		    _React$Component.apply(this, arguments);
		  }

		  InputBase.prototype.getInputDOMNode = function getInputDOMNode() {
		    return this.refs.input;
		  };

		  InputBase.prototype.getValue = function getValue() {
		    if (this.props.type === 'static') {
		      return this.props.value;
		    } else if (this.props.type) {
		      if (this.props.type === 'select' && this.props.multiple) {
		        return this.getSelectedOptions();
		      }
		      return this.getInputDOMNode().value;
		    }
		    throw new Error('Cannot use getValue without specifying input type.');
		  };

		  InputBase.prototype.getChecked = function getChecked() {
		    return this.getInputDOMNode().checked;
		  };

		  InputBase.prototype.getSelectedOptions = function getSelectedOptions() {
		    var values = [];

		    Array.prototype.forEach.call(this.getInputDOMNode().getElementsByTagName('option'), function (option) {
		      if (option.selected) {
		        var value = option.getAttribute('value') || option.innerHtml;
		        values.push(value);
		      }
		    });

		    return values;
		  };

		  InputBase.prototype.isCheckboxOrRadio = function isCheckboxOrRadio() {
		    return this.props.type === 'checkbox' || this.props.type === 'radio';
		  };

		  InputBase.prototype.isFile = function isFile() {
		    return this.props.type === 'file';
		  };

		  InputBase.prototype.renderInputGroup = function renderInputGroup(children) {
		    var addonBefore = this.props.addonBefore ? _react2['default'].createElement(
		      'span',
		      { className: 'input-group-addon', key: 'addonBefore' },
		      this.props.addonBefore
		    ) : null;

		    var addonAfter = this.props.addonAfter ? _react2['default'].createElement(
		      'span',
		      { className: 'input-group-addon', key: 'addonAfter' },
		      this.props.addonAfter
		    ) : null;

		    var buttonBefore = this.props.buttonBefore ? _react2['default'].createElement(
		      'span',
		      { className: 'input-group-btn' },
		      this.props.buttonBefore
		    ) : null;

		    var buttonAfter = this.props.buttonAfter ? _react2['default'].createElement(
		      'span',
		      { className: 'input-group-btn' },
		      this.props.buttonAfter
		    ) : null;

		    var inputGroupClassName = undefined;
		    switch (this.props.bsSize) {
		      case 'small':
		        inputGroupClassName = 'input-group-sm';break;
		      case 'large':
		        inputGroupClassName = 'input-group-lg';break;
		      default:
		    }

		    return addonBefore || addonAfter || buttonBefore || buttonAfter ? _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](inputGroupClassName, 'input-group'), key: 'input-group' },
		      addonBefore,
		      buttonBefore,
		      children,
		      addonAfter,
		      buttonAfter
		    ) : children;
		  };

		  InputBase.prototype.renderIcon = function renderIcon() {
		    if (this.props.hasFeedback) {
		      if (this.props.feedbackIcon) {
		        return _react2['default'].cloneElement(this.props.feedbackIcon, { formControlFeedback: true });
		      }

		      switch (this.props.bsStyle) {
		        case 'success':
		          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'ok', key: 'icon' });
		        case 'warning':
		          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'warning-sign', key: 'icon' });
		        case 'error':
		          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'remove', key: 'icon' });
		        default:
		          return _react2['default'].createElement('span', { className: 'form-control-feedback', key: 'icon' });
		      }
		    } else {
		      return null;
		    }
		  };

		  InputBase.prototype.renderHelp = function renderHelp() {
		    return this.props.help ? _react2['default'].createElement(
		      'span',
		      { className: 'help-block', key: 'help' },
		      this.props.help
		    ) : null;
		  };

		  InputBase.prototype.renderCheckboxAndRadioWrapper = function renderCheckboxAndRadioWrapper(children) {
		    var classes = {
		      'checkbox': this.props.type === 'checkbox',
		      'radio': this.props.type === 'radio'
		    };

		    return _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](classes), key: 'checkboxRadioWrapper' },
		      children
		    );
		  };

		  InputBase.prototype.renderWrapper = function renderWrapper(children) {
		    return this.props.wrapperClassName ? _react2['default'].createElement(
		      'div',
		      { className: this.props.wrapperClassName, key: 'wrapper' },
		      children
		    ) : children;
		  };

		  InputBase.prototype.renderLabel = function renderLabel(children) {
		    var classes = {
		      'control-label': !this.isCheckboxOrRadio()
		    };
		    classes[this.props.labelClassName] = this.props.labelClassName;

		    return this.props.label ? _react2['default'].createElement(
		      'label',
		      { htmlFor: this.props.id, className: _classnames2['default'](classes), key: 'label' },
		      children,
		      this.props.label
		    ) : children;
		  };

		  InputBase.prototype.renderInput = function renderInput() {
		    if (!this.props.type) {
		      return this.props.children;
		    }

		    switch (this.props.type) {
		      case 'select':
		        return _react2['default'].createElement(
		          'select',
		          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }),
		          this.props.children
		        );
		      case 'textarea':
		        return _react2['default'].createElement('textarea', _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }));
		      case 'static':
		        return _react2['default'].createElement(
		          'p',
		          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
		          this.props.value
		        );
		      default:
		        var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';
		        return _react2['default'].createElement('input', _extends({}, this.props, { className: _classnames2['default'](this.props.className, className), ref: 'input', key: 'input' }));
		    }
		  };

		  InputBase.prototype.renderFormGroup = function renderFormGroup(children) {
		    return _react2['default'].createElement(
		      _FormGroup2['default'],
		      this.props,
		      children
		    );
		  };

		  InputBase.prototype.renderChildren = function renderChildren() {
		    return !this.isCheckboxOrRadio() ? [this.renderLabel(), this.renderWrapper([this.renderInputGroup(this.renderInput()), this.renderIcon(), this.renderHelp()])] : this.renderWrapper([this.renderCheckboxAndRadioWrapper(this.renderLabel(this.renderInput())), this.renderHelp()]);
		  };

		  InputBase.prototype.render = function render() {
		    var children = this.renderChildren();
		    return this.renderFormGroup(children);
		  };

		  return InputBase;
		})(_react2['default'].Component);

		InputBase.propTypes = {
		  type: _react2['default'].PropTypes.string,
		  label: _react2['default'].PropTypes.node,
		  help: _react2['default'].PropTypes.node,
		  addonBefore: _react2['default'].PropTypes.node,
		  addonAfter: _react2['default'].PropTypes.node,
		  buttonBefore: _react2['default'].PropTypes.node,
		  buttonAfter: _react2['default'].PropTypes.node,
		  bsSize: _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']),
		  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
		  hasFeedback: _react2['default'].PropTypes.bool,
		  feedbackIcon: _react2['default'].PropTypes.node,
		  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		  groupClassName: _react2['default'].PropTypes.string,
		  wrapperClassName: _react2['default'].PropTypes.string,
		  labelClassName: _react2['default'].PropTypes.string,
		  multiple: _react2['default'].PropTypes.bool,
		  disabled: _react2['default'].PropTypes.bool,
		  value: _react2['default'].PropTypes.any
		};

		InputBase.defaultProps = {
		  disabled: false,
		  hasFeedback: false,
		  multiple: false
		};

		exports['default'] = InputBase;
		module.exports = exports['default'];

	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var Glyphicon = _react2['default'].createClass({
		  displayName: 'Glyphicon',

		  propTypes: {
		    /**
		     * bootstrap className
		     * @private
		     */
		    bsClass: _react2['default'].PropTypes.string,
		    /**
		     * An icon name. See e.g. http://getbootstrap.com/components/#glyphicons
		     */
		    glyph: _react2['default'].PropTypes.string.isRequired,
		    /**
		     * Adds 'form-control-feedback' class
		     * @private
		     */
		    formControlFeedback: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'glyphicon',
		      formControlFeedback: false
		    };
		  },

		  render: function render() {
		    var _classNames;

		    var className = _classnames2['default'](this.props.className, (_classNames = {}, _classNames[this.props.bsClass] = true, _classNames['glyphicon-' + this.props.glyph] = true, _classNames['form-control-feedback'] = this.props.formControlFeedback, _classNames));

		    return _react2['default'].createElement(
		      'span',
		      _extends({}, this.props, { className: className }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Glyphicon;
		module.exports = exports['default'];

	/***/ },
	/* 79 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _Button = __webpack_require__(70);

		var _Button2 = _interopRequireDefault(_Button);

		var ButtonToolbar = _react2['default'].createClass({
		  displayName: 'ButtonToolbar',

		  propTypes: {
		    bsSize: _Button2['default'].propTypes.bsSize
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'btn-toolbar'
		    };
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        role: 'toolbar',
		        className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = ButtonToolbar;
		module.exports = exports['default'];

	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _Glyphicon = __webpack_require__(78);

		var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var Carousel = _react2['default'].createClass({
		  displayName: 'Carousel',

		  propTypes: {
		    slide: _react2['default'].PropTypes.bool,
		    indicators: _react2['default'].PropTypes.bool,
		    interval: _react2['default'].PropTypes.number,
		    controls: _react2['default'].PropTypes.bool,
		    pauseOnHover: _react2['default'].PropTypes.bool,
		    wrap: _react2['default'].PropTypes.bool,
		    onSelect: _react2['default'].PropTypes.func,
		    onSlideEnd: _react2['default'].PropTypes.func,
		    activeIndex: _react2['default'].PropTypes.number,
		    defaultActiveIndex: _react2['default'].PropTypes.number,
		    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
		    prevIcon: _react2['default'].PropTypes.node,
		    nextIcon: _react2['default'].PropTypes.node
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'carousel',
		      slide: true,
		      interval: 5000,
		      pauseOnHover: true,
		      wrap: true,
		      indicators: true,
		      controls: true,
		      prevIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-left' }),
		      nextIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-right' })
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      activeIndex: this.props.defaultActiveIndex == null ? 0 : this.props.defaultActiveIndex,
		      previousActiveIndex: null,
		      direction: null
		    };
		  },

		  getDirection: function getDirection(prevIndex, index) {
		    if (prevIndex === index) {
		      return null;
		    }

		    return prevIndex > index ? 'prev' : 'next';
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    var activeIndex = this.getActiveIndex();

		    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {
		      clearTimeout(this.timeout);
		      this.setState({
		        previousActiveIndex: activeIndex,
		        direction: nextProps.direction != null ? nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)
		      });
		    }
		  },

		  componentDidMount: function componentDidMount() {
		    this.waitForNext();
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    clearTimeout(this.timeout);
		  },

		  next: function next(e) {
		    if (e) {
		      e.preventDefault();
		    }

		    var index = this.getActiveIndex() + 1;
		    var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

		    if (index > count - 1) {
		      if (!this.props.wrap) {
		        return;
		      }
		      index = 0;
		    }

		    this.handleSelect(index, 'next');
		  },

		  prev: function prev(e) {
		    if (e) {
		      e.preventDefault();
		    }

		    var index = this.getActiveIndex() - 1;

		    if (index < 0) {
		      if (!this.props.wrap) {
		        return;
		      }
		      index = _utilsValidComponentChildren2['default'].numberOf(this.props.children) - 1;
		    }

		    this.handleSelect(index, 'prev');
		  },

		  pause: function pause() {
		    this.isPaused = true;
		    clearTimeout(this.timeout);
		  },

		  play: function play() {
		    this.isPaused = false;
		    this.waitForNext();
		  },

		  waitForNext: function waitForNext() {
		    if (!this.isPaused && this.props.slide && this.props.interval && this.props.activeIndex == null) {
		      this.timeout = setTimeout(this.next, this.props.interval);
		    }
		  },

		  handleMouseOver: function handleMouseOver() {
		    if (this.props.pauseOnHover) {
		      this.pause();
		    }
		  },

		  handleMouseOut: function handleMouseOut() {
		    if (this.isPaused) {
		      this.play();
		    }
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes.slide = this.props.slide, _classes);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes),
		        onMouseOver: this.handleMouseOver,
		        onMouseOut: this.handleMouseOut }),
		      this.props.indicators ? this.renderIndicators() : null,
		      _react2['default'].createElement(
		        'div',
		        {
		          ref: 'inner',
		          className: _utilsBootstrapUtils2['default'].prefix(this.props, 'inner')
		        },
		        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderItem)
		      ),
		      this.props.controls ? this.renderControls() : null
		    );
		  },

		  renderPrev: function renderPrev() {
		    var classes = 'left ' + _utilsBootstrapUtils2['default'].prefix(this.props, 'control');

		    return _react2['default'].createElement(
		      'a',
		      { className: classes, href: '#prev', key: 0, onClick: this.prev },
		      this.props.prevIcon
		    );
		  },

		  renderNext: function renderNext() {
		    var classes = 'right ' + _utilsBootstrapUtils2['default'].prefix(this.props, 'control');

		    return _react2['default'].createElement(
		      'a',
		      { className: classes, href: '#next', key: 1, onClick: this.next },
		      this.props.nextIcon
		    );
		  },

		  renderControls: function renderControls() {
		    if (!this.props.wrap) {
		      var activeIndex = this.getActiveIndex();
		      var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

		      return [activeIndex !== 0 ? this.renderPrev() : null, activeIndex !== count - 1 ? this.renderNext() : null];
		    }

		    return [this.renderPrev(), this.renderNext()];
		  },

		  renderIndicator: function renderIndicator(child, index) {
		    var className = index === this.getActiveIndex() ? 'active' : null;

		    return _react2['default'].createElement('li', {
		      key: index,
		      className: className,
		      onClick: this.handleSelect.bind(this, index, null) });
		  },

		  renderIndicators: function renderIndicators() {
		    var _this = this;

		    var indicators = [];
		    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child, index) {
		      indicators.push(_this.renderIndicator(child, index),

		      // Force whitespace between indicator elements, bootstrap
		      // requires this for correct spacing of elements.
		      ' ');
		    }, this);

		    return _react2['default'].createElement(
		      'ol',
		      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'indicators') },
		      indicators
		    );
		  },

		  getActiveIndex: function getActiveIndex() {
		    return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;
		  },

		  handleItemAnimateOutEnd: function handleItemAnimateOutEnd() {
		    var _this2 = this;

		    this.setState({
		      previousActiveIndex: null,
		      direction: null
		    }, function () {
		      _this2.waitForNext();

		      if (_this2.props.onSlideEnd) {
		        _this2.props.onSlideEnd();
		      }
		    });
		  },

		  renderItem: function renderItem(child, index) {
		    var activeIndex = this.getActiveIndex();
		    var isActive = index === activeIndex;
		    var isPreviousActive = this.state.previousActiveIndex != null && this.state.previousActiveIndex === index && this.props.slide;

		    return _react.cloneElement(child, {
		      active: isActive,
		      ref: child.ref,
		      key: child.key ? child.key : index,
		      index: index,
		      animateOut: isPreviousActive,
		      animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,
		      direction: this.state.direction,
		      onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd : null
		    });
		  },

		  handleSelect: function handleSelect(index, direction) {
		    clearTimeout(this.timeout);

		    if (this.isMounted()) {
		      var previousActiveIndex = this.getActiveIndex();
		      direction = direction || this.getDirection(previousActiveIndex, index);

		      if (this.props.onSelect) {
		        this.props.onSelect(index, direction);
		      }

		      if (this.props.activeIndex == null && index !== previousActiveIndex) {
		        if (this.state.previousActiveIndex != null) {
		          // If currently animating don't activate the new index.
		          // TODO: look into queuing this canceled call and
		          // animating after the current animation has ended.
		          return;
		        }

		        this.setState({
		          activeIndex: index,
		          previousActiveIndex: previousActiveIndex,
		          direction: direction
		        });
		      }
		    }
		  }
		});

		exports['default'] = Carousel;
		module.exports = exports['default'];

	/***/ },
	/* 81 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _utilsTransitionEvents = __webpack_require__(82);

		var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var CarouselItem = _react2['default'].createClass({
		  displayName: 'CarouselItem',

		  propTypes: {
		    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
		    onAnimateOutEnd: _react2['default'].PropTypes.func,
		    active: _react2['default'].PropTypes.bool,
		    animateIn: _react2['default'].PropTypes.bool,
		    animateOut: _react2['default'].PropTypes.bool,
		    caption: _react2['default'].PropTypes.node,
		    index: _react2['default'].PropTypes.number
		  },

		  getInitialState: function getInitialState() {
		    return {
		      direction: null
		    };
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsStyle: 'carousel',
		      active: false,
		      animateIn: false,
		      animateOut: false
		    };
		  },

		  handleAnimateOutEnd: function handleAnimateOutEnd() {
		    if (this.props.onAnimateOutEnd && this.isMounted()) {
		      this.props.onAnimateOutEnd(this.props.index);
		    }
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    if (this.props.active !== nextProps.active) {
		      this.setState({
		        direction: null
		      });
		    }
		  },

		  componentDidUpdate: function componentDidUpdate(prevProps) {
		    if (!this.props.active && prevProps.active) {
		      _utilsTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this), this.handleAnimateOutEnd);
		    }

		    if (this.props.active !== prevProps.active) {
		      setTimeout(this.startAnimation, 20);
		    }
		  },

		  startAnimation: function startAnimation() {
		    if (!this.isMounted()) {
		      return;
		    }

		    this.setState({
		      direction: this.props.direction === 'prev' ? 'right' : 'left'
		    });
		  },

		  render: function render() {
		    var classes = {
		      item: true,
		      active: this.props.active && !this.props.animateIn || this.props.animateOut,
		      next: this.props.active && this.props.animateIn && this.props.direction === 'next',
		      prev: this.props.active && this.props.animateIn && this.props.direction === 'prev'
		    };

		    if (this.state.direction && (this.props.animateIn || this.props.animateOut)) {
		      classes[this.state.direction] = true;
		    }

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children,
		      this.props.caption ? this.renderCaption() : null
		    );
		  },

		  renderCaption: function renderCaption() {
		    var classes = _utilsBootstrapUtils2['default'].prefix(this.props, 'caption');

		    return _react2['default'].createElement(
		      'div',
		      { className: classes },
		      this.props.caption
		    );
		  }
		});

		exports['default'] = CarouselItem;
		module.exports = exports['default'];

	/***/ },
	/* 82 */
	/***/ function(module, exports) {

		/**
		 * Copyright 2013-2014, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This file contains a modified version of:
		 * https://github.com/facebook/react/blob/v0.12.0/src/addons/transitions/ReactTransitionEvents.js
		 *
		 * This source code is licensed under the BSD-style license found here:
		 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
		 * An additional grant of patent rights can be found here:
		 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
		 */

		'use strict';

		exports.__esModule = true;
		var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

		/**
		 * EVENT_NAME_MAP is used to determine which event fired when a
		 * transition/animation ends, based on the style property used to
		 * define that event.
		 */
		var EVENT_NAME_MAP = {
		  transitionend: {
		    'transition': 'transitionend',
		    'WebkitTransition': 'webkitTransitionEnd',
		    'MozTransition': 'mozTransitionEnd',
		    'OTransition': 'oTransitionEnd',
		    'msTransition': 'MSTransitionEnd'
		  },

		  animationend: {
		    'animation': 'animationend',
		    'WebkitAnimation': 'webkitAnimationEnd',
		    'MozAnimation': 'mozAnimationEnd',
		    'OAnimation': 'oAnimationEnd',
		    'msAnimation': 'MSAnimationEnd'
		  }
		};

		var endEvents = [];

		function detectEvents() {
		  var testEl = document.createElement('div');
		  var style = testEl.style;

		  // On some platforms, in particular some releases of Android 4.x,
		  // the un-prefixed "animation" and "transition" properties are defined on the
		  // style object but the events that fire will still be prefixed, so we need
		  // to check if the un-prefixed events are useable, and if not remove them
		  // from the map
		  if (!('AnimationEvent' in window)) {
		    delete EVENT_NAME_MAP.animationend.animation;
		  }

		  if (!('TransitionEvent' in window)) {
		    delete EVENT_NAME_MAP.transitionend.transition;
		  }

		  for (var baseEventName in EVENT_NAME_MAP) {
		    // eslint-disable-line guard-for-in
		    var baseEvents = EVENT_NAME_MAP[baseEventName];
		    for (var styleName in baseEvents) {
		      if (styleName in style) {
		        endEvents.push(baseEvents[styleName]);
		        break;
		      }
		    }
		  }
		}

		if (canUseDOM) {
		  detectEvents();
		}

		// We use the raw {add|remove}EventListener() call because EventListener
		// does not know how to remove event listeners and we really should
		// clean up. Also, these events are not triggered in older browsers
		// so we should be A-OK here.

		function addEventListener(node, eventName, eventListener) {
		  node.addEventListener(eventName, eventListener, false);
		}

		function removeEventListener(node, eventName, eventListener) {
		  node.removeEventListener(eventName, eventListener, false);
		}

		var ReactTransitionEvents = {
		  addEndEventListener: function addEndEventListener(node, eventListener) {
		    if (endEvents.length === 0) {
		      // If CSS transitions are not supported, trigger an "end animation"
		      // event immediately.
		      window.setTimeout(eventListener, 0);
		      return;
		    }
		    endEvents.forEach(function (endEvent) {
		      addEventListener(node, endEvent, eventListener);
		    });
		  },

		  removeEndEventListener: function removeEndEventListener(node, eventListener) {
		    if (endEvents.length === 0) {
		      return;
		    }
		    endEvents.forEach(function (endEvent) {
		      removeEventListener(node, endEvent, eventListener);
		    });
		  }
		};

		exports['default'] = ReactTransitionEvents;
		module.exports = exports['default'];

	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _Object$keys = __webpack_require__(47)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _styleMaps = __webpack_require__(44);

		var _styleMaps2 = _interopRequireDefault(_styleMaps);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Col = _react2['default'].createClass({
		  displayName: 'Col',

		  propTypes: {
		    /**
		     * The number of columns you wish to span
		     *
		     * for Extra small devices Phones (<768px)
		     *
		     * class-prefix `col-xs-`
		     */
		    xs: _react2['default'].PropTypes.number,
		    /**
		     * The number of columns you wish to span
		     *
		     * for Small devices Tablets (≥768px)
		     *
		     * class-prefix `col-sm-`
		     */
		    sm: _react2['default'].PropTypes.number,
		    /**
		     * The number of columns you wish to span
		     *
		     * for Medium devices Desktops (≥992px)
		     *
		     * class-prefix `col-md-`
		     */
		    md: _react2['default'].PropTypes.number,
		    /**
		     * The number of columns you wish to span
		     *
		     * for Large devices Desktops (≥1200px)
		     *
		     * class-prefix `col-lg-`
		     */
		    lg: _react2['default'].PropTypes.number,
		    /**
		     * Hide column
		     *
		     * on Extra small devices Phones
		     *
		     * adds class `hidden-xs`
		     */
		    xsHidden: _react2['default'].PropTypes.bool,
		    /**
		     * Hide column
		     *
		     * on Small devices Tablets
		     *
		     * adds class `hidden-sm`
		     */
		    smHidden: _react2['default'].PropTypes.bool,
		    /**
		     * Hide column
		     *
		     * on Medium devices Desktops
		     *
		     * adds class `hidden-md`
		     */
		    mdHidden: _react2['default'].PropTypes.bool,
		    /**
		     * Hide column
		     *
		     * on Large devices Desktops
		     *
		     * adds class `hidden-lg`
		     */
		    lgHidden: _react2['default'].PropTypes.bool,
		    /**
		     * Move columns to the right
		     *
		     * for Extra small devices Phones
		     *
		     * class-prefix `col-xs-offset-`
		     */
		    xsOffset: _react2['default'].PropTypes.number,
		    /**
		     * Move columns to the right
		     *
		     * for Small devices Tablets
		     *
		     * class-prefix `col-sm-offset-`
		     */
		    smOffset: _react2['default'].PropTypes.number,
		    /**
		     * Move columns to the right
		     *
		     * for Medium devices Desktops
		     *
		     * class-prefix `col-md-offset-`
		     */
		    mdOffset: _react2['default'].PropTypes.number,
		    /**
		     * Move columns to the right
		     *
		     * for Large devices Desktops
		     *
		     * class-prefix `col-lg-offset-`
		     */
		    lgOffset: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the right
		     *
		     * for Extra small devices Phones
		     *
		     * class-prefix `col-xs-push-`
		     */
		    xsPush: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the right
		     *
		     * for Small devices Tablets
		     *
		     * class-prefix `col-sm-push-`
		     */
		    smPush: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the right
		     *
		     * for Medium devices Desktops
		     *
		     * class-prefix `col-md-push-`
		     */
		    mdPush: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the right
		     *
		     * for Large devices Desktops
		     *
		     * class-prefix `col-lg-push-`
		     */
		    lgPush: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the left
		     *
		     * for Extra small devices Phones
		     *
		     * class-prefix `col-xs-pull-`
		     */
		    xsPull: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the left
		     *
		     * for Small devices Tablets
		     *
		     * class-prefix `col-sm-pull-`
		     */
		    smPull: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the left
		     *
		     * for Medium devices Desktops
		     *
		     * class-prefix `col-md-pull-`
		     */
		    mdPull: _react2['default'].PropTypes.number,
		    /**
		     * Change the order of grid columns to the left
		     *
		     * for Large devices Desktops
		     *
		     * class-prefix `col-lg-pull-`
		     */
		    lgPull: _react2['default'].PropTypes.number,
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  render: function render() {
		    var _this = this;

		    var ComponentClass = this.props.componentClass;
		    var classes = {};

		    _Object$keys(_styleMaps2['default'].SIZES).forEach(function (key) {
		      var size = _styleMaps2['default'].SIZES[key];
		      var prop = size;
		      var classPart = size + '-';

		      if (_this.props[prop]) {
		        classes['col-' + classPart + _this.props[prop]] = true;
		      }

		      classes['hidden-' + size] = _this.props[size + 'Hidden'];

		      prop = size + 'Offset';
		      classPart = size + '-offset-';
		      if (_this.props[prop] >= 0) {
		        classes['col-' + classPart + _this.props[prop]] = true;
		      }

		      prop = size + 'Push';
		      classPart = size + '-push-';
		      if (_this.props[prop] >= 0) {
		        classes['col-' + classPart + _this.props[prop]] = true;
		      }

		      prop = size + 'Pull';
		      classPart = size + '-pull-';
		      if (_this.props[prop] >= 0) {
		        classes['col-' + classPart + _this.props[prop]] = true;
		      }
		    }, this);

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Col;
		module.exports = exports['default'];

	/***/ },
	/* 84 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _Collapse = __webpack_require__(85);

		var _Collapse2 = _interopRequireDefault(_Collapse);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsDeprecationWarning = __webpack_require__(99);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var CollapsibleNav = _react2['default'].createClass({
		  displayName: 'CollapsibleNav',

		  propTypes: {
		    onSelect: _react2['default'].PropTypes.func,
		    activeHref: _react2['default'].PropTypes.string,
		    activeKey: _react2['default'].PropTypes.any,
		    collapsible: _react2['default'].PropTypes.bool,
		    expanded: _react2['default'].PropTypes.bool,
		    eventKey: _react2['default'].PropTypes.any
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      collapsible: false,
		      expanded: false
		    };
		  },

		  render: function render() {
		    /*
		     * this.props.collapsible is set in NavBar when an eventKey is supplied.
		     */
		    var classes = this.props.collapsible ? 'navbar-collapse' : null;
		    var renderChildren = this.props.collapsible ? this.renderCollapsibleNavChildren : this.renderChildren;

		    var nav = _react2['default'].createElement(
		      'div',
		      { eventKey: this.props.eventKey, className: _classnames2['default'](this.props.className, classes) },
		      _utilsValidComponentChildren2['default'].map(this.props.children, renderChildren)
		    );

		    if (this.props.collapsible) {
		      return _react2['default'].createElement(
		        _Collapse2['default'],
		        { 'in': this.props.expanded },
		        nav
		      );
		    }
		    return nav;
		  },

		  getChildActiveProp: function getChildActiveProp(child) {
		    if (child.props.active) {
		      return true;
		    }
		    if (this.props.activeKey != null) {
		      if (child.props.eventKey === this.props.activeKey) {
		        return true;
		      }
		    }
		    if (this.props.activeHref != null) {
		      if (child.props.href === this.props.activeHref) {
		        return true;
		      }
		    }

		    return child.props.active;
		  },

		  renderChildren: function renderChildren(child, index) {
		    var key = child.key ? child.key : index;
		    return _react.cloneElement(child, {
		      activeKey: this.props.activeKey,
		      activeHref: this.props.activeHref,
		      ref: 'nocollapse_' + key,
		      key: key,
		      navItem: true
		    });
		  },

		  renderCollapsibleNavChildren: function renderCollapsibleNavChildren(child, index) {
		    var key = child.key ? child.key : index;
		    return _react.cloneElement(child, {
		      active: this.getChildActiveProp(child),
		      activeKey: this.props.activeKey,
		      activeHref: this.props.activeHref,
		      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
		      ref: 'collapsible_' + key,
		      key: key,
		      navItem: true
		    });
		  }
		});

		exports['default'] = _utilsDeprecationWarning2['default'].wrapper(CollapsibleNav, 'CollapsibleNav', 'Navbar.Collapse', 'http://react-bootstrap.github.io/components.html#navbars');
		module.exports = exports['default'];

	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _domHelpersStyle = __webpack_require__(86);

		var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactOverlaysLibTransition = __webpack_require__(94);

		var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

		var _reactPropTypesLibDeprecated = __webpack_require__(98);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var capitalize = function capitalize(str) {
		  return str[0].toUpperCase() + str.substr(1);
		};

		// reading a dimension prop will cause the browser to recalculate,
		// which will let our animations work
		var triggerBrowserReflow = function triggerBrowserReflow(node) {
		  return node.offsetHeight;
		};

		var MARGINS = {
		  height: ['marginTop', 'marginBottom'],
		  width: ['marginLeft', 'marginRight']
		};

		function getDimensionValue(dimension, elem) {
		  var value = elem['offset' + capitalize(dimension)];
		  var margins = MARGINS[dimension];

		  return value + parseInt(_domHelpersStyle2['default'](elem, margins[0]), 10) + parseInt(_domHelpersStyle2['default'](elem, margins[1]), 10);
		}

		var Collapse = (function (_React$Component) {
		  _inherits(Collapse, _React$Component);

		  function Collapse(props, context) {
		    _classCallCheck(this, Collapse);

		    _React$Component.call(this, props, context);

		    this.onEnterListener = this.handleEnter.bind(this);
		    this.onEnteringListener = this.handleEntering.bind(this);
		    this.onEnteredListener = this.handleEntered.bind(this);
		    this.onExitListener = this.handleExit.bind(this);
		    this.onExitingListener = this.handleExiting.bind(this);
		  }

		  // Explicitly copied from Transition for doc generation.
		  // TODO: Remove duplication once #977 is resolved.

		  Collapse.prototype.render = function render() {
		    var enter = _utilsCreateChainedFunction2['default'](this.onEnterListener, this.props.onEnter);
		    var entering = _utilsCreateChainedFunction2['default'](this.onEnteringListener, this.props.onEntering);
		    var entered = _utilsCreateChainedFunction2['default'](this.onEnteredListener, this.props.onEntered);
		    var exit = _utilsCreateChainedFunction2['default'](this.onExitListener, this.props.onExit);
		    var exiting = _utilsCreateChainedFunction2['default'](this.onExitingListener, this.props.onExiting);

		    return _react2['default'].createElement(
		      _reactOverlaysLibTransition2['default'],
		      _extends({
		        ref: 'transition'
		      }, this.props, {
		        'aria-expanded': this.props.role ? this.props['in'] : null,
		        className: _classnames2['default'](this.props.className, { width: this._dimension() === 'width' }),
		        exitedClassName: 'collapse',
		        exitingClassName: 'collapsing',
		        enteredClassName: 'collapse in',
		        enteringClassName: 'collapsing',
		        onEnter: enter,
		        onEntering: entering,
		        onEntered: entered,
		        onExit: exit,
		        onExiting: exiting,
		        onExited: this.props.onExited
		      }),
		      this.props.children
		    );
		  };

		  /* -- Expanding -- */

		  Collapse.prototype.handleEnter = function handleEnter(elem) {
		    var dimension = this._dimension();
		    elem.style[dimension] = '0';
		  };

		  Collapse.prototype.handleEntering = function handleEntering(elem) {
		    var dimension = this._dimension();

		    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
		  };

		  Collapse.prototype.handleEntered = function handleEntered(elem) {
		    var dimension = this._dimension();
		    elem.style[dimension] = null;
		  };

		  /* -- Collapsing -- */

		  Collapse.prototype.handleExit = function handleExit(elem) {
		    var dimension = this._dimension();

		    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
		  };

		  Collapse.prototype.handleExiting = function handleExiting(elem) {
		    var dimension = this._dimension();

		    triggerBrowserReflow(elem);
		    elem.style[dimension] = '0';
		  };

		  Collapse.prototype._dimension = function _dimension() {
		    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
		  };

		  // for testing

		  Collapse.prototype._getTransitionInstance = function _getTransitionInstance() {
		    return this.refs.transition;
		  };

		  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
		    return elem['scroll' + capitalize(dimension)] + 'px';
		  };

		  return Collapse;
		})(_react2['default'].Component);

		Collapse.propTypes = {
		  /**
		   * Show the component; triggers the expand or collapse animation
		   */
		  'in': _react2['default'].PropTypes.bool,

		  /**
		   * Unmount the component (remove it from the DOM) when it is collapsed
		   */
		  unmountOnExit: _react2['default'].PropTypes.bool,

		  /**
		   * Run the expand animation when the component mounts, if it is initially
		   * shown
		   */
		  transitionAppear: _react2['default'].PropTypes.bool,

		  /**
		   * Duration of the collapse animation in milliseconds, to ensure that
		   * finishing callbacks are fired even if the original browser transition end
		   * events are canceled
		   */
		  timeout: _react2['default'].PropTypes.number,

		  /**
		   * duration
		   * @private
		   */
		  duration: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.number, 'Use `timeout`.'),

		  /**
		   * Callback fired before the component expands
		   */
		  onEnter: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component starts to expand
		   */
		  onEntering: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component has expanded
		   */
		  onEntered: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired before the component collapses
		   */
		  onExit: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component starts to collapse
		   */
		  onExiting: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component has collapsed
		   */
		  onExited: _react2['default'].PropTypes.func,

		  /**
		   * The dimension used when collapsing, or a function that returns the
		   * dimension
		   *
		   * _Note: Bootstrap only partially supports 'width'!
		   * You will need to supply your own CSS animation for the `.width` CSS class._
		   */
		  dimension: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['height', 'width']), _react2['default'].PropTypes.func]),

		  /**
		   * Function that returns the height or width of the animating DOM node
		   *
		   * Allows for providing some custom logic for how much the Collapse component
		   * should animate in its specified dimension. Called with the current
		   * dimension prop value and the DOM node.
		   */
		  getDimensionValue: _react2['default'].PropTypes.func,

		  /**
		   * ARIA role of collapsible element
		   */
		  role: _react2['default'].PropTypes.string
		};

		Collapse.defaultProps = {
		  'in': false,
		  timeout: 300,
		  unmountOnExit: false,
		  transitionAppear: false,

		  dimension: 'height',
		  getDimensionValue: getDimensionValue
		};

		exports['default'] = Collapse;
		module.exports = exports['default'];

	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var camelize = __webpack_require__(87),
		    hyphenate = __webpack_require__(89),
		    _getComputedStyle = __webpack_require__(91),
		    removeStyle = __webpack_require__(93);

		var has = Object.prototype.hasOwnProperty;

		module.exports = function style(node, property, value) {
		  var css = '',
		      props = property;

		  if (typeof property === 'string') {

		    if (value === undefined) return node.style[camelize(property)] || _getComputedStyle(node).getPropertyValue(hyphenate(property));else (props = {})[property] = value;
		  }

		  for (var key in props) if (has.call(props, key)) {
		    !props[key] && props[key] !== 0 ? removeStyle(node, hyphenate(key)) : css += hyphenate(key) + ':' + props[key] + ';';
		  }

		  node.style.cssText += ';' + css;
		};

	/***/ },
	/* 87 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
		 */

		'use strict';
		var camelize = __webpack_require__(88);
		var msPattern = /^-ms-/;

		module.exports = function camelizeStyleName(string) {
		  return camelize(string.replace(msPattern, 'ms-'));
		};

	/***/ },
	/* 88 */
	/***/ function(module, exports) {

		"use strict";

		var rHyphen = /-(.)/g;

		module.exports = function camelize(string) {
		  return string.replace(rHyphen, function (_, chr) {
		    return chr.toUpperCase();
		  });
		};

	/***/ },
	/* 89 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright 2013-2014, Facebook, Inc.
		 * All rights reserved.
		 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
		 */

		"use strict";

		var hyphenate = __webpack_require__(90);
		var msPattern = /^ms-/;

		module.exports = function hyphenateStyleName(string) {
		  return hyphenate(string).replace(msPattern, "-ms-");
		};

	/***/ },
	/* 90 */
	/***/ function(module, exports) {

		'use strict';

		var rUpper = /([A-Z])/g;

		module.exports = function hyphenate(string) {
		  return string.replace(rUpper, '-$1').toLowerCase();
		};

	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var babelHelpers = __webpack_require__(92);

		var _utilCamelizeStyle = __webpack_require__(87);

		var _utilCamelizeStyle2 = babelHelpers.interopRequireDefault(_utilCamelizeStyle);

		var rposition = /^(top|right|bottom|left)$/;
		var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

		module.exports = function _getComputedStyle(node) {
		  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
		  var doc = node.ownerDocument;

		  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : { //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
		    getPropertyValue: function getPropertyValue(prop) {
		      var style = node.style;

		      prop = (0, _utilCamelizeStyle2['default'])(prop);

		      if (prop == 'float') prop = 'styleFloat';

		      var current = node.currentStyle[prop] || null;

		      if (current == null && style && style[prop]) current = style[prop];

		      if (rnumnonpx.test(current) && !rposition.test(prop)) {
		        // Remember the original values
		        var left = style.left;
		        var runStyle = node.runtimeStyle;
		        var rsLeft = runStyle && runStyle.left;

		        // Put in the new values to get a computed value out
		        if (rsLeft) runStyle.left = node.currentStyle.left;

		        style.left = prop === 'fontSize' ? '1em' : current;
		        current = style.pixelLeft + 'px';

		        // Revert the changed values
		        style.left = left;
		        if (rsLeft) runStyle.left = rsLeft;
		      }

		      return current;
		    }
		  };
		};

	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
		  if (true) {
		    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		  } else if (typeof exports === "object") {
		    factory(exports);
		  } else {
		    factory(root.babelHelpers = {});
		  }
		})(this, function (global) {
		  var babelHelpers = global;

		  babelHelpers.interopRequireDefault = function (obj) {
		    return obj && obj.__esModule ? obj : {
		      "default": obj
		    };
		  };

		  babelHelpers._extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  };
		})

	/***/ },
	/* 93 */
	/***/ function(module, exports) {

		'use strict';

		module.exports = function removeStyle(node, key) {
		  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
		};

	/***/ },
	/* 94 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _domHelpersTransitionProperties = __webpack_require__(95);

		var _domHelpersTransitionProperties2 = _interopRequireDefault(_domHelpersTransitionProperties);

		var _domHelpersEventsOn = __webpack_require__(97);

		var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var transitionEndEvent = _domHelpersTransitionProperties2['default'].end;

		var UNMOUNTED = 0;
		exports.UNMOUNTED = UNMOUNTED;
		var EXITED = 1;
		exports.EXITED = EXITED;
		var ENTERING = 2;
		exports.ENTERING = ENTERING;
		var ENTERED = 3;
		exports.ENTERED = ENTERED;
		var EXITING = 4;

		exports.EXITING = EXITING;
		/**
		 * The Transition component lets you define and run css transitions with a simple declarative api.
		 * It works similar to React's own [CSSTransitionGroup](http://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup)
		 * but is specifically optimized for transitioning a single child "in" or "out".
		 *
		 * You don't even need to use class based css transitions if you don't want to (but it is easiest).
		 * The extensive set of lifecyle callbacks means you have control over
		 * the transitioning now at each step of the way.
		 */

		var Transition = (function (_React$Component) {
		  _inherits(Transition, _React$Component);

		  function Transition(props, context) {
		    _classCallCheck(this, Transition);

		    _React$Component.call(this, props, context);

		    var initialStatus = undefined;
		    if (props['in']) {
		      // Start enter transition in componentDidMount.
		      initialStatus = props.transitionAppear ? EXITED : ENTERED;
		    } else {
		      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
		    }
		    this.state = { status: initialStatus };

		    this.nextCallback = null;
		  }

		  Transition.prototype.componentDidMount = function componentDidMount() {
		    if (this.props.transitionAppear && this.props['in']) {
		      this.performEnter(this.props);
		    }
		  };

		  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		    var status = this.state.status;
		    if (nextProps['in']) {
		      if (status === EXITING) {
		        this.performEnter(nextProps);
		      } else if (this.props.unmountOnExit) {
		        if (status === UNMOUNTED) {
		          // Start enter transition in componentDidUpdate.
		          this.setState({ status: EXITED });
		        }
		      } else if (status === EXITED) {
		        this.performEnter(nextProps);
		      }

		      // Otherwise we're already entering or entered.
		    } else {
		        if (status === ENTERING || status === ENTERED) {
		          this.performExit(nextProps);
		        }

		        // Otherwise we're already exited or exiting.
		      }
		  };

		  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
		    if (this.props.unmountOnExit && this.state.status === EXITED) {
		      // EXITED is always a transitional state to either ENTERING or UNMOUNTED
		      // when using unmountOnExit.
		      if (this.props['in']) {
		        this.performEnter(this.props);
		      } else {
		        this.setState({ status: UNMOUNTED });
		      }
		    }
		  };

		  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
		    this.cancelNextCallback();
		  };

		  Transition.prototype.performEnter = function performEnter(props) {
		    var _this = this;

		    this.cancelNextCallback();
		    var node = _reactDom2['default'].findDOMNode(this);

		    // Not this.props, because we might be about to receive new props.
		    props.onEnter(node);

		    this.safeSetState({ status: ENTERING }, function () {
		      _this.props.onEntering(node);

		      _this.onTransitionEnd(node, function () {
		        _this.safeSetState({ status: ENTERED }, function () {
		          _this.props.onEntered(node);
		        });
		      });
		    });
		  };

		  Transition.prototype.performExit = function performExit(props) {
		    var _this2 = this;

		    this.cancelNextCallback();
		    var node = _reactDom2['default'].findDOMNode(this);

		    // Not this.props, because we might be about to receive new props.
		    props.onExit(node);

		    this.safeSetState({ status: EXITING }, function () {
		      _this2.props.onExiting(node);

		      _this2.onTransitionEnd(node, function () {
		        _this2.safeSetState({ status: EXITED }, function () {
		          _this2.props.onExited(node);
		        });
		      });
		    });
		  };

		  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
		    if (this.nextCallback !== null) {
		      this.nextCallback.cancel();
		      this.nextCallback = null;
		    }
		  };

		  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
		    // This shouldn't be necessary, but there are weird race conditions with
		    // setState callbacks and unmounting in testing, so always make sure that
		    // we can cancel any pending setState callbacks after we unmount.
		    this.setState(nextState, this.setNextCallback(callback));
		  };

		  Transition.prototype.setNextCallback = function setNextCallback(callback) {
		    var _this3 = this;

		    var active = true;

		    this.nextCallback = function (event) {
		      if (active) {
		        active = false;
		        _this3.nextCallback = null;

		        callback(event);
		      }
		    };

		    this.nextCallback.cancel = function () {
		      active = false;
		    };

		    return this.nextCallback;
		  };

		  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
		    this.setNextCallback(handler);

		    if (node) {
		      _domHelpersEventsOn2['default'](node, transitionEndEvent, this.nextCallback);
		      setTimeout(this.nextCallback, this.props.timeout);
		    } else {
		      setTimeout(this.nextCallback, 0);
		    }
		  };

		  Transition.prototype.render = function render() {
		    var status = this.state.status;
		    if (status === UNMOUNTED) {
		      return null;
		    }

		    var _props = this.props;
		    var children = _props.children;
		    var className = _props.className;

		    var childProps = _objectWithoutProperties(_props, ['children', 'className']);

		    Object.keys(Transition.propTypes).forEach(function (key) {
		      return delete childProps[key];
		    });

		    var transitionClassName = undefined;
		    if (status === EXITED) {
		      transitionClassName = this.props.exitedClassName;
		    } else if (status === ENTERING) {
		      transitionClassName = this.props.enteringClassName;
		    } else if (status === ENTERED) {
		      transitionClassName = this.props.enteredClassName;
		    } else if (status === EXITING) {
		      transitionClassName = this.props.exitingClassName;
		    }

		    var child = _react2['default'].Children.only(children);
		    return _react2['default'].cloneElement(child, _extends({}, childProps, {
		      className: _classnames2['default'](child.props.className, className, transitionClassName)
		    }));
		  };

		  return Transition;
		})(_react2['default'].Component);

		Transition.propTypes = {
		  /**
		   * Show the component; triggers the enter or exit animation
		   */
		  'in': _react2['default'].PropTypes.bool,

		  /**
		   * Unmount the component (remove it from the DOM) when it is not shown
		   */
		  unmountOnExit: _react2['default'].PropTypes.bool,

		  /**
		   * Run the enter animation when the component mounts, if it is initially
		   * shown
		   */
		  transitionAppear: _react2['default'].PropTypes.bool,

		  /**
		   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
		   * transition indefinately if the browser transitionEnd events are
		   * canceled or interrupted.
		   *
		   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
		   * setting this to the duration of your animation (or a bit above it).
		   */
		  timeout: _react2['default'].PropTypes.number,

		  /**
		   * CSS class or classes applied when the component is exited
		   */
		  exitedClassName: _react2['default'].PropTypes.string,
		  /**
		   * CSS class or classes applied while the component is exiting
		   */
		  exitingClassName: _react2['default'].PropTypes.string,
		  /**
		   * CSS class or classes applied when the component is entered
		   */
		  enteredClassName: _react2['default'].PropTypes.string,
		  /**
		   * CSS class or classes applied while the component is entering
		   */
		  enteringClassName: _react2['default'].PropTypes.string,

		  /**
		   * Callback fired before the "entering" classes are applied
		   */
		  onEnter: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the "entering" classes are applied
		   */
		  onEntering: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the "enter" classes are applied
		   */
		  onEntered: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired before the "exiting" classes are applied
		   */
		  onExit: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the "exiting" classes are applied
		   */
		  onExiting: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the "exited" classes are applied
		   */
		  onExited: _react2['default'].PropTypes.func
		};

		// Name the function so it is clearer in the documentation
		function noop() {}

		Transition.displayName = 'Transition';

		Transition.defaultProps = {
		  'in': false,
		  unmountOnExit: false,
		  transitionAppear: false,

		  timeout: 5000,

		  onEnter: noop,
		  onEntering: noop,
		  onEntered: noop,

		  onExit: noop,
		  onExiting: noop,
		  onExited: noop
		};

		exports['default'] = Transition;

	/***/ },
	/* 95 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var canUseDOM = __webpack_require__(96);

		var has = Object.prototype.hasOwnProperty,
		    transform = 'transform',
		    transition = {},
		    transitionTiming,
		    transitionDuration,
		    transitionProperty,
		    transitionDelay;

		if (canUseDOM) {
		  transition = getTransitionProperties();

		  transform = transition.prefix + transform;

		  transitionProperty = transition.prefix + 'transition-property';
		  transitionDuration = transition.prefix + 'transition-duration';
		  transitionDelay = transition.prefix + 'transition-delay';
		  transitionTiming = transition.prefix + 'transition-timing-function';
		}

		module.exports = {
		  transform: transform,
		  end: transition.end,
		  property: transitionProperty,
		  timing: transitionTiming,
		  delay: transitionDelay,
		  duration: transitionDuration
		};

		function getTransitionProperties() {
		  var endEvent,
		      prefix = '',
		      transitions = {
		    O: 'otransitionend',
		    Moz: 'transitionend',
		    Webkit: 'webkitTransitionEnd',
		    ms: 'MSTransitionEnd'
		  };

		  var element = document.createElement('div');

		  for (var vendor in transitions) if (has.call(transitions, vendor)) {
		    if (element.style[vendor + 'TransitionProperty'] !== undefined) {
		      prefix = '-' + vendor.toLowerCase() + '-';
		      endEvent = transitions[vendor];
		      break;
		    }
		  }

		  if (!endEvent && element.style.transitionProperty !== undefined) endEvent = 'transitionend';

		  return { end: endEvent, prefix: prefix };
		}

	/***/ },
	/* 96 */
	/***/ function(module, exports) {

		'use strict';
		module.exports = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/***/ },
	/* 97 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var canUseDOM = __webpack_require__(96);
		var on = function on() {};

		if (canUseDOM) {
		  on = (function () {

		    if (document.addEventListener) return function (node, eventName, handler, capture) {
		      return node.addEventListener(eventName, handler, capture || false);
		    };else if (document.attachEvent) return function (node, eventName, handler) {
		      return node.attachEvent('on' + eventName, handler);
		    };
		  })();
		}

		module.exports = on;

	/***/ },
	/* 98 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports['default'] = deprecated;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _warning = __webpack_require__(52);

		var _warning2 = _interopRequireDefault(_warning);

		function deprecated(propType, explanation) {
		  return function validate(props, propName, componentName) {
		    if (props[propName] != null) {
		      _warning2['default'](false, '"' + propName + '" property of "' + componentName + '" has been deprecated.\n' + explanation);
		    }

		    return propType(props, propName, componentName);
		  };
		}

		module.exports = exports['default'];

	/***/ },
	/* 99 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _warning = __webpack_require__(52);

		var _warning2 = _interopRequireDefault(_warning);

		var warned = {};

		function deprecationWarning(oldname, newname, link) {
		  var message = undefined;

		  if (typeof oldname === 'object') {
		    message = oldname.message;
		  } else {
		    message = oldname + ' is deprecated. Use ' + newname + ' instead.';

		    if (link) {
		      message += '\nYou can read more about it at ' + link;
		    }
		  }

		  if (warned[message]) {
		    return;
		  }

		  process.env.NODE_ENV !== 'production' ? _warning2['default'](false, message) : undefined;
		  warned[message] = true;
		}

		deprecationWarning.wrapper = function (Component) {
		  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		    args[_key - 1] = arguments[_key];
		  }

		  return (function (_Component) {
		    _inherits(DeprecatedComponent, _Component);

		    function DeprecatedComponent() {
		      _classCallCheck(this, DeprecatedComponent);

		      _Component.apply(this, arguments);
		    }

		    DeprecatedComponent.prototype.componentWillMount = function componentWillMount() {
		      deprecationWarning.apply(undefined, args);

		      if (_Component.prototype.componentWillMount) {
		        var _Component$prototype$componentWillMount;

		        for (var _len2 = arguments.length, methodArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		          methodArgs[_key2] = arguments[_key2];
		        }

		        (_Component$prototype$componentWillMount = _Component.prototype.componentWillMount).call.apply(_Component$prototype$componentWillMount, [this].concat(methodArgs));
		      }
		    };

		    return DeprecatedComponent;
		  })(Component);
		};

		exports['default'] = deprecationWarning;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

	/***/ },
	/* 100 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _domHelpersActiveElement = __webpack_require__(101);

		var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

		var _domHelpersQueryContains = __webpack_require__(103);

		var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

		var _keycode = __webpack_require__(104);

		var _keycode2 = _interopRequireDefault(_keycode);

		var _lodashCompatCollectionFind = __webpack_require__(105);

		var _lodashCompatCollectionFind2 = _interopRequireDefault(_lodashCompatCollectionFind);

		var _lodashCompatObjectOmit = __webpack_require__(158);

		var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _reactPropTypesLibAll = __webpack_require__(74);

		var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(173);

		var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

		var _uncontrollable = __webpack_require__(174);

		var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _ButtonGroup = __webpack_require__(73);

		var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

		var _DropdownMenu = __webpack_require__(177);

		var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

		var _DropdownToggle = __webpack_require__(183);

		var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsCustomPropTypes = __webpack_require__(184);

		var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var TOGGLE_REF = 'toggle-btn';
		var TOGGLE_ROLE = _DropdownToggle2['default'].defaultProps.bsRole;
		var MENU_ROLE = _DropdownMenu2['default'].defaultProps.bsRole;

		var Dropdown = (function (_React$Component) {
		  _inherits(Dropdown, _React$Component);

		  function Dropdown(props) {
		    _classCallCheck(this, Dropdown);

		    _React$Component.call(this, props);

		    this.Toggle = _DropdownToggle2['default'];

		    this.toggleOpen = this.toggleOpen.bind(this);
		    this.handleClick = this.handleClick.bind(this);
		    this.handleKeyDown = this.handleKeyDown.bind(this);
		    this.handleClose = this.handleClose.bind(this);
		    this.extractChildren = this.extractChildren.bind(this);

		    this.refineMenu = this.refineMenu.bind(this);
		    this.refineToggle = this.refineToggle.bind(this);

		    this.childExtractors = [{
		      key: 'toggle',
		      matches: function matches(child) {
		        return child.props.bsRole === TOGGLE_ROLE;
		      },
		      refine: this.refineToggle
		    }, {
		      key: 'menu',
		      exclusive: true,
		      matches: function matches(child) {
		        return child.props.bsRole === MENU_ROLE;
		      },
		      refine: this.refineMenu
		    }];

		    this.state = {};

		    this.lastOpenEventType = null;
		  }

		  Dropdown.prototype.componentDidMount = function componentDidMount() {
		    this.focusNextOnOpen();
		  };

		  Dropdown.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
		    if (!nextProps.open && this.props.open) {
		      this._focusInDropdown = _domHelpersQueryContains2['default'](_reactDom2['default'].findDOMNode(this.refs.menu), _domHelpersActiveElement2['default'](document));
		    }
		  };

		  Dropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		    if (this.props.open && !prevProps.open) {
		      this.focusNextOnOpen();
		    }

		    if (!this.props.open && prevProps.open) {
		      // if focus hasn't already moved from the menu lets return it
		      // to the toggle
		      if (this._focusInDropdown) {
		        this._focusInDropdown = false;
		        this.focus();
		      }
		    }
		  };

		  Dropdown.prototype.render = function render() {
		    var _rootClasses;

		    var children = this.extractChildren();
		    var Component = this.props.componentClass;

		    var props = _lodashCompatObjectOmit2['default'](this.props, ['id', 'bsClass', 'role']);
		    var className = _utilsBootstrapUtils2['default'].prefix(this.props);

		    var rootClasses = (_rootClasses = {
		      open: this.props.open,
		      disabled: this.props.disabled
		    }, _rootClasses[className] = !this.props.dropup, _rootClasses.dropup = this.props.dropup, _rootClasses);

		    return _react2['default'].createElement(
		      Component,
		      _extends({}, props, {
		        className: _classnames2['default'](this.props.className, rootClasses)
		      }),
		      children
		    );
		  };

		  Dropdown.prototype.toggleOpen = function toggleOpen() {
		    var eventType = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

		    var open = !this.props.open;

		    if (open) {
		      this.lastOpenEventType = eventType;
		    }

		    if (this.props.onToggle) {
		      this.props.onToggle(open);
		    }
		  };

		  Dropdown.prototype.handleClick = function handleClick() {
		    if (this.props.disabled) {
		      return;
		    }

		    this.toggleOpen('click');
		  };

		  Dropdown.prototype.handleKeyDown = function handleKeyDown(event) {
		    if (this.props.disabled) {
		      return;
		    }

		    switch (event.keyCode) {
		      case _keycode2['default'].codes.down:
		        if (!this.props.open) {
		          this.toggleOpen('keydown');
		        } else if (this.refs.menu.focusNext) {
		          this.refs.menu.focusNext();
		        }
		        event.preventDefault();
		        break;
		      case _keycode2['default'].codes.esc:
		      case _keycode2['default'].codes.tab:
		        this.handleClose(event);
		        break;
		      default:
		    }
		  };

		  Dropdown.prototype.handleClose = function handleClose() {
		    if (!this.props.open) {
		      return;
		    }

		    this.toggleOpen();
		  };

		  Dropdown.prototype.focusNextOnOpen = function focusNextOnOpen() {
		    var menu = this.refs.menu;

		    if (!menu.focusNext) {
		      return;
		    }

		    if (this.lastOpenEventType === 'keydown' || this.props.role === 'menuitem') {
		      menu.focusNext();
		    }
		  };

		  Dropdown.prototype.focus = function focus() {
		    var toggle = _reactDom2['default'].findDOMNode(this.refs[TOGGLE_REF]);

		    if (toggle && toggle.focus) {
		      toggle.focus();
		    }
		  };

		  Dropdown.prototype.extractChildren = function extractChildren() {
		    var _this = this;

		    var open = !!this.props.open;
		    var seen = {};

		    return _utilsValidComponentChildren2['default'].map(this.props.children, function (child) {
		      var extractor = _lodashCompatCollectionFind2['default'](_this.childExtractors, function (x) {
		        return x.matches(child);
		      });

		      if (extractor) {
		        if (seen[extractor.key]) {
		          return false;
		        }

		        seen[extractor.key] = extractor.exclusive;
		        child = extractor.refine(child, open);
		      }

		      return child;
		    });
		  };

		  Dropdown.prototype.refineMenu = function refineMenu(menu, open) {
		    var menuProps = {
		      ref: 'menu',
		      open: open,
		      labelledBy: this.props.id,
		      pullRight: this.props.pullRight,
		      bsClass: this.props.bsClass
		    };

		    menuProps.onClose = _utilsCreateChainedFunction2['default'](menu.props.onClose, this.props.onClose, this.handleClose);

		    menuProps.onSelect = _utilsCreateChainedFunction2['default'](menu.props.onSelect, this.props.onSelect, this.handleClose);

		    return _react.cloneElement(menu, menuProps, menu.props.children);
		  };

		  Dropdown.prototype.refineToggle = function refineToggle(toggle, open) {
		    var toggleProps = {
		      open: open,
		      id: this.props.id,
		      ref: TOGGLE_REF,
		      role: this.props.role
		    };

		    toggleProps.onClick = _utilsCreateChainedFunction2['default'](toggle.props.onClick, this.handleClick);

		    toggleProps.onKeyDown = _utilsCreateChainedFunction2['default'](toggle.props.onKeyDown, this.handleKeyDown);

		    return _react.cloneElement(toggle, toggleProps, toggle.props.children);
		  };

		  return Dropdown;
		})(_react2['default'].Component);

		Dropdown.Toggle = _DropdownToggle2['default'];

		Dropdown.TOGGLE_REF = TOGGLE_REF;
		Dropdown.TOGGLE_ROLE = TOGGLE_ROLE;
		Dropdown.MENU_ROLE = MENU_ROLE;

		Dropdown.defaultProps = {
		  componentClass: _ButtonGroup2['default'],
		  bsClass: 'dropdown'
		};

		Dropdown.propTypes = {

		  bsClass: _react2['default'].PropTypes.string,

		  /**
		   * The menu will open above the dropdown button, instead of below it.
		   */
		  dropup: _react2['default'].PropTypes.bool,

		  /**
		   * An html id attribute, necessary for assistive technologies, such as screen readers.
		   * @type {string|number}
		   * @required
		   */
		  id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

		  componentClass: _reactPropTypesLibElementType2['default'],

		  /**
		   * The children of a Dropdown may be a `<Dropdown.Toggle/>` or a `<Dropdown.Menu/>`.
		   * @type {node}
		   */
		  children: _reactPropTypesLibAll2['default'](_utilsCustomPropTypes2['default'].requiredRoles(TOGGLE_ROLE, MENU_ROLE), _utilsCustomPropTypes2['default'].exclusiveRoles(MENU_ROLE)),

		  /**
		   * Whether or not component is disabled.
		   */
		  disabled: _react2['default'].PropTypes.bool,

		  /**
		   * Align the menu to the right side of the Dropdown toggle
		   */
		  pullRight: _react2['default'].PropTypes.bool,

		  /**
		   * Whether or not the Dropdown is visible.
		   *
		   * @controllable onToggle
		   */
		  open: _react2['default'].PropTypes.bool,

		  /**
		   * A callback fired when the Dropdown closes.
		   */
		  onClose: _react2['default'].PropTypes.func,

		  /**
		   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
		   * `open` value.
		   *
		   * ```js
		   * function(Boolean isOpen) {}
		   * ```
		   * @controllable open
		   */
		  onToggle: _react2['default'].PropTypes.func,

		  /**
		   * A callback fired when a menu item is selected.
		   *
		   * ```js
		   * function(Object event, Any eventKey)
		   * ```
		   */
		  onSelect: _react2['default'].PropTypes.func,

		  /**
		   * If `'menuitem'`, causes the dropdown to behave like a menu item rather than
		   * a menu button.
		   */
		  role: _react2['default'].PropTypes.string
		};

		Dropdown = _uncontrollable2['default'](Dropdown, { open: 'onToggle' });

		Dropdown.Toggle = _DropdownToggle2['default'];
		Dropdown.Menu = _DropdownMenu2['default'];

		exports['default'] = Dropdown;
		module.exports = exports['default'];

	/***/ },
	/* 101 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var babelHelpers = __webpack_require__(92);

		exports.__esModule = true;

		/**
		 * document.activeElement
		 */
		exports['default'] = activeElement;

		var _ownerDocument = __webpack_require__(102);

		var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

		function activeElement() {
		  var doc = arguments[0] === undefined ? document : arguments[0];

		  try {
		    return doc.activeElement;
		  } catch (e) {}
		}

		module.exports = exports['default'];

	/***/ },
	/* 102 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;
		exports["default"] = ownerDocument;

		function ownerDocument(node) {
		  return node && node.ownerDocument || document;
		}

		module.exports = exports["default"];

	/***/ },
	/* 103 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var canUseDOM = __webpack_require__(96);

		var contains = (function () {
		  var root = canUseDOM && document.documentElement;

		  return root && root.contains ? function (context, node) {
		    return context.contains(node);
		  } : root && root.compareDocumentPosition ? function (context, node) {
		    return context === node || !!(context.compareDocumentPosition(node) & 16);
		  } : function (context, node) {
		    if (node) do {
		      if (node === context) return true;
		    } while (node = node.parentNode);

		    return false;
		  };
		})();

		module.exports = contains;

	/***/ },
	/* 104 */
	/***/ function(module, exports) {

		// Source: http://jsfiddle.net/vWx8V/
		// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes



		/**
		 * Conenience method returns corresponding value for given keyName or keyCode.
		 *
		 * @param {Mixed} keyCode {Number} or keyName {String}
		 * @return {Mixed}
		 * @api public
		 */

		exports = module.exports = function(searchInput) {
		  // Keyboard Events
		  if (searchInput && 'object' === typeof searchInput) {
		    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
		    if (hasKeyCode) searchInput = hasKeyCode
		  }

		  // Numbers
		  if ('number' === typeof searchInput) return names[searchInput]

		  // Everything else (cast to string)
		  var search = String(searchInput)

		  // check codes
		  var foundNamedKey = codes[search.toLowerCase()]
		  if (foundNamedKey) return foundNamedKey

		  // check aliases
		  var foundNamedKey = aliases[search.toLowerCase()]
		  if (foundNamedKey) return foundNamedKey

		  // weird character?
		  if (search.length === 1) return search.charCodeAt(0)

		  return undefined
		}

		/**
		 * Get by name
		 *
		 *   exports.code['enter'] // => 13
		 */

		var codes = exports.code = exports.codes = {
		  'backspace': 8,
		  'tab': 9,
		  'enter': 13,
		  'shift': 16,
		  'ctrl': 17,
		  'alt': 18,
		  'pause/break': 19,
		  'caps lock': 20,
		  'esc': 27,
		  'space': 32,
		  'page up': 33,
		  'page down': 34,
		  'end': 35,
		  'home': 36,
		  'left': 37,
		  'up': 38,
		  'right': 39,
		  'down': 40,
		  'insert': 45,
		  'delete': 46,
		  'command': 91,
		  'right click': 93,
		  'numpad *': 106,
		  'numpad +': 107,
		  'numpad -': 109,
		  'numpad .': 110,
		  'numpad /': 111,
		  'num lock': 144,
		  'scroll lock': 145,
		  'my computer': 182,
		  'my calculator': 183,
		  ';': 186,
		  '=': 187,
		  ',': 188,
		  '-': 189,
		  '.': 190,
		  '/': 191,
		  '`': 192,
		  '[': 219,
		  '\\': 220,
		  ']': 221,
		  "'": 222,
		}

		// Helper aliases

		var aliases = exports.aliases = {
		  'windows': 91,
		  '⇧': 16,
		  '⌥': 18,
		  '⌃': 17,
		  '⌘': 91,
		  'ctl': 17,
		  'control': 17,
		  'option': 18,
		  'pause': 19,
		  'break': 19,
		  'caps': 20,
		  'return': 13,
		  'escape': 27,
		  'spc': 32,
		  'pgup': 33,
		  'pgdn': 33,
		  'ins': 45,
		  'del': 46,
		  'cmd': 91
		}


		/*!
		 * Programatically add the following
		 */

		// lower case chars
		for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

		// numbers
		for (var i = 48; i < 58; i++) codes[i - 48] = i

		// function keys
		for (i = 1; i < 13; i++) codes['f'+i] = i + 111

		// numpad keys
		for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

		/**
		 * Get by code
		 *
		 *   exports.name[13] // => 'Enter'
		 */

		var names = exports.names = exports.title = {} // title for backward compat

		// Create reverse mapping
		for (i in codes) names[codes[i]] = i

		// Add aliases
		for (var alias in aliases) {
		  codes[alias] = aliases[alias]
		}


	/***/ },
	/* 105 */
	/***/ function(module, exports, __webpack_require__) {

		var baseEach = __webpack_require__(106),
		    createFind = __webpack_require__(131);

		/**
		 * Iterates over elements of `collection`, returning the first element
		 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
		 * invoked with three arguments: (value, index|key, collection).
		 *
		 * If a property name is provided for `predicate` the created `_.property`
		 * style callback returns the property value of the given element.
		 *
		 * If a value is also provided for `thisArg` the created `_.matchesProperty`
		 * style callback returns `true` for elements that have a matching property
		 * value, else `false`.
		 *
		 * If an object is provided for `predicate` the created `_.matches` style
		 * callback returns `true` for elements that have the properties of the given
		 * object, else `false`.
		 *
		 * @static
		 * @memberOf _
		 * @alias detect
		 * @category Collection
		 * @param {Array|Object|string} collection The collection to search.
		 * @param {Function|Object|string} [predicate=_.identity] The function invoked
		 *  per iteration.
		 * @param {*} [thisArg] The `this` binding of `predicate`.
		 * @returns {*} Returns the matched element, else `undefined`.
		 * @example
		 *
		 * var users = [
		 *   { 'user': 'barney',  'age': 36, 'active': true },
		 *   { 'user': 'fred',    'age': 40, 'active': false },
		 *   { 'user': 'pebbles', 'age': 1,  'active': true }
		 * ];
		 *
		 * _.result(_.find(users, function(chr) {
		 *   return chr.age < 40;
		 * }), 'user');
		 * // => 'barney'
		 *
		 * // using the `_.matches` callback shorthand
		 * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
		 * // => 'pebbles'
		 *
		 * // using the `_.matchesProperty` callback shorthand
		 * _.result(_.find(users, 'active', false), 'user');
		 * // => 'fred'
		 *
		 * // using the `_.property` callback shorthand
		 * _.result(_.find(users, 'active'), 'user');
		 * // => 'barney'
		 */
		var find = createFind(baseEach);

		module.exports = find;


	/***/ },
	/* 106 */
	/***/ function(module, exports, __webpack_require__) {

		var baseForOwn = __webpack_require__(107),
		    createBaseEach = __webpack_require__(130);

		/**
		 * The base implementation of `_.forEach` without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array|Object|string} collection The collection to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array|Object|string} Returns `collection`.
		 */
		var baseEach = createBaseEach(baseForOwn);

		module.exports = baseEach;


	/***/ },
	/* 107 */
	/***/ function(module, exports, __webpack_require__) {

		var baseFor = __webpack_require__(108),
		    keys = __webpack_require__(115);

		/**
		 * The base implementation of `_.forOwn` without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 */
		function baseForOwn(object, iteratee) {
		  return baseFor(object, iteratee, keys);
		}

		module.exports = baseForOwn;


	/***/ },
	/* 108 */
	/***/ function(module, exports, __webpack_require__) {

		var createBaseFor = __webpack_require__(109);

		/**
		 * The base implementation of `baseForIn` and `baseForOwn` which iterates
		 * over `object` properties returned by `keysFunc` invoking `iteratee` for
		 * each property. Iteratee functions may exit iteration early by explicitly
		 * returning `false`.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @returns {Object} Returns `object`.
		 */
		var baseFor = createBaseFor();

		module.exports = baseFor;


	/***/ },
	/* 109 */
	/***/ function(module, exports, __webpack_require__) {

		var toObject = __webpack_require__(110);

		/**
		 * Creates a base function for `_.forIn` or `_.forInRight`.
		 *
		 * @private
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseFor(fromRight) {
		  return function(object, iteratee, keysFunc) {
		    var iterable = toObject(object),
		        props = keysFunc(object),
		        length = props.length,
		        index = fromRight ? length : -1;

		    while ((fromRight ? index-- : ++index < length)) {
		      var key = props[index];
		      if (iteratee(iterable[key], key, iterable) === false) {
		        break;
		      }
		    }
		    return object;
		  };
		}

		module.exports = createBaseFor;


	/***/ },
	/* 110 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(111),
		    isString = __webpack_require__(112),
		    support = __webpack_require__(114);

		/**
		 * Converts `value` to an object if it's not one.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {Object} Returns the object.
		 */
		function toObject(value) {
		  if (support.unindexedChars && isString(value)) {
		    var index = -1,
		        length = value.length,
		        result = Object(value);

		    while (++index < length) {
		      result[index] = value.charAt(index);
		    }
		    return result;
		  }
		  return isObject(value) ? value : Object(value);
		}

		module.exports = toObject;


	/***/ },
	/* 111 */
	/***/ function(module, exports) {

		/**
		 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
		 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(1);
		 * // => false
		 */
		function isObject(value) {
		  // Avoid a V8 JIT bug in Chrome 19-20.
		  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
		  var type = typeof value;
		  return !!value && (type == 'object' || type == 'function');
		}

		module.exports = isObject;


	/***/ },
	/* 112 */
	/***/ function(module, exports, __webpack_require__) {

		var isObjectLike = __webpack_require__(113);

		/** `Object#toString` result references. */
		var stringTag = '[object String]';

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/**
		 * Checks if `value` is classified as a `String` primitive or object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isString('abc');
		 * // => true
		 *
		 * _.isString(1);
		 * // => false
		 */
		function isString(value) {
		  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
		}

		module.exports = isString;


	/***/ },
	/* 113 */
	/***/ function(module, exports) {

		/**
		 * Checks if `value` is object-like.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 */
		function isObjectLike(value) {
		  return !!value && typeof value == 'object';
		}

		module.exports = isObjectLike;


	/***/ },
	/* 114 */
	/***/ function(module, exports) {

		/** Used for native method references. */
		var arrayProto = Array.prototype,
		    errorProto = Error.prototype,
		    objectProto = Object.prototype;

		/** Native method references. */
		var propertyIsEnumerable = objectProto.propertyIsEnumerable,
		    splice = arrayProto.splice;

		/**
		 * An object environment feature flags.
		 *
		 * @static
		 * @memberOf _
		 * @type Object
		 */
		var support = {};

		(function(x) {
		  var Ctor = function() { this.x = x; },
		      object = { '0': x, 'length': x },
		      props = [];

		  Ctor.prototype = { 'valueOf': x, 'y': x };
		  for (var key in new Ctor) { props.push(key); }

		  /**
		   * Detect if `name` or `message` properties of `Error.prototype` are
		   * enumerable by default (IE < 9, Safari < 5.1).
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
		    propertyIsEnumerable.call(errorProto, 'name');

		  /**
		   * Detect if `prototype` properties are enumerable by default.
		   *
		   * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
		   * (if the prototype or a property on the prototype has been set)
		   * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
		   * property to `true`.
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');

		  /**
		   * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
		   *
		   * In IE < 9 an object's own properties, shadowing non-enumerable ones,
		   * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.nonEnumShadows = !/valueOf/.test(props);

		  /**
		   * Detect if own properties are iterated after inherited properties (IE < 9).
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.ownLast = props[0] != 'x';

		  /**
		   * Detect if `Array#shift` and `Array#splice` augment array-like objects
		   * correctly.
		   *
		   * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
		   * `shift()` and `splice()` functions that fail to remove the last element,
		   * `value[0]`, of array-like objects even though the "length" property is
		   * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
		   * while `splice()` is buggy regardless of mode in IE < 9.
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.spliceObjects = (splice.call(object, 0, 1), !object[0]);

		  /**
		   * Detect lack of support for accessing string characters by index.
		   *
		   * IE < 8 can't access characters by index. IE 8 can only access characters
		   * by index on string literals, not string objects.
		   *
		   * @memberOf _.support
		   * @type boolean
		   */
		  support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
		}(1, 0));

		module.exports = support;


	/***/ },
	/* 115 */
	/***/ function(module, exports, __webpack_require__) {

		var getNative = __webpack_require__(116),
		    isArrayLike = __webpack_require__(120),
		    isObject = __webpack_require__(111),
		    shimKeys = __webpack_require__(124),
		    support = __webpack_require__(114);

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeKeys = getNative(Object, 'keys');

		/**
		 * Creates an array of the own enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects. See the
		 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
		 * for more details.
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keys(new Foo);
		 * // => ['a', 'b'] (iteration order is not guaranteed)
		 *
		 * _.keys('hi');
		 * // => ['0', '1']
		 */
		var keys = !nativeKeys ? shimKeys : function(object) {
		  var Ctor = object == null ? undefined : object.constructor;
		  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
		      (typeof object == 'function' ? support.enumPrototypes : isArrayLike(object))) {
		    return shimKeys(object);
		  }
		  return isObject(object) ? nativeKeys(object) : [];
		};

		module.exports = keys;


	/***/ },
	/* 116 */
	/***/ function(module, exports, __webpack_require__) {

		var isNative = __webpack_require__(117);

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
		  var value = object == null ? undefined : object[key];
		  return isNative(value) ? value : undefined;
		}

		module.exports = getNative;


	/***/ },
	/* 117 */
	/***/ function(module, exports, __webpack_require__) {

		var isFunction = __webpack_require__(118),
		    isHostObject = __webpack_require__(119),
		    isObjectLike = __webpack_require__(113);

		/** Used to detect host constructors (Safari > 5). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to resolve the decompiled source of functions. */
		var fnToString = Function.prototype.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' +
		  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
		  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		);

		/**
		 * Checks if `value` is a native function.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
		 * @example
		 *
		 * _.isNative(Array.prototype.push);
		 * // => true
		 *
		 * _.isNative(_);
		 * // => false
		 */
		function isNative(value) {
		  if (value == null) {
		    return false;
		  }
		  if (isFunction(value)) {
		    return reIsNative.test(fnToString.call(value));
		  }
		  return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
		}

		module.exports = isNative;


	/***/ },
	/* 118 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(111);

		/** `Object#toString` result references. */
		var funcTag = '[object Function]';

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in older versions of Chrome and Safari which return 'function' for regexes
		  // and Safari 8 which returns 'object' for typed array constructors.
		  return isObject(value) && objToString.call(value) == funcTag;
		}

		module.exports = isFunction;


	/***/ },
	/* 119 */
	/***/ function(module, exports) {

		/**
		 * Checks if `value` is a host object in IE < 9.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
		 */
		var isHostObject = (function() {
		  try {
		    Object({ 'toString': 0 } + '');
		  } catch(e) {
		    return function() { return false; };
		  }
		  return function(value) {
		    // IE < 9 presents many host objects as `Object` objects that can coerce
		    // to strings despite having improperly defined `toString` methods.
		    return typeof value.toString != 'function' && typeof (value + '') == 'string';
		  };
		}());

		module.exports = isHostObject;


	/***/ },
	/* 120 */
	/***/ function(module, exports, __webpack_require__) {

		var getLength = __webpack_require__(121),
		    isLength = __webpack_require__(123);

		/**
		 * Checks if `value` is array-like.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 */
		function isArrayLike(value) {
		  return value != null && isLength(getLength(value));
		}

		module.exports = isArrayLike;


	/***/ },
	/* 121 */
	/***/ function(module, exports, __webpack_require__) {

		var baseProperty = __webpack_require__(122);

		/**
		 * Gets the "length" property value of `object`.
		 *
		 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
		 * that affects Safari on at least iOS 8.1-8.3 ARM64.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {*} Returns the "length" value.
		 */
		var getLength = baseProperty('length');

		module.exports = getLength;


	/***/ },
	/* 122 */
	/***/ function(module, exports, __webpack_require__) {

		var toObject = __webpack_require__(110);

		/**
		 * The base implementation of `_.property` without support for deep paths.
		 *
		 * @private
		 * @param {string} key The key of the property to get.
		 * @returns {Function} Returns the new function.
		 */
		function baseProperty(key) {
		  return function(object) {
		    return object == null ? undefined : toObject(object)[key];
		  };
		}

		module.exports = baseProperty;


	/***/ },
	/* 123 */
	/***/ function(module, exports) {

		/**
		 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
		 * of an array-like value.
		 */
		var MAX_SAFE_INTEGER = 9007199254740991;

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 */
		function isLength(value) {
		  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		module.exports = isLength;


	/***/ },
	/* 124 */
	/***/ function(module, exports, __webpack_require__) {

		var isArguments = __webpack_require__(125),
		    isArray = __webpack_require__(126),
		    isIndex = __webpack_require__(127),
		    isLength = __webpack_require__(123),
		    isString = __webpack_require__(112),
		    keysIn = __webpack_require__(128);

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * A fallback implementation of `Object.keys` which creates an array of the
		 * own enumerable property names of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function shimKeys(object) {
		  var props = keysIn(object),
		      propsLength = props.length,
		      length = propsLength && object.length;

		  var allowIndexes = !!length && isLength(length) &&
		    (isArray(object) || isArguments(object) || isString(object));

		  var index = -1,
		      result = [];

		  while (++index < propsLength) {
		    var key = props[index];
		    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		module.exports = shimKeys;


	/***/ },
	/* 125 */
	/***/ function(module, exports, __webpack_require__) {

		var isArrayLike = __webpack_require__(120),
		    isObjectLike = __webpack_require__(113);

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Native method references. */
		var propertyIsEnumerable = objectProto.propertyIsEnumerable;

		/**
		 * Checks if `value` is classified as an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		function isArguments(value) {
		  return isObjectLike(value) && isArrayLike(value) &&
		    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
		}

		module.exports = isArguments;


	/***/ },
	/* 126 */
	/***/ function(module, exports, __webpack_require__) {

		var getNative = __webpack_require__(116),
		    isLength = __webpack_require__(123),
		    isObjectLike = __webpack_require__(113);

		/** `Object#toString` result references. */
		var arrayTag = '[object Array]';

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeIsArray = getNative(Array, 'isArray');

		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(function() { return arguments; }());
		 * // => false
		 */
		var isArray = nativeIsArray || function(value) {
		  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
		};

		module.exports = isArray;


	/***/ },
	/* 127 */
	/***/ function(module, exports) {

		/** Used to detect unsigned integer values. */
		var reIsUint = /^\d+$/;

		/**
		 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
		 * of an array-like value.
		 */
		var MAX_SAFE_INTEGER = 9007199254740991;

		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
		  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
		  length = length == null ? MAX_SAFE_INTEGER : length;
		  return value > -1 && value % 1 == 0 && value < length;
		}

		module.exports = isIndex;


	/***/ },
	/* 128 */
	/***/ function(module, exports, __webpack_require__) {

		var arrayEach = __webpack_require__(129),
		    isArguments = __webpack_require__(125),
		    isArray = __webpack_require__(126),
		    isFunction = __webpack_require__(118),
		    isIndex = __webpack_require__(127),
		    isLength = __webpack_require__(123),
		    isObject = __webpack_require__(111),
		    isString = __webpack_require__(112),
		    support = __webpack_require__(114);

		/** `Object#toString` result references. */
		var arrayTag = '[object Array]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    numberTag = '[object Number]',
		    objectTag = '[object Object]',
		    regexpTag = '[object RegExp]',
		    stringTag = '[object String]';

		/** Used to fix the JScript `[[DontEnum]]` bug. */
		var shadowProps = [
		  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
		  'toLocaleString', 'toString', 'valueOf'
		];

		/** Used for native method references. */
		var errorProto = Error.prototype,
		    objectProto = Object.prototype,
		    stringProto = String.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/** Used to avoid iterating over non-enumerable properties in IE < 9. */
		var nonEnumProps = {};
		nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
		nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
		nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
		nonEnumProps[objectTag] = { 'constructor': true };

		arrayEach(shadowProps, function(key) {
		  for (var tag in nonEnumProps) {
		    if (hasOwnProperty.call(nonEnumProps, tag)) {
		      var props = nonEnumProps[tag];
		      props[key] = hasOwnProperty.call(props, key);
		    }
		  }
		});

		/**
		 * Creates an array of the own and inherited enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects.
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keysIn(new Foo);
		 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		 */
		function keysIn(object) {
		  if (object == null) {
		    return [];
		  }
		  if (!isObject(object)) {
		    object = Object(object);
		  }
		  var length = object.length;

		  length = (length && isLength(length) &&
		    (isArray(object) || isArguments(object) || isString(object)) && length) || 0;

		  var Ctor = object.constructor,
		      index = -1,
		      proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
		      isProto = proto === object,
		      result = Array(length),
		      skipIndexes = length > 0,
		      skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
		      skipProto = support.enumPrototypes && isFunction(object);

		  while (++index < length) {
		    result[index] = (index + '');
		  }
		  // lodash skips the `constructor` property when it infers it's iterating
		  // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
		  // attribute of an existing property and the `constructor` property of a
		  // prototype defaults to non-enumerable.
		  for (var key in object) {
		    if (!(skipProto && key == 'prototype') &&
		        !(skipErrorProps && (key == 'message' || key == 'name')) &&
		        !(skipIndexes && isIndex(key, length)) &&
		        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		      result.push(key);
		    }
		  }
		  if (support.nonEnumShadows && object !== objectProto) {
		    var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
		        nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];

		    if (tag == objectTag) {
		      proto = objectProto;
		    }
		    length = shadowProps.length;
		    while (length--) {
		      key = shadowProps[length];
		      var nonEnum = nonEnums[key];
		      if (!(isProto && nonEnum) &&
		          (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
		        result.push(key);
		      }
		    }
		  }
		  return result;
		}

		module.exports = keysIn;


	/***/ },
	/* 129 */
	/***/ function(module, exports) {

		/**
		 * A specialized version of `_.forEach` for arrays without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns `array`.
		 */
		function arrayEach(array, iteratee) {
		  var index = -1,
		      length = array.length;

		  while (++index < length) {
		    if (iteratee(array[index], index, array) === false) {
		      break;
		    }
		  }
		  return array;
		}

		module.exports = arrayEach;


	/***/ },
	/* 130 */
	/***/ function(module, exports, __webpack_require__) {

		var getLength = __webpack_require__(121),
		    isLength = __webpack_require__(123),
		    toObject = __webpack_require__(110);

		/**
		 * Creates a `baseEach` or `baseEachRight` function.
		 *
		 * @private
		 * @param {Function} eachFunc The function to iterate over a collection.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseEach(eachFunc, fromRight) {
		  return function(collection, iteratee) {
		    var length = collection ? getLength(collection) : 0;
		    if (!isLength(length)) {
		      return eachFunc(collection, iteratee);
		    }
		    var index = fromRight ? length : -1,
		        iterable = toObject(collection);

		    while ((fromRight ? index-- : ++index < length)) {
		      if (iteratee(iterable[index], index, iterable) === false) {
		        break;
		      }
		    }
		    return collection;
		  };
		}

		module.exports = createBaseEach;


	/***/ },
	/* 131 */
	/***/ function(module, exports, __webpack_require__) {

		var baseCallback = __webpack_require__(132),
		    baseFind = __webpack_require__(156),
		    baseFindIndex = __webpack_require__(157),
		    isArray = __webpack_require__(126);

		/**
		 * Creates a `_.find` or `_.findLast` function.
		 *
		 * @private
		 * @param {Function} eachFunc The function to iterate over a collection.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new find function.
		 */
		function createFind(eachFunc, fromRight) {
		  return function(collection, predicate, thisArg) {
		    predicate = baseCallback(predicate, thisArg, 3);
		    if (isArray(collection)) {
		      var index = baseFindIndex(collection, predicate, fromRight);
		      return index > -1 ? collection[index] : undefined;
		    }
		    return baseFind(collection, predicate, eachFunc);
		  };
		}

		module.exports = createFind;


	/***/ },
	/* 132 */
	/***/ function(module, exports, __webpack_require__) {

		var baseMatches = __webpack_require__(133),
		    baseMatchesProperty = __webpack_require__(145),
		    bindCallback = __webpack_require__(152),
		    identity = __webpack_require__(153),
		    property = __webpack_require__(154);

		/**
		 * The base implementation of `_.callback` which supports specifying the
		 * number of arguments to provide to `func`.
		 *
		 * @private
		 * @param {*} [func=_.identity] The value to convert to a callback.
		 * @param {*} [thisArg] The `this` binding of `func`.
		 * @param {number} [argCount] The number of arguments to provide to `func`.
		 * @returns {Function} Returns the callback.
		 */
		function baseCallback(func, thisArg, argCount) {
		  var type = typeof func;
		  if (type == 'function') {
		    return thisArg === undefined
		      ? func
		      : bindCallback(func, thisArg, argCount);
		  }
		  if (func == null) {
		    return identity;
		  }
		  if (type == 'object') {
		    return baseMatches(func);
		  }
		  return thisArg === undefined
		    ? property(func)
		    : baseMatchesProperty(func, thisArg);
		}

		module.exports = baseCallback;


	/***/ },
	/* 133 */
	/***/ function(module, exports, __webpack_require__) {

		var baseIsMatch = __webpack_require__(134),
		    getMatchData = __webpack_require__(142),
		    toObject = __webpack_require__(110);

		/**
		 * The base implementation of `_.matches` which does not clone `source`.
		 *
		 * @private
		 * @param {Object} source The object of property values to match.
		 * @returns {Function} Returns the new function.
		 */
		function baseMatches(source) {
		  var matchData = getMatchData(source);
		  if (matchData.length == 1 && matchData[0][2]) {
		    var key = matchData[0][0],
		        value = matchData[0][1];

		    return function(object) {
		      if (object == null) {
		        return false;
		      }
		      object = toObject(object);
		      return object[key] === value && (value !== undefined || (key in object));
		    };
		  }
		  return function(object) {
		    return baseIsMatch(object, matchData);
		  };
		}

		module.exports = baseMatches;


	/***/ },
	/* 134 */
	/***/ function(module, exports, __webpack_require__) {

		var baseIsEqual = __webpack_require__(135),
		    toObject = __webpack_require__(110);

		/**
		 * The base implementation of `_.isMatch` without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Object} object The object to inspect.
		 * @param {Array} matchData The propery names, values, and compare flags to match.
		 * @param {Function} [customizer] The function to customize comparing objects.
		 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		 */
		function baseIsMatch(object, matchData, customizer) {
		  var index = matchData.length,
		      length = index,
		      noCustomizer = !customizer;

		  if (object == null) {
		    return !length;
		  }
		  object = toObject(object);
		  while (index--) {
		    var data = matchData[index];
		    if ((noCustomizer && data[2])
		          ? data[1] !== object[data[0]]
		          : !(data[0] in object)
		        ) {
		      return false;
		    }
		  }
		  while (++index < length) {
		    data = matchData[index];
		    var key = data[0],
		        objValue = object[key],
		        srcValue = data[1];

		    if (noCustomizer && data[2]) {
		      if (objValue === undefined && !(key in object)) {
		        return false;
		      }
		    } else {
		      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
		      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
		        return false;
		      }
		    }
		  }
		  return true;
		}

		module.exports = baseIsMatch;


	/***/ },
	/* 135 */
	/***/ function(module, exports, __webpack_require__) {

		var baseIsEqualDeep = __webpack_require__(136),
		    isObject = __webpack_require__(111),
		    isObjectLike = __webpack_require__(113);

		/**
		 * The base implementation of `_.isEqual` without support for `this` binding
		 * `customizer` functions.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @param {Function} [customizer] The function to customize comparing values.
		 * @param {boolean} [isLoose] Specify performing partial comparisons.
		 * @param {Array} [stackA] Tracks traversed `value` objects.
		 * @param {Array} [stackB] Tracks traversed `other` objects.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 */
		function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
		  if (value === other) {
		    return true;
		  }
		  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
		    return value !== value && other !== other;
		  }
		  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
		}

		module.exports = baseIsEqual;


	/***/ },
	/* 136 */
	/***/ function(module, exports, __webpack_require__) {

		var equalArrays = __webpack_require__(137),
		    equalByTag = __webpack_require__(139),
		    equalObjects = __webpack_require__(140),
		    isArray = __webpack_require__(126),
		    isHostObject = __webpack_require__(119),
		    isTypedArray = __webpack_require__(141);

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    objectTag = '[object Object]';

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/**
		 * A specialized version of `baseIsEqual` for arrays and objects which performs
		 * deep comparisons and tracks traversed objects enabling objects with circular
		 * references to be compared.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} [customizer] The function to customize comparing objects.
		 * @param {boolean} [isLoose] Specify performing partial comparisons.
		 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
		 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
		  var objIsArr = isArray(object),
		      othIsArr = isArray(other),
		      objTag = arrayTag,
		      othTag = arrayTag;

		  if (!objIsArr) {
		    objTag = objToString.call(object);
		    if (objTag == argsTag) {
		      objTag = objectTag;
		    } else if (objTag != objectTag) {
		      objIsArr = isTypedArray(object);
		    }
		  }
		  if (!othIsArr) {
		    othTag = objToString.call(other);
		    if (othTag == argsTag) {
		      othTag = objectTag;
		    } else if (othTag != objectTag) {
		      othIsArr = isTypedArray(other);
		    }
		  }
		  var objIsObj = objTag == objectTag && !isHostObject(object),
		      othIsObj = othTag == objectTag && !isHostObject(other),
		      isSameTag = objTag == othTag;

		  if (isSameTag && !(objIsArr || objIsObj)) {
		    return equalByTag(object, other, objTag);
		  }
		  if (!isLoose) {
		    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

		    if (objIsWrapped || othIsWrapped) {
		      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
		    }
		  }
		  if (!isSameTag) {
		    return false;
		  }
		  // Assume cyclic values are equal.
		  // For more information on detecting circular references see https://es5.github.io/#JO.
		  stackA || (stackA = []);
		  stackB || (stackB = []);

		  var length = stackA.length;
		  while (length--) {
		    if (stackA[length] == object) {
		      return stackB[length] == other;
		    }
		  }
		  // Add `object` and `other` to the stack of traversed objects.
		  stackA.push(object);
		  stackB.push(other);

		  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

		  stackA.pop();
		  stackB.pop();

		  return result;
		}

		module.exports = baseIsEqualDeep;


	/***/ },
	/* 137 */
	/***/ function(module, exports, __webpack_require__) {

		var arraySome = __webpack_require__(138);

		/**
		 * A specialized version of `baseIsEqualDeep` for arrays with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Array} array The array to compare.
		 * @param {Array} other The other array to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} [customizer] The function to customize comparing arrays.
		 * @param {boolean} [isLoose] Specify performing partial comparisons.
		 * @param {Array} [stackA] Tracks traversed `value` objects.
		 * @param {Array} [stackB] Tracks traversed `other` objects.
		 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		 */
		function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
		  var index = -1,
		      arrLength = array.length,
		      othLength = other.length;

		  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
		    return false;
		  }
		  // Ignore non-index properties.
		  while (++index < arrLength) {
		    var arrValue = array[index],
		        othValue = other[index],
		        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

		    if (result !== undefined) {
		      if (result) {
		        continue;
		      }
		      return false;
		    }
		    // Recursively compare arrays (susceptible to call stack limits).
		    if (isLoose) {
		      if (!arraySome(other, function(othValue) {
		            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
		          })) {
		        return false;
		      }
		    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
		      return false;
		    }
		  }
		  return true;
		}

		module.exports = equalArrays;


	/***/ },
	/* 138 */
	/***/ function(module, exports) {

		/**
		 * A specialized version of `_.some` for arrays without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {boolean} Returns `true` if any element passes the predicate check,
		 *  else `false`.
		 */
		function arraySome(array, predicate) {
		  var index = -1,
		      length = array.length;

		  while (++index < length) {
		    if (predicate(array[index], index, array)) {
		      return true;
		    }
		  }
		  return false;
		}

		module.exports = arraySome;


	/***/ },
	/* 139 */
	/***/ function(module, exports) {

		/** `Object#toString` result references. */
		var boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    numberTag = '[object Number]',
		    regexpTag = '[object RegExp]',
		    stringTag = '[object String]';

		/**
		 * A specialized version of `baseIsEqualDeep` for comparing objects of
		 * the same `toStringTag`.
		 *
		 * **Note:** This function only supports comparing values with tags of
		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {string} tag The `toStringTag` of the objects to compare.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalByTag(object, other, tag) {
		  switch (tag) {
		    case boolTag:
		    case dateTag:
		      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
		      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
		      return +object == +other;

		    case errorTag:
		      return object.name == other.name && object.message == other.message;

		    case numberTag:
		      // Treat `NaN` vs. `NaN` as equal.
		      return (object != +object)
		        ? other != +other
		        : object == +other;

		    case regexpTag:
		    case stringTag:
		      // Coerce regexes to strings and treat strings primitives and string
		      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
		      return object == (other + '');
		  }
		  return false;
		}

		module.exports = equalByTag;


	/***/ },
	/* 140 */
	/***/ function(module, exports, __webpack_require__) {

		var keys = __webpack_require__(115);

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * A specialized version of `baseIsEqualDeep` for objects with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} [customizer] The function to customize comparing values.
		 * @param {boolean} [isLoose] Specify performing partial comparisons.
		 * @param {Array} [stackA] Tracks traversed `value` objects.
		 * @param {Array} [stackB] Tracks traversed `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
		  var objProps = keys(object),
		      objLength = objProps.length,
		      othProps = keys(other),
		      othLength = othProps.length;

		  if (objLength != othLength && !isLoose) {
		    return false;
		  }
		  var index = objLength;
		  while (index--) {
		    var key = objProps[index];
		    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
		      return false;
		    }
		  }
		  var skipCtor = isLoose;
		  while (++index < objLength) {
		    key = objProps[index];
		    var objValue = object[key],
		        othValue = other[key],
		        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

		    // Recursively compare objects (susceptible to call stack limits).
		    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
		      return false;
		    }
		    skipCtor || (skipCtor = key == 'constructor');
		  }
		  if (!skipCtor) {
		    var objCtor = object.constructor,
		        othCtor = other.constructor;

		    // Non `Object` object instances with different constructors are not equal.
		    if (objCtor != othCtor &&
		        ('constructor' in object && 'constructor' in other) &&
		        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
		          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		      return false;
		    }
		  }
		  return true;
		}

		module.exports = equalObjects;


	/***/ },
	/* 141 */
	/***/ function(module, exports, __webpack_require__) {

		var isLength = __webpack_require__(123),
		    isObjectLike = __webpack_require__(113);

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    objectTag = '[object Object]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    weakMapTag = '[object WeakMap]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		typedArrayTags[dateTag] = typedArrayTags[errorTag] =
		typedArrayTags[funcTag] = typedArrayTags[mapTag] =
		typedArrayTags[numberTag] = typedArrayTags[objectTag] =
		typedArrayTags[regexpTag] = typedArrayTags[setTag] =
		typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

		/** Used for native method references. */
		var objectProto = Object.prototype;

		/**
		 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objToString = objectProto.toString;

		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		function isTypedArray(value) {
		  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
		}

		module.exports = isTypedArray;


	/***/ },
	/* 142 */
	/***/ function(module, exports, __webpack_require__) {

		var isStrictComparable = __webpack_require__(143),
		    pairs = __webpack_require__(144);

		/**
		 * Gets the propery names, values, and compare flags of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the match data of `object`.
		 */
		function getMatchData(object) {
		  var result = pairs(object),
		      length = result.length;

		  while (length--) {
		    result[length][2] = isStrictComparable(result[length][1]);
		  }
		  return result;
		}

		module.exports = getMatchData;


	/***/ },
	/* 143 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(111);

		/**
		 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` if suitable for strict
		 *  equality comparisons, else `false`.
		 */
		function isStrictComparable(value) {
		  return value === value && !isObject(value);
		}

		module.exports = isStrictComparable;


	/***/ },
	/* 144 */
	/***/ function(module, exports, __webpack_require__) {

		var keys = __webpack_require__(115),
		    toObject = __webpack_require__(110);

		/**
		 * Creates a two dimensional array of the key-value pairs for `object`,
		 * e.g. `[[key1, value1], [key2, value2]]`.
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the new array of key-value pairs.
		 * @example
		 *
		 * _.pairs({ 'barney': 36, 'fred': 40 });
		 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
		 */
		function pairs(object) {
		  object = toObject(object);

		  var index = -1,
		      props = keys(object),
		      length = props.length,
		      result = Array(length);

		  while (++index < length) {
		    var key = props[index];
		    result[index] = [key, object[key]];
		  }
		  return result;
		}

		module.exports = pairs;


	/***/ },
	/* 145 */
	/***/ function(module, exports, __webpack_require__) {

		var baseGet = __webpack_require__(146),
		    baseIsEqual = __webpack_require__(135),
		    baseSlice = __webpack_require__(147),
		    isArray = __webpack_require__(126),
		    isKey = __webpack_require__(148),
		    isStrictComparable = __webpack_require__(143),
		    last = __webpack_require__(149),
		    toObject = __webpack_require__(110),
		    toPath = __webpack_require__(150);

		/**
		 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
		 *
		 * @private
		 * @param {string} path The path of the property to get.
		 * @param {*} srcValue The value to compare.
		 * @returns {Function} Returns the new function.
		 */
		function baseMatchesProperty(path, srcValue) {
		  var isArr = isArray(path),
		      isCommon = isKey(path) && isStrictComparable(srcValue),
		      pathKey = (path + '');

		  path = toPath(path);
		  return function(object) {
		    if (object == null) {
		      return false;
		    }
		    var key = pathKey;
		    object = toObject(object);
		    if ((isArr || !isCommon) && !(key in object)) {
		      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
		      if (object == null) {
		        return false;
		      }
		      key = last(path);
		      object = toObject(object);
		    }
		    return object[key] === srcValue
		      ? (srcValue !== undefined || (key in object))
		      : baseIsEqual(srcValue, object[key], undefined, true);
		  };
		}

		module.exports = baseMatchesProperty;


	/***/ },
	/* 146 */
	/***/ function(module, exports, __webpack_require__) {

		var toObject = __webpack_require__(110);

		/**
		 * The base implementation of `get` without support for string paths
		 * and default values.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array} path The path of the property to get.
		 * @param {string} [pathKey] The key representation of path.
		 * @returns {*} Returns the resolved value.
		 */
		function baseGet(object, path, pathKey) {
		  if (object == null) {
		    return;
		  }
		  object = toObject(object);
		  if (pathKey !== undefined && pathKey in object) {
		    path = [pathKey];
		  }
		  var index = 0,
		      length = path.length;

		  while (object != null && index < length) {
		    object = toObject(object)[path[index++]];
		  }
		  return (index && index == length) ? object : undefined;
		}

		module.exports = baseGet;


	/***/ },
	/* 147 */
	/***/ function(module, exports) {

		/**
		 * The base implementation of `_.slice` without an iteratee call guard.
		 *
		 * @private
		 * @param {Array} array The array to slice.
		 * @param {number} [start=0] The start position.
		 * @param {number} [end=array.length] The end position.
		 * @returns {Array} Returns the slice of `array`.
		 */
		function baseSlice(array, start, end) {
		  var index = -1,
		      length = array.length;

		  start = start == null ? 0 : (+start || 0);
		  if (start < 0) {
		    start = -start > length ? 0 : (length + start);
		  }
		  end = (end === undefined || end > length) ? length : (+end || 0);
		  if (end < 0) {
		    end += length;
		  }
		  length = start > end ? 0 : ((end - start) >>> 0);
		  start >>>= 0;

		  var result = Array(length);
		  while (++index < length) {
		    result[index] = array[index + start];
		  }
		  return result;
		}

		module.exports = baseSlice;


	/***/ },
	/* 148 */
	/***/ function(module, exports, __webpack_require__) {

		var isArray = __webpack_require__(126),
		    toObject = __webpack_require__(110);

		/** Used to match property names within property paths. */
		var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
		    reIsPlainProp = /^\w*$/;

		/**
		 * Checks if `value` is a property name and not a property path.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {Object} [object] The object to query keys on.
		 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		 */
		function isKey(value, object) {
		  var type = typeof value;
		  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
		    return true;
		  }
		  if (isArray(value)) {
		    return false;
		  }
		  var result = !reIsDeepProp.test(value);
		  return result || (object != null && value in toObject(object));
		}

		module.exports = isKey;


	/***/ },
	/* 149 */
	/***/ function(module, exports) {

		/**
		 * Gets the last element of `array`.
		 *
		 * @static
		 * @memberOf _
		 * @category Array
		 * @param {Array} array The array to query.
		 * @returns {*} Returns the last element of `array`.
		 * @example
		 *
		 * _.last([1, 2, 3]);
		 * // => 3
		 */
		function last(array) {
		  var length = array ? array.length : 0;
		  return length ? array[length - 1] : undefined;
		}

		module.exports = last;


	/***/ },
	/* 150 */
	/***/ function(module, exports, __webpack_require__) {

		var baseToString = __webpack_require__(151),
		    isArray = __webpack_require__(126);

		/** Used to match property names within property paths. */
		var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

		/** Used to match backslashes in property paths. */
		var reEscapeChar = /\\(\\)?/g;

		/**
		 * Converts `value` to property path array if it's not one.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {Array} Returns the property path array.
		 */
		function toPath(value) {
		  if (isArray(value)) {
		    return value;
		  }
		  var result = [];
		  baseToString(value).replace(rePropName, function(match, number, quote, string) {
		    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
		  });
		  return result;
		}

		module.exports = toPath;


	/***/ },
	/* 151 */
	/***/ function(module, exports) {

		/**
		 * Converts `value` to a string if it's not one. An empty string is returned
		 * for `null` or `undefined` values.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {string} Returns the string.
		 */
		function baseToString(value) {
		  return value == null ? '' : (value + '');
		}

		module.exports = baseToString;


	/***/ },
	/* 152 */
	/***/ function(module, exports, __webpack_require__) {

		var identity = __webpack_require__(153);

		/**
		 * A specialized version of `baseCallback` which only supports `this` binding
		 * and specifying the number of arguments to provide to `func`.
		 *
		 * @private
		 * @param {Function} func The function to bind.
		 * @param {*} thisArg The `this` binding of `func`.
		 * @param {number} [argCount] The number of arguments to provide to `func`.
		 * @returns {Function} Returns the callback.
		 */
		function bindCallback(func, thisArg, argCount) {
		  if (typeof func != 'function') {
		    return identity;
		  }
		  if (thisArg === undefined) {
		    return func;
		  }
		  switch (argCount) {
		    case 1: return function(value) {
		      return func.call(thisArg, value);
		    };
		    case 3: return function(value, index, collection) {
		      return func.call(thisArg, value, index, collection);
		    };
		    case 4: return function(accumulator, value, index, collection) {
		      return func.call(thisArg, accumulator, value, index, collection);
		    };
		    case 5: return function(value, other, key, object, source) {
		      return func.call(thisArg, value, other, key, object, source);
		    };
		  }
		  return function() {
		    return func.apply(thisArg, arguments);
		  };
		}

		module.exports = bindCallback;


	/***/ },
	/* 153 */
	/***/ function(module, exports) {

		/**
		 * This method returns the first argument provided to it.
		 *
		 * @static
		 * @memberOf _
		 * @category Utility
		 * @param {*} value Any value.
		 * @returns {*} Returns `value`.
		 * @example
		 *
		 * var object = { 'user': 'fred' };
		 *
		 * _.identity(object) === object;
		 * // => true
		 */
		function identity(value) {
		  return value;
		}

		module.exports = identity;


	/***/ },
	/* 154 */
	/***/ function(module, exports, __webpack_require__) {

		var baseProperty = __webpack_require__(122),
		    basePropertyDeep = __webpack_require__(155),
		    isKey = __webpack_require__(148);

		/**
		 * Creates a function that returns the property value at `path` on a
		 * given object.
		 *
		 * @static
		 * @memberOf _
		 * @category Utility
		 * @param {Array|string} path The path of the property to get.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var objects = [
		 *   { 'a': { 'b': { 'c': 2 } } },
		 *   { 'a': { 'b': { 'c': 1 } } }
		 * ];
		 *
		 * _.map(objects, _.property('a.b.c'));
		 * // => [2, 1]
		 *
		 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
		 * // => [1, 2]
		 */
		function property(path) {
		  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
		}

		module.exports = property;


	/***/ },
	/* 155 */
	/***/ function(module, exports, __webpack_require__) {

		var baseGet = __webpack_require__(146),
		    toPath = __webpack_require__(150);

		/**
		 * A specialized version of `baseProperty` which supports deep paths.
		 *
		 * @private
		 * @param {Array|string} path The path of the property to get.
		 * @returns {Function} Returns the new function.
		 */
		function basePropertyDeep(path) {
		  var pathKey = (path + '');
		  path = toPath(path);
		  return function(object) {
		    return baseGet(object, path, pathKey);
		  };
		}

		module.exports = basePropertyDeep;


	/***/ },
	/* 156 */
	/***/ function(module, exports) {

		/**
		 * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
		 * without support for callback shorthands and `this` binding, which iterates
		 * over `collection` using the provided `eachFunc`.
		 *
		 * @private
		 * @param {Array|Object|string} collection The collection to search.
		 * @param {Function} predicate The function invoked per iteration.
		 * @param {Function} eachFunc The function to iterate over `collection`.
		 * @param {boolean} [retKey] Specify returning the key of the found element
		 *  instead of the element itself.
		 * @returns {*} Returns the found element or its key, else `undefined`.
		 */
		function baseFind(collection, predicate, eachFunc, retKey) {
		  var result;
		  eachFunc(collection, function(value, key, collection) {
		    if (predicate(value, key, collection)) {
		      result = retKey ? key : value;
		      return false;
		    }
		  });
		  return result;
		}

		module.exports = baseFind;


	/***/ },
	/* 157 */
	/***/ function(module, exports) {

		/**
		 * The base implementation of `_.findIndex` and `_.findLastIndex` without
		 * support for callback shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array} array The array to search.
		 * @param {Function} predicate The function invoked per iteration.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function baseFindIndex(array, predicate, fromRight) {
		  var length = array.length,
		      index = fromRight ? length : -1;

		  while ((fromRight ? index-- : ++index < length)) {
		    if (predicate(array[index], index, array)) {
		      return index;
		    }
		  }
		  return -1;
		}

		module.exports = baseFindIndex;


	/***/ },
	/* 158 */
	/***/ function(module, exports, __webpack_require__) {

		var arrayMap = __webpack_require__(159),
		    baseDifference = __webpack_require__(160),
		    baseFlatten = __webpack_require__(167),
		    bindCallback = __webpack_require__(152),
		    keysIn = __webpack_require__(128),
		    pickByArray = __webpack_require__(169),
		    pickByCallback = __webpack_require__(170),
		    restParam = __webpack_require__(172);

		/**
		 * The opposite of `_.pick`; this method creates an object composed of the
		 * own and inherited enumerable properties of `object` that are not omitted.
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {Function|...(string|string[])} [predicate] The function invoked per
		 *  iteration or property names to omit, specified as individual property
		 *  names or arrays of property names.
		 * @param {*} [thisArg] The `this` binding of `predicate`.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'user': 'fred', 'age': 40 };
		 *
		 * _.omit(object, 'age');
		 * // => { 'user': 'fred' }
		 *
		 * _.omit(object, _.isNumber);
		 * // => { 'user': 'fred' }
		 */
		var omit = restParam(function(object, props) {
		  if (object == null) {
		    return {};
		  }
		  if (typeof props[0] != 'function') {
		    var props = arrayMap(baseFlatten(props), String);
		    return pickByArray(object, baseDifference(keysIn(object), props));
		  }
		  var predicate = bindCallback(props[0], props[1], 3);
		  return pickByCallback(object, function(value, key, object) {
		    return !predicate(value, key, object);
		  });
		});

		module.exports = omit;


	/***/ },
	/* 159 */
	/***/ function(module, exports) {

		/**
		 * A specialized version of `_.map` for arrays without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the new mapped array.
		 */
		function arrayMap(array, iteratee) {
		  var index = -1,
		      length = array.length,
		      result = Array(length);

		  while (++index < length) {
		    result[index] = iteratee(array[index], index, array);
		  }
		  return result;
		}

		module.exports = arrayMap;


	/***/ },
	/* 160 */
	/***/ function(module, exports, __webpack_require__) {

		var baseIndexOf = __webpack_require__(161),
		    cacheIndexOf = __webpack_require__(163),
		    createCache = __webpack_require__(164);

		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;

		/**
		 * The base implementation of `_.difference` which accepts a single array
		 * of values to exclude.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {Array} values The values to exclude.
		 * @returns {Array} Returns the new array of filtered values.
		 */
		function baseDifference(array, values) {
		  var length = array ? array.length : 0,
		      result = [];

		  if (!length) {
		    return result;
		  }
		  var index = -1,
		      indexOf = baseIndexOf,
		      isCommon = true,
		      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
		      valuesLength = values.length;

		  if (cache) {
		    indexOf = cacheIndexOf;
		    isCommon = false;
		    values = cache;
		  }
		  outer:
		  while (++index < length) {
		    var value = array[index];

		    if (isCommon && value === value) {
		      var valuesIndex = valuesLength;
		      while (valuesIndex--) {
		        if (values[valuesIndex] === value) {
		          continue outer;
		        }
		      }
		      result.push(value);
		    }
		    else if (indexOf(values, value, 0) < 0) {
		      result.push(value);
		    }
		  }
		  return result;
		}

		module.exports = baseDifference;


	/***/ },
	/* 161 */
	/***/ function(module, exports, __webpack_require__) {

		var indexOfNaN = __webpack_require__(162);

		/**
		 * The base implementation of `_.indexOf` without support for binary searches.
		 *
		 * @private
		 * @param {Array} array The array to search.
		 * @param {*} value The value to search for.
		 * @param {number} fromIndex The index to search from.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function baseIndexOf(array, value, fromIndex) {
		  if (value !== value) {
		    return indexOfNaN(array, fromIndex);
		  }
		  var index = fromIndex - 1,
		      length = array.length;

		  while (++index < length) {
		    if (array[index] === value) {
		      return index;
		    }
		  }
		  return -1;
		}

		module.exports = baseIndexOf;


	/***/ },
	/* 162 */
	/***/ function(module, exports) {

		/**
		 * Gets the index at which the first occurrence of `NaN` is found in `array`.
		 *
		 * @private
		 * @param {Array} array The array to search.
		 * @param {number} fromIndex The index to search from.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
		 */
		function indexOfNaN(array, fromIndex, fromRight) {
		  var length = array.length,
		      index = fromIndex + (fromRight ? 0 : -1);

		  while ((fromRight ? index-- : ++index < length)) {
		    var other = array[index];
		    if (other !== other) {
		      return index;
		    }
		  }
		  return -1;
		}

		module.exports = indexOfNaN;


	/***/ },
	/* 163 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(111);

		/**
		 * Checks if `value` is in `cache` mimicking the return signature of
		 * `_.indexOf` by returning `0` if the value is found, else `-1`.
		 *
		 * @private
		 * @param {Object} cache The cache to search.
		 * @param {*} value The value to search for.
		 * @returns {number} Returns `0` if `value` is found, else `-1`.
		 */
		function cacheIndexOf(cache, value) {
		  var data = cache.data,
		      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

		  return result ? 0 : -1;
		}

		module.exports = cacheIndexOf;


	/***/ },
	/* 164 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var SetCache = __webpack_require__(165),
		    getNative = __webpack_require__(116);

		/** Native method references. */
		var Set = getNative(global, 'Set');

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeCreate = getNative(Object, 'create');

		/**
		 * Creates a `Set` cache object to optimize linear searches of large arrays.
		 *
		 * @private
		 * @param {Array} [values] The values to cache.
		 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
		 */
		function createCache(values) {
		  return (nativeCreate && Set) ? new SetCache(values) : null;
		}

		module.exports = createCache;

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 165 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {var cachePush = __webpack_require__(166),
		    getNative = __webpack_require__(116);

		/** Native method references. */
		var Set = getNative(global, 'Set');

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeCreate = getNative(Object, 'create');

		/**
		 *
		 * Creates a cache object to store unique values.
		 *
		 * @private
		 * @param {Array} [values] The values to cache.
		 */
		function SetCache(values) {
		  var length = values ? values.length : 0;

		  this.data = { 'hash': nativeCreate(null), 'set': new Set };
		  while (length--) {
		    this.push(values[length]);
		  }
		}

		// Add functions to the `Set` cache.
		SetCache.prototype.push = cachePush;

		module.exports = SetCache;

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 166 */
	/***/ function(module, exports, __webpack_require__) {

		var isObject = __webpack_require__(111);

		/**
		 * Adds `value` to the cache.
		 *
		 * @private
		 * @name push
		 * @memberOf SetCache
		 * @param {*} value The value to cache.
		 */
		function cachePush(value) {
		  var data = this.data;
		  if (typeof value == 'string' || isObject(value)) {
		    data.set.add(value);
		  } else {
		    data.hash[value] = true;
		  }
		}

		module.exports = cachePush;


	/***/ },
	/* 167 */
	/***/ function(module, exports, __webpack_require__) {

		var arrayPush = __webpack_require__(168),
		    isArguments = __webpack_require__(125),
		    isArray = __webpack_require__(126),
		    isArrayLike = __webpack_require__(120),
		    isObjectLike = __webpack_require__(113);

		/**
		 * The base implementation of `_.flatten` with added support for restricting
		 * flattening and specifying the start index.
		 *
		 * @private
		 * @param {Array} array The array to flatten.
		 * @param {boolean} [isDeep] Specify a deep flatten.
		 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
		 * @param {Array} [result=[]] The initial result value.
		 * @returns {Array} Returns the new flattened array.
		 */
		function baseFlatten(array, isDeep, isStrict, result) {
		  result || (result = []);

		  var index = -1,
		      length = array.length;

		  while (++index < length) {
		    var value = array[index];
		    if (isObjectLike(value) && isArrayLike(value) &&
		        (isStrict || isArray(value) || isArguments(value))) {
		      if (isDeep) {
		        // Recursively flatten arrays (susceptible to call stack limits).
		        baseFlatten(value, isDeep, isStrict, result);
		      } else {
		        arrayPush(result, value);
		      }
		    } else if (!isStrict) {
		      result[result.length] = value;
		    }
		  }
		  return result;
		}

		module.exports = baseFlatten;


	/***/ },
	/* 168 */
	/***/ function(module, exports) {

		/**
		 * Appends the elements of `values` to `array`.
		 *
		 * @private
		 * @param {Array} array The array to modify.
		 * @param {Array} values The values to append.
		 * @returns {Array} Returns `array`.
		 */
		function arrayPush(array, values) {
		  var index = -1,
		      length = values.length,
		      offset = array.length;

		  while (++index < length) {
		    array[offset + index] = values[index];
		  }
		  return array;
		}

		module.exports = arrayPush;


	/***/ },
	/* 169 */
	/***/ function(module, exports, __webpack_require__) {

		var toObject = __webpack_require__(110);

		/**
		 * A specialized version of `_.pick` which picks `object` properties specified
		 * by `props`.
		 *
		 * @private
		 * @param {Object} object The source object.
		 * @param {string[]} props The property names to pick.
		 * @returns {Object} Returns the new object.
		 */
		function pickByArray(object, props) {
		  object = toObject(object);

		  var index = -1,
		      length = props.length,
		      result = {};

		  while (++index < length) {
		    var key = props[index];
		    if (key in object) {
		      result[key] = object[key];
		    }
		  }
		  return result;
		}

		module.exports = pickByArray;


	/***/ },
	/* 170 */
	/***/ function(module, exports, __webpack_require__) {

		var baseForIn = __webpack_require__(171);

		/**
		 * A specialized version of `_.pick` which picks `object` properties `predicate`
		 * returns truthy for.
		 *
		 * @private
		 * @param {Object} object The source object.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {Object} Returns the new object.
		 */
		function pickByCallback(object, predicate) {
		  var result = {};
		  baseForIn(object, function(value, key, object) {
		    if (predicate(value, key, object)) {
		      result[key] = value;
		    }
		  });
		  return result;
		}

		module.exports = pickByCallback;


	/***/ },
	/* 171 */
	/***/ function(module, exports, __webpack_require__) {

		var baseFor = __webpack_require__(108),
		    keysIn = __webpack_require__(128);

		/**
		 * The base implementation of `_.forIn` without support for callback
		 * shorthands and `this` binding.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 */
		function baseForIn(object, iteratee) {
		  return baseFor(object, iteratee, keysIn);
		}

		module.exports = baseForIn;


	/***/ },
	/* 172 */
	/***/ function(module, exports) {

		/** Used as the `TypeError` message for "Functions" methods. */
		var FUNC_ERROR_TEXT = 'Expected a function';

		/* Native method references for those with the same name as other `lodash` methods. */
		var nativeMax = Math.max;

		/**
		 * Creates a function that invokes `func` with the `this` binding of the
		 * created function and arguments from `start` and beyond provided as an array.
		 *
		 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
		 *
		 * @static
		 * @memberOf _
		 * @category Function
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @returns {Function} Returns the new function.
		 * @example
		 *
		 * var say = _.restParam(function(what, names) {
		 *   return what + ' ' + _.initial(names).join(', ') +
		 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
		 * });
		 *
		 * say('hello', 'fred', 'barney', 'pebbles');
		 * // => 'hello fred, barney, & pebbles'
		 */
		function restParam(func, start) {
		  if (typeof func != 'function') {
		    throw new TypeError(FUNC_ERROR_TEXT);
		  }
		  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
		  return function() {
		    var args = arguments,
		        index = -1,
		        length = nativeMax(args.length - start, 0),
		        rest = Array(length);

		    while (++index < length) {
		      rest[index] = args[start + index];
		    }
		    switch (start) {
		      case 0: return func.call(this, rest);
		      case 1: return func.call(this, args[0], rest);
		      case 2: return func.call(this, args[0], args[1], rest);
		    }
		    var otherArgs = Array(start + 1);
		    index = -1;
		    while (++index < start) {
		      otherArgs[index] = args[index];
		    }
		    otherArgs[start] = rest;
		    return func.apply(this, otherArgs);
		  };
		}

		module.exports = restParam;


	/***/ },
	/* 173 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;
		exports["default"] = isRequiredForA11y;

		function isRequiredForA11y(propType) {
		  return function validate(props, propName, componentName) {
		    if (props[propName] == null) {
		      return new Error("The prop '" + propName + "' is required to make '" + componentName + "' accessible" + " for users using assistive technologies such as screen readers");
		    }

		    return propType(props, propName, componentName);
		  };
		}

		module.exports = exports["default"];

	/***/ },
	/* 174 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _createUncontrollable = __webpack_require__(175);

		var _createUncontrollable2 = _interopRequireDefault(_createUncontrollable);

		var mixin = {
		  shouldComponentUpdate: function shouldComponentUpdate() {
		    //let the forceUpdate trigger the update
		    return !this._notifying;
		  }
		};

		function set(component, propName, handler, value, args) {
		  if (handler) {
		    component._notifying = true;
		    handler.call.apply(handler, [component, value].concat(args));
		    component._notifying = false;
		  }

		  component._values[propName] = value;

		  if (component.isMounted()) component.forceUpdate();
		}

		exports['default'] = _createUncontrollable2['default']([mixin], set);
		module.exports = exports['default'];

	/***/ },
	/* 175 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		exports['default'] = createUncontrollable;

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(176);

		var utils = _interopRequireWildcard(_utils);

		function createUncontrollable(mixins, set) {

		  return uncontrollable;

		  function uncontrollable(Component, controlledValues) {
		    var methods = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

		    var displayName = Component.displayName || Component.name || 'Component',
		        basePropTypes = utils.getType(Component).propTypes,
		        propTypes;

		    propTypes = utils.uncontrolledPropTypes(controlledValues, basePropTypes, displayName);

		    methods = utils.transform(methods, function (obj, method) {
		      obj[method] = function () {
		        var _refs$inner;

		        return (_refs$inner = this.refs.inner)[method].apply(_refs$inner, arguments);
		      };
		    }, {});

		    var component = _react2['default'].createClass(_extends({

		      displayName: 'Uncontrolled(' + displayName + ')',

		      mixins: mixins,

		      propTypes: propTypes

		    }, methods, {

		      componentWillMount: function componentWillMount() {
		        var props = this.props,
		            keys = Object.keys(controlledValues);

		        this._values = utils.transform(keys, function (values, key) {
		          values[key] = props[utils.defaultKey(key)];
		        }, {});
		      },

		      /**
		       * If a prop switches from controlled to Uncontrolled
		       * reset its value to the defaultValue
		       */
		      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		        var _this = this;

		        var props = this.props,
		            keys = Object.keys(controlledValues);

		        keys.forEach(function (key) {
		          if (utils.getValue(nextProps, key) === undefined && utils.getValue(props, key) !== undefined) {
		            _this._values[key] = nextProps[utils.defaultKey(key)];
		          }
		        });
		      },

		      render: function render() {
		        var _this2 = this;

		        var newProps = {};
		        var _props = this.props;
		        var valueLink = _props.valueLink;
		        var checkedLink = _props.checkedLink;

		        var props = _objectWithoutProperties(_props, ['valueLink', 'checkedLink']);

		        utils.each(controlledValues, function (handle, propName) {
		          var linkPropName = utils.getLinkName(propName),
		              prop = _this2.props[propName];

		          if (linkPropName && !isProp(_this2.props, propName) && isProp(_this2.props, linkPropName)) {
		            prop = _this2.props[linkPropName].value;
		          }

		          newProps[propName] = prop !== undefined ? prop : _this2._values[propName];

		          newProps[handle] = setAndNotify.bind(_this2, propName);
		        });

		        newProps = _extends({}, props, newProps, { ref: 'inner' });

		        return _react2['default'].createElement(Component, newProps);
		      }

		    }));

		    component.ControlledComponent = Component;

		    /**
		     * useful when wrapping a Component and you want to control
		     * everything
		     */
		    component.deferControlTo = function (newComponent, additions, nextMethods) {
		      if (additions === undefined) additions = {};

		      return uncontrollable(newComponent, _extends({}, controlledValues, additions), nextMethods);
		    };

		    return component;

		    function setAndNotify(propName, value) {
		      var linkName = utils.getLinkName(propName),
		          handler = this.props[controlledValues[propName]];

		      if (linkName && isProp(this.props, linkName) && !handler) {
		        handler = this.props[linkName].requestChange;
		      }

		      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		        args[_key - 2] = arguments[_key];
		      }

		      set(this, propName, handler, value, args);
		    }

		    function isProp(props, prop) {
		      return props[prop] !== undefined;
		    }
		  }
		}

		module.exports = exports['default'];

	/***/ },
	/* 176 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;
		exports.customPropType = customPropType;
		exports.uncontrolledPropTypes = uncontrolledPropTypes;
		exports.getType = getType;
		exports.getValue = getValue;
		exports.getLinkName = getLinkName;
		exports.defaultKey = defaultKey;
		exports.chain = chain;
		exports.transform = transform;
		exports.each = each;
		exports.has = has;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _invariant = __webpack_require__(51);

		var _invariant2 = _interopRequireDefault(_invariant);

		function customPropType(handler, propType, name) {

		  return function (props, propName) {

		    if (props[propName] !== undefined) {
		      if (!props[handler]) {
		        return new Error('You have provided a `' + propName + '` prop to ' + '`' + name + '` without an `' + handler + '` handler. This will render a read-only field. ' + 'If the field should be mutable use `' + defaultKey(propName) + '`. Otherwise, set `' + handler + '`');
		      }

		      return propType && propType(props, propName, name);
		    }
		  };
		}

		function uncontrolledPropTypes(controlledValues, basePropTypes, displayName) {
		  var propTypes = {};

		  if (process.env.NODE_ENV !== 'production' && basePropTypes) {
		    transform(controlledValues, function (obj, handler, prop) {
		      var type = basePropTypes[prop];

		      _invariant2['default'](typeof handler === 'string' && handler.trim().length, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop);

		      obj[prop] = customPropType(handler, type, displayName);

		      if (type !== undefined) obj[defaultKey(prop)] = type;
		    }, propTypes);
		  }

		  return propTypes;
		}

		var version = _react2['default'].version.split('.').map(parseFloat);

		exports.version = version;

		function getType(component) {
		  if (version[0] === 0 && version[1] >= 13) return component;

		  return component.type;
		}

		function getValue(props, name) {
		  var linkPropName = getLinkName(name);

		  if (linkPropName && !isProp(props, name) && isProp(props, linkPropName)) return props[linkPropName].value;

		  return props[name];
		}

		function isProp(props, prop) {
		  return props[prop] !== undefined;
		}

		function getLinkName(name) {
		  return name === 'value' ? 'valueLink' : name === 'checked' ? 'checkedLink' : null;
		}

		function defaultKey(key) {
		  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
		}

		function chain(thisArg, a, b) {
		  return function chainedFunction() {
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    a && a.call.apply(a, [thisArg].concat(args));
		    b && b.call.apply(b, [thisArg].concat(args));
		  };
		}

		function transform(obj, cb, seed) {
		  each(obj, cb.bind(null, seed = seed || (Array.isArray(obj) ? [] : {})));
		  return seed;
		}

		function each(obj, cb, thisArg) {
		  if (Array.isArray(obj)) return obj.forEach(cb, thisArg);

		  for (var key in obj) if (has(obj, key)) cb.call(thisArg, obj[key], key, obj);
		}

		function has(o, k) {
		  return o ? Object.prototype.hasOwnProperty.call(o, k) : false;
		}
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

	/***/ },
	/* 177 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _keycode = __webpack_require__(104);

		var _keycode2 = _interopRequireDefault(_keycode);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _reactOverlaysLibRootCloseWrapper = __webpack_require__(178);

		var _reactOverlaysLibRootCloseWrapper2 = _interopRequireDefault(_reactOverlaysLibRootCloseWrapper);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var DropdownMenu = (function (_React$Component) {
		  _inherits(DropdownMenu, _React$Component);

		  function DropdownMenu(props) {
		    _classCallCheck(this, DropdownMenu);

		    _React$Component.call(this, props);

		    this.focusNext = this.focusNext.bind(this);
		    this.focusPrevious = this.focusPrevious.bind(this);
		    this.getFocusableMenuItems = this.getFocusableMenuItems.bind(this);
		    this.getItemsAndActiveIndex = this.getItemsAndActiveIndex.bind(this);

		    this.handleKeyDown = this.handleKeyDown.bind(this);
		  }

		  DropdownMenu.prototype.handleKeyDown = function handleKeyDown(event) {
		    switch (event.keyCode) {
		      case _keycode2['default'].codes.down:
		        this.focusNext();
		        event.preventDefault();
		        break;
		      case _keycode2['default'].codes.up:
		        this.focusPrevious();
		        event.preventDefault();
		        break;
		      case _keycode2['default'].codes.esc:
		      case _keycode2['default'].codes.tab:
		        this.props.onClose(event);
		        break;
		      default:
		    }
		  };

		  DropdownMenu.prototype.focusNext = function focusNext() {
		    var _getItemsAndActiveIndex = this.getItemsAndActiveIndex();

		    var items = _getItemsAndActiveIndex.items;
		    var activeItemIndex = _getItemsAndActiveIndex.activeItemIndex;

		    if (items.length === 0) {
		      return;
		    }

		    if (activeItemIndex === items.length - 1) {
		      items[0].focus();
		      return;
		    }

		    items[activeItemIndex + 1].focus();
		  };

		  DropdownMenu.prototype.focusPrevious = function focusPrevious() {
		    var _getItemsAndActiveIndex2 = this.getItemsAndActiveIndex();

		    var items = _getItemsAndActiveIndex2.items;
		    var activeItemIndex = _getItemsAndActiveIndex2.activeItemIndex;

		    if (activeItemIndex === 0) {
		      items[items.length - 1].focus();
		      return;
		    }

		    items[activeItemIndex - 1].focus();
		  };

		  DropdownMenu.prototype.getItemsAndActiveIndex = function getItemsAndActiveIndex() {
		    var items = this.getFocusableMenuItems();
		    var activeElement = document.activeElement;
		    var activeItemIndex = items.indexOf(activeElement);

		    return { items: items, activeItemIndex: activeItemIndex };
		  };

		  DropdownMenu.prototype.getFocusableMenuItems = function getFocusableMenuItems() {
		    var menuNode = _reactDom2['default'].findDOMNode(this);

		    if (menuNode === undefined) {
		      return [];
		    }

		    return [].slice.call(menuNode.querySelectorAll('[tabIndex="-1"]'), 0);
		  };

		  DropdownMenu.prototype.render = function render() {
		    var _classes,
		        _this = this;

		    var _props = this.props;
		    var children = _props.children;
		    var onSelect = _props.onSelect;
		    var pullRight = _props.pullRight;
		    var className = _props.className;
		    var labelledBy = _props.labelledBy;
		    var open = _props.open;
		    var onClose = _props.onClose;

		    var props = _objectWithoutProperties(_props, ['children', 'onSelect', 'pullRight', 'className', 'labelledBy', 'open', 'onClose']);

		    var items = _utilsValidComponentChildren2['default'].map(children, function (child) {
		      var childProps = child.props || {};

		      return _react2['default'].cloneElement(child, {
		        onKeyDown: _utilsCreateChainedFunction2['default'](childProps.onKeyDown, _this.handleKeyDown),
		        onSelect: _utilsCreateChainedFunction2['default'](childProps.onSelect, onSelect)
		      }, childProps.children);
		    });

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'menu')] = true, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'menu-right')] = pullRight, _classes);

		    var list = _react2['default'].createElement(
		      'ul',
		      _extends({
		        className: _classnames2['default'](className, classes),
		        role: 'menu',
		        'aria-labelledby': labelledBy
		      }, props),
		      items
		    );

		    if (open) {
		      list = _react2['default'].createElement(
		        _reactOverlaysLibRootCloseWrapper2['default'],
		        { noWrap: true, onRootClose: onClose },
		        list
		      );
		    }

		    return list;
		  };

		  return DropdownMenu;
		})(_react2['default'].Component);

		DropdownMenu.defaultProps = {
		  bsRole: 'menu',
		  bsClass: 'dropdown',
		  pullRight: false
		};

		DropdownMenu.propTypes = {
		  open: _react2['default'].PropTypes.bool,
		  pullRight: _react2['default'].PropTypes.bool,
		  onClose: _react2['default'].PropTypes.func,
		  labelledBy: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		  onSelect: _react2['default'].PropTypes.func
		};

		exports['default'] = DropdownMenu;
		module.exports = exports['default'];

	/***/ },
	/* 178 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _utilsAddEventListener = __webpack_require__(179);

		var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

		var _utilsCreateChainedFunction = __webpack_require__(181);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsOwnerDocument = __webpack_require__(182);

		var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

		// TODO: Consider using an ES6 symbol here, once we use babel-runtime.
		var CLICK_WAS_INSIDE = '__click_was_inside';

		var counter = 0;

		function getSuppressRootClose() {
		  var id = CLICK_WAS_INSIDE + '_' + counter++;
		  return {
		    id: id,
		    suppressRootClose: function suppressRootClose(event) {
		      // Tag the native event to prevent the root close logic on document click.
		      // This seems safer than using event.nativeEvent.stopImmediatePropagation(),
		      // which is only supported in IE >= 9.
		      event.nativeEvent[id] = true;
		    }
		  };
		}

		var RootCloseWrapper = (function (_React$Component) {
		  _inherits(RootCloseWrapper, _React$Component);

		  function RootCloseWrapper(props) {
		    _classCallCheck(this, RootCloseWrapper);

		    _React$Component.call(this, props);

		    this.handleDocumentClick = this.handleDocumentClick.bind(this);
		    this.handleDocumentKeyUp = this.handleDocumentKeyUp.bind(this);

		    var _getSuppressRootClose = getSuppressRootClose();

		    var id = _getSuppressRootClose.id;
		    var suppressRootClose = _getSuppressRootClose.suppressRootClose;

		    this._suppressRootId = id;

		    this._suppressRootCloseHandler = suppressRootClose;
		  }

		  RootCloseWrapper.prototype.bindRootCloseHandlers = function bindRootCloseHandlers() {
		    var doc = _utilsOwnerDocument2['default'](this);

		    this._onDocumentClickListener = _utilsAddEventListener2['default'](doc, 'click', this.handleDocumentClick);

		    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);
		  };

		  RootCloseWrapper.prototype.handleDocumentClick = function handleDocumentClick(e) {
		    // This is now the native event.
		    if (e[this._suppressRootId]) {
		      return;
		    }

		    this.props.onRootClose();
		  };

		  RootCloseWrapper.prototype.handleDocumentKeyUp = function handleDocumentKeyUp(e) {
		    if (e.keyCode === 27) {
		      this.props.onRootClose();
		    }
		  };

		  RootCloseWrapper.prototype.unbindRootCloseHandlers = function unbindRootCloseHandlers() {
		    if (this._onDocumentClickListener) {
		      this._onDocumentClickListener.remove();
		    }

		    if (this._onDocumentKeyupListener) {
		      this._onDocumentKeyupListener.remove();
		    }
		  };

		  RootCloseWrapper.prototype.componentDidMount = function componentDidMount() {
		    this.bindRootCloseHandlers();
		  };

		  RootCloseWrapper.prototype.render = function render() {
		    var _props = this.props;
		    var noWrap = _props.noWrap;
		    var children = _props.children;

		    var child = _react2['default'].Children.only(children);

		    if (noWrap) {
		      return _react2['default'].cloneElement(child, {
		        onClick: _utilsCreateChainedFunction2['default'](this._suppressRootCloseHandler, child.props.onClick)
		      });
		    }

		    // Wrap the child in a new element, so the child won't have to handle
		    // potentially combining multiple onClick listeners.
		    return _react2['default'].createElement(
		      'div',
		      { onClick: this._suppressRootCloseHandler },
		      child
		    );
		  };

		  RootCloseWrapper.prototype.getWrappedDOMNode = function getWrappedDOMNode() {
		    // We can't use a ref to identify the wrapped child, since we might be
		    // stealing the ref from the owner, but we know exactly the DOM structure
		    // that will be rendered, so we can just do this to get the child's DOM
		    // node for doing size calculations in OverlayMixin.
		    var node = _reactDom2['default'].findDOMNode(this);
		    return this.props.noWrap ? node : node.firstChild;
		  };

		  RootCloseWrapper.prototype.componentWillUnmount = function componentWillUnmount() {
		    this.unbindRootCloseHandlers();
		  };

		  return RootCloseWrapper;
		})(_react2['default'].Component);

		exports['default'] = RootCloseWrapper;

		RootCloseWrapper.displayName = 'RootCloseWrapper';

		RootCloseWrapper.propTypes = {
		  onRootClose: _react2['default'].PropTypes.func.isRequired,

		  /**
		   * Passes the suppress click handler directly to the child component instead
		   * of placing it on a wrapping div. Only use when you can be sure the child
		   * properly handle the click event.
		   */
		  noWrap: _react2['default'].PropTypes.bool
		};
		module.exports = exports['default'];

	/***/ },
	/* 179 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _domHelpersEventsOn = __webpack_require__(97);

		var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

		var _domHelpersEventsOff = __webpack_require__(180);

		var _domHelpersEventsOff2 = _interopRequireDefault(_domHelpersEventsOff);

		exports['default'] = function (node, event, handler) {
		  _domHelpersEventsOn2['default'](node, event, handler);
		  return {
		    remove: function remove() {
		      _domHelpersEventsOff2['default'](node, event, handler);
		    }
		  };
		};

		module.exports = exports['default'];

	/***/ },
	/* 180 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var canUseDOM = __webpack_require__(96);
		var off = function off() {};

		if (canUseDOM) {

		  off = (function () {

		    if (document.addEventListener) return function (node, eventName, handler, capture) {
		      return node.removeEventListener(eventName, handler, capture || false);
		    };else if (document.attachEvent) return function (node, eventName, handler) {
		      return node.detachEvent('on' + eventName, handler);
		    };
		  })();
		}

		module.exports = off;

	/***/ },
	/* 181 */
	/***/ function(module, exports) {

		/**
		 * Safe chained function
		 *
		 * Will only create a new function if needed,
		 * otherwise will pass back existing functions or null.
		 *
		 * @param {function} functions to chain
		 * @returns {function|null}
		 */
		'use strict';

		exports.__esModule = true;
		function createChainedFunction() {
		  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
		    funcs[_key] = arguments[_key];
		  }

		  return funcs.filter(function (f) {
		    return f != null;
		  }).reduce(function (acc, f) {
		    if (typeof f !== 'function') {
		      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
		    }

		    if (acc === null) {
		      return f;
		    }

		    return function chainedFunction() {
		      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		        args[_key2] = arguments[_key2];
		      }

		      acc.apply(this, args);
		      f.apply(this, args);
		    };
		  }, null);
		}

		exports['default'] = createChainedFunction;
		module.exports = exports['default'];

	/***/ },
	/* 182 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _domHelpersOwnerDocument = __webpack_require__(102);

		var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

		exports['default'] = function (componentOrElement) {
		  return _domHelpersOwnerDocument2['default'](_reactDom2['default'].findDOMNode(componentOrElement));
		};

		module.exports = exports['default'];

	/***/ },
	/* 183 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _Button = __webpack_require__(70);

		var _Button2 = _interopRequireDefault(_Button);

		var _SafeAnchor = __webpack_require__(61);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var CARET = _react2['default'].createElement(
		  'span',
		  null,
		  ' ',
		  _react2['default'].createElement('span', { className: 'caret' })
		);

		var DropdownToggle = (function (_React$Component) {
		  _inherits(DropdownToggle, _React$Component);

		  function DropdownToggle() {
		    _classCallCheck(this, DropdownToggle);

		    _React$Component.apply(this, arguments);
		  }

		  DropdownToggle.prototype.render = function render() {
		    var caret = this.props.noCaret ? null : CARET;

		    var classes = {
		      'dropdown-toggle': true
		    };

		    var Component = this.props.useAnchor ? _SafeAnchor2['default'] : _Button2['default'];

		    return _react2['default'].createElement(
		      Component,
		      _extends({}, this.props, {
		        className: _classnames2['default'](classes, this.props.className),
		        type: 'button',
		        'aria-haspopup': true,
		        'aria-expanded': this.props.open }),
		      this.props.children || this.props.title,
		      caret
		    );
		  };

		  return DropdownToggle;
		})(_react2['default'].Component);

		exports['default'] = DropdownToggle;

		DropdownToggle.defaultProps = {
		  open: false,
		  useAnchor: false,
		  bsRole: 'toggle'
		};

		DropdownToggle.propTypes = {
		  bsRole: _react2['default'].PropTypes.string,
		  noCaret: _react2['default'].PropTypes.bool,
		  open: _react2['default'].PropTypes.bool,
		  title: _react2['default'].PropTypes.string,
		  useAnchor: _react2['default'].PropTypes.bool
		};

		DropdownToggle.isToggle = true;
		DropdownToggle.titleProp = 'title';
		DropdownToggle.onClickProp = 'onClick';
		module.exports = exports['default'];

	/***/ },
	/* 184 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _reactPropTypesLibCommon = __webpack_require__(72);

		var _childrenToArray = __webpack_require__(185);

		var _childrenToArray2 = _interopRequireDefault(_childrenToArray);

		exports['default'] = {

		  requiredRoles: function requiredRoles() {
		    for (var _len = arguments.length, roles = Array(_len), _key = 0; _key < _len; _key++) {
		      roles[_key] = arguments[_key];
		    }

		    return _reactPropTypesLibCommon.createChainableTypeChecker(function requiredRolesValidator(props, propName, component) {
		      var missing = undefined;
		      var children = _childrenToArray2['default'](props.children);

		      var inRole = function inRole(role, child) {
		        return role === child.props.bsRole;
		      };

		      roles.every(function (role) {
		        if (!children.some(function (child) {
		          return inRole(role, child);
		        })) {
		          missing = role;
		          return false;
		        }
		        return true;
		      });

		      if (missing) {
		        return new Error('(children) ' + component + ' - Missing a required child with bsRole: ' + missing + '. ' + (component + ' must have at least one child of each of the following bsRoles: ' + roles.join(', ')));
		      }
		    });
		  },

		  exclusiveRoles: function exclusiveRoles() {
		    for (var _len2 = arguments.length, roles = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		      roles[_key2] = arguments[_key2];
		    }

		    return _reactPropTypesLibCommon.createChainableTypeChecker(function exclusiveRolesValidator(props, propName, component) {
		      var children = _childrenToArray2['default'](props.children);
		      var duplicate = undefined;

		      roles.every(function (role) {
		        var childrenWithRole = children.filter(function (child) {
		          return child.props.bsRole === role;
		        });

		        if (childrenWithRole.length > 1) {
		          duplicate = role;
		          return false;
		        }
		        return true;
		      });

		      if (duplicate) {
		        return new Error('(children) ' + component + ' - Duplicate children detected of bsRole: ' + duplicate + '. ' + ('Only one child each allowed with the following bsRoles: ' + roles.join(', ')));
		      }
		    });
		  }
		};
		module.exports = exports['default'];

	/***/ },
	/* 185 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;
		exports['default'] = childrenAsArray;

		var _ValidComponentChildren = __webpack_require__(25);

		var _ValidComponentChildren2 = _interopRequireDefault(_ValidComponentChildren);

		function childrenAsArray(children) {
		  var result = [];

		  if (children === undefined) {
		    return result;
		  }

		  _ValidComponentChildren2['default'].forEach(children, function (child) {
		    result.push(child);
		  });

		  return result;
		}

		module.exports = exports['default'];

	/***/ },
	/* 186 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _Object$keys = __webpack_require__(47)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _Dropdown = __webpack_require__(100);

		var _Dropdown2 = _interopRequireDefault(_Dropdown);

		var _lodashCompatObjectOmit = __webpack_require__(158);

		var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

		var _lodashCompatObjectPick = __webpack_require__(187);

		var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

		var _Button = __webpack_require__(70);

		var _Button2 = _interopRequireDefault(_Button);

		var DropdownButton = (function (_React$Component) {
		  _inherits(DropdownButton, _React$Component);

		  function DropdownButton() {
		    _classCallCheck(this, DropdownButton);

		    _React$Component.apply(this, arguments);
		  }

		  DropdownButton.prototype.render = function render() {
		    var _props = this.props;
		    var bsStyle = _props.bsStyle;
		    var bsSize = _props.bsSize;
		    var disabled = _props.disabled;
		    var _props2 = this.props;
		    var title = _props2.title;
		    var children = _props2.children;

		    var props = _objectWithoutProperties(_props2, ['title', 'children']);

		    var dropdownProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));
		    var toggleProps = _lodashCompatObjectOmit2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));

		    return _react2['default'].createElement(
		      _Dropdown2['default'],
		      _extends({}, dropdownProps, {
		        bsSize: bsSize,
		        bsStyle: bsStyle
		      }),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Toggle,
		        _extends({}, toggleProps, {
		          disabled: disabled
		        }),
		        title
		      ),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Menu,
		        null,
		        children
		      )
		    );
		  };

		  return DropdownButton;
		})(_react2['default'].Component);

		DropdownButton.propTypes = _extends({
		  disabled: _react2['default'].PropTypes.bool,
		  bsStyle: _Button2['default'].propTypes.bsStyle,
		  bsSize: _Button2['default'].propTypes.bsSize,

		  /**
		   * When used with the `title` prop, the noCaret option will not render a caret icon, in the toggle element.
		   */
		  noCaret: _react2['default'].PropTypes.bool,
		  title: _react2['default'].PropTypes.node.isRequired

		}, _Dropdown2['default'].propTypes);

		DropdownButton.defaultProps = {
		  disabled: false,
		  pullRight: false,
		  dropup: false,
		  navItem: false,
		  noCaret: false
		};

		exports['default'] = DropdownButton;
		module.exports = exports['default'];

	/***/ },
	/* 187 */
	/***/ function(module, exports, __webpack_require__) {

		var baseFlatten = __webpack_require__(167),
		    bindCallback = __webpack_require__(152),
		    pickByArray = __webpack_require__(169),
		    pickByCallback = __webpack_require__(170),
		    restParam = __webpack_require__(172);

		/**
		 * Creates an object composed of the picked `object` properties. Property
		 * names may be specified as individual arguments or as arrays of property
		 * names. If `predicate` is provided it's invoked for each property of `object`
		 * picking the properties `predicate` returns truthy for. The predicate is
		 * bound to `thisArg` and invoked with three arguments: (value, key, object).
		 *
		 * @static
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {Function|...(string|string[])} [predicate] The function invoked per
		 *  iteration or property names to pick, specified as individual property
		 *  names or arrays of property names.
		 * @param {*} [thisArg] The `this` binding of `predicate`.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'user': 'fred', 'age': 40 };
		 *
		 * _.pick(object, 'user');
		 * // => { 'user': 'fred' }
		 *
		 * _.pick(object, _.isString);
		 * // => { 'user': 'fred' }
		 */
		var pick = restParam(function(object, props) {
		  if (object == null) {
		    return {};
		  }
		  return typeof props[0] == 'function'
		    ? pickByCallback(object, bindCallback(props[0], props[1], 3))
		    : pickByArray(object, baseFlatten(props));
		});

		module.exports = pick;


	/***/ },
	/* 188 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Grid = _react2['default'].createClass({
		  displayName: 'Grid',

		  propTypes: {
		    /**
		     * Turn any fixed-width grid layout into a full-width layout by this property.
		     *
		     * Adds `container-fluid` class.
		     */
		    fluid: _react2['default'].PropTypes.bool,
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div',
		      fluid: false
		    };
		  },

		  render: function render() {
		    var ComponentClass = this.props.componentClass;
		    var className = this.props.fluid ? 'container-fluid' : 'container';

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, className) }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Grid;
		module.exports = exports['default'];

	/***/ },
	/* 189 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var Image = _react2['default'].createClass({
		  displayName: 'Image',

		  propTypes: {

		    /**
		     * Sets image as responsive image
		     */
		    responsive: _react2['default'].PropTypes.bool,

		    /**
		     * Sets image shape as rounded
		     */
		    rounded: _react2['default'].PropTypes.bool,

		    /**
		     * Sets image shape as circle
		     */
		    circle: _react2['default'].PropTypes.bool,

		    /**
		     * Sets image shape as thumbnail
		     */
		    thumbnail: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      responsive: false,
		      rounded: false,
		      circle: false,
		      thumbnail: false
		    };
		  },

		  render: function render() {
		    var classes = {
		      'img-responsive': this.props.responsive,
		      'img-rounded': this.props.rounded,
		      'img-circle': this.props.circle,
		      'img-thumbnail': this.props.thumbnail
		    };

		    return _react2['default'].createElement('img', _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }));
		  }
		});

		exports['default'] = Image;
		module.exports = exports['default'];

	/***/ },
	/* 190 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		var _interopRequireWildcard = __webpack_require__(21)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _InputBase2 = __webpack_require__(77);

		var _InputBase3 = _interopRequireDefault(_InputBase2);

		var _FormControls = __webpack_require__(191);

		var FormControls = _interopRequireWildcard(_FormControls);

		var _utilsDeprecationWarning = __webpack_require__(99);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		var Input = (function (_InputBase) {
		  _inherits(Input, _InputBase);

		  function Input() {
		    _classCallCheck(this, Input);

		    _InputBase.apply(this, arguments);
		  }

		  Input.prototype.render = function render() {
		    if (this.props.type === 'static') {
		      _utilsDeprecationWarning2['default']('Input type=static', 'FormControls.Static');
		      return _react2['default'].createElement(FormControls.Static, this.props);
		    }

		    return _InputBase.prototype.render.call(this);
		  };

		  return Input;
		})(_InputBase3['default']);

		Input.propTypes = {
		  type: _react2['default'].PropTypes.string
		};

		exports['default'] = Input;
		module.exports = exports['default'];

	/***/ },
	/* 191 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _Static2 = __webpack_require__(192);

		var _Static3 = _interopRequireDefault(_Static2);

		exports.Static = _Static3['default'];

	/***/ },
	/* 192 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _InputBase2 = __webpack_require__(77);

		var _InputBase3 = _interopRequireDefault(_InputBase2);

		var _utilsChildrenValueInputValidation = __webpack_require__(22);

		var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

		var Static = (function (_InputBase) {
		  _inherits(Static, _InputBase);

		  function Static() {
		    _classCallCheck(this, Static);

		    _InputBase.apply(this, arguments);
		  }

		  Static.prototype.getValue = function getValue() {
		    var _props = this.props;
		    var children = _props.children;
		    var value = _props.value;

		    return children ? children : value;
		  };

		  Static.prototype.renderInput = function renderInput() {
		    return _react2['default'].createElement(
		      'p',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
		      this.getValue()
		    );
		  };

		  return Static;
		})(_InputBase3['default']);

		Static.propTypes = {
		  value: _utilsChildrenValueInputValidation2['default'],
		  children: _utilsChildrenValueInputValidation2['default']
		};

		exports['default'] = Static;
		module.exports = exports['default'];

	/***/ },
	/* 193 */
	/***/ function(module, exports, __webpack_require__) {

		// https://www.npmjs.org/package/react-interpolate-component
		// TODO: Drop this in favor of es6 string interpolation

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var REGEXP = /\%\((.+?)\)s/;

		var Interpolate = _react2['default'].createClass({
		  displayName: 'Interpolate',

		  propTypes: {
		    component: _react2['default'].PropTypes.node,
		    format: _react2['default'].PropTypes.string,
		    unsafe: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      component: 'span',
		      unsafe: false
		    };
		  },

		  render: function render() {
		    var format = _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || typeof this.props.children === 'string' ? this.props.children : this.props.format;
		    var parent = this.props.component;
		    var unsafe = this.props.unsafe === true;
		    var props = _extends({}, this.props);

		    delete props.children;
		    delete props.format;
		    delete props.component;
		    delete props.unsafe;

		    if (unsafe) {
		      var content = format.split(REGEXP).reduce(function (memo, match, index) {
		        var html = undefined;

		        if (index % 2 === 0) {
		          html = match;
		        } else {
		          html = props[match];
		          delete props[match];
		        }

		        if (_react2['default'].isValidElement(html)) {
		          throw new Error('cannot interpolate a React component into unsafe text');
		        }

		        memo += html;

		        return memo;
		      }, '');

		      props.dangerouslySetInnerHTML = { __html: content };

		      return _react2['default'].createElement(parent, props);
		    }
		    var kids = format.split(REGEXP).reduce(function (memo, match, index) {
		      var child = undefined;

		      if (index % 2 === 0) {
		        if (match.length === 0) {
		          return memo;
		        }

		        child = match;
		      } else {
		        child = props[match];
		        delete props[match];
		      }

		      memo.push(child);

		      return memo;
		    }, []);

		    return _react2['default'].createElement(parent, props, kids);
		  }
		});

		exports['default'] = Interpolate;
		module.exports = exports['default'];

	/***/ },
	/* 194 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Jumbotron = _react2['default'].createClass({
		  displayName: 'Jumbotron',

		  propTypes: {
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return { componentClass: 'div' };
		  },

		  render: function render() {
		    var ComponentClass = this.props.componentClass;

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'jumbotron') }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Jumbotron;
		module.exports = exports['default'];

	/***/ },
	/* 195 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var Label = (function (_React$Component) {
		  _inherits(Label, _React$Component);

		  function Label() {
		    _classCallCheck(this, _Label);

		    _React$Component.apply(this, arguments);
		  }

		  Label.prototype.render = function render() {
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    return _react2['default'].createElement(
		      'span',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  };

		  var _Label = Label;
		  Label = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY), _styleMaps.DEFAULT)(Label) || Label;
		  Label = _utilsBootstrapUtils.bsClass('label')(Label) || Label;
		  return Label;
		})(_react2['default'].Component);

		exports['default'] = Label;
		module.exports = exports['default'];

	/***/ },
	/* 196 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _ListGroupItem = __webpack_require__(197);

		var _ListGroupItem2 = _interopRequireDefault(_ListGroupItem);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var ListGroup = (function (_React$Component) {
		  _inherits(ListGroup, _React$Component);

		  function ListGroup() {
		    _classCallCheck(this, ListGroup);

		    _React$Component.apply(this, arguments);
		  }

		  ListGroup.prototype.render = function render() {
		    var _this = this;

		    var items = _utilsValidComponentChildren2['default'].map(this.props.children, function (item, index) {
		      return _react.cloneElement(item, { key: item.key ? item.key : index });
		    });

		    if (this.areCustomChildren(items)) {
		      var Component = this.props.componentClass;
		      return _react2['default'].createElement(
		        Component,
		        _extends({}, this.props, {
		          className: _classnames2['default'](this.props.className, 'list-group') }),
		        items
		      );
		    }

		    var shouldRenderDiv = false;

		    if (!this.props.children) {
		      shouldRenderDiv = true;
		    } else {
		      _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child) {
		        if (_this.isAnchorOrButton(child.props)) {
		          shouldRenderDiv = true;
		        }
		      });
		    }

		    return shouldRenderDiv ? this.renderDiv(items) : this.renderUL(items);
		  };

		  ListGroup.prototype.isAnchorOrButton = function isAnchorOrButton(props) {
		    return props.href || props.onClick;
		  };

		  ListGroup.prototype.areCustomChildren = function areCustomChildren(children) {
		    var customChildren = false;

		    _utilsValidComponentChildren2['default'].forEach(children, function (child) {
		      if (child.type !== _ListGroupItem2['default']) {
		        customChildren = true;
		      }
		    }, this);

		    return customChildren;
		  };

		  ListGroup.prototype.renderUL = function renderUL(items) {
		    var listItems = _utilsValidComponentChildren2['default'].map(items, function (item) {
		      return _react.cloneElement(item, { listItem: true });
		    });

		    return _react2['default'].createElement(
		      'ul',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, 'list-group') }),
		      listItems
		    );
		  };

		  ListGroup.prototype.renderDiv = function renderDiv(items) {
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, 'list-group') }),
		      items
		    );
		  };

		  return ListGroup;
		})(_react2['default'].Component);

		ListGroup.defaultProps = {
		  componentClass: 'div'
		};

		ListGroup.propTypes = {
		  className: _react2['default'].PropTypes.string,
		  /**
		   * The element for ListGroup if children are
		   * user-defined custom components.
		   * @type {("ul"|"div")}
		   */
		  componentClass: _react2['default'].PropTypes.oneOf(['ul', 'div']),
		  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
		};

		exports['default'] = ListGroup;
		module.exports = exports['default'];

	/***/ },
	/* 197 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var ListGroupItem = (function (_React$Component) {
		  _inherits(ListGroupItem, _React$Component);

		  function ListGroupItem() {
		    _classCallCheck(this, ListGroupItem);

		    _React$Component.apply(this, arguments);
		  }

		  ListGroupItem.prototype.render = function render() {
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    classes.active = this.props.active;
		    classes.disabled = this.props.disabled;

		    if (this.props.href) {
		      return this.renderAnchor(classes);
		    } else if (this.props.onClick) {
		      return this.renderButton(classes);
		    } else if (this.props.listItem) {
		      return this.renderLi(classes);
		    }

		    return this.renderSpan(classes);
		  };

		  ListGroupItem.prototype.renderLi = function renderLi(classes) {
		    return _react2['default'].createElement(
		      'li',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.header ? this.renderStructuredContent() : this.props.children
		    );
		  };

		  ListGroupItem.prototype.renderAnchor = function renderAnchor(classes) {
		    return _react2['default'].createElement(
		      'a',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      this.props.header ? this.renderStructuredContent() : this.props.children
		    );
		  };

		  ListGroupItem.prototype.renderButton = function renderButton(classes) {
		    return _react2['default'].createElement(
		      'button',
		      _extends({
		        type: 'button'
		      }, this.props, {
		        className: _classnames2['default'](this.props.className, classes) }),
		      this.props.header ? this.renderStructuredContent() : this.props.children
		    );
		  };

		  ListGroupItem.prototype.renderSpan = function renderSpan(classes) {
		    return _react2['default'].createElement(
		      'span',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.header ? this.renderStructuredContent() : this.props.children
		    );
		  };

		  ListGroupItem.prototype.renderStructuredContent = function renderStructuredContent() {
		    var header = undefined;
		    var headingClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'heading');

		    if (_react2['default'].isValidElement(this.props.header)) {
		      header = _react.cloneElement(this.props.header, {
		        key: 'header',
		        className: _classnames2['default'](this.props.header.props.className, headingClass)
		      });
		    } else {
		      header = _react2['default'].createElement(
		        'h4',
		        { key: 'header', className: headingClass },
		        this.props.header
		      );
		    }

		    var content = _react2['default'].createElement(
		      'p',
		      { key: 'content', className: _utilsBootstrapUtils2['default'].prefix(this.props, 'text') },
		      this.props.children
		    );

		    return [header, content];
		  };

		  return ListGroupItem;
		})(_react2['default'].Component);

		ListGroupItem.propTypes = {
		  className: _react2['default'].PropTypes.string,
		  active: _react2['default'].PropTypes.any,
		  disabled: _react2['default'].PropTypes.any,
		  header: _react2['default'].PropTypes.node,
		  listItem: _react2['default'].PropTypes.bool,
		  onClick: _react2['default'].PropTypes.func,
		  eventKey: _react2['default'].PropTypes.any,
		  href: _react2['default'].PropTypes.string,
		  target: _react2['default'].PropTypes.string
		};

		ListGroupItem.defaultTypes = {
		  listItem: false
		};

		exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('list-group-item', ListGroupItem));
		module.exports = exports['default'];

	/***/ },
	/* 198 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _reactPropTypesLibAll = __webpack_require__(74);

		var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

		var _SafeAnchor = __webpack_require__(61);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var MenuItem = (function (_React$Component) {
		  _inherits(MenuItem, _React$Component);

		  function MenuItem(props) {
		    _classCallCheck(this, MenuItem);

		    _React$Component.call(this, props);

		    this.handleClick = this.handleClick.bind(this);
		  }

		  MenuItem.prototype.handleClick = function handleClick(event) {
		    if (!this.props.href || this.props.disabled) {
		      event.preventDefault();
		    }

		    if (this.props.disabled) {
		      return;
		    }

		    if (this.props.onSelect) {
		      this.props.onSelect(event, this.props.eventKey);
		    }
		  };

		  MenuItem.prototype.render = function render() {
		    var headerClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'header');

		    if (this.props.divider) {
		      return _react2['default'].createElement('li', { role: 'separator', className: 'divider' });
		    }

		    if (this.props.header) {
		      return _react2['default'].createElement(
		        'li',
		        { role: 'heading', className: headerClass },
		        this.props.children
		      );
		    }

		    var _props = this.props;
		    var className = _props.className;
		    var style = _props.style;
		    var onClick = _props.onClick;

		    var props = _objectWithoutProperties(_props, ['className', 'style', 'onClick']);

		    var classes = {
		      disabled: this.props.disabled,
		      active: this.props.active
		    };

		    return _react2['default'].createElement(
		      'li',
		      { role: 'presentation',
		        className: _classnames2['default'](className, classes),
		        style: style
		      },
		      _react2['default'].createElement(_SafeAnchor2['default'], _extends({}, props, {
		        role: 'menuitem',
		        tabIndex: '-1',
		        onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick)
		      }))
		    );
		  };

		  return MenuItem;
		})(_react2['default'].Component);

		MenuItem.propTypes = {
		  active: _react2['default'].PropTypes.bool,
		  disabled: _react2['default'].PropTypes.bool,
		  divider: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (props) {
		    if (props.divider && props.children) {
		      return new Error('Children will not be rendered for dividers');
		    }
		  }),
		  eventKey: _react2['default'].PropTypes.any,
		  header: _react2['default'].PropTypes.bool,
		  href: _react2['default'].PropTypes.string,
		  target: _react2['default'].PropTypes.string,
		  title: _react2['default'].PropTypes.string,
		  onClick: _react2['default'].PropTypes.func,
		  onKeyDown: _react2['default'].PropTypes.func,
		  onSelect: _react2['default'].PropTypes.func,
		  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
		};

		MenuItem.defaultProps = {
		  divider: false,
		  disabled: false,
		  header: false
		};

		exports['default'] = _utilsBootstrapUtils.bsClass('dropdown', MenuItem);
		module.exports = exports['default'];

	/***/ },
	/* 199 */
	/***/ function(module, exports, __webpack_require__) {

		
		/* eslint-disable react/prop-types */
		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _Object$keys = __webpack_require__(47)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var _domHelpersUtilScrollbarSize = __webpack_require__(200);

		var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

		var _domHelpersUtilInDOM = __webpack_require__(96);

		var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

		var _domHelpersOwnerDocument = __webpack_require__(102);

		var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

		var _domHelpersEvents = __webpack_require__(201);

		var _domHelpersEvents2 = _interopRequireDefault(_domHelpersEvents);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _Fade = __webpack_require__(204);

		var _Fade2 = _interopRequireDefault(_Fade);

		var _ModalDialog = __webpack_require__(205);

		var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

		var _ModalBody = __webpack_require__(206);

		var _ModalBody2 = _interopRequireDefault(_ModalBody);

		var _ModalHeader = __webpack_require__(207);

		var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

		var _ModalTitle = __webpack_require__(208);

		var _ModalTitle2 = _interopRequireDefault(_ModalTitle);

		var _ModalFooter = __webpack_require__(209);

		var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

		var _reactOverlaysLibModal = __webpack_require__(210);

		var _reactOverlaysLibModal2 = _interopRequireDefault(_reactOverlaysLibModal);

		var _reactOverlaysLibUtilsIsOverflowing = __webpack_require__(221);

		var _reactOverlaysLibUtilsIsOverflowing2 = _interopRequireDefault(_reactOverlaysLibUtilsIsOverflowing);

		var _lodashCompatObjectPick = __webpack_require__(187);

		var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

		var Modal = _react2['default'].createClass({
		  displayName: 'Modal',

		  propTypes: _extends({}, _reactOverlaysLibModal2['default'].propTypes, _ModalDialog2['default'].propTypes, {

		    /**
		     * Include a backdrop component. Specify 'static' for a backdrop that doesn't trigger an "onHide" when clicked.
		     */
		    backdrop: _react2['default'].PropTypes.oneOf(['static', true, false]),

		    /**
		     * Close the modal when escape key is pressed
		     */
		    keyboard: _react2['default'].PropTypes.bool,

		    /**
		     * Open and close the Modal with a slide and fade animation.
		     */
		    animation: _react2['default'].PropTypes.bool,

		    /**
		     * A Component type that provides the modal content Markup. This is a useful prop when you want to use your own
		     * styles and markup to create a custom modal component.
		     */
		    dialogComponent: _reactPropTypesLibElementType2['default'],

		    /**
		     * When `true` The modal will automatically shift focus to itself when it opens, and replace it to the last focused element when it closes.
		     * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen-readers.
		     */
		    autoFocus: _react2['default'].PropTypes.bool,

		    /**
		     * When `true` The modal will prevent focus from leaving the Modal while open.
		     * Consider leaving the default value here, as it is necessary to make the Modal work well with assistive technologies,
		     * such as screen readers.
		     */
		    enforceFocus: _react2['default'].PropTypes.bool,

		    /**
		     * Hide this from automatic props documentation generation.
		     * @private
		     */
		    bsStyle: _react2['default'].PropTypes.string,

		    /**
		     * When `true` The modal will show itself.
		     */
		    show: _react2['default'].PropTypes.bool,

		    /**
		     * A callback fired when the header closeButton or non-static backdrop is
		     * clicked. Required if either are specified.
		     */
		    onHide: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired before the Modal transitions in
		     */
		    onEnter: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired as the Modal begins to transition in
		     */
		    onEntering: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired after the Modal finishes transitioning in
		     */
		    onEntered: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired right before the Modal transitions out
		     */
		    onExit: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired as the Modal begins to transition out
		     */
		    onExiting: _react2['default'].PropTypes.func,

		    /**
		     * Callback fired after the Modal finishes transitioning out
		     */
		    onExited: _react2['default'].PropTypes.func
		  }),

		  childContextTypes: {
		    '$bs_onModalHide': _react2['default'].PropTypes.func
		  },

		  getDefaultProps: function getDefaultProps() {
		    return _extends({}, _reactOverlaysLibModal2['default'].defaultProps, {
		      bsClass: 'modal',
		      animation: true,
		      dialogComponent: _ModalDialog2['default']
		    });
		  },

		  getInitialState: function getInitialState() {
		    return {
		      modalStyles: {}
		    };
		  },

		  getChildContext: function getChildContext() {
		    return {
		      $bs_onModalHide: this.props.onHide
		    };
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);
		  },

		  render: function render() {
		    var _this = this;

		    var _props = this.props;
		    var className = _props.className;
		    var children = _props.children;
		    var dialogClassName = _props.dialogClassName;
		    var animation = _props.animation;

		    var props = _objectWithoutProperties(_props, ['className', 'children', 'dialogClassName', 'animation']);

		    var modalStyles = this.state.modalStyles;

		    var inClass = { 'in': props.show && !animation };
		    var Dialog = props.dialogComponent;

		    var parentProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_reactOverlaysLibModal2['default'].propTypes).concat(['onExit', 'onExiting', 'onEnter', 'onEntered']) // the rest are fired in _onHide() and _onShow()
		    );

		    var modal = _react2['default'].createElement(
		      Dialog,
		      _extends({
		        key: 'modal',
		        ref: function (ref) {
		          return _this._modal = ref;
		        }
		      }, props, {
		        style: modalStyles,
		        className: _classnames2['default'](className, inClass),
		        dialogClassName: dialogClassName,
		        onClick: props.backdrop === true ? this.handleDialogClick : null
		      }),
		      this.props.children
		    );

		    return _react2['default'].createElement(
		      _reactOverlaysLibModal2['default'],
		      _extends({}, parentProps, {
		        show: props.show,
		        ref: function (ref) {
		          _this._wrapper = ref && ref.refs.modal;
		          _this._backdrop = ref && ref.refs.backdrop;
		        },
		        onEntering: this._onShow,
		        onExited: this._onHide,
		        backdropClassName: _classnames2['default'](_utilsBootstrapUtils2['default'].prefix(props, 'backdrop'), inClass),
		        containerClassName: _utilsBootstrapUtils2['default'].prefix(props, 'open'),
		        transition: animation ? _Fade2['default'] : undefined,
		        dialogTransitionTimeout: Modal.TRANSITION_DURATION,
		        backdropTransitionTimeout: Modal.BACKDROP_TRANSITION_DURATION
		      }),
		      modal
		    );
		  },

		  _onShow: function _onShow() {
		    _domHelpersEvents2['default'].on(window, 'resize', this.handleWindowResize);

		    this.setState(this._getStyles());

		    if (this.props.onEntering) {
		      var _props2;

		      (_props2 = this.props).onEntering.apply(_props2, arguments);
		    }
		  },

		  _onHide: function _onHide() {
		    _domHelpersEvents2['default'].off(window, 'resize', this.handleWindowResize);

		    if (this.props.onExited) {
		      var _props3;

		      (_props3 = this.props).onExited.apply(_props3, arguments);
		    }
		  },

		  handleDialogClick: function handleDialogClick(e) {
		    if (e.target !== e.currentTarget) {
		      return;
		    }

		    this.props.onHide();
		  },

		  handleWindowResize: function handleWindowResize() {
		    this.setState(this._getStyles());
		  },

		  _getStyles: function _getStyles() {
		    if (!_domHelpersUtilInDOM2['default']) {
		      return {};
		    }

		    var node = _reactDom2['default'].findDOMNode(this._modal);
		    var doc = _domHelpersOwnerDocument2['default'](node);

		    var scrollHt = node.scrollHeight;
		    var bodyIsOverflowing = _reactOverlaysLibUtilsIsOverflowing2['default'](_reactDom2['default'].findDOMNode(this.props.container || doc.body));
		    var modalIsOverflowing = scrollHt > doc.documentElement.clientHeight;

		    return {
		      modalStyles: {
		        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0,
		        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0
		      }
		    };
		  }
		});

		Modal.Body = _ModalBody2['default'];
		Modal.Header = _ModalHeader2['default'];
		Modal.Title = _ModalTitle2['default'];
		Modal.Footer = _ModalFooter2['default'];

		Modal.Dialog = _ModalDialog2['default'];

		Modal.TRANSITION_DURATION = 300;
		Modal.BACKDROP_TRANSITION_DURATION = 150;

		exports['default'] = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], _utilsBootstrapUtils.bsClass('modal', Modal));
		module.exports = exports['default'];

	/***/ },
	/* 200 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var canUseDOM = __webpack_require__(96);

		var size;

		module.exports = function (recalc) {
		  if (!size || recalc) {
		    if (canUseDOM) {
		      var scrollDiv = document.createElement('div');

		      scrollDiv.style.position = 'absolute';
		      scrollDiv.style.top = '-9999px';
		      scrollDiv.style.width = '50px';
		      scrollDiv.style.height = '50px';
		      scrollDiv.style.overflow = 'scroll';

		      document.body.appendChild(scrollDiv);
		      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
		      document.body.removeChild(scrollDiv);
		    }
		  }

		  return size;
		};

	/***/ },
	/* 201 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var on = __webpack_require__(97),
		    off = __webpack_require__(180),
		    filter = __webpack_require__(202);

		module.exports = { on: on, off: off, filter: filter };

	/***/ },
	/* 202 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var contains = __webpack_require__(103),
		    qsa = __webpack_require__(203);

		module.exports = function (selector, handler) {
		  return function (e) {
		    var top = e.currentTarget,
		        target = e.target,
		        matches = qsa(top, selector);

		    if (matches.some(function (match) {
		      return contains(match, target);
		    })) handler.call(this, e);
		  };
		};

	/***/ },
	/* 203 */
	/***/ function(module, exports) {

		'use strict';
		//     Zepto.js
		//     (c) 2010-2015 Thomas Fuchs
		//     Zepto.js may be freely distributed under the MIT license.
		var simpleSelectorRE = /^[\w-]*$/,
		    toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);

		module.exports = function qsa(element, selector) {
		  var maybeID = selector[0] === '#',
		      maybeClass = selector[0] === '.',
		      nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,
		      isSimple = simpleSelectorRE.test(nameOnly),
		      found;

		  if (isSimple) {
		    if (maybeID) {
		      element = element.getElementById ? element : document;
		      return (found = element.getElementById(nameOnly)) ? [found] : [];
		    }

		    if (element.getElementsByClassName && maybeClass) return toArray(element.getElementsByClassName(nameOnly));

		    return toArray(element.getElementsByTagName(selector));
		  }

		  return toArray(element.querySelectorAll(selector));
		};

	/***/ },
	/* 204 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactOverlaysLibTransition = __webpack_require__(94);

		var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

		var _reactPropTypesLibDeprecated = __webpack_require__(98);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var Fade = (function (_React$Component) {
		  _inherits(Fade, _React$Component);

		  function Fade() {
		    _classCallCheck(this, Fade);

		    _React$Component.apply(this, arguments);
		  }

		  // Explicitly copied from Transition for doc generation.
		  // TODO: Remove duplication once #977 is resolved.

		  Fade.prototype.render = function render() {
		    var timeout = this.props.timeout || this.props.duration;

		    return _react2['default'].createElement(
		      _reactOverlaysLibTransition2['default'],
		      _extends({}, this.props, {
		        timeout: timeout,
		        className: _classnames2['default'](this.props.className, 'fade'),
		        enteredClassName: 'in',
		        enteringClassName: 'in'
		      }),
		      this.props.children
		    );
		  };

		  return Fade;
		})(_react2['default'].Component);

		Fade.propTypes = {
		  /**
		   * Show the component; triggers the fade in or fade out animation
		   */
		  'in': _react2['default'].PropTypes.bool,

		  /**
		   * Unmount the component (remove it from the DOM) when it is faded out
		   */
		  unmountOnExit: _react2['default'].PropTypes.bool,

		  /**
		   * Run the fade in animation when the component mounts, if it is initially
		   * shown
		   */
		  transitionAppear: _react2['default'].PropTypes.bool,

		  /**
		   * Duration of the fade animation in milliseconds, to ensure that finishing
		   * callbacks are fired even if the original browser transition end events are
		   * canceled
		   */
		  timeout: _react2['default'].PropTypes.number,

		  /**
		   * duration
		   * @private
		   */
		  duration: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.number, 'Use `timeout`.'),

		  /**
		   * Callback fired before the component fades in
		   */
		  onEnter: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component starts to fade in
		   */
		  onEntering: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the has component faded in
		   */
		  onEntered: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired before the component fades out
		   */
		  onExit: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component starts to fade out
		   */
		  onExiting: _react2['default'].PropTypes.func,
		  /**
		   * Callback fired after the component has faded out
		   */
		  onExited: _react2['default'].PropTypes.func
		};

		Fade.defaultProps = {
		  'in': false,
		  timeout: 300,
		  unmountOnExit: false,
		  transitionAppear: false
		};

		exports['default'] = Fade;
		module.exports = exports['default'];

	/***/ },
	/* 205 */
	/***/ function(module, exports, __webpack_require__) {

		/* eslint-disable react/prop-types */
		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var ModalDialog = _react2['default'].createClass({
		  displayName: 'ModalDialog',

		  propTypes: {
		    /**
		     * A css class to apply to the Modal dialog DOM node.
		     */
		    dialogClassName: _react2['default'].PropTypes.string
		  },

		  render: function render() {
		    var modalStyle = _extends({
		      display: 'block'
		    }, this.props.style);
		    var prefix = _utilsBootstrapUtils2['default'].prefix(this.props);
		    var dialogClasses = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    delete dialogClasses[prefix];
		    dialogClasses[_utilsBootstrapUtils2['default'].prefix(this.props, 'dialog')] = true;

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        title: null,
		        tabIndex: '-1',
		        role: 'dialog',
		        style: modalStyle,
		        className: _classnames2['default'](this.props.className, prefix)
		      }),
		      _react2['default'].createElement(
		        'div',
		        { className: _classnames2['default'](this.props.dialogClassName, dialogClasses) },
		        _react2['default'].createElement(
		          'div',
		          { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content'), role: 'document' },
		          this.props.children
		        )
		      )
		    );
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL], _utilsBootstrapUtils.bsClass('modal', ModalDialog));
		module.exports = exports['default'];

	/***/ },
	/* 206 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var ModalBody = (function (_React$Component) {
		  _inherits(ModalBody, _React$Component);

		  function ModalBody() {
		    _classCallCheck(this, ModalBody);

		    _React$Component.apply(this, arguments);
		  }

		  ModalBody.prototype.render = function render() {
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'body')) }),
		      this.props.children
		    );
		  };

		  return ModalBody;
		})(_react2['default'].Component);

		exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalBody);
		module.exports = exports['default'];

	/***/ },
	/* 207 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var ModalHeader = (function (_React$Component) {
		  _inherits(ModalHeader, _React$Component);

		  function ModalHeader() {
		    _classCallCheck(this, ModalHeader);

		    _React$Component.apply(this, arguments);
		  }

		  ModalHeader.prototype.render = function render() {
		    var _props = this.props;
		    var label = _props['aria-label'];

		    var props = _objectWithoutProperties(_props, ['aria-label']);

		    var onHide = _utilsCreateChainedFunction2['default'](this.context.$bs_onModalHide, this.props.onHide);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'header'))
		      }),
		      this.props.closeButton && _react2['default'].createElement(
		        'button',
		        {
		          type: 'button',
		          className: 'close',
		          'aria-label': label,
		          onClick: onHide },
		        _react2['default'].createElement(
		          'span',
		          { 'aria-hidden': 'true' },
		          '×'
		        )
		      ),
		      this.props.children
		    );
		  };

		  return ModalHeader;
		})(_react2['default'].Component);

		ModalHeader.propTypes = {
		  /**
		   * The 'aria-label' attribute provides an accessible label for the close button.
		   * It is used for Assistive Technology when the label text is not readable.
		   */
		  'aria-label': _react2['default'].PropTypes.string,

		  bsClass: _react2['default'].PropTypes.string,

		  /**
		   * Specify whether the Component should contain a close button
		   */
		  closeButton: _react2['default'].PropTypes.bool,

		  /**
		   * A Callback fired when the close button is clicked. If used directly inside a Modal component, the onHide will automatically
		   * be propagated up to the parent Modal `onHide`.
		   */
		  onHide: _react2['default'].PropTypes.func
		};

		ModalHeader.contextTypes = {
		  '$bs_onModalHide': _react2['default'].PropTypes.func
		};

		ModalHeader.defaultProps = {
		  'aria-label': 'Close',
		  closeButton: false
		};

		exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalHeader);
		module.exports = exports['default'];

	/***/ },
	/* 208 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var ModalTitle = (function (_React$Component) {
		  _inherits(ModalTitle, _React$Component);

		  function ModalTitle() {
		    _classCallCheck(this, ModalTitle);

		    _React$Component.apply(this, arguments);
		  }

		  ModalTitle.prototype.render = function render() {
		    return _react2['default'].createElement(
		      'h4',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'title')) }),
		      this.props.children
		    );
		  };

		  return ModalTitle;
		})(_react2['default'].Component);

		exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalTitle);
		module.exports = exports['default'];

	/***/ },
	/* 209 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var ModalFooter = (function (_React$Component) {
		  _inherits(ModalFooter, _React$Component);

		  function ModalFooter() {
		    _classCallCheck(this, ModalFooter);

		    _React$Component.apply(this, arguments);
		  }

		  ModalFooter.prototype.render = function render() {
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].prefix(this.props, 'footer')) }),
		      this.props.children
		    );
		  };

		  return ModalFooter;
		})(_react2['default'].Component);

		ModalFooter.propTypes = {
		  /**
		   * A css class applied to the Component
		   */
		  bsClass: _react2['default'].PropTypes.string
		};

		ModalFooter.defaultProps = {
		  bsClass: 'modal'
		};

		exports['default'] = _utilsBootstrapUtils.bsClass('modal', ModalFooter);
		module.exports = exports['default'];

	/***/ },
	/* 210 */
	/***/ function(module, exports, __webpack_require__) {

		/*eslint-disable react/prop-types */
		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _warning = __webpack_require__(52);

		var _warning2 = _interopRequireDefault(_warning);

		var _reactPropTypesLibMountable = __webpack_require__(211);

		var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

		var _reactPropTypesLibElementType = __webpack_require__(213);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _Portal = __webpack_require__(214);

		var _Portal2 = _interopRequireDefault(_Portal);

		var _ModalManager = __webpack_require__(216);

		var _ModalManager2 = _interopRequireDefault(_ModalManager);

		var _utilsOwnerDocument = __webpack_require__(182);

		var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

		var _utilsAddEventListener = __webpack_require__(179);

		var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

		var _utilsAddFocusListener = __webpack_require__(224);

		var _utilsAddFocusListener2 = _interopRequireDefault(_utilsAddFocusListener);

		var _domHelpersUtilInDOM = __webpack_require__(96);

		var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

		var _domHelpersActiveElement = __webpack_require__(101);

		var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

		var _domHelpersQueryContains = __webpack_require__(103);

		var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

		var _utilsGetContainer = __webpack_require__(215);

		var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

		var modalManager = new _ModalManager2['default']();

		/**
		 * Love them or hate them, `<Modal/>` provides a solid foundation for creating dialogs, lightboxes, or whatever else.
		 * The Modal component renders its `children` node in front of a backdrop component.
		 *
		 * The Modal offers a few helpful features over using just a `<Portal/>` component and some styles:
		 *
		 * - Manages dialog stacking when one-at-a-time just isn't enough.
		 * - Creates a backdrop, for disabling interaction below the modal.
		 * - It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.
		 * - It disables scrolling of the page content while open.
		 * - Adds the appropriate ARIA roles are automatically.
		 * - Easily pluggable animations via a `<Transition/>` component.
		 *
		 */
		var Modal = _react2['default'].createClass({
		  displayName: 'Modal',

		  propTypes: _extends({}, _Portal2['default'].propTypes, {

		    /**
		     * A Node, Component instance, or function that returns either. The Modal is appended to it's container element.
		     *
		     * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the
		     * page content can be placed behind a virtual backdrop as well as a visual one.
		     */
		    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func]),

		    /**
		     * A callback fired when the Modal is opening.
		     */
		    onShow: _react2['default'].PropTypes.func,

		    /**
		     * A callback fired when either the backdrop is clicked, or the escape key is pressed.
		     *
		     * The `onHide` callback only signals intent from the Modal,
		     * you must actually set the `show` prop to `false` for the Modal to close.
		     */
		    onHide: _react2['default'].PropTypes.func,

		    /**
		     * Include a backdrop component.
		     */
		    backdrop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.oneOf(['static'])]),

		    /**
		     * A callback fired when the escape key, if specified in `keyboard`, is pressed.
		     */
		    onEscapeKeyUp: _react2['default'].PropTypes.func,

		    /**
		     * A callback fired when the backdrop, if specified, is clicked.
		     */
		    onBackdropClick: _react2['default'].PropTypes.func,

		    /**
		     * A style object for the backdrop component.
		     */
		    backdropStyle: _react2['default'].PropTypes.object,

		    /**
		     * A css class or classes for the backdrop component.
		     */
		    backdropClassName: _react2['default'].PropTypes.string,

		    /**
		     * A css class or set of classes applied to the modal container when the modal is open,
		     * and removed when it is closed.
		     */
		    containerClassName: _react2['default'].PropTypes.string,

		    /**
		     * Close the modal when escape key is pressed
		     */
		    keyboard: _react2['default'].PropTypes.bool,

		    /**
		     * A `<Transition/>` component to use for the dialog and backdrop components.
		     */
		    transition: _reactPropTypesLibElementType2['default'],

		    /**
		     * The `timeout` of the dialog transition if specified. This number is used to ensure that
		     * transition callbacks are always fired, even if browser transition events are canceled.
		     *
		     * See the Transition `timeout` prop for more infomation.
		     */
		    dialogTransitionTimeout: _react2['default'].PropTypes.number,

		    /**
		     * The `timeout` of the backdrop transition if specified. This number is used to
		     * ensure that transition callbacks are always fired, even if browser transition events are canceled.
		     *
		     * See the Transition `timeout` prop for more infomation.
		     */
		    backdropTransitionTimeout: _react2['default'].PropTypes.number,

		    /**
		     * When `true` The modal will automatically shift focus to itself when it opens, and
		     * replace it to the last focused element when it closes.
		     * Generally this should never be set to false as it makes the Modal less
		     * accessible to assistive technologies, like screen readers.
		     */
		    autoFocus: _react2['default'].PropTypes.bool,

		    /**
		     * When `true` The modal will prevent focus from leaving the Modal while open.
		     * Generally this should never be set to false as it makes the Modal less
		     * accessible to assistive technologies, like screen readers.
		     */
		    enforceFocus: _react2['default'].PropTypes.bool

		  }),

		  getDefaultProps: function getDefaultProps() {
		    var noop = function noop() {};

		    return {
		      show: false,
		      backdrop: true,
		      keyboard: true,
		      autoFocus: true,
		      enforceFocus: true,
		      onHide: noop
		    };
		  },

		  getInitialState: function getInitialState() {
		    return { exited: !this.props.show };
		  },

		  render: function render() {
		    var _props = this.props;
		    var children = _props.children;
		    var Transition = _props.transition;
		    var backdrop = _props.backdrop;
		    var dialogTransitionTimeout = _props.dialogTransitionTimeout;

		    var props = _objectWithoutProperties(_props, ['children', 'transition', 'backdrop', 'dialogTransitionTimeout']);

		    var onExit = props.onExit;
		    var onExiting = props.onExiting;
		    var onEnter = props.onEnter;
		    var onEntering = props.onEntering;
		    var onEntered = props.onEntered;

		    var show = !!props.show;
		    var dialog = _react2['default'].Children.only(this.props.children);

		    var mountModal = show || Transition && !this.state.exited;

		    if (!mountModal) {
		      return null;
		    }

		    var _dialog$props = dialog.props;
		    var role = _dialog$props.role;
		    var tabIndex = _dialog$props.tabIndex;

		    if (role === undefined || tabIndex === undefined) {
		      dialog = _react.cloneElement(dialog, {
		        role: role === undefined ? 'document' : role,
		        tabIndex: tabIndex == null ? '-1' : tabIndex
		      });
		    }

		    if (Transition) {
		      dialog = _react2['default'].createElement(
		        Transition,
		        {
		          transitionAppear: true,
		          unmountOnExit: true,
		          'in': show,
		          timeout: dialogTransitionTimeout,
		          onExit: onExit,
		          onExiting: onExiting,
		          onExited: this.handleHidden,
		          onEnter: onEnter,
		          onEntering: onEntering,
		          onEntered: onEntered
		        },
		        dialog
		      );
		    }

		    return _react2['default'].createElement(
		      _Portal2['default'],
		      {
		        ref: this.setMountNode,
		        container: props.container
		      },
		      _react2['default'].createElement(
		        'div',
		        {
		          ref: 'modal',
		          role: props.role || 'dialog',
		          style: props.style,
		          className: props.className
		        },
		        backdrop && this.renderBackdrop(),
		        dialog
		      )
		    );
		  },

		  renderBackdrop: function renderBackdrop() {
		    var _props2 = this.props;
		    var Transition = _props2.transition;
		    var backdropTransitionTimeout = _props2.backdropTransitionTimeout;

		    var backdrop = _react2['default'].createElement('div', { ref: 'backdrop',
		      style: this.props.backdropStyle,
		      className: this.props.backdropClassName,
		      onClick: this.handleBackdropClick
		    });

		    if (Transition) {
		      backdrop = _react2['default'].createElement(
		        Transition,
		        { transitionAppear: true,
		          'in': this.props.show,
		          timeout: backdropTransitionTimeout
		        },
		        backdrop
		      );
		    }

		    return backdrop;
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    if (nextProps.show) {
		      this.setState({ exited: false });
		    } else if (!nextProps.transition) {
		      // Otherwise let handleHidden take care of marking exited.
		      this.setState({ exited: true });
		    }
		  },

		  componentWillUpdate: function componentWillUpdate(nextProps) {
		    if (nextProps.show) {
		      this.checkForFocus();
		    }
		  },

		  componentDidMount: function componentDidMount() {
		    if (this.props.show) {
		      this.onShow();
		    }
		  },

		  componentDidUpdate: function componentDidUpdate(prevProps) {
		    var transition = this.props.transition;

		    if (prevProps.show && !this.props.show && !transition) {
		      // Otherwise handleHidden will call this.
		      this.onHide();
		    } else if (!prevProps.show && this.props.show) {
		      this.onShow();
		    }
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    var _props3 = this.props;
		    var show = _props3.show;
		    var transition = _props3.transition;

		    if (show || transition && !this.state.exited) {
		      this.onHide();
		    }
		  },

		  onShow: function onShow() {
		    var doc = _utilsOwnerDocument2['default'](this);
		    var container = _utilsGetContainer2['default'](this.props.container, doc.body);

		    modalManager.add(this, container, this.props.containerClassName);

		    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);

		    this._onFocusinListener = _utilsAddFocusListener2['default'](this.enforceFocus);

		    this.focus();

		    if (this.props.onShow) {
		      this.props.onShow();
		    }
		  },

		  onHide: function onHide() {
		    modalManager.remove(this);

		    this._onDocumentKeyupListener.remove();

		    this._onFocusinListener.remove();

		    this.restoreLastFocus();
		  },

		  setMountNode: function setMountNode(ref) {
		    this.mountNode = ref ? ref.getMountNode() : ref;
		  },

		  handleHidden: function handleHidden() {
		    this.setState({ exited: true });
		    this.onHide();

		    if (this.props.onExited) {
		      var _props4;

		      (_props4 = this.props).onExited.apply(_props4, arguments);
		    }
		  },

		  handleBackdropClick: function handleBackdropClick(e) {
		    if (e.target !== e.currentTarget) {
		      return;
		    }

		    if (this.props.onBackdropClick) {
		      this.props.onBackdropClick(e);
		    }

		    if (this.props.backdrop === true) {
		      this.props.onHide();
		    }
		  },

		  handleDocumentKeyUp: function handleDocumentKeyUp(e) {
		    if (this.props.keyboard && e.keyCode === 27 && this.isTopModal()) {
		      if (this.props.onEscapeKeyUp) {
		        this.props.onEscapeKeyUp(e);
		      }
		      this.props.onHide();
		    }
		  },

		  checkForFocus: function checkForFocus() {
		    if (_domHelpersUtilInDOM2['default']) {
		      this.lastFocus = _domHelpersActiveElement2['default']();
		    }
		  },

		  focus: function focus() {
		    var autoFocus = this.props.autoFocus;
		    var modalContent = this.getDialogElement();
		    var current = _domHelpersActiveElement2['default'](_utilsOwnerDocument2['default'](this));
		    var focusInModal = current && _domHelpersQueryContains2['default'](modalContent, current);

		    if (modalContent && autoFocus && !focusInModal) {
		      this.lastFocus = current;

		      if (!modalContent.hasAttribute('tabIndex')) {
		        modalContent.setAttribute('tabIndex', -1);
		        _warning2['default'](false, 'The modal content node does not accept focus. ' + 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".');
		      }

		      modalContent.focus();
		    }
		  },

		  restoreLastFocus: function restoreLastFocus() {
		    // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
		    if (this.lastFocus && this.lastFocus.focus) {
		      this.lastFocus.focus();
		      this.lastFocus = null;
		    }
		  },

		  enforceFocus: function enforceFocus() {
		    var enforceFocus = this.props.enforceFocus;

		    if (!enforceFocus || !this.isMounted() || !this.isTopModal()) {
		      return;
		    }

		    var active = _domHelpersActiveElement2['default'](_utilsOwnerDocument2['default'](this));
		    var modal = this.getDialogElement();

		    if (modal && modal !== active && !_domHelpersQueryContains2['default'](modal, active)) {
		      modal.focus();
		    }
		  },

		  //instead of a ref, which might conflict with one the parent applied.
		  getDialogElement: function getDialogElement() {
		    var node = this.refs.modal;
		    return node && node.lastChild;
		  },

		  isTopModal: function isTopModal() {
		    return modalManager.isTopModal(this);
		  }

		});

		Modal.manager = modalManager;

		exports['default'] = Modal;
		module.exports = exports['default'];

	/***/ },
	/* 211 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _common = __webpack_require__(212);

		/**
		 * Checks whether a prop provides a DOM element
		 *
		 * The element can be provided in two forms:
		 * - Directly passed
		 * - Or passed an object that has a `render` method
		 *
		 * @param props
		 * @param propName
		 * @param componentName
		 * @returns {Error|undefined}
		 */

		function validate(props, propName, componentName) {
		  if (typeof props[propName] !== 'object' || typeof props[propName].render !== 'function' && props[propName].nodeType !== 1) {
		    return new Error(_common.errMsg(props, propName, componentName, ', expected a DOM element or an object that has a `render` method'));
		  }
		}

		exports['default'] = _common.createChainableTypeChecker(validate);
		module.exports = exports['default'];

	/***/ },
	/* 212 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports.errMsg = errMsg;
		exports.createChainableTypeChecker = createChainableTypeChecker;

		function errMsg(props, propName, componentName, msgContinuation) {
		  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
		}

		/**
		 * Create chain-able isRequired validator
		 *
		 * Largely copied directly from:
		 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
		 */

		function createChainableTypeChecker(validate) {
		  function checkType(isRequired, props, propName, componentName) {
		    componentName = componentName || '<<anonymous>>';
		    if (props[propName] == null) {
		      if (isRequired) {
		        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
		      }
		    } else {
		      return validate(props, propName, componentName);
		    }
		  }

		  var chainedCheckType = checkType.bind(null, false);
		  chainedCheckType.isRequired = checkType.bind(null, true);

		  return chainedCheckType;
		}

	/***/ },
	/* 213 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _common = __webpack_require__(212);

		/**
		 * Checks whether a prop provides a type of element.
		 *
		 * The type of element can be provided in two forms:
		 * - tag name (string)
		 * - a return value of React.createClass(...)
		 *
		 * @param props
		 * @param propName
		 * @param componentName
		 * @returns {Error|undefined}
		 */

		function validate(props, propName, componentName) {
		  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

		  if (typeof props[propName] !== 'function') {
		    if (_react2['default'].isValidElement(props[propName])) {
		      return new Error(errBeginning + ', not an actual Element');
		    }

		    if (typeof props[propName] !== 'string') {
		      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
		    }
		  }
		}

		exports['default'] = _common.createChainableTypeChecker(validate);
		module.exports = exports['default'];

	/***/ },
	/* 214 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _reactPropTypesLibMountable = __webpack_require__(211);

		var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

		var _utilsOwnerDocument = __webpack_require__(182);

		var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

		var _utilsGetContainer = __webpack_require__(215);

		var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

		/**
		 * The `<Portal/>` component renders its children into a new "subtree" outside of current component hierarchy.
		 * You can think of it as a declarative `appendChild()`, or jQuery's `$.fn.appendTo()`.
		 * The children of `<Portal/>` component will be appended to the `container` specified.
		 */
		var Portal = _react2['default'].createClass({

		  displayName: 'Portal',

		  propTypes: {
		    /**
		     * A Node, Component instance, or function that returns either. The `container` will have the Portal children
		     * appended to it.
		     */
		    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func])
		  },

		  componentDidMount: function componentDidMount() {
		    this._renderOverlay();
		  },

		  componentDidUpdate: function componentDidUpdate() {
		    this._renderOverlay();
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    this._unrenderOverlay();
		    this._unmountOverlayTarget();
		  },

		  _mountOverlayTarget: function _mountOverlayTarget() {
		    if (!this._overlayTarget) {
		      this._overlayTarget = document.createElement('div');
		      this.getContainerDOMNode().appendChild(this._overlayTarget);
		    }
		  },

		  _unmountOverlayTarget: function _unmountOverlayTarget() {
		    if (this._overlayTarget) {
		      this.getContainerDOMNode().removeChild(this._overlayTarget);
		      this._overlayTarget = null;
		    }
		  },

		  _renderOverlay: function _renderOverlay() {

		    var overlay = !this.props.children ? null : _react2['default'].Children.only(this.props.children);

		    // Save reference for future access.
		    if (overlay !== null) {
		      this._mountOverlayTarget();
		      this._overlayInstance = _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, overlay, this._overlayTarget);
		    } else {
		      // Unrender if the component is null for transitions to null
		      this._unrenderOverlay();
		      this._unmountOverlayTarget();
		    }
		  },

		  _unrenderOverlay: function _unrenderOverlay() {
		    if (this._overlayTarget) {
		      _reactDom2['default'].unmountComponentAtNode(this._overlayTarget);
		      this._overlayInstance = null;
		    }
		  },

		  render: function render() {
		    return null;
		  },

		  getMountNode: function getMountNode() {
		    return this._overlayTarget;
		  },

		  getOverlayDOMNode: function getOverlayDOMNode() {
		    if (!this.isMounted()) {
		      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
		    }

		    if (this._overlayInstance) {
		      if (this._overlayInstance.getWrappedDOMNode) {
		        return this._overlayInstance.getWrappedDOMNode();
		      } else {
		        return _reactDom2['default'].findDOMNode(this._overlayInstance);
		      }
		    }

		    return null;
		  },

		  getContainerDOMNode: function getContainerDOMNode() {
		    return _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);
		  }
		});

		exports['default'] = Portal;
		module.exports = exports['default'];

	/***/ },
	/* 215 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports['default'] = getContainer;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		function getContainer(container, defaultContainer) {
		  container = typeof container === 'function' ? container() : container;
		  return _reactDom2['default'].findDOMNode(container) || defaultContainer;
		}

		module.exports = exports['default'];

	/***/ },
	/* 216 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		var _domHelpersStyle = __webpack_require__(86);

		var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

		var _domHelpersClass = __webpack_require__(217);

		var _domHelpersClass2 = _interopRequireDefault(_domHelpersClass);

		var _domHelpersUtilScrollbarSize = __webpack_require__(200);

		var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

		var _utilsIsOverflowing = __webpack_require__(221);

		var _utilsIsOverflowing2 = _interopRequireDefault(_utilsIsOverflowing);

		var _utilsManageAriaHidden = __webpack_require__(223);

		function findIndexOf(arr, cb) {
		  var idx = -1;
		  arr.some(function (d, i) {
		    if (cb(d, i)) {
		      idx = i;
		      return true;
		    }
		  });
		  return idx;
		}

		function findContainer(data, modal) {
		  return findIndexOf(data, function (d) {
		    return d.modals.indexOf(modal) !== -1;
		  });
		}

		/**
		 * Proper state managment for containers and the modals in those containers.
		 *
		 * @internal Used by the Modal to ensure proper styling of containers.
		 */

		var ModalManager = (function () {
		  function ModalManager() {
		    var hideSiblingNodes = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

		    _classCallCheck(this, ModalManager);

		    this.hideSiblingNodes = hideSiblingNodes;
		    this.modals = [];
		    this.containers = [];
		    this.data = [];
		  }

		  ModalManager.prototype.add = function add(modal, container, className) {
		    var modalIdx = this.modals.indexOf(modal);
		    var containerIdx = this.containers.indexOf(container);

		    if (modalIdx !== -1) {
		      return modalIdx;
		    }

		    modalIdx = this.modals.length;
		    this.modals.push(modal);

		    if (this.hideSiblingNodes) {
		      _utilsManageAriaHidden.hideSiblings(container, modal.mountNode);
		    }

		    if (containerIdx !== -1) {
		      this.data[containerIdx].modals.push(modal);
		      return modalIdx;
		    }

		    var data = {
		      modals: [modal],
		      //right now only the first modal of a container will have its classes applied
		      classes: className ? className.split(/\s+/) : [],
		      //we are only interested in the actual `style` here becasue we will override it
		      style: {
		        overflow: container.style.overflow,
		        paddingRight: container.style.paddingRight
		      }
		    };

		    var style = { overflow: 'hidden' };

		    data.overflowing = _utilsIsOverflowing2['default'](container);

		    if (data.overflowing) {
		      // use computed style, here to get the real padding
		      // to add our scrollbar width
		      style.paddingRight = parseInt(_domHelpersStyle2['default'](container, 'paddingRight') || 0, 10) + _domHelpersUtilScrollbarSize2['default']() + 'px';
		    }

		    _domHelpersStyle2['default'](container, style);

		    data.classes.forEach(_domHelpersClass2['default'].addClass.bind(null, container));

		    this.containers.push(container);
		    this.data.push(data);

		    return modalIdx;
		  };

		  ModalManager.prototype.remove = function remove(modal) {
		    var modalIdx = this.modals.indexOf(modal);

		    if (modalIdx === -1) {
		      return;
		    }

		    var containerIdx = findContainer(this.data, modal);
		    var data = this.data[containerIdx];
		    var container = this.containers[containerIdx];

		    data.modals.splice(data.modals.indexOf(modal), 1);

		    this.modals.splice(modalIdx, 1);

		    // if that was the last modal in a container,
		    // clean up the container stylinhg.
		    if (data.modals.length === 0) {
		      Object.keys(data.style).forEach(function (key) {
		        return container.style[key] = data.style[key];
		      });

		      data.classes.forEach(_domHelpersClass2['default'].removeClass.bind(null, container));

		      if (this.hideSiblingNodes) {
		        _utilsManageAriaHidden.showSiblings(container, modal.mountNode);
		      }
		      this.containers.splice(containerIdx, 1);
		      this.data.splice(containerIdx, 1);
		    } else if (this.hideSiblingNodes) {
		      //otherwise make sure the next top modal is visible to a SR
		      _utilsManageAriaHidden.ariaHidden(false, data.modals[data.modals.length - 1].mountNode);
		    }
		  };

		  ModalManager.prototype.isTopModal = function isTopModal(modal) {
		    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
		  };

		  return ModalManager;
		})();

		exports['default'] = ModalManager;
		module.exports = exports['default'];

	/***/ },
	/* 217 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		module.exports = {
		  addClass: __webpack_require__(218),
		  removeClass: __webpack_require__(220),
		  hasClass: __webpack_require__(219)
		};

	/***/ },
	/* 218 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var hasClass = __webpack_require__(219);

		module.exports = function addClass(element, className) {
		  if (element.classList) element.classList.add(className);else if (!hasClass(element)) element.className = element.className + ' ' + className;
		};

	/***/ },
	/* 219 */
	/***/ function(module, exports) {

		'use strict';
		module.exports = function hasClass(element, className) {
		  if (element.classList) return !!className && element.classList.contains(className);else return (' ' + element.className + ' ').indexOf(' ' + className + ' ') !== -1;
		};

	/***/ },
	/* 220 */
	/***/ function(module, exports) {

		'use strict';

		module.exports = function removeClass(element, className) {
		  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
		};

	/***/ },
	/* 221 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports['default'] = isOverflowing;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _domHelpersQueryIsWindow = __webpack_require__(222);

		var _domHelpersQueryIsWindow2 = _interopRequireDefault(_domHelpersQueryIsWindow);

		var _domHelpersOwnerDocument = __webpack_require__(102);

		var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

		function isBody(node) {
		  return node && node.tagName.toLowerCase() === 'body';
		}

		function bodyIsOverflowing(node) {
		  var doc = _domHelpersOwnerDocument2['default'](node);
		  var win = _domHelpersQueryIsWindow2['default'](doc);
		  var fullWidth = win.innerWidth;

		  // Support: ie8, no innerWidth
		  if (!fullWidth) {
		    var documentElementRect = doc.documentElement.getBoundingClientRect();
		    fullWidth = documentElementRect.right - Math.abs(documentElementRect.left);
		  }

		  return doc.body.clientWidth < fullWidth;
		}

		function isOverflowing(container) {
		  var win = _domHelpersQueryIsWindow2['default'](container);

		  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
		}

		module.exports = exports['default'];

	/***/ },
	/* 222 */
	/***/ function(module, exports) {

		'use strict';

		module.exports = function getWindow(node) {
		  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
		};

	/***/ },
	/* 223 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports.ariaHidden = ariaHidden;
		exports.hideSiblings = hideSiblings;
		exports.showSiblings = showSiblings;

		var BLACKLIST = ['template', 'script', 'style'];

		var isHidable = function isHidable(_ref) {
		  var nodeType = _ref.nodeType;
		  var tagName = _ref.tagName;
		  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
		};

		var siblings = function siblings(container, mount, cb) {
		  mount = [].concat(mount);

		  [].forEach.call(container.children, function (node) {
		    if (mount.indexOf(node) === -1 && isHidable(node)) {
		      cb(node);
		    }
		  });
		};

		function ariaHidden(show, node) {
		  if (!node) {
		    return;
		  }
		  if (show) {
		    node.setAttribute('aria-hidden', 'true');
		  } else {
		    node.removeAttribute('aria-hidden');
		  }
		}

		function hideSiblings(container, mountNode) {
		  siblings(container, mountNode, function (node) {
		    return ariaHidden(true, node);
		  });
		}

		function showSiblings(container, mountNode) {
		  siblings(container, mountNode, function (node) {
		    return ariaHidden(false, node);
		  });
		}

	/***/ },
	/* 224 */
	/***/ function(module, exports) {

		/**
		 * Firefox doesn't have a focusin event so using capture is easiest way to get bubbling
		 * IE8 can't do addEventListener, but does have onfocusin, so we use that in ie8
		 *
		 * We only allow one Listener at a time to avoid stack overflows
		 */
		'use strict';

		exports.__esModule = true;
		exports['default'] = addFocusListener;

		function addFocusListener(handler) {
		  var useFocusin = !document.addEventListener;
		  var remove = undefined;

		  if (useFocusin) {
		    document.attachEvent('onfocusin', handler);
		    remove = function () {
		      return document.detachEvent('onfocusin', handler);
		    };
		  } else {
		    document.addEventListener('focus', handler, true);
		    remove = function () {
		      return document.removeEventListener('focus', handler, true);
		    };
		  }

		  return { remove: remove };
		}

		module.exports = exports['default'];

	/***/ },
	/* 225 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibAll = __webpack_require__(74);

		var _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);

		var _reactPropTypesLibDeprecated = __webpack_require__(98);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _Collapse = __webpack_require__(85);

		var _Collapse2 = _interopRequireDefault(_Collapse);

		var Nav = (function (_React$Component) {
		  _inherits(Nav, _React$Component);

		  function Nav() {
		    _classCallCheck(this, Nav);

		    _React$Component.apply(this, arguments);
		  }

		  Nav.prototype.render = function render() {
		    var _props = this.props;
		    var className = _props.className;
		    var ulClassName = _props.ulClassName;
		    var id = _props.id;
		    var ulId = _props.ulId;

		    var isNavbar = this.props.navbar != null ? this.props.navbar : this.context.$bs_navbar;
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'stacked')] = this.props.stacked;
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'justified')] = this.props.justified;

		    if (isNavbar) {
		      var bsClass = this.context.$bs_navbar_bsClass || 'navbar';
		      var navbarRight = this.props.right != null ? this.props.right : this.props.pullRight;

		      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'nav')] = true;
		      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'right')] = navbarRight;
		      classes[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'left')] = this.props.pullLeft;
		    } else {
		      classes['pull-right'] = this.props.pullRight;
		      classes['pull-left'] = this.props.pullLeft;
		    }

		    var list = _react2['default'].createElement(
		      'ul',
		      _extends({ ref: 'ul'
		      }, this.props, {
		        id: ulId || id,
		        role: this.props.bsStyle === 'tabs' ? 'tablist' : null,
		        className: _classnames2['default'](className, ulClassName, classes)
		      }),
		      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem, this)
		    );

		    // TODO remove in 0.29
		    if (this.context.$bs_deprecated_navbar && this.props.collapsible) {
		      list = _react2['default'].createElement(
		        _Collapse2['default'],
		        {
		          'in': this.props.expanded,
		          className: isNavbar ? 'navbar-collapse' : void 0
		        },
		        _react2['default'].createElement(
		          'div',
		          null,
		          list
		        )
		      );
		    }

		    return list;
		  };

		  Nav.prototype.getChildActiveProp = function getChildActiveProp(child) {
		    if (child.props.active) {
		      return true;
		    }
		    if (this.props.activeKey != null) {
		      if (child.props.eventKey === this.props.activeKey) {
		        return true;
		      }
		    }
		    if (this.props.activeHref != null) {
		      if (child.props.href === this.props.activeHref) {
		        return true;
		      }
		    }

		    return child.props.active;
		  };

		  Nav.prototype.renderNavItem = function renderNavItem(child, index) {
		    return _react.cloneElement(child, {
		      role: this.props.bsStyle === 'tabs' ? 'tab' : null,
		      active: this.getChildActiveProp(child),
		      activeKey: this.props.activeKey,
		      activeHref: this.props.activeHref,
		      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
		      key: child.key ? child.key : index,
		      navItem: true
		    });
		  };

		  return Nav;
		})(_react2['default'].Component);

		Nav.propTypes = {
		  activeHref: _react2['default'].PropTypes.string,
		  activeKey: _react2['default'].PropTypes.any,

		  stacked: _react2['default'].PropTypes.bool,
		  justified: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (_ref) {
		    var justified = _ref.justified;
		    var navbar = _ref.navbar;
		    return justified && navbar ? Error('justified navbar `Nav`s are not supported') : null;
		  }),
		  onSelect: _react2['default'].PropTypes.func,

		  /**
		   * CSS classes for the wrapper `nav` element
		   */
		  className: _react2['default'].PropTypes.string,
		  /**
		   * HTML id for the wrapper `nav` element
		   */
		  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		  /**
		   * CSS classes for the inner `ul` element
		   *
		   * @deprecated
		   */
		  ulClassName: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.string, 'The wrapping `<nav>` has been removed you can use `className` now'),
		  /**
		   * HTML id for the inner `ul` element
		   *
		   * @deprecated
		   */

		  ulId: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.string, 'The wrapping `<nav>` has been removed you can use `id` now'),

		  /**
		   * Apply styling an alignment for use in a Navbar. This prop will be set
		   * automatically when the Nav is used inside a Navbar.
		   */
		  navbar: _react2['default'].PropTypes.bool,
		  eventKey: _react2['default'].PropTypes.any,
		  pullRight: _react2['default'].PropTypes.bool,
		  pullLeft: _react2['default'].PropTypes.bool,

		  right: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use the `pullRight` prop instead'),

		  /**
		   * @private
		   */
		  expanded: _react2['default'].PropTypes.bool,

		  /**
		   * @private
		   */
		  collapsible: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use `Navbar.Collapse` instead, to create collapsible Navbars')
		};

		Nav.contextTypes = {
		  $bs_navbar: _react2['default'].PropTypes.bool,
		  $bs_navbar_bsClass: _react2['default'].PropTypes.string,

		  $bs_deprecated_navbar: _react2['default'].PropTypes.bool
		};

		Nav.defaultProps = {
		  justified: false,
		  pullRight: false,
		  pullLeft: false,
		  stacked: false
		};

		exports['default'] = _utilsBootstrapUtils.bsClass('nav', _utilsBootstrapUtils.bsStyles(['tabs', 'pills'], Nav));
		module.exports = exports['default'];

	/***/ },
	/* 226 */
	/***/ function(module, exports, __webpack_require__) {

		/* eslint react/no-multi-comp: 0 */
		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _uncontrollable = __webpack_require__(174);

		var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _reactPropTypesLibDeprecated = __webpack_require__(98);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var _utilsDeprecationWarning = __webpack_require__(99);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _Grid = __webpack_require__(188);

		var _Grid2 = _interopRequireDefault(_Grid);

		var _deprecatedNavbar = __webpack_require__(227);

		var _deprecatedNavbar2 = _interopRequireDefault(_deprecatedNavbar);

		var _NavbarBrand = __webpack_require__(229);

		var _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);

		var _NavbarHeader = __webpack_require__(230);

		var _NavbarHeader2 = _interopRequireDefault(_NavbarHeader);

		var _NavbarToggle = __webpack_require__(231);

		var _NavbarToggle2 = _interopRequireDefault(_NavbarToggle);

		var _NavbarCollapse = __webpack_require__(232);

		var _NavbarCollapse2 = _interopRequireDefault(_NavbarCollapse);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var has = function has(obj, key) {
		  return obj && ({}).hasOwnProperty.call(obj, key);
		};

		function shouldRenderOldNavbar(component) {
		  var props = component.props;
		  return has(props, 'brand') || has(props, 'toggleButton') || has(props, 'toggleNavKey') || has(props, 'navExpanded') || has(props, 'defaultNavExpanded') ||
		  // this should be safe b/c the new version requires wrapping in a Header
		  _utilsValidComponentChildren2['default'].findValidComponents(props.children, function (child) {
		    return child.props.bsRole === 'brand';
		  }).length > 0;
		}

		var Navbar = _react2['default'].createClass({
		  displayName: 'Navbar',

		  propTypes: {
		    /**
		     * Create a fixed navbar along the top of the screen, that scrolls with the page
		     */
		    fixedTop: _react2['default'].PropTypes.bool,
		    /**
		     * Create a fixed navbar along the bottom of the screen, that scrolls with the page
		     */
		    fixedBottom: _react2['default'].PropTypes.bool,
		    /**
		     * Create a full-width navbar that scrolls away with the page
		     */
		    staticTop: _react2['default'].PropTypes.bool,
		    /**
		     * An alternative dark visual style for the Navbar
		     */
		    inverse: _react2['default'].PropTypes.bool,
		    /**
		     * Allow the Navbar to fluidly adjust to the page or container width, instead of at the
		     * predefined screen breakpoints
		     */
		    fluid: _react2['default'].PropTypes.bool,

		    /**
		     * Set a custom element for this component.
		     */
		    componentClass: _reactPropTypesLibElementType2['default'],
		    /**
		     * A callback fired when the `<Navbar>` body collapses or expands.
		     * Fired when a `<Navbar.Toggle>` is clicked and called with the new `navExpanded` boolean value.
		     *
		     * @controllable navExpanded
		     */
		    onToggle: _react2['default'].PropTypes.func,

		    /**
		     * Explicitly set the visiblity of the navbar body
		     *
		     * @controllable onToggle
		     */
		    expanded: _react2['default'].PropTypes.bool,

		    /**
		     * @deprecated
		     */
		    navExpanded: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.bool, 'Use `expanded` and `defaultExpanded` instead.')
		  },

		  childContextTypes: {
		    $bs_navbar: _react.PropTypes.bool,
		    $bs_navbar_bsClass: _react.PropTypes.string,
		    $bs_navbar_onToggle: _react.PropTypes.func,
		    $bs_navbar_expanded: _react.PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'nav',
		      fixedTop: false,
		      fixedBottom: false,
		      staticTop: false,
		      inverse: false,
		      fluid: false
		    };
		  },

		  getChildContext: function getChildContext() {
		    return {
		      $bs_navbar: true,
		      $bs_navbar_bsClass: this.props.bsClass,
		      $bs_navbar_onToggle: this.handleToggle,
		      $bs_navbar_expanded: this.props.expanded
		    };
		  },

		  handleToggle: function handleToggle() {
		    this.props.onToggle(!this.props.expanded);
		  },

		  isNavExpanded: function isNavExpanded() {
		    return !!this.props.expanded;
		  },

		  render: function render() {
		    if (shouldRenderOldNavbar(this)) {
		      _utilsDeprecationWarning2['default']({ message: 'Rendering a deprecated version of the Navbar due to the use of deprecated ' + 'props. Please use the new Navbar api, and remove `toggleButton`, ' + '`toggleNavKey`, `brand`, `navExpanded`, `defaultNavExpanded` props or the ' + 'use of the `<NavBrand>` component outside of a `<Navbar.Header>`. \n\n' + 'for more details see: http://react-bootstrap.github.io/components.html#navbars'
		      });

		      return _react2['default'].createElement(_deprecatedNavbar2['default'], this.props);
		    }

		    var _props = this.props;
		    var fixedTop = _props.fixedTop;
		    var fixedBottom = _props.fixedBottom;
		    var staticTop = _props.staticTop;
		    var inverse = _props.inverse;
		    var ComponentClass = _props.componentClass;
		    var fluid = _props.fluid;
		    var className = _props.className;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'componentClass', 'fluid', 'className', 'children']);

		    // will result in some false positives but that seems better
		    // than false negatives. strict `undefined` check allows explicit
		    // "nulling" of the role if the user really doesn't want one
		    if (props.role === undefined && ComponentClass !== 'nav') {
		      props.role = 'navigation';
		    }

		    if (inverse) {
		      props.bsStyle = _styleMaps.INVERSE;
		    }

		    var classes = _utilsBootstrapUtils2['default'].getClassSet(props);

		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-top')] = fixedTop;
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-bottom')] = fixedBottom;
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'static-top')] = staticTop;

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, props, { className: _classnames2['default'](className, classes) }),
		      _react2['default'].createElement(
		        _Grid2['default'],
		        { fluid: fluid },
		        children
		      )
		    );
		  }
		});

		var NAVBAR_STATES = [_styleMaps.DEFAULT, _styleMaps.INVERSE];

		Navbar = _utilsBootstrapUtils.bsStyles(NAVBAR_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('navbar', _uncontrollable2['default'](Navbar, { expanded: 'onToggle' })));

		function createSimpleWrapper(tag, suffix, displayName) {
		  var wrapper = function wrapper(_ref, _ref2) {
		    var Tag = _ref.componentClass;
		    var className = _ref.className;

		    var props = _objectWithoutProperties(_ref, ['componentClass', 'className']);

		    var _classNames;

		    var _ref2$$bs_navbar_bsClass = _ref2.$bs_navbar_bsClass;
		    var bsClass = _ref2$$bs_navbar_bsClass === undefined ? 'navbar' : _ref2$$bs_navbar_bsClass;
		    return _react2['default'].createElement(Tag, _extends({}, props, {
		      className: _classnames2['default'](className, _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, suffix), (_classNames = {}, _classNames[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'right')] = props.pullRight, _classNames[_utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'left')] = props.pullLeft, _classNames))
		    }));
		  };

		  wrapper.displayName = displayName;

		  wrapper.propTypes = {
		    componentClass: _reactPropTypesLibElementType2['default'],
		    pullRight: _react2['default'].PropTypes.bool,
		    pullLeft: _react2['default'].PropTypes.bool
		  };
		  wrapper.defaultProps = {
		    componentClass: tag,
		    pullRight: false,
		    pullLeft: false
		  };

		  wrapper.contextTypes = {
		    $bs_navbar_bsClass: _react.PropTypes.string
		  };

		  return wrapper;
		}

		Navbar.Brand = _NavbarBrand2['default'];
		Navbar.Header = _NavbarHeader2['default'];
		Navbar.Toggle = _NavbarToggle2['default'];
		Navbar.Collapse = _NavbarCollapse2['default'];

		Navbar.Form = createSimpleWrapper('div', 'form', 'NavbarForm');
		Navbar.Text = createSimpleWrapper('p', 'text', 'NavbarText');
		Navbar.Link = createSimpleWrapper('a', 'link', 'NavbarLink');

		exports['default'] = Navbar;
		module.exports = exports['default'];

	/***/ },
	/* 227 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibDeprecated = __webpack_require__(98);

		var _reactPropTypesLibDeprecated2 = _interopRequireDefault(_reactPropTypesLibDeprecated);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _Grid = __webpack_require__(188);

		var _Grid2 = _interopRequireDefault(_Grid);

		var _NavBrand = __webpack_require__(228);

		var _NavBrand2 = _interopRequireDefault(_NavBrand);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var Navbar = _react2['default'].createClass({
		  displayName: 'Navbar',

		  propTypes: {
		    fixedTop: _react2['default'].PropTypes.bool,
		    fixedBottom: _react2['default'].PropTypes.bool,
		    staticTop: _react2['default'].PropTypes.bool,
		    inverse: _react2['default'].PropTypes.bool,
		    fluid: _react2['default'].PropTypes.bool,
		    role: _react2['default'].PropTypes.string,
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default'],
		    brand: _reactPropTypesLibDeprecated2['default'](_react2['default'].PropTypes.node, 'Use the `NavBrand` component.'),
		    toggleButton: _react2['default'].PropTypes.node,
		    toggleNavKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    onToggle: _react2['default'].PropTypes.func,
		    navExpanded: _react2['default'].PropTypes.bool,
		    defaultNavExpanded: _react2['default'].PropTypes.bool
		  },

		  // TODO Remove in 0.29
		  childContextTypes: {
		    $bs_deprecated_navbar: _react2['default'].PropTypes.bool
		  },

		  getChildContext: function getChildContext() {
		    return {
		      $bs_deprecated_navbar: true
		    };
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      role: 'navigation',
		      componentClass: 'nav',
		      fixedTop: false,
		      fixedBottom: false,
		      staticTop: false,
		      inverse: false,
		      fluid: false,
		      defaultNavExpanded: false
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      navExpanded: this.props.defaultNavExpanded
		    };
		  },

		  shouldComponentUpdate: function shouldComponentUpdate() {
		    // Defer any updates to this component during the `onSelect` handler.
		    return !this._isChanging;
		  },

		  handleToggle: function handleToggle() {
		    if (this.props.onToggle) {
		      this._isChanging = true;
		      this.props.onToggle();
		      this._isChanging = false;
		    }

		    this.setState({
		      navExpanded: !this.state.navExpanded
		    });
		  },

		  isNavExpanded: function isNavExpanded() {
		    return this.props.navExpanded != null ? this.props.navExpanded : this.state.navExpanded;
		  },

		  hasNavBrandChild: function hasNavBrandChild() {
		    return _utilsValidComponentChildren2['default'].findValidComponents(this.props.children, function (child) {
		      return child.props.bsRole === 'brand';
		    }).length > 0;
		  },

		  render: function render() {
		    var _props = this.props;
		    var brand = _props.brand;
		    var toggleButton = _props.toggleButton;
		    var toggleNavKey = _props.toggleNavKey;
		    var fixedTop = _props.fixedTop;
		    var fixedBottom = _props.fixedBottom;
		    var staticTop = _props.staticTop;
		    var inverse = _props.inverse;
		    var ComponentClass = _props.componentClass;
		    var fluid = _props.fluid;
		    var className = _props.className;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['brand', 'toggleButton', 'toggleNavKey', 'fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'componentClass', 'fluid', 'className', 'children']);

		    // will result in some false positives but that seems better
		    // than false negatives. strict `undefined` check allows explicit
		    // "nulling" of the role if the user really doesn't want one
		    if (props.role === undefined && ComponentClass !== 'nav') {
		      props.role = 'navigation';
		    }

		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-top')] = this.props.fixedTop;
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'fixed-bottom')] = this.props.fixedBottom;
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'static-top')] = this.props.staticTop;

		    // handle built-in styles manually to provide the convenience `inverse` prop
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, _styleMaps.INVERSE)] = this.props.inverse;
		    classes[_utilsBootstrapUtils2['default'].prefix(this.props, _styleMaps.DEFAULT)] = !this.props.inverse;

		    var showHeader = (brand || toggleButton || toggleNavKey != null) && !this.hasNavBrandChild();

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, props, { className: _classnames2['default'](className, classes) }),
		      _react2['default'].createElement(
		        _Grid2['default'],
		        { fluid: fluid },
		        showHeader ? this.renderBrandHeader() : null,
		        _utilsValidComponentChildren2['default'].map(children, this.renderChild)
		      )
		    );
		  },

		  renderBrandHeader: function renderBrandHeader() {
		    var brand = this.props.brand;

		    if (brand) {
		      brand = _react2['default'].createElement(
		        _NavBrand2['default'],
		        null,
		        brand
		      );
		    }

		    return this.renderHeader(brand);
		  },

		  renderHeader: function renderHeader(brand) {
		    var hasToggle = this.props.toggleButton || this.props.toggleNavKey != null;
		    var headerClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'header');

		    return _react2['default'].createElement(
		      'div',
		      { className: headerClass },
		      brand,
		      hasToggle ? this.renderToggleButton() : null
		    );
		  },

		  renderChild: function renderChild(child, index) {
		    var key = child.key != null ? child.key : index;

		    if (child.props.bsRole === 'brand') {
		      return _react2['default'].cloneElement(this.renderHeader(child), { key: key });
		    }

		    var toggleNavKey = this.props.toggleNavKey;

		    var collapsible = toggleNavKey != null && toggleNavKey === child.props.eventKey;

		    return _react2['default'].cloneElement(child, {
		      navbar: true,
		      collapsible: collapsible,
		      expanded: collapsible && this.isNavExpanded(),
		      key: key
		    });
		  },

		  renderToggleButton: function renderToggleButton() {
		    var toggleButton = this.props.toggleButton;

		    var toggleClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'toggle');

		    if (_react2['default'].isValidElement(toggleButton)) {
		      return _react2['default'].cloneElement(toggleButton, {
		        className: _classnames2['default'](toggleButton.props.className, toggleClass),
		        onClick: _utilsCreateChainedFunction2['default'](this.handleToggle, toggleButton.props.onClick)
		      });
		    }

		    var children = undefined;
		    if (toggleButton != null) {
		      children = toggleButton;
		    } else {
		      children = [_react2['default'].createElement(
		        'span',
		        { className: 'sr-only', key: 0 },
		        'Toggle navigation'
		      ), _react2['default'].createElement('span', { className: 'icon-bar', key: 1 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 2 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 3 })];
		    }

		    return _react2['default'].createElement(
		      'button',
		      {
		        type: 'button',
		        onClick: this.handleToggle,
		        className: toggleClass
		      },
		      children
		    );
		  }

		});

		var NAVBAR_STATES = [_styleMaps.DEFAULT, _styleMaps.INVERSE];

		exports['default'] = _utilsBootstrapUtils.bsStyles(NAVBAR_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('navbar', Navbar));
		module.exports = exports['default'];

	/***/ },
	/* 228 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _NavbarBrand = __webpack_require__(229);

		var _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);

		var _utilsDeprecationWarning = __webpack_require__(99);

		var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

		exports['default'] = _utilsDeprecationWarning2['default'].wrapper(_NavbarBrand2['default'], {
		  message: 'The `NavBrand` component has been renamed to: `NavbarBrand`. ' + 'Please use that component instead; this alias will be removed in an upcoming release'
		});
		module.exports = exports['default'];

	/***/ },
	/* 229 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var NavbarBrand = (function (_React$Component) {
		  _inherits(NavbarBrand, _React$Component);

		  function NavbarBrand() {
		    _classCallCheck(this, NavbarBrand);

		    _React$Component.apply(this, arguments);
		  }

		  NavbarBrand.prototype.render = function render() {
		    var _props = this.props;
		    var className = _props.className;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['className', 'children']);

		    var _context$$bs_navbar_bsClass = this.context.$bs_navbar_bsClass;
		    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;

		    var brandClasses = _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'brand');

		    if (_react2['default'].isValidElement(children)) {
		      return _react2['default'].cloneElement(children, {
		        className: _classnames2['default'](children.props.className, className, brandClasses)
		      });
		    }

		    return _react2['default'].createElement(
		      'span',
		      _extends({}, props, { className: _classnames2['default'](className, brandClasses) }),
		      children
		    );
		  };

		  return NavbarBrand;
		})(_react2['default'].Component);

		NavbarBrand.contextTypes = {
		  $bs_navbar_bsClass: _react2['default'].PropTypes.string
		};

		exports['default'] = NavbarBrand;
		module.exports = exports['default'];

	/***/ },
	/* 230 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var NavbarHeader = _react2['default'].createClass({
		  displayName: 'NavbarHeader',

		  contextTypes: {
		    $bs_navbar_bsClass: _react.PropTypes.string
		  },

		  render: function render() {
		    var _props = this.props;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['children']);

		    var _context$$bs_navbar_bsClass = this.context.$bs_navbar_bsClass;
		    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;

		    return _react2['default'].createElement(
		      'div',
		      { className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'header') },
		      children
		    );
		  }
		});

		exports['default'] = NavbarHeader;
		module.exports = exports['default'];

	/***/ },
	/* 231 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var NavbarToggle = _react2['default'].createClass({
		  displayName: 'NavbarToggle',

		  propTypes: {
		    /**
		     * The toggle content, if left empty it will render the default toggle (seen above).
		     */
		    children: _react.PropTypes.node
		  },

		  contextTypes: {
		    $bs_navbar_bsClass: _react.PropTypes.string,
		    $bs_navbar_onToggle: _react.PropTypes.func
		  },

		  render: function render() {
		    var _props = this.props;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['children']);

		    var _context = this.context;
		    var _context$$bs_navbar_bsClass = _context.$bs_navbar_bsClass;
		    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;
		    var onToggle = _context.$bs_navbar_onToggle;

		    return _react2['default'].createElement(
		      'button',
		      { type: 'button',
		        onClick: onToggle,
		        className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'toggle')
		      },
		      children || [_react2['default'].createElement(
		        'span',
		        { className: 'sr-only', key: 0 },
		        'Toggle navigation'
		      ), _react2['default'].createElement('span', { className: 'icon-bar', key: 1 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 2 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 3 })]
		    );
		  }
		});

		exports['default'] = NavbarToggle;
		module.exports = exports['default'];

	/***/ },
	/* 232 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _Collapse = __webpack_require__(85);

		var _Collapse2 = _interopRequireDefault(_Collapse);

		var NavbarCollapse = _react2['default'].createClass({
		  displayName: 'NavbarCollapse',

		  contextTypes: {
		    $bs_navbar_bsClass: _react.PropTypes.string,
		    $bs_navbar_expanded: _react.PropTypes.bool
		  },

		  render: function render() {
		    var _props = this.props;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['children']);

		    var _context = this.context;
		    var _context$$bs_navbar_bsClass = _context.$bs_navbar_bsClass;
		    var bsClass = _context$$bs_navbar_bsClass === undefined ? 'navbar' : _context$$bs_navbar_bsClass;
		    var expanded = _context.$bs_navbar_expanded;

		    return _react2['default'].createElement(
		      _Collapse2['default'],
		      _extends({ 'in': expanded }, props),
		      _react2['default'].createElement(
		        'div',
		        { className: _utilsBootstrapUtils2['default'].prefix({ bsClass: bsClass }, 'collapse') },
		        children
		      )
		    );
		  }
		});

		exports['default'] = NavbarCollapse;
		module.exports = exports['default'];

	/***/ },
	/* 233 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _Dropdown = __webpack_require__(100);

		var _Dropdown2 = _interopRequireDefault(_Dropdown);

		var NavDropdown = (function (_React$Component) {
		  _inherits(NavDropdown, _React$Component);

		  function NavDropdown() {
		    _classCallCheck(this, NavDropdown);

		    _React$Component.apply(this, arguments);
		  }

		  NavDropdown.prototype.render = function render() {
		    var _props = this.props;
		    var children = _props.children;
		    var title = _props.title;
		    var noCaret = _props.noCaret;

		    var props = _objectWithoutProperties(_props, ['children', 'title', 'noCaret']);

		    return _react2['default'].createElement(
		      _Dropdown2['default'],
		      _extends({}, props, { componentClass: 'li' }),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Toggle,
		        {
		          useAnchor: true,
		          disabled: props.disabled,
		          noCaret: noCaret
		        },
		        title
		      ),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Menu,
		        null,
		        children
		      )
		    );
		  };

		  return NavDropdown;
		})(_react2['default'].Component);

		NavDropdown.propTypes = _extends({
		  noCaret: _react2['default'].PropTypes.bool,
		  title: _react2['default'].PropTypes.node.isRequired
		}, _Dropdown2['default'].propTypes);

		exports['default'] = NavDropdown;
		module.exports = exports['default'];

	/***/ },
	/* 234 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _SafeAnchor = __webpack_require__(61);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var NavItem = _react2['default'].createClass({
		  displayName: 'NavItem',

		  propTypes: {
		    linkId: _react2['default'].PropTypes.string,
		    onSelect: _react2['default'].PropTypes.func,
		    active: _react2['default'].PropTypes.bool,
		    disabled: _react2['default'].PropTypes.bool,
		    href: _react2['default'].PropTypes.string,
		    onClick: _react2['default'].PropTypes.func,
		    role: _react2['default'].PropTypes.string,
		    title: _react2['default'].PropTypes.node,
		    eventKey: _react2['default'].PropTypes.any,
		    target: _react2['default'].PropTypes.string,
		    'aria-controls': _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      active: false,
		      disabled: false
		    };
		  },

		  render: function render() {
		    var _props = this.props;
		    var role = _props.role;
		    var linkId = _props.linkId;
		    var disabled = _props.disabled;
		    var active = _props.active;
		    var href = _props.href;
		    var onClick = _props.onClick;
		    var title = _props.title;
		    var target = _props.target;
		    var children = _props.children;
		    var tabIndex = _props.tabIndex;
		    var ariaControls = _props['aria-controls'];

		    var props = _objectWithoutProperties(_props, ['role', 'linkId', 'disabled', 'active', 'href', 'onClick', 'title', 'target', 'children', 'tabIndex', 'aria-controls']);

		    var classes = {
		      active: active,
		      disabled: disabled
		    };
		    var linkProps = {
		      role: role,
		      href: href,
		      onClick: _utilsCreateChainedFunction2['default'](onClick, this.handleClick),
		      title: title,
		      target: target,
		      tabIndex: tabIndex,
		      id: linkId
		    };

		    if (!role && href === '#') {
		      linkProps.role = 'button';
		    } else if (role === 'tab') {
		      linkProps['aria-selected'] = active;
		    }

		    return _react2['default'].createElement(
		      'li',
		      _extends({}, props, { role: 'presentation', className: _classnames2['default'](props.className, classes) }),
		      _react2['default'].createElement(
		        _SafeAnchor2['default'],
		        _extends({}, linkProps, { 'aria-controls': ariaControls }),
		        children
		      )
		    );
		  },

		  handleClick: function handleClick(e) {
		    if (this.props.onSelect) {
		      e.preventDefault();

		      if (!this.props.disabled) {
		        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
		      }
		    }
		  }
		});

		exports['default'] = NavItem;
		module.exports = exports['default'];
		//eslint-disable-line

	/***/ },
	/* 235 */
	/***/ function(module, exports, __webpack_require__) {

		/* eslint react/prop-types: [2, {ignore: ["container", "containerPadding", "target", "placement", "children"] }] */
		/* These properties are validated in 'Portal' and 'Position' components */

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactOverlaysLibOverlay = __webpack_require__(236);

		var _reactOverlaysLibOverlay2 = _interopRequireDefault(_reactOverlaysLibOverlay);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _Fade = __webpack_require__(204);

		var _Fade2 = _interopRequireDefault(_Fade);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var Overlay = (function (_React$Component) {
		  _inherits(Overlay, _React$Component);

		  function Overlay() {
		    _classCallCheck(this, Overlay);

		    _React$Component.apply(this, arguments);
		  }

		  Overlay.prototype.render = function render() {
		    var _props = this.props;
		    var child = _props.children;
		    var transition = _props.animation;

		    var props = _objectWithoutProperties(_props, ['children', 'animation']);

		    if (transition === true) {
		      transition = _Fade2['default'];
		    }

		    if (transition === false) {
		      transition = null;
		    }

		    if (!transition) {
		      child = _react.cloneElement(child, {
		        className: _classnames2['default']('in', child.props.className)
		      });
		    }

		    return _react2['default'].createElement(
		      _reactOverlaysLibOverlay2['default'],
		      _extends({}, props, {
		        transition: transition
		      }),
		      child
		    );
		  };

		  return Overlay;
		})(_react2['default'].Component);

		Overlay.propTypes = _extends({}, _reactOverlaysLibOverlay2['default'].propTypes, {

		  /**
		   * Set the visibility of the Overlay
		   */
		  show: _react2['default'].PropTypes.bool,
		  /**
		   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
		   */
		  rootClose: _react2['default'].PropTypes.bool,
		  /**
		   * A callback invoked by the overlay when it wishes to be hidden. Required if
		   * `rootClose` is specified.
		   */
		  onHide: _react2['default'].PropTypes.func,

		  /**
		   * Use animation
		   */
		  animation: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _reactPropTypesLibElementType2['default']]),

		  /**
		   * Callback fired before the Overlay transitions in
		   */
		  onEnter: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired as the Overlay begins to transition in
		   */
		  onEntering: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired after the Overlay finishes transitioning in
		   */
		  onEntered: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired right before the Overlay transitions out
		   */
		  onExit: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired as the Overlay begins to transition out
		   */
		  onExiting: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired after the Overlay finishes transitioning out
		   */
		  onExited: _react2['default'].PropTypes.func
		});

		Overlay.defaultProps = {
		  animation: _Fade2['default'],
		  rootClose: false,
		  show: false
		};

		exports['default'] = Overlay;
		module.exports = exports['default'];

	/***/ },
	/* 236 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _Portal = __webpack_require__(214);

		var _Portal2 = _interopRequireDefault(_Portal);

		var _Position = __webpack_require__(237);

		var _Position2 = _interopRequireDefault(_Position);

		var _RootCloseWrapper = __webpack_require__(178);

		var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

		var _reactPropTypesLibElementType = __webpack_require__(213);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		/**
		 * Built on top of `<Position/>` and `<Portal/>`, the overlay component is great for custom tooltip overlays.
		 */

		var Overlay = (function (_React$Component) {
		  _inherits(Overlay, _React$Component);

		  function Overlay(props, context) {
		    _classCallCheck(this, Overlay);

		    _React$Component.call(this, props, context);

		    this.state = { exited: !props.show };
		    this.onHiddenListener = this.handleHidden.bind(this);
		  }

		  Overlay.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		    if (nextProps.show) {
		      this.setState({ exited: false });
		    } else if (!nextProps.transition) {
		      // Otherwise let handleHidden take care of marking exited.
		      this.setState({ exited: true });
		    }
		  };

		  Overlay.prototype.render = function render() {
		    var _props = this.props;
		    var container = _props.container;
		    var containerPadding = _props.containerPadding;
		    var target = _props.target;
		    var placement = _props.placement;
		    var shouldUpdatePosition = _props.shouldUpdatePosition;
		    var rootClose = _props.rootClose;
		    var children = _props.children;
		    var Transition = _props.transition;

		    var props = _objectWithoutProperties(_props, ['container', 'containerPadding', 'target', 'placement', 'shouldUpdatePosition', 'rootClose', 'children', 'transition']);

		    // Don't un-render the overlay while it's transitioning out.
		    var mountOverlay = props.show || Transition && !this.state.exited;
		    if (!mountOverlay) {
		      // Don't bother showing anything if we don't have to.
		      return null;
		    }

		    var child = children;

		    // Position is be inner-most because it adds inline styles into the child,
		    // which the other wrappers don't forward correctly.
		    child = _react2['default'].createElement(
		      _Position2['default'],
		      { container: container, containerPadding: containerPadding, target: target, placement: placement, shouldUpdatePosition: shouldUpdatePosition },
		      child
		    );

		    if (Transition) {
		      var onExit = props.onExit;
		      var onExiting = props.onExiting;
		      var onEnter = props.onEnter;
		      var onEntering = props.onEntering;
		      var onEntered = props.onEntered;

		      // This animates the child node by injecting props, so it must precede
		      // anything that adds a wrapping div.
		      child = _react2['default'].createElement(
		        Transition,
		        {
		          'in': props.show,
		          transitionAppear: true,
		          onExit: onExit,
		          onExiting: onExiting,
		          onExited: this.onHiddenListener,
		          onEnter: onEnter,
		          onEntering: onEntering,
		          onEntered: onEntered
		        },
		        child
		      );
		    }

		    // This goes after everything else because it adds a wrapping div.
		    if (rootClose) {
		      child = _react2['default'].createElement(
		        _RootCloseWrapper2['default'],
		        { onRootClose: props.onHide },
		        child
		      );
		    }

		    return _react2['default'].createElement(
		      _Portal2['default'],
		      { container: container },
		      child
		    );
		  };

		  Overlay.prototype.handleHidden = function handleHidden() {
		    this.setState({ exited: true });

		    if (this.props.onExited) {
		      var _props2;

		      (_props2 = this.props).onExited.apply(_props2, arguments);
		    }
		  };

		  return Overlay;
		})(_react2['default'].Component);

		Overlay.propTypes = _extends({}, _Portal2['default'].propTypes, _Position2['default'].propTypes, {
		  /**
		   * Set the visibility of the Overlay
		   */
		  show: _react2['default'].PropTypes.bool,
		  /**
		   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
		   */
		  rootClose: _react2['default'].PropTypes.bool,
		  /**
		   * A Callback fired by the Overlay when it wishes to be hidden.
		   */
		  onHide: _react2['default'].PropTypes.func,

		  /**
		   * A `<Transition/>` component used to animate the overlay changes visibility.
		   */
		  transition: _reactPropTypesLibElementType2['default'],

		  /**
		   * Callback fired before the Overlay transitions in
		   */
		  onEnter: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired as the Overlay begins to transition in
		   */
		  onEntering: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired after the Overlay finishes transitioning in
		   */
		  onEntered: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired right before the Overlay transitions out
		   */
		  onExit: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired as the Overlay begins to transition out
		   */
		  onExiting: _react2['default'].PropTypes.func,

		  /**
		   * Callback fired after the Overlay finishes transitioning out
		   */
		  onExited: _react2['default'].PropTypes.func
		});

		exports['default'] = Overlay;
		module.exports = exports['default'];

	/***/ },
	/* 237 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsOwnerDocument = __webpack_require__(182);

		var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

		var _utilsGetContainer = __webpack_require__(215);

		var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

		var _utilsOverlayPositionUtils = __webpack_require__(238);

		var _reactPropTypesLibMountable = __webpack_require__(211);

		var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

		/**
		 * The Position component calulates the corrdinates for its child, to
		 * position it relative to a `target` component or node. Useful for creating callouts and tooltips,
		 * the Position component injects a `style` props with `left` and `top` values for positioning your component.
		 *
		 * It also injects "arrow" `left`, and `top` values for styling callout arrows for giving your components
		 * a sense of directionality.
		 */

		var Position = (function (_React$Component) {
		  _inherits(Position, _React$Component);

		  function Position(props, context) {
		    _classCallCheck(this, Position);

		    _React$Component.call(this, props, context);

		    this.state = {
		      positionLeft: 0,
		      positionTop: 0,
		      arrowOffsetLeft: null,
		      arrowOffsetTop: null
		    };

		    this._needsFlush = false;
		    this._lastTarget = null;
		  }

		  Position.prototype.componentDidMount = function componentDidMount() {
		    this.updatePosition();
		  };

		  Position.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
		    this._needsFlush = true;
		  };

		  Position.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		    if (this._needsFlush) {
		      this._needsFlush = false;
		      this.updatePosition(prevProps.placement !== this.props.placement);
		    }
		  };

		  Position.prototype.componentWillUnmount = function componentWillUnmount() {
		    // Probably not necessary, but just in case holding a reference to the
		    // target causes problems somewhere.
		    this._lastTarget = null;
		  };

		  Position.prototype.render = function render() {
		    var _props = this.props;
		    var children = _props.children;
		    var className = _props.className;

		    var props = _objectWithoutProperties(_props, ['children', 'className']);

		    var _state = this.state;
		    var positionLeft = _state.positionLeft;
		    var positionTop = _state.positionTop;

		    var arrowPosition = _objectWithoutProperties(_state, ['positionLeft', 'positionTop']);

		    // These should not be forwarded to the child.
		    delete props.target;
		    delete props.container;
		    delete props.containerPadding;

		    var child = _react2['default'].Children.only(children);
		    return _react.cloneElement(child, _extends({}, props, arrowPosition, {
		      //do we need to also forward positionLeft and positionTop if they are set to style?
		      positionLeft: positionLeft,
		      positionTop: positionTop,
		      className: _classnames2['default'](className, child.props.className),
		      style: _extends({}, child.props.style, {
		        left: positionLeft,
		        top: positionTop
		      })
		    }));
		  };

		  Position.prototype.getTargetSafe = function getTargetSafe() {
		    if (!this.props.target) {
		      return null;
		    }

		    var target = this.props.target(this.props);
		    if (!target) {
		      // This is so we can just use === check below on all falsy targets.
		      return null;
		    }

		    return target;
		  };

		  Position.prototype.updatePosition = function updatePosition(placementChanged) {
		    var target = this.getTargetSafe();

		    if (!this.props.shouldUpdatePosition && target === this._lastTarget && !placementChanged) {
		      return;
		    }

		    this._lastTarget = target;

		    if (!target) {
		      this.setState({
		        positionLeft: 0,
		        positionTop: 0,
		        arrowOffsetLeft: null,
		        arrowOffsetTop: null
		      });

		      return;
		    }

		    var overlay = _reactDom2['default'].findDOMNode(this);
		    var container = _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);

		    this.setState(_utilsOverlayPositionUtils.calcOverlayPosition(this.props.placement, overlay, target, container, this.props.containerPadding));
		  };

		  return Position;
		})(_react2['default'].Component);

		Position.propTypes = {
		  /**
		   * Function mapping props to a DOM node the component is positioned next to
		   *
		   */
		  target: _react2['default'].PropTypes.func,

		  /**
		   * "offsetParent" of the component
		   */
		  container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func]),
		  /**
		   * Minimum spacing in pixels between container border and component border
		   */
		  containerPadding: _react2['default'].PropTypes.number,
		  /**
		   * How to position the component relative to the target
		   */
		  placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),
		  /**
		   * Whether the position should be changed on each update
		   */
		  shouldUpdatePosition: _react2['default'].PropTypes.bool
		};

		Position.displayName = 'Position';

		Position.defaultProps = {
		  containerPadding: 0,
		  placement: 'right',
		  shouldUpdatePosition: false
		};

		exports['default'] = Position;
		module.exports = exports['default'];

	/***/ },
	/* 238 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

		var _ownerDocument = __webpack_require__(182);

		var _ownerDocument2 = _interopRequireDefault(_ownerDocument);

		var _domHelpersQueryOffset = __webpack_require__(239);

		var _domHelpersQueryOffset2 = _interopRequireDefault(_domHelpersQueryOffset);

		var _domHelpersQueryPosition = __webpack_require__(240);

		var _domHelpersQueryPosition2 = _interopRequireDefault(_domHelpersQueryPosition);

		var _domHelpersQueryScrollTop = __webpack_require__(242);

		var _domHelpersQueryScrollTop2 = _interopRequireDefault(_domHelpersQueryScrollTop);

		var utils = {

		  getContainerDimensions: function getContainerDimensions(containerNode) {
		    var width = undefined,
		        height = undefined,
		        scroll = undefined;

		    if (containerNode.tagName === 'BODY') {
		      width = window.innerWidth;
		      height = window.innerHeight;

		      scroll = _domHelpersQueryScrollTop2['default'](_ownerDocument2['default'](containerNode).documentElement) || _domHelpersQueryScrollTop2['default'](containerNode);
		    } else {
		      var _getOffset = _domHelpersQueryOffset2['default'](containerNode);

		      width = _getOffset.width;
		      height = _getOffset.height;

		      scroll = _domHelpersQueryScrollTop2['default'](containerNode);
		    }

		    return { width: width, height: height, scroll: scroll };
		  },

		  getPosition: function getPosition(target, container) {
		    var offset = container.tagName === 'BODY' ? _domHelpersQueryOffset2['default'](target) : _domHelpersQueryPosition2['default'](target, container);

		    return offset;
		  },

		  calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {
		    var childOffset = utils.getPosition(target, container);

		    var _getOffset2 = _domHelpersQueryOffset2['default'](overlayNode);

		    var overlayHeight = _getOffset2.height;
		    var overlayWidth = _getOffset2.width;

		    var positionLeft = undefined,
		        positionTop = undefined,
		        arrowOffsetLeft = undefined,
		        arrowOffsetTop = undefined;

		    if (placement === 'left' || placement === 'right') {
		      positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;

		      if (placement === 'left') {
		        positionLeft = childOffset.left - overlayWidth;
		      } else {
		        positionLeft = childOffset.left + childOffset.width;
		      }

		      var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);

		      positionTop += topDelta;
		      arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
		      arrowOffsetLeft = void 0;
		    } else if (placement === 'top' || placement === 'bottom') {
		      positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;

		      if (placement === 'top') {
		        positionTop = childOffset.top - overlayHeight;
		      } else {
		        positionTop = childOffset.top + childOffset.height;
		      }

		      var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
		      positionLeft += leftDelta;
		      arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';
		      arrowOffsetTop = void 0;
		    } else {
		      throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
		    }

		    return { positionLeft: positionLeft, positionTop: positionTop, arrowOffsetLeft: arrowOffsetLeft, arrowOffsetTop: arrowOffsetTop };
		  }
		};

		function getTopDelta(top, overlayHeight, container, padding) {
		  var containerDimensions = utils.getContainerDimensions(container);
		  var containerScroll = containerDimensions.scroll;
		  var containerHeight = containerDimensions.height;

		  var topEdgeOffset = top - padding - containerScroll;
		  var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;

		  if (topEdgeOffset < 0) {
		    return -topEdgeOffset;
		  } else if (bottomEdgeOffset > containerHeight) {
		    return containerHeight - bottomEdgeOffset;
		  } else {
		    return 0;
		  }
		}

		function getLeftDelta(left, overlayWidth, container, padding) {
		  var containerDimensions = utils.getContainerDimensions(container);
		  var containerWidth = containerDimensions.width;

		  var leftEdgeOffset = left - padding;
		  var rightEdgeOffset = left + padding + overlayWidth;

		  if (leftEdgeOffset < 0) {
		    return -leftEdgeOffset;
		  } else if (rightEdgeOffset > containerWidth) {
		    return containerWidth - rightEdgeOffset;
		  } else {
		    return 0;
		  }
		}
		exports['default'] = utils;
		module.exports = exports['default'];

	/***/ },
	/* 239 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var contains = __webpack_require__(103),
		    getWindow = __webpack_require__(222),
		    ownerDocument = __webpack_require__(102);

		module.exports = function offset(node) {
		  var doc = ownerDocument(node),
		      win = getWindow(doc),
		      docElem = doc && doc.documentElement,
		      box = { top: 0, left: 0, height: 0, width: 0 };

		  if (!doc) return;

		  // Make sure it's not a disconnected DOM node
		  if (!contains(docElem, node)) return box;

		  if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect();

		  if (box.width || box.height) {

		    box = {
		      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
		      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
		      width: (box.width == null ? node.offsetWidth : box.width) || 0,
		      height: (box.height == null ? node.offsetHeight : box.height) || 0
		    };
		  }

		  return box;
		};

	/***/ },
	/* 240 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var babelHelpers = __webpack_require__(92);

		exports.__esModule = true;
		exports['default'] = position;

		var _offset = __webpack_require__(239);

		var _offset2 = babelHelpers.interopRequireDefault(_offset);

		var _offsetParent = __webpack_require__(241);

		var _offsetParent2 = babelHelpers.interopRequireDefault(_offsetParent);

		var _scrollTop = __webpack_require__(242);

		var _scrollTop2 = babelHelpers.interopRequireDefault(_scrollTop);

		var _scrollLeft = __webpack_require__(243);

		var _scrollLeft2 = babelHelpers.interopRequireDefault(_scrollLeft);

		var _style = __webpack_require__(86);

		var _style2 = babelHelpers.interopRequireDefault(_style);

		function nodeName(node) {
		  return node.nodeName && node.nodeName.toLowerCase();
		}

		function position(node, offsetParent) {
		  var parentOffset = { top: 0, left: 0 },
		      offset;

		  // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		  // because it is its only offset parent
		  if ((0, _style2['default'])(node, 'position') === 'fixed') {
		    offset = node.getBoundingClientRect();
		  } else {
		    offsetParent = offsetParent || (0, _offsetParent2['default'])(node);
		    offset = (0, _offset2['default'])(node);

		    if (nodeName(offsetParent) !== 'html') parentOffset = (0, _offset2['default'])(offsetParent);

		    parentOffset.top += parseInt((0, _style2['default'])(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop2['default'])(offsetParent) || 0;
		    parentOffset.left += parseInt((0, _style2['default'])(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft2['default'])(offsetParent) || 0;
		  }

		  // Subtract parent offsets and node margins
		  return babelHelpers._extends({}, offset, {
		    top: offset.top - parentOffset.top - (parseInt((0, _style2['default'])(node, 'marginTop'), 10) || 0),
		    left: offset.left - parentOffset.left - (parseInt((0, _style2['default'])(node, 'marginLeft'), 10) || 0)
		  });
		}

		module.exports = exports['default'];

	/***/ },
	/* 241 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var babelHelpers = __webpack_require__(92);

		exports.__esModule = true;
		exports['default'] = offsetParent;

		var _ownerDocument = __webpack_require__(102);

		var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

		var _style = __webpack_require__(86);

		var _style2 = babelHelpers.interopRequireDefault(_style);

		function nodeName(node) {
		  return node.nodeName && node.nodeName.toLowerCase();
		}

		function offsetParent(node) {
		  var doc = (0, _ownerDocument2['default'])(node),
		      offsetParent = node && node.offsetParent;

		  while (offsetParent && nodeName(node) !== 'html' && (0, _style2['default'])(offsetParent, 'position') === 'static') {
		    offsetParent = offsetParent.offsetParent;
		  }

		  return offsetParent || doc.documentElement;
		}

		module.exports = exports['default'];

	/***/ },
	/* 242 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var getWindow = __webpack_require__(222);

		module.exports = function scrollTop(node, val) {
		  var win = getWindow(node);

		  if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;

		  if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;
		};

	/***/ },
	/* 243 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var getWindow = __webpack_require__(222);

		module.exports = function scrollTop(node, val) {
		  var win = getWindow(node);

		  if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;

		  if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;
		};

	/***/ },
	/* 244 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {/* eslint-disable react/prop-types */

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _Object$keys = __webpack_require__(47)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _domHelpersQueryContains = __webpack_require__(103);

		var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

		var _lodashCompatObjectPick = __webpack_require__(187);

		var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _warning = __webpack_require__(52);

		var _warning2 = _interopRequireDefault(_warning);

		var _Overlay = __webpack_require__(235);

		var _Overlay2 = _interopRequireDefault(_Overlay);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		/**
		 * Check if value one is inside or equal to the of value
		 *
		 * @param {string} one
		 * @param {string|array} of
		 * @returns {boolean}
		 */
		function isOneOf(one, of) {
		  if (Array.isArray(of)) {
		    return of.indexOf(one) >= 0;
		  }
		  return one === of;
		}

		var OverlayTrigger = _react2['default'].createClass({
		  displayName: 'OverlayTrigger',

		  propTypes: _extends({}, _Overlay2['default'].propTypes, {

		    /**
		    * Specify which action or actions trigger Overlay visibility
		    */
		    trigger: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']), _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']))]),

		    /**
		     * A millisecond delay amount to show and hide the Overlay once triggered
		     */
		    delay: _react2['default'].PropTypes.number,
		    /**
		     * A millisecond delay amount before showing the Overlay once triggered.
		     */
		    delayShow: _react2['default'].PropTypes.number,
		    /**
		     * A millisecond delay amount before hiding the Overlay once triggered.
		     */
		    delayHide: _react2['default'].PropTypes.number,

		    /**
		     * The initial visibility state of the Overlay, for more nuanced visibility controll consider
		     * using the Overlay component directly.
		     */
		    defaultOverlayShown: _react2['default'].PropTypes.bool,

		    /**
		     * An element or text to overlay next to the target.
		     */
		    overlay: _react2['default'].PropTypes.node.isRequired,

		    /**
		     * @private
		     */
		    onBlur: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    onClick: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    onFocus: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    onMouseEnter: _react2['default'].PropTypes.func,
		    /**
		     * @private
		     */
		    onMouseLeave: _react2['default'].PropTypes.func,

		    // override specific overlay props
		    /**
		     * @private
		     */
		    target: function target() {},
		    /**
		    * @private
		    */
		    onHide: function onHide() {},
		    /**
		     * @private
		     */
		    show: function show() {}
		  }),

		  getDefaultProps: function getDefaultProps() {
		    return {
		      defaultOverlayShown: false,
		      trigger: ['hover', 'focus']
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      isOverlayShown: this.props.defaultOverlayShown
		    };
		  },

		  show: function show() {
		    this.setState({
		      isOverlayShown: true
		    });
		  },

		  hide: function hide() {
		    this.setState({
		      isOverlayShown: false
		    });
		  },

		  toggle: function toggle() {
		    if (this.state.isOverlayShown) {
		      this.hide();
		    } else {
		      this.show();
		    }
		  },

		  componentWillMount: function componentWillMount() {
		    this.handleMouseOver = this.handleMouseOverOut.bind(null, this.handleDelayedShow);
		    this.handleMouseOut = this.handleMouseOverOut.bind(null, this.handleDelayedHide);
		  },

		  componentDidMount: function componentDidMount() {
		    this._mountNode = document.createElement('div');
		    this.renderOverlay();
		  },

		  renderOverlay: function renderOverlay() {
		    _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, this._overlay, this._mountNode);
		  },

		  componentWillUnmount: function componentWillUnmount() {
		    _reactDom2['default'].unmountComponentAtNode(this._mountNode);
		    this._mountNode = null;
		    clearTimeout(this._hoverShowDelay);
		    clearTimeout(this._hoverHideDelay);
		  },

		  componentDidUpdate: function componentDidUpdate() {
		    if (this._mountNode) {
		      this.renderOverlay();
		    }
		  },

		  getOverlayTarget: function getOverlayTarget() {
		    return _reactDom2['default'].findDOMNode(this);
		  },

		  getOverlay: function getOverlay() {
		    var overlayProps = _extends({}, _lodashCompatObjectPick2['default'](this.props, _Object$keys(_Overlay2['default'].propTypes)), {
		      show: this.state.isOverlayShown,
		      onHide: this.hide,
		      target: this.getOverlayTarget,
		      onExit: this.props.onExit,
		      onExiting: this.props.onExiting,
		      onExited: this.props.onExited,
		      onEnter: this.props.onEnter,
		      onEntering: this.props.onEntering,
		      onEntered: this.props.onEntered
		    });

		    var overlay = _react.cloneElement(this.props.overlay, {
		      placement: overlayProps.placement,
		      container: overlayProps.container
		    });

		    return _react2['default'].createElement(
		      _Overlay2['default'],
		      overlayProps,
		      overlay
		    );
		  },

		  render: function render() {
		    var trigger = _react2['default'].Children.only(this.props.children);
		    var triggerProps = trigger.props;

		    var props = {
		      'aria-describedby': this.props.overlay.props.id
		    };

		    // create in render otherwise owner is lost...
		    this._overlay = this.getOverlay();

		    props.onClick = _utilsCreateChainedFunction2['default'](triggerProps.onClick, this.props.onClick);

		    if (isOneOf('click', this.props.trigger)) {
		      props.onClick = _utilsCreateChainedFunction2['default'](this.toggle, props.onClick);
		    }

		    if (isOneOf('hover', this.props.trigger)) {
		      process.env.NODE_ENV !== 'production' ? _warning2['default'](!(this.props.trigger === 'hover'), '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibilty of the overlay to just mouse users. ' + 'Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.') : undefined;

		      props.onMouseOver = _utilsCreateChainedFunction2['default'](this.handleMouseOver, this.props.onMouseOver, triggerProps.onMouseOver);
		      props.onMouseOut = _utilsCreateChainedFunction2['default'](this.handleMouseOut, this.props.onMouseOut, triggerProps.onMouseOut);
		    }

		    if (isOneOf('focus', this.props.trigger)) {
		      props.onFocus = _utilsCreateChainedFunction2['default'](this.handleDelayedShow, this.props.onFocus, triggerProps.onFocus);
		      props.onBlur = _utilsCreateChainedFunction2['default'](this.handleDelayedHide, this.props.onBlur, triggerProps.onBlur);
		    }

		    return _react.cloneElement(trigger, props);
		  },

		  handleDelayedShow: function handleDelayedShow() {
		    var _this = this;

		    if (this._hoverHideDelay != null) {
		      clearTimeout(this._hoverHideDelay);
		      this._hoverHideDelay = null;
		      return;
		    }

		    if (this.state.isOverlayShown || this._hoverShowDelay != null) {
		      return;
		    }

		    var delay = this.props.delayShow != null ? this.props.delayShow : this.props.delay;

		    if (!delay) {
		      this.show();
		      return;
		    }

		    this._hoverShowDelay = setTimeout(function () {
		      _this._hoverShowDelay = null;
		      _this.show();
		    }, delay);
		  },

		  handleDelayedHide: function handleDelayedHide() {
		    var _this2 = this;

		    if (this._hoverShowDelay != null) {
		      clearTimeout(this._hoverShowDelay);
		      this._hoverShowDelay = null;
		      return;
		    }

		    if (!this.state.isOverlayShown || this._hoverHideDelay != null) {
		      return;
		    }

		    var delay = this.props.delayHide != null ? this.props.delayHide : this.props.delay;

		    if (!delay) {
		      this.hide();
		      return;
		    }

		    this._hoverHideDelay = setTimeout(function () {
		      _this2._hoverHideDelay = null;
		      _this2.hide();
		    }, delay);
		  },

		  // Simple implementation of mouseEnter and mouseLeave.
		  // React's built version is broken: https://github.com/facebook/react/issues/4251
		  // for cases when the trigger is disabled and mouseOut/Over can cause flicker moving
		  // from one child element to another.
		  handleMouseOverOut: function handleMouseOverOut(handler, e) {
		    var target = e.currentTarget;
		    var related = e.relatedTarget || e.nativeEvent.toElement;

		    if (!related || related !== target && !_domHelpersQueryContains2['default'](target, related)) {
		      handler(e);
		    }
		  }

		});

		exports['default'] = OverlayTrigger;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

	/***/ },
	/* 245 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var PageHeader = _react2['default'].createClass({
		  displayName: 'PageHeader',

		  render: function render() {
		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'page-header') }),
		      _react2['default'].createElement(
		        'h1',
		        null,
		        this.props.children
		      )
		    );
		  }
		});

		exports['default'] = PageHeader;
		module.exports = exports['default'];

	/***/ },
	/* 246 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _SafeAnchor = __webpack_require__(61);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var PageItem = _react2['default'].createClass({
		  displayName: 'PageItem',

		  propTypes: {
		    href: _react2['default'].PropTypes.string,
		    target: _react2['default'].PropTypes.string,
		    title: _react2['default'].PropTypes.string,
		    disabled: _react2['default'].PropTypes.bool,
		    previous: _react2['default'].PropTypes.bool,
		    next: _react2['default'].PropTypes.bool,
		    onSelect: _react2['default'].PropTypes.func,
		    eventKey: _react2['default'].PropTypes.any
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      disabled: false,
		      previous: false,
		      next: false
		    };
		  },

		  render: function render() {
		    var classes = {
		      'disabled': this.props.disabled,
		      'previous': this.props.previous,
		      'next': this.props.next
		    };

		    return _react2['default'].createElement(
		      'li',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, classes) }),
		      _react2['default'].createElement(
		        _SafeAnchor2['default'],
		        {
		          href: this.props.href,
		          title: this.props.title,
		          target: this.props.target,
		          onClick: this.handleSelect },
		        this.props.children
		      )
		    );
		  },

		  handleSelect: function handleSelect(e) {
		    if (this.props.onSelect || this.props.disabled) {
		      e.preventDefault();

		      if (!this.props.disabled) {
		        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
		      }
		    }
		  }
		});

		exports['default'] = PageItem;
		module.exports = exports['default'];

	/***/ },
	/* 247 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var Pager = _react2['default'].createClass({
		  displayName: 'Pager',

		  propTypes: {
		    onSelect: _react2['default'].PropTypes.func
		  },

		  render: function render() {
		    return _react2['default'].createElement(
		      'ul',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, 'pager') }),
		      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderPageItem)
		    );
		  },

		  renderPageItem: function renderPageItem(child, index) {
		    return _react.cloneElement(child, {
		      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
		      key: child.key ? child.key : index
		    });
		  }
		});

		exports['default'] = Pager;
		module.exports = exports['default'];

	/***/ },
	/* 248 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _PaginationButton = __webpack_require__(249);

		var _PaginationButton2 = _interopRequireDefault(_PaginationButton);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var _SafeAnchor = __webpack_require__(61);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var Pagination = _react2['default'].createClass({
		  displayName: 'Pagination',

		  propTypes: {
		    activePage: _react2['default'].PropTypes.number,
		    items: _react2['default'].PropTypes.number,
		    maxButtons: _react2['default'].PropTypes.number,
		    /**
		     * When `true`, will display the first and the last button page
		     */
		    boundaryLinks: _react2['default'].PropTypes.bool,
		    /**
		     * When `true`, will display the default node value ('&hellip;').
		     * Otherwise, will display provided node (when specified).
		     */
		    ellipsis: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    /**
		     * When `true`, will display the default node value ('&laquo;').
		     * Otherwise, will display provided node (when specified).
		     */
		    first: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    /**
		     * When `true`, will display the default node value ('&raquo;').
		     * Otherwise, will display provided node (when specified).
		     */
		    last: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    /**
		     * When `true`, will display the default node value ('&lsaquo;').
		     * Otherwise, will display provided node (when specified).
		     */
		    prev: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    /**
		     * When `true`, will display the default node value ('&rsaquo;').
		     * Otherwise, will display provided node (when specified).
		     */
		    next: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _react2['default'].PropTypes.node]),
		    onSelect: _react2['default'].PropTypes.func,
		    /**
		     * You can use a custom element for the buttons
		     */
		    buttonComponentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      activePage: 1,
		      items: 1,
		      maxButtons: 0,
		      first: false,
		      last: false,
		      prev: false,
		      next: false,
		      ellipsis: true,
		      boundaryLinks: false,
		      buttonComponentClass: _SafeAnchor2['default'],
		      bsClass: 'pagination'
		    };
		  },

		  renderPageButtons: function renderPageButtons() {
		    var pageButtons = [];
		    var startPage = undefined,
		        endPage = undefined,
		        hasHiddenPagesAfter = undefined;
		    var _props = this.props;
		    var maxButtons = _props.maxButtons;
		    var activePage = _props.activePage;
		    var items = _props.items;
		    var onSelect = _props.onSelect;
		    var ellipsis = _props.ellipsis;
		    var buttonComponentClass = _props.buttonComponentClass;
		    var boundaryLinks = _props.boundaryLinks;

		    if (maxButtons) {
		      var hiddenPagesBefore = activePage - parseInt(maxButtons / 2, 10);
		      startPage = hiddenPagesBefore > 1 ? hiddenPagesBefore : 1;
		      hasHiddenPagesAfter = startPage + maxButtons <= items;

		      if (!hasHiddenPagesAfter) {
		        endPage = items;
		        startPage = items - maxButtons + 1;
		        if (startPage < 1) {
		          startPage = 1;
		        }
		      } else {
		        endPage = startPage + maxButtons - 1;
		      }
		    } else {
		      startPage = 1;
		      endPage = items;
		    }

		    for (var pagenumber = startPage; pagenumber <= endPage; pagenumber++) {
		      pageButtons.push(_react2['default'].createElement(
		        _PaginationButton2['default'],
		        {
		          key: pagenumber,
		          eventKey: pagenumber,
		          active: pagenumber === activePage,
		          onSelect: onSelect,
		          buttonComponentClass: buttonComponentClass },
		        pagenumber
		      ));
		    }

		    if (boundaryLinks && ellipsis && startPage !== 1) {
		      pageButtons.unshift(_react2['default'].createElement(
		        _PaginationButton2['default'],
		        {
		          key: 'ellipsisFirst',
		          disabled: true,
		          buttonComponentClass: buttonComponentClass },
		        _react2['default'].createElement(
		          'span',
		          { 'aria-label': 'More' },
		          this.props.ellipsis === true ? '…' : this.props.ellipsis
		        )
		      ));

		      pageButtons.unshift(_react2['default'].createElement(
		        _PaginationButton2['default'],
		        {
		          key: 1,
		          eventKey: 1,
		          active: false,
		          onSelect: onSelect,
		          buttonComponentClass: buttonComponentClass },
		        '1'
		      ));
		    }

		    if (maxButtons && hasHiddenPagesAfter && ellipsis) {
		      pageButtons.push(_react2['default'].createElement(
		        _PaginationButton2['default'],
		        {
		          key: 'ellipsis',
		          disabled: true,
		          buttonComponentClass: buttonComponentClass },
		        _react2['default'].createElement(
		          'span',
		          { 'aria-label': 'More' },
		          this.props.ellipsis === true ? '…' : this.props.ellipsis
		        )
		      ));

		      if (boundaryLinks && endPage !== items) {
		        pageButtons.push(_react2['default'].createElement(
		          _PaginationButton2['default'],
		          {
		            key: items,
		            eventKey: items,
		            active: false,
		            onSelect: onSelect,
		            buttonComponentClass: buttonComponentClass },
		          items
		        ));
		      }
		    }

		    return pageButtons;
		  },

		  renderPrev: function renderPrev() {
		    if (!this.props.prev) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      _PaginationButton2['default'],
		      {
		        key: 'prev',
		        eventKey: this.props.activePage - 1,
		        disabled: this.props.activePage === 1,
		        onSelect: this.props.onSelect,
		        buttonComponentClass: this.props.buttonComponentClass },
		      _react2['default'].createElement(
		        'span',
		        { 'aria-label': 'Previous' },
		        this.props.prev === true ? '‹' : this.props.prev
		      )
		    );
		  },

		  renderNext: function renderNext() {
		    if (!this.props.next) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      _PaginationButton2['default'],
		      {
		        key: 'next',
		        eventKey: this.props.activePage + 1,
		        disabled: this.props.activePage >= this.props.items,
		        onSelect: this.props.onSelect,
		        buttonComponentClass: this.props.buttonComponentClass },
		      _react2['default'].createElement(
		        'span',
		        { 'aria-label': 'Next' },
		        this.props.next === true ? '›' : this.props.next
		      )
		    );
		  },

		  renderFirst: function renderFirst() {
		    if (!this.props.first) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      _PaginationButton2['default'],
		      {
		        key: 'first',
		        eventKey: 1,
		        disabled: this.props.activePage === 1,
		        onSelect: this.props.onSelect,
		        buttonComponentClass: this.props.buttonComponentClass },
		      _react2['default'].createElement(
		        'span',
		        { 'aria-label': 'First' },
		        this.props.first === true ? '«' : this.props.first
		      )
		    );
		  },

		  renderLast: function renderLast() {
		    if (!this.props.last) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      _PaginationButton2['default'],
		      {
		        key: 'last',
		        eventKey: this.props.items,
		        disabled: this.props.activePage >= this.props.items,
		        onSelect: this.props.onSelect,
		        buttonComponentClass: this.props.buttonComponentClass },
		      _react2['default'].createElement(
		        'span',
		        { 'aria-label': 'Last' },
		        this.props.last === true ? '»' : this.props.last
		      )
		    );
		  },

		  render: function render() {
		    return _react2['default'].createElement(
		      'ul',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].getClassSet(this.props)) }),
		      this.renderFirst(),
		      this.renderPrev(),
		      this.renderPageButtons(),
		      this.renderNext(),
		      this.renderLast()
		    );
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('pagination', Pagination);
		module.exports = exports['default'];

	/***/ },
	/* 249 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsCreateSelectedEvent = __webpack_require__(250);

		var _utilsCreateSelectedEvent2 = _interopRequireDefault(_utilsCreateSelectedEvent);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var PaginationButton = _react2['default'].createClass({
		  displayName: 'PaginationButton',

		  propTypes: {
		    className: _react2['default'].PropTypes.string,
		    eventKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    onSelect: _react2['default'].PropTypes.func,
		    disabled: _react2['default'].PropTypes.bool,
		    active: _react2['default'].PropTypes.bool,
		    /**
		     * You can use a custom element for this component
		     */
		    buttonComponentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      active: false,
		      disabled: false
		    };
		  },

		  handleClick: function handleClick(event) {
		    if (this.props.disabled) {
		      return;
		    }

		    if (this.props.onSelect) {
		      var selectedEvent = _utilsCreateSelectedEvent2['default'](this.props.eventKey);
		      this.props.onSelect(event, selectedEvent);
		    }
		  },

		  render: function render() {
		    var classes = {
		      active: this.props.active,
		      disabled: this.props.disabled
		    };

		    var _props = this.props;
		    var className = _props.className;

		    var anchorProps = _objectWithoutProperties(_props, ['className']);

		    var ButtonComponentClass = this.props.buttonComponentClass;

		    return _react2['default'].createElement(
		      'li',
		      { className: _classnames2['default'](className, classes) },
		      _react2['default'].createElement(ButtonComponentClass, _extends({}, anchorProps, {
		        onClick: this.handleClick }))
		    );
		  }
		});

		exports['default'] = PaginationButton;
		module.exports = exports['default'];

	/***/ },
	/* 250 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;
		exports["default"] = createSelectedEvent;

		function createSelectedEvent(eventKey) {
		  var selectionPrevented = false;

		  return {
		    eventKey: eventKey,

		    preventSelection: function preventSelection() {
		      selectionPrevented = true;
		    },

		    isSelectionPrevented: function isSelectionPrevented() {
		      return selectionPrevented;
		    }
		  };
		}

		module.exports = exports["default"];

	/***/ },
	/* 251 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var _Collapse = __webpack_require__(85);

		var _Collapse2 = _interopRequireDefault(_Collapse);

		var Panel = _react2['default'].createClass({
		  displayName: 'Panel',

		  propTypes: {
		    collapsible: _react2['default'].PropTypes.bool,
		    onSelect: _react2['default'].PropTypes.func,
		    header: _react2['default'].PropTypes.node,
		    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    footer: _react2['default'].PropTypes.node,
		    defaultExpanded: _react2['default'].PropTypes.bool,
		    expanded: _react2['default'].PropTypes.bool,
		    eventKey: _react2['default'].PropTypes.any,
		    headerRole: _react2['default'].PropTypes.string,
		    panelRole: _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      defaultExpanded: false
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      expanded: this.props.defaultExpanded
		    };
		  },

		  handleSelect: function handleSelect(e) {
		    e.selected = true;

		    if (this.props.onSelect) {
		      this.props.onSelect(e, this.props.eventKey);
		    } else {
		      e.preventDefault();
		    }

		    if (e.selected) {
		      this.handleToggle();
		    }
		  },

		  handleToggle: function handleToggle() {
		    this.setState({ expanded: !this.state.expanded });
		  },

		  isExpanded: function isExpanded() {
		    return this.props.expanded != null ? this.props.expanded : this.state.expanded;
		  },

		  render: function render() {
		    var _props = this.props;
		    var headerRole = _props.headerRole;
		    var panelRole = _props.panelRole;

		    var props = _objectWithoutProperties(_props, ['headerRole', 'panelRole']);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, {
		        className: _classnames2['default'](this.props.className, _utilsBootstrapUtils2['default'].getClassSet(this.props)),
		        id: this.props.collapsible ? null : this.props.id, onSelect: null }),
		      this.renderHeading(headerRole),
		      this.props.collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody(),
		      this.renderFooter()
		    );
		  },

		  renderCollapsibleBody: function renderCollapsibleBody(panelRole) {
		    var props = {
		      className: _utilsBootstrapUtils2['default'].prefix(this.props, 'collapse'),
		      id: this.props.id,
		      ref: 'panel',
		      'aria-hidden': !this.isExpanded()
		    };
		    if (panelRole) {
		      props.role = panelRole;
		    }

		    return _react2['default'].createElement(
		      _Collapse2['default'],
		      { 'in': this.isExpanded() },
		      _react2['default'].createElement(
		        'div',
		        props,
		        this.renderBody()
		      )
		    );
		  },

		  renderBody: function renderBody() {
		    var _this = this;

		    var allChildren = this.props.children;
		    var bodyElements = [];
		    var panelBodyChildren = [];
		    var bodyClass = _utilsBootstrapUtils2['default'].prefix(this.props, 'body');

		    function getProps() {
		      return { key: bodyElements.length };
		    }

		    function addPanelChild(child) {
		      bodyElements.push(_react.cloneElement(child, getProps()));
		    }

		    function addPanelBody(children) {
		      bodyElements.push(_react2['default'].createElement(
		        'div',
		        _extends({ className: bodyClass }, getProps()),
		        children
		      ));
		    }

		    function maybeRenderPanelBody() {
		      if (panelBodyChildren.length === 0) {
		        return;
		      }

		      addPanelBody(panelBodyChildren);
		      panelBodyChildren = [];
		    }

		    // Handle edge cases where we should not iterate through children.
		    if (!Array.isArray(allChildren) || allChildren.length === 0) {
		      if (this.shouldRenderFill(allChildren)) {
		        addPanelChild(allChildren);
		      } else {
		        addPanelBody(allChildren);
		      }
		    } else {
		      allChildren.forEach(function (child) {
		        if (_this.shouldRenderFill(child)) {
		          maybeRenderPanelBody();

		          // Separately add the filled element.
		          addPanelChild(child);
		        } else {
		          panelBodyChildren.push(child);
		        }
		      });

		      maybeRenderPanelBody();
		    }

		    return bodyElements;
		  },

		  shouldRenderFill: function shouldRenderFill(child) {
		    return _react2['default'].isValidElement(child) && child.props.fill != null;
		  },

		  renderHeading: function renderHeading(headerRole) {
		    var header = this.props.header;

		    if (!header) {
		      return null;
		    }

		    if (!_react2['default'].isValidElement(header) || Array.isArray(header)) {
		      header = this.props.collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;
		    } else {
		      var className = _classnames2['default'](_utilsBootstrapUtils2['default'].prefix(this.props, 'title'), header.props.className);

		      if (this.props.collapsible) {
		        header = _react.cloneElement(header, {
		          className: className,
		          children: this.renderAnchor(header.props.children, headerRole)
		        });
		      } else {
		        header = _react.cloneElement(header, { className: className });
		      }
		    }

		    return _react2['default'].createElement(
		      'div',
		      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'heading') },
		      header
		    );
		  },

		  renderAnchor: function renderAnchor(header, headerRole) {
		    return _react2['default'].createElement(
		      'a',
		      {
		        href: '#' + (this.props.id || ''),
		        'aria-controls': this.props.collapsible ? this.props.id : null,
		        className: this.isExpanded() ? null : 'collapsed',
		        'aria-expanded': this.isExpanded(),
		        'aria-selected': this.isExpanded(),
		        onClick: this.handleSelect,
		        role: headerRole },
		      header
		    );
		  },

		  renderCollapsibleTitle: function renderCollapsibleTitle(header, headerRole) {
		    return _react2['default'].createElement(
		      'h4',
		      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'title'), role: 'presentation' },
		      this.renderAnchor(header, headerRole)
		    );
		  },

		  renderFooter: function renderFooter() {
		    if (!this.props.footer) {
		      return null;
		    }

		    return _react2['default'].createElement(
		      'div',
		      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'footer') },
		      this.props.footer
		    );
		  }
		});

		var PANEL_STATES = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY);

		exports['default'] = _utilsBootstrapUtils.bsStyles(PANEL_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('panel', Panel));
		module.exports = exports['default'];

	/***/ },
	/* 252 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(173);

		var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

		var Popover = _react2['default'].createClass({
		  displayName: 'Popover',

		  propTypes: {

		    /**
		     * An html id attribute, necessary for accessibility
		     * @type {string}
		     * @required
		     */
		    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

		    /**
		     * Sets the direction the Popover is positioned towards.
		     */
		    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

		    /**
		     * The "left" position value for the Popover.
		     */
		    positionLeft: _react2['default'].PropTypes.number,
		    /**
		     * The "top" position value for the Popover.
		     */
		    positionTop: _react2['default'].PropTypes.number,
		    /**
		     * The "left" position value for the Popover arrow.
		     */
		    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		    /**
		     * The "top" position value for the Popover arrow.
		     */
		    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		    /**
		     * Title text
		     */
		    title: _react2['default'].PropTypes.node
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      placement: 'right',
		      bsClass: 'popover'
		    };
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes[this.props.placement] = true, _classes);

		    var style = _extends({
		      'left': this.props.positionLeft,
		      'top': this.props.positionTop,
		      'display': 'block'
		    }, this.props.style);

		    // eslint-disable-line react/prop-types
		    var arrowStyle = {
		      'left': this.props.arrowOffsetLeft,
		      'top': this.props.arrowOffsetTop
		    };

		    return _react2['default'].createElement(
		      'div',
		      _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style, title: null }),
		      _react2['default'].createElement('div', { className: 'arrow', style: arrowStyle }),
		      this.props.title ? this.renderTitle() : null,
		      _react2['default'].createElement(
		        'div',
		        { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content') },
		        this.props.children
		      )
		    );
		  },

		  renderTitle: function renderTitle() {
		    return _react2['default'].createElement(
		      'h3',
		      { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'title') },
		      this.props.title
		    );
		  }
		});

		exports['default'] = Popover;
		module.exports = exports['default'];
		// we don't want to expose the `style` property

	/***/ },
	/* 253 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _Interpolate = __webpack_require__(193);

		var _Interpolate2 = _interopRequireDefault(_Interpolate);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		/**
		 * Custom propTypes checker
		 */
		function onlyProgressBar(props, propName, componentName) {
		  if (props[propName]) {
		    var _ret = (function () {
		      var error = undefined,
		          childIdentifier = undefined;

		      _react2['default'].Children.forEach(props[propName], function (child) {
		        if (child.type !== ProgressBar) {
		          //eslint-disable-line
		          childIdentifier = child.type.displayName ? child.type.displayName : child.type;
		          error = new Error('Children of ' + componentName + ' can contain only ProgressBar components. Found ' + childIdentifier);
		        }
		      });

		      return {
		        v: error
		      };
		    })();

		    if (typeof _ret === 'object') return _ret.v;
		  }
		}

		var ProgressBar = (function (_React$Component) {
		  _inherits(ProgressBar, _React$Component);

		  function ProgressBar() {
		    _classCallCheck(this, ProgressBar);

		    _React$Component.apply(this, arguments);
		  }

		  ProgressBar.prototype.getPercentage = function getPercentage(now, min, max) {
		    var roundPrecision = 1000;
		    return Math.round((now - min) / (max - min) * 100 * roundPrecision) / roundPrecision;
		  };

		  ProgressBar.prototype.render = function render() {
		    if (this.props.isChild) {
		      return this.renderProgressBar();
		    }

		    var content = undefined;

		    if (this.props.children) {
		      content = _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChildBar);
		    } else {
		      content = this.renderProgressBar();
		    }

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        className: _classnames2['default'](this.props.className, 'progress'),
		        min: null,
		        max: null,
		        label: null,
		        'aria-valuetext': null
		      }),
		      content
		    );
		  };

		  ProgressBar.prototype.renderChildBar = function renderChildBar(child, index) {
		    return _react.cloneElement(child, {
		      isChild: true,
		      key: child.key ? child.key : index
		    });
		  };

		  ProgressBar.prototype.renderProgressBar = function renderProgressBar() {
		    var _classNames;

		    var _props = this.props;
		    var className = _props.className;
		    var label = _props.label;
		    var now = _props.now;
		    var min = _props.min;
		    var max = _props.max;

		    var props = _objectWithoutProperties(_props, ['className', 'label', 'now', 'min', 'max']);

		    var percentage = this.getPercentage(now, min, max);

		    if (typeof label === 'string') {
		      label = this.renderLabel(percentage);
		    }

		    if (this.props.srOnly) {
		      label = _react2['default'].createElement(
		        'span',
		        { className: 'sr-only' },
		        label
		      );
		    }

		    var classes = _classnames2['default'](className, _utilsBootstrapUtils2['default'].getClassSet(this.props), (_classNames = {
		      active: this.props.active
		    }, _classNames[_utilsBootstrapUtils2['default'].prefix(this.props, 'striped')] = this.props.active || this.props.striped, _classNames));

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, props, {
		        className: classes,
		        role: 'progressbar',
		        style: { width: percentage + '%' },
		        'aria-valuenow': this.props.now,
		        'aria-valuemin': this.props.min,
		        'aria-valuemax': this.props.max }),
		      label
		    );
		  };

		  ProgressBar.prototype.renderLabel = function renderLabel(percentage) {
		    var InterpolateClass = this.props.interpolateClass || _Interpolate2['default'];

		    return _react2['default'].createElement(
		      InterpolateClass,
		      {
		        now: this.props.now,
		        min: this.props.min,
		        max: this.props.max,
		        percent: percentage,
		        bsStyle: this.props.bsStyle },
		      this.props.label
		    );
		  };

		  return ProgressBar;
		})(_react2['default'].Component);

		ProgressBar.propTypes = _extends({}, ProgressBar.propTypes, {
		  min: _react.PropTypes.number,
		  now: _react.PropTypes.number,
		  max: _react.PropTypes.number,
		  label: _react.PropTypes.node,
		  srOnly: _react.PropTypes.bool,
		  striped: _react.PropTypes.bool,
		  active: _react.PropTypes.bool,
		  children: onlyProgressBar,
		  className: _react2['default'].PropTypes.string,
		  interpolateClass: _react.PropTypes.node,
		  /**
		   * @private
		   */
		  isChild: _react.PropTypes.bool
		});

		ProgressBar.defaultProps = _extends({}, ProgressBar.defaultProps, {
		  min: 0,
		  max: 100,
		  active: false,
		  isChild: false,
		  srOnly: false,
		  striped: false
		});

		exports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('progress-bar', ProgressBar));
		module.exports = exports['default'];

	/***/ },
	/* 254 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _warning = __webpack_require__(52);

		var _warning2 = _interopRequireDefault(_warning);

		var ResponsiveEmbed = (function (_React$Component) {
		  _inherits(ResponsiveEmbed, _React$Component);

		  function ResponsiveEmbed() {
		    _classCallCheck(this, ResponsiveEmbed);

		    _React$Component.apply(this, arguments);
		  }

		  ResponsiveEmbed.prototype.render = function render() {
		    var _props = this.props;
		    var bsClass = _props.bsClass;
		    var className = _props.className;
		    var a16by9 = _props.a16by9;
		    var a4by3 = _props.a4by3;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['bsClass', 'className', 'a16by9', 'a4by3', 'children']);

		    process.env.NODE_ENV !== 'production' ? _warning2['default'](!(!a16by9 && !a4by3), '`a16by9` or `a4by3` attribute must be set.') : undefined;
		    process.env.NODE_ENV !== 'production' ? _warning2['default'](!(a16by9 && a4by3), 'Either `a16by9` or `a4by3` attribute can be set. Not both.') : undefined;

		    var aspectRatio = {
		      'embed-responsive-16by9': a16by9,
		      'embed-responsive-4by3': a4by3
		    };

		    return _react2['default'].createElement(
		      'div',
		      { className: _classnames2['default'](bsClass, aspectRatio) },
		      _react.cloneElement(children, _extends({}, props, {
		        className: _classnames2['default'](className, 'embed-responsive-item')
		      }))
		    );
		  };

		  return ResponsiveEmbed;
		})(_react2['default'].Component);

		ResponsiveEmbed.defaultProps = {
		  bsClass: 'embed-responsive',
		  a16by9: false,
		  a4by3: false
		};

		ResponsiveEmbed.propTypes = {
		  /**
		   * bootstrap className
		   * @private
		   */
		  bsClass: _react.PropTypes.string,
		  /**
		   * This component accepts only one child element
		   */
		  children: _react.PropTypes.element.isRequired,
		  /**
		   * 16by9 aspect ratio
		   */
		  a16by9: _react.PropTypes.bool,
		  /**
		   * 4by3 aspect ratio
		   */
		  a4by3: _react.PropTypes.bool
		};

		exports['default'] = ResponsiveEmbed;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

	/***/ },
	/* 255 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _reactPropTypesLibElementType = __webpack_require__(71);

		var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

		var Row = _react2['default'].createClass({
		  displayName: 'Row',

		  propTypes: {
		    /**
		     * You can use a custom element for this component
		     */
		    componentClass: _reactPropTypesLibElementType2['default']
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      componentClass: 'div'
		    };
		  },

		  render: function render() {
		    var ComponentClass = this.props.componentClass;

		    return _react2['default'].createElement(
		      ComponentClass,
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'row') }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Row;
		module.exports = exports['default'];

	/***/ },
	/* 256 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _Object$keys = __webpack_require__(47)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _Button = __webpack_require__(70);

		var _Button2 = _interopRequireDefault(_Button);

		var _Dropdown = __webpack_require__(100);

		var _Dropdown2 = _interopRequireDefault(_Dropdown);

		var _SplitToggle = __webpack_require__(257);

		var _SplitToggle2 = _interopRequireDefault(_SplitToggle);

		var _lodashCompatObjectOmit = __webpack_require__(158);

		var _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);

		var _lodashCompatObjectPick = __webpack_require__(187);

		var _lodashCompatObjectPick2 = _interopRequireDefault(_lodashCompatObjectPick);

		var SplitButton = (function (_React$Component) {
		  _inherits(SplitButton, _React$Component);

		  function SplitButton() {
		    _classCallCheck(this, SplitButton);

		    _React$Component.apply(this, arguments);
		  }

		  SplitButton.prototype.render = function render() {
		    var _props = this.props;
		    var children = _props.children;
		    var title = _props.title;
		    var onClick = _props.onClick;
		    var target = _props.target;
		    var href = _props.href;
		    var toggleLabel = _props.toggleLabel;
		    var bsSize = _props.bsSize;
		    var bsStyle = _props.bsStyle;

		    var props = _objectWithoutProperties(_props, ['children', 'title', 'onClick', 'target', 'href', 'toggleLabel', 'bsSize', 'bsStyle']);

		    var disabled = props.disabled;

		    var dropdownProps = _lodashCompatObjectPick2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));
		    var buttonProps = _lodashCompatObjectOmit2['default'](props, _Object$keys(_Dropdown2['default'].ControlledComponent.propTypes));

		    return _react2['default'].createElement(
		      _Dropdown2['default'],
		      dropdownProps,
		      _react2['default'].createElement(
		        _Button2['default'],
		        _extends({}, buttonProps, {
		          onClick: onClick,
		          bsStyle: bsStyle,
		          bsSize: bsSize,
		          disabled: disabled,
		          target: target,
		          href: href
		        }),
		        title
		      ),
		      _react2['default'].createElement(_SplitToggle2['default'], {
		        'aria-label': toggleLabel || title,
		        bsStyle: bsStyle,
		        bsSize: bsSize,
		        disabled: disabled
		      }),
		      _react2['default'].createElement(
		        _Dropdown2['default'].Menu,
		        null,
		        children
		      )
		    );
		  };

		  return SplitButton;
		})(_react2['default'].Component);

		SplitButton.propTypes = _extends({}, _Dropdown2['default'].propTypes, {
		  bsStyle: _Button2['default'].propTypes.bsStyle,

		  /**
		   * @private
		   */
		  onClick: function onClick() {},
		  target: _react2['default'].PropTypes.string,
		  href: _react2['default'].PropTypes.string,
		  /**
		   * The content of the split button.
		   */
		  title: _react2['default'].PropTypes.node.isRequired,
		  /**
		   * Accessible label for the toggle; the value of `title` if not specified.
		   */
		  toggleLabel: _react2['default'].PropTypes.string
		});

		SplitButton.defaultProps = {
		  disabled: false,
		  dropup: false,
		  pullRight: false
		};

		SplitButton.Toggle = _SplitToggle2['default'];

		exports['default'] = SplitButton;
		module.exports = exports['default'];

	/***/ },
	/* 257 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _DropdownToggle = __webpack_require__(183);

		var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

		var SplitToggle = (function (_React$Component) {
		  _inherits(SplitToggle, _React$Component);

		  function SplitToggle() {
		    _classCallCheck(this, SplitToggle);

		    _React$Component.apply(this, arguments);
		  }

		  SplitToggle.prototype.render = function render() {
		    return _react2['default'].createElement(_DropdownToggle2['default'], _extends({}, this.props, {
		      useAnchor: false,
		      noCaret: false
		    }));
		  };

		  return SplitToggle;
		})(_react2['default'].Component);

		exports['default'] = SplitToggle;

		SplitToggle.defaultProps = _DropdownToggle2['default'].defaultProps;
		module.exports = exports['default'];

	/***/ },
	/* 258 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _utilsTransitionEvents = __webpack_require__(82);

		var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

		var Tab = _react2['default'].createClass({
		  displayName: 'Tab',

		  propTypes: {
		    /**
		     * @private
		     */
		    active: _react2['default'].PropTypes.bool,
		    animation: _react2['default'].PropTypes.bool,
		    /**
		     * It is used by 'Tabs' - parent component
		     * @private
		     */
		    onAnimateOutEnd: _react2['default'].PropTypes.func,
		    disabled: _react2['default'].PropTypes.bool,
		    title: _react2['default'].PropTypes.node,
		    /**
		     * tabClassName is used as className for the associated NavItem
		     */
		    tabClassName: _react2['default'].PropTypes.string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'tab',
		      animation: true
		    };
		  },

		  getInitialState: function getInitialState() {
		    return {
		      animateIn: false,
		      animateOut: false
		    };
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    if (this.props.animation) {
		      if (!this.state.animateIn && nextProps.active && !this.props.active) {
		        this.setState({
		          animateIn: true
		        });
		      } else if (!this.state.animateOut && !nextProps.active && this.props.active) {
		        this.setState({
		          animateOut: true
		        });
		      }
		    }
		  },

		  componentDidUpdate: function componentDidUpdate() {
		    if (this.state.animateIn) {
		      setTimeout(this.startAnimateIn, 0);
		    }
		    if (this.state.animateOut) {
		      _utilsTransitionEvents2['default'].addEndEventListener(_reactDom2['default'].findDOMNode(this), this.stopAnimateOut);
		    }
		  },

		  startAnimateIn: function startAnimateIn() {
		    if (this.isMounted()) {
		      this.setState({
		        animateIn: false
		      });
		    }
		  },

		  stopAnimateOut: function stopAnimateOut() {
		    if (this.isMounted()) {
		      this.setState({
		        animateOut: false
		      });

		      if (this.props.onAnimateOutEnd) {
		        this.props.onAnimateOutEnd();
		      }
		    }
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props, 'pane')] = true, _classes['fade'] = true, _classes['active'] = this.props.active || this.state.animateOut, _classes['in'] = this.props.active && !this.state.animateIn, _classes);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, {
		        title: undefined,
		        role: 'tabpanel',
		        'aria-hidden': !this.props.active,
		        className: _classnames2['default'](this.props.className, classes)
		      }),
		      this.props.children
		    );
		  }
		});

		exports['default'] = Tab;
		module.exports = exports['default'];

	/***/ },
	/* 259 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var Table = _react2['default'].createClass({
		  displayName: 'Table',

		  propTypes: {
		    striped: _react2['default'].PropTypes.bool,
		    bordered: _react2['default'].PropTypes.bool,
		    condensed: _react2['default'].PropTypes.bool,
		    hover: _react2['default'].PropTypes.bool,
		    responsive: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bordered: false,
		      condensed: false,
		      hover: false,
		      responsive: false,
		      striped: false
		    };
		  },

		  render: function render() {
		    var classes = {
		      'table': true,
		      'table-striped': this.props.striped,
		      'table-bordered': this.props.bordered,
		      'table-condensed': this.props.condensed,
		      'table-hover': this.props.hover
		    };
		    var table = _react2['default'].createElement(
		      'table',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );

		    return this.props.responsive ? _react2['default'].createElement(
		      'div',
		      { className: 'table-responsive' },
		      table
		    ) : table;
		  }
		});

		exports['default'] = Table;
		module.exports = exports['default'];

	/***/ },
	/* 260 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _objectWithoutProperties = __webpack_require__(55)['default'];

		var _Object$keys = __webpack_require__(47)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _Col = __webpack_require__(83);

		var _Col2 = _interopRequireDefault(_Col);

		var _Nav = __webpack_require__(225);

		var _Nav2 = _interopRequireDefault(_Nav);

		var _NavItem = __webpack_require__(234);

		var _NavItem2 = _interopRequireDefault(_NavItem);

		var _styleMaps = __webpack_require__(44);

		var _styleMaps2 = _interopRequireDefault(_styleMaps);

		var _keycode = __webpack_require__(104);

		var _keycode2 = _interopRequireDefault(_keycode);

		var _utilsCreateChainedFunction = __webpack_require__(24);

		var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _utilsValidComponentChildren = __webpack_require__(25);

		var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

		var paneId = function paneId(props, child) {
		  return child.props.id ? child.props.id : props.id && props.id + '___pane___' + child.props.eventKey;
		};
		var tabId = function tabId(props, child) {
		  return child.props.id ? child.props.id + '___tab' : props.id && props.id + '___tab___' + child.props.eventKey;
		};

		var findChild = _utilsValidComponentChildren2['default'].find;

		function getDefaultActiveKeyFromChildren(children) {
		  var defaultActiveKey = undefined;

		  _utilsValidComponentChildren2['default'].forEach(children, function (child) {
		    if (defaultActiveKey == null) {
		      defaultActiveKey = child.props.eventKey;
		    }
		  });

		  return defaultActiveKey;
		}

		function move(children, currentKey, keys, moveNext) {
		  var lastIdx = keys.length - 1;
		  var stopAt = keys[moveNext ? Math.max(lastIdx, 0) : 0];
		  var nextKey = currentKey;

		  function getNext() {
		    var idx = keys.indexOf(nextKey);
		    nextKey = moveNext ? keys[Math.min(lastIdx, idx + 1)] : keys[Math.max(0, idx - 1)];

		    return findChild(children, function (_child) {
		      return _child.props.eventKey === nextKey;
		    });
		  }

		  var next = getNext();

		  while (next.props.eventKey !== stopAt && next.props.disabled) {
		    next = getNext();
		  }

		  return next.props.disabled ? currentKey : next.props.eventKey;
		}

		var Tabs = _react2['default'].createClass({
		  displayName: 'Tabs',

		  propTypes: {
		    activeKey: _react2['default'].PropTypes.any,
		    defaultActiveKey: _react2['default'].PropTypes.any,
		    /**
		     * Navigation style for tabs
		     *
		     * If not specified, it will be treated as `'tabs'` when vertically
		     * positioned and `'pills'` when horizontally positioned.
		     */
		    bsStyle: _react2['default'].PropTypes.oneOf(['tabs', 'pills']),
		    animation: _react2['default'].PropTypes.bool,
		    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
		    onSelect: _react2['default'].PropTypes.func,
		    position: _react2['default'].PropTypes.oneOf(['top', 'left', 'right']),
		    /**
		     * Number of grid columns for the tabs if horizontally positioned
		     *
		     * This accepts either a single width or a mapping of size to width.
		     */
		    tabWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
		    /**
		     * Number of grid columns for the panes if horizontally positioned
		     *
		     * This accepts either a single width or a mapping of size to width. If not
		     * specified, it will be treated as `styleMaps.GRID_COLUMNS` minus
		     * `tabWidth`.
		     */
		    paneWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
		    /**
		     * Render without clearfix if horizontally positioned
		     */
		    standalone: _react2['default'].PropTypes.bool
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'tab',
		      animation: true,
		      tabWidth: 2,
		      position: 'top',
		      standalone: false
		    };
		  },

		  getInitialState: function getInitialState() {
		    var defaultActiveKey = this.props.defaultActiveKey != null ? this.props.defaultActiveKey : getDefaultActiveKeyFromChildren(this.props.children);

		    return {
		      activeKey: defaultActiveKey,
		      previousActiveKey: null
		    };
		  },

		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    var _this = this;

		    if (nextProps.activeKey != null && nextProps.activeKey !== this.props.activeKey) {
		      (function () {
		        // check if the 'previousActiveKey' child still exists
		        var previousActiveKey = _this.props.activeKey;
		        _react2['default'].Children.forEach(nextProps.children, function (child) {
		          if (_react2['default'].isValidElement(child)) {
		            if (child.props.eventKey === previousActiveKey) {
		              _this.setState({
		                previousActiveKey: previousActiveKey
		              });
		              return;
		            }
		          }
		        });
		      })();
		    }
		  },

		  componentDidUpdate: function componentDidUpdate() {
		    var tabs = this._tabs;
		    var tabIdx = this._eventKeys().indexOf(this.getActiveKey());

		    if (this._needsRefocus) {
		      this._needsRefocus = false;
		      if (tabs && tabIdx !== -1) {
		        var tabNode = _reactDom2['default'].findDOMNode(tabs[tabIdx]);

		        if (tabNode) {
		          tabNode.firstChild.focus();
		        }
		      }
		    }
		  },

		  handlePaneAnimateOutEnd: function handlePaneAnimateOutEnd() {
		    this.setState({
		      previousActiveKey: null
		    });
		  },

		  render: function render() {
		    var _props = this.props;
		    var id = _props.id;
		    var className = _props.className;
		    var style = _props.style;
		    var position = _props.position;
		    var bsStyle = _props.bsStyle;
		    var tabWidth = _props.tabWidth;
		    var paneWidth = _props.paneWidth;
		    var standalone = _props.standalone;
		    var children = _props.children;

		    var props = _objectWithoutProperties(_props, ['id', 'className', 'style', 'position', 'bsStyle', 'tabWidth', 'paneWidth', 'standalone', 'children']);

		    var isHorizontal = position === 'left' || position === 'right';

		    if (bsStyle == null) {
		      bsStyle = isHorizontal ? 'pills' : 'tabs';
		    }

		    var containerProps = { id: id, className: className, style: style };

		    var tabsProps = _extends({}, props, {
		      bsStyle: bsStyle,
		      bsClass: undefined,
		      stacked: isHorizontal,
		      activeKey: this.getActiveKey(),
		      onSelect: this.handleSelect,
		      ref: 'tabs',
		      role: 'tablist'
		    });
		    var childTabs = _utilsValidComponentChildren2['default'].map(children, this.renderTab);

		    var panesProps = {
		      className: _utilsBootstrapUtils2['default'].prefix(this.props, 'content'),
		      ref: 'panes'
		    };
		    var childPanes = _utilsValidComponentChildren2['default'].map(children, this.renderPane);

		    if (isHorizontal) {
		      if (!standalone) {
		        containerProps.className = _classnames2['default'](containerProps.className, 'clearfix');
		      }

		      var _getColProps = this.getColProps({ tabWidth: tabWidth, paneWidth: paneWidth });

		      var tabsColProps = _getColProps.tabsColProps;
		      var panesColProps = _getColProps.panesColProps;

		      var tabs = _react2['default'].createElement(
		        _Col2['default'],
		        _extends({ componentClass: _Nav2['default'] }, tabsProps, tabsColProps),
		        childTabs
		      );
		      var panes = _react2['default'].createElement(
		        _Col2['default'],
		        _extends({}, panesProps, panesColProps),
		        childPanes
		      );

		      if (position === 'left') {
		        return _react2['default'].createElement(
		          'div',
		          containerProps,
		          tabs,
		          panes
		        );
		      }

		      return _react2['default'].createElement(
		        'div',
		        containerProps,
		        panes,
		        tabs
		      );
		    }

		    return _react2['default'].createElement(
		      'div',
		      containerProps,
		      _react2['default'].createElement(
		        _Nav2['default'],
		        tabsProps,
		        childTabs
		      ),
		      _react2['default'].createElement(
		        'div',
		        panesProps,
		        childPanes
		      )
		    );
		  },

		  getActiveKey: function getActiveKey() {
		    return this.props.activeKey !== undefined ? this.props.activeKey : this.state.activeKey;
		  },

		  renderPane: function renderPane(child, index) {
		    var previousActiveKey = this.state.previousActiveKey;

		    var shouldPaneBeSetActive = child.props.eventKey === this.getActiveKey();
		    var thereIsNoActivePane = previousActiveKey == null;

		    var paneIsAlreadyActive = previousActiveKey != null && child.props.eventKey === previousActiveKey;

		    return _react.cloneElement(child, {
		      active: shouldPaneBeSetActive && (thereIsNoActivePane || !this.props.animation),
		      id: paneId(this.props, child),
		      'aria-labelledby': tabId(this.props, child),
		      key: child.key ? child.key : index,
		      animation: this.props.animation,
		      onAnimateOutEnd: paneIsAlreadyActive ? this.handlePaneAnimateOutEnd : null
		    });
		  },

		  renderTab: function renderTab(child, index) {
		    var _this2 = this;

		    if (child.props.title == null) {
		      return null;
		    }

		    var _child$props = child.props;
		    var eventKey = _child$props.eventKey;
		    var title = _child$props.title;
		    var disabled = _child$props.disabled;
		    var onKeyDown = _child$props.onKeyDown;
		    var tabClassName = _child$props.tabClassName;
		    var _child$props$tabIndex = _child$props.tabIndex;
		    var tabIndex = _child$props$tabIndex === undefined ? 0 : _child$props$tabIndex;

		    var isActive = this.getActiveKey() === eventKey;

		    return _react2['default'].createElement(
		      _NavItem2['default'],
		      {
		        linkId: tabId(this.props, child),
		        ref: function (ref) {
		          return (_this2._tabs || (_this2._tabs = []))[index] = ref;
		        },
		        'aria-controls': paneId(this.props, child),
		        onKeyDown: _utilsCreateChainedFunction2['default'](this.handleKeyDown, onKeyDown),
		        eventKey: eventKey,
		        tabIndex: isActive ? tabIndex : -1,
		        disabled: disabled,
		        className: tabClassName },
		      title
		    );
		  },

		  getColProps: function getColProps(_ref) {
		    var tabWidth = _ref.tabWidth;
		    var paneWidth = _ref.paneWidth;

		    var tabsColProps = undefined;
		    if (tabWidth instanceof Object) {
		      tabsColProps = tabWidth;
		    } else {
		      tabsColProps = { xs: tabWidth };
		    }

		    var panesColProps = undefined;
		    if (paneWidth == null) {
		      panesColProps = {};
		      _Object$keys(tabsColProps).forEach(function (size) {
		        panesColProps[size] = _styleMaps2['default'].GRID_COLUMNS - tabsColProps[size];
		      });
		    } else if (paneWidth instanceof Object) {
		      panesColProps = paneWidth;
		    } else {
		      panesColProps = { xs: paneWidth };
		    }

		    return { tabsColProps: tabsColProps, panesColProps: panesColProps };
		  },

		  shouldComponentUpdate: function shouldComponentUpdate() {
		    // Defer any updates to this component during the `onSelect` handler.
		    return !this._isChanging;
		  },

		  handleSelect: function handleSelect(selectedKey) {
		    if (this.props.onSelect) {
		      this._isChanging = true;
		      this.props.onSelect(selectedKey);
		      this._isChanging = false;
		      return;
		    }

		    // if there is no external handler, then use embedded one
		    var previousActiveKey = this.getActiveKey();
		    if (selectedKey !== previousActiveKey) {
		      this.setState({
		        activeKey: selectedKey,
		        previousActiveKey: previousActiveKey
		      });
		    }
		  },

		  handleKeyDown: function handleKeyDown(event) {
		    var keys = this._eventKeys();
		    var currentKey = this.getActiveKey() || keys[0];
		    var next = undefined;

		    switch (event.keyCode) {

		      case _keycode2['default'].codes.left:
		      case _keycode2['default'].codes.up:
		        next = move(this.props.children, currentKey, keys, false);

		        if (next && next !== currentKey) {
		          event.preventDefault();
		          this.handleSelect(next);
		          this._needsRefocus = true;
		        }
		        break;
		      case _keycode2['default'].codes.right:
		      case _keycode2['default'].codes.down:
		        next = move(this.props.children, currentKey, keys, true);

		        if (next && next !== currentKey) {
		          event.preventDefault();
		          this.handleSelect(next);
		          this._needsRefocus = true;
		        }
		        break;
		      default:
		    }
		  },

		  _eventKeys: function _eventKeys() {
		    var keys = [];

		    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (_ref2) {
		      var eventKey = _ref2.props.eventKey;
		      return keys.push(eventKey);
		    });

		    return keys;
		  }
		});

		exports['default'] = Tabs;
		module.exports = exports['default'];

	/***/ },
	/* 261 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _SafeAnchor = __webpack_require__(61);

		var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var Thumbnail = _react2['default'].createClass({
		  displayName: 'Thumbnail',

		  propTypes: {
		    alt: _react2['default'].PropTypes.string,
		    href: _react2['default'].PropTypes.string,
		    src: _react2['default'].PropTypes.string
		  },

		  render: function render() {
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    if (this.props.href) {
		      return _react2['default'].createElement(
		        _SafeAnchor2['default'],
		        _extends({}, this.props, { href: this.props.href, className: _classnames2['default'](this.props.className, classes) }),
		        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
		      );
		    }

		    if (this.props.children) {
		      return _react2['default'].createElement(
		        'div',
		        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt }),
		        _react2['default'].createElement(
		          'div',
		          { className: 'caption' },
		          this.props.children
		        )
		      );
		    }

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
		    );
		  }
		});

		exports['default'] = _utilsBootstrapUtils.bsClass('thumbnail', Thumbnail);
		module.exports = exports['default'];

	/***/ },
	/* 262 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _reactPropTypesLibIsRequiredForA11y = __webpack_require__(173);

		var _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);

		var Tooltip = _react2['default'].createClass({
		  displayName: 'Tooltip',

		  propTypes: {
		    /**
		     * An html id attribute, necessary for accessibility
		     * @type {string}
		     * @required
		     */
		    id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

		    /**
		     * Sets the direction the Tooltip is positioned towards.
		     */
		    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

		    /**
		     * The "left" position value for the Tooltip.
		     */
		    positionLeft: _react2['default'].PropTypes.number,
		    /**
		     * The "top" position value for the Tooltip.
		     */
		    positionTop: _react2['default'].PropTypes.number,
		    /**
		     * The "left" position value for the Tooltip arrow.
		     */
		    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		    /**
		     * The "top" position value for the Tooltip arrow.
		     */
		    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
		    /**
		     * Title text
		     */
		    title: _react2['default'].PropTypes.node
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      bsClass: 'tooltip',
		      placement: 'right'
		    };
		  },

		  render: function render() {
		    var _classes;

		    var classes = (_classes = {}, _classes[_utilsBootstrapUtils2['default'].prefix(this.props)] = true, _classes[this.props.placement] = true, _classes);

		    var style = _extends({
		      'left': this.props.positionLeft,
		      'top': this.props.positionTop
		    }, this.props.style);

		    var arrowStyle = {
		      'left': this.props.arrowOffsetLeft,
		      'top': this.props.arrowOffsetTop
		    };

		    return _react2['default'].createElement(
		      'div',
		      _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style }),
		      _react2['default'].createElement('div', { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'arrow'), style: arrowStyle }),
		      _react2['default'].createElement(
		        'div',
		        { className: _utilsBootstrapUtils2['default'].prefix(this.props, 'inner') },
		        this.props.children
		      )
		    );
		  }
		});

		exports['default'] = Tooltip;
		module.exports = exports['default'];

	/***/ },
	/* 263 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _inherits = __webpack_require__(62)['default'];

		var _classCallCheck = __webpack_require__(69)['default'];

		var _extends = __webpack_require__(28)['default'];

		var _interopRequireDefault = __webpack_require__(20)['default'];

		exports.__esModule = true;

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		var _utilsBootstrapUtils = __webpack_require__(26);

		var _utilsBootstrapUtils2 = _interopRequireDefault(_utilsBootstrapUtils);

		var _styleMaps = __webpack_require__(44);

		var Well = (function (_React$Component) {
		  _inherits(Well, _React$Component);

		  function Well() {
		    _classCallCheck(this, _Well);

		    _React$Component.apply(this, arguments);
		  }

		  Well.prototype.render = function render() {
		    var classes = _utilsBootstrapUtils2['default'].getClassSet(this.props);

		    return _react2['default'].createElement(
		      'div',
		      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
		      this.props.children
		    );
		  };

		  var _Well = Well;
		  Well = _utilsBootstrapUtils.bsSizes([_styleMaps.Sizes.LARGE, _styleMaps.Sizes.SMALL])(Well) || Well;
		  Well = _utilsBootstrapUtils.bsClass('well')(Well) || Well;
		  return Well;
		})(_react2['default'].Component);

		exports['default'] = Well;
		module.exports = exports['default'];

	/***/ },
	/* 264 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.ConditionalSelectButton = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _BaseFilter2 = __webpack_require__(18);

		var _BaseFilter3 = _interopRequireDefault(_BaseFilter2);

		var _SelectButton = __webpack_require__(17);

		var _reactBootstrap = __webpack_require__(19);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var ConditionalSelectButton = exports.ConditionalSelectButton = function (_BaseFilter) {
		    _inherits(ConditionalSelectButton, _BaseFilter);

		    function ConditionalSelectButton(props) {
		        _classCallCheck(this, ConditionalSelectButton);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(ConditionalSelectButton).call(this, props));
		    }

		    _createClass(ConditionalSelectButton, [{
		        key: '_handleClick',
		        value: function _handleClick(index, text, e) {
		            e.preventDefault();
		            this.setState({
		                selected: index,
		                value: text
		            });

		            if (this.props.dynamic) {
		                var result = [{
		                    alias: this.props.options.aliases[0],
		                    value: text
		                }, {
		                    alias: this.props.options.aliases[1],
		                    value: "All"
		                }];
		                this.props.onChange(result);
		            }
		            this.refs.secondary.setState({ value: "All" });
		        }
		    }, {
		        key: 'getCurrentState',
		        value: function getCurrentState() {
		            var result = {};
		            result[this.props.options.aliases[0]] = this.state.value || this.props.options.defaults[0];
		            result[this.props.options.aliases[1]] = this.refs.secondary.state.value || this.props.options.defaults[1];
		            return result;
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            var primary = this.props.options.items.map(function (item, idx) {
		                return _react2.default.createElement(
		                    _reactBootstrap.MenuItem,
		                    {
		                        key: idx,
		                        onSelect: this._handleClick.bind(this, idx, item.primary) },
		                    item.primary
		                );
		            }.bind(this));

		            var label = this.state.value || this.props.options.labels[0];
		            var secondary = {
		                items: this.props.options.items[this.state.selected].secondary,
		                label: this.props.options.labels[1],
		                alias: this.props.options.aliases[1],
		                default: this.props.options.defaults[1]
		            };
		            return _react2.default.createElement(
		                'div',
		                { className: this.props.options.filter_style },
		                _react2.default.createElement(
		                    _reactBootstrap.DropdownButton,
		                    {
		                        id: this.props.id,
		                        ref: 'primary',
		                        title: label },
		                    primary
		                ),
		                _react2.default.createElement(_SelectButton.SelectButton, { ref: 'secondary',
		                    onChange: this.props.onChange,
		                    dynamic: this.props.dynamic,
		                    options: secondary })
		            );
		        }
		    }]);

		    return ConditionalSelectButton;
		}(_BaseFilter3.default);

	/***/ },
	/* 265 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.ApiButton = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _BaseFilter = __webpack_require__(18);

		var _BaseFilter2 = _interopRequireDefault(_BaseFilter);

		var _SelectButton = __webpack_require__(17);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var ApiButton = exports.ApiButton = function (_React$Component) {
		    _inherits(ApiButton, _React$Component);

		    function ApiButton(props) {
		        _classCallCheck(this, ApiButton);

		        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ApiButton).call(this, props));

		        _this.state = {
		            items: []
		        };
		        return _this;
		    }

		    _createClass(ApiButton, [{
		        key: 'getCurrentState',
		        value: function getCurrentState() {
		            return this.refs.apiBtn.getCurrentState();
		        }
		    }, {
		        key: 'componentDidMount',
		        value: function componentDidMount() {
		            this._fetchAPIData({});
		        }
		    }, {
		        key: '_fetchAPIData',
		        value: function _fetchAPIData(params) {
		            $.get(this.props.options.url.concat($.param(params)), function (result) {
		                this.setState({ items: result.data });
		            }.bind(this));
		        }
		    }, {
		        key: 'update',
		        value: function update(params) {
		            this._fetchAPIData(params);
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            var opts = {
		                items: this.state.items,
		                alias: this.props.options.alias,
		                default: this.props.options.default,
		                label: this.props.options.label
		            };
		            return _react2.default.createElement(_SelectButton.SelectButton, { ref: 'apiBtn',
		                onChange: this.props.onChange,
		                dynamic: this.props.dynamic,
		                options: opts });
		        }
		    }]);

		    return ApiButton;
		}(_react2.default.Component);
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 266 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.DownloadButton = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactBootstrap = __webpack_require__(19);

		var _BaseFilter2 = __webpack_require__(18);

		var _BaseFilter3 = _interopRequireDefault(_BaseFilter2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var DownloadButton = exports.DownloadButton = function (_BaseFilter) {
		    _inherits(DownloadButton, _BaseFilter);

		    function DownloadButton(props) {
		        _classCallCheck(this, DownloadButton);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(DownloadButton).call(this, props));
		    }

		    _createClass(DownloadButton, [{
		        key: '_onClick',
		        value: function _onClick() {
		            var params = this.props.onChange();
		            var url = this.props.options.url.concat("?", $.param(params));
		            window.location.href = url;
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            return _react2.default.createElement(
		                _reactBootstrap.Button,
		                { onClick: this._onClick.bind(this) },
		                this.props.options.label
		            );
		        }
		    }]);

		    return DownloadButton;
		}(_BaseFilter3.default);
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 267 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.SliderInput = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _BaseFilter2 = __webpack_require__(18);

		var _BaseFilter3 = _interopRequireDefault(_BaseFilter2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var SliderInput = exports.SliderInput = function (_BaseFilter) {
		    _inherits(SliderInput, _BaseFilter);

		    function SliderInput(props) {
		        _classCallCheck(this, SliderInput);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(SliderInput).call(this, props));
		    }

		    _createClass(SliderInput, [{
		        key: '_handleChange',
		        value: function _handleChange(e) {
		            e.preventDefault();
		            var slider = _reactDom2.default.findDOMNode(this);
		            this.setState({ value: slider.value });

		            if (this.props.dynamic) {
		                var result = {
		                    alias: this.props.options.alias,
		                    value: slider.value
		                };
		                this.props.onChange([result]);
		            }
		        }
		    }, {
		        key: 'render',
		        value: function render() {

		            return _react2.default.createElement('input', { id: 'pyx-slider',
		                className: 'pyx-slider',
		                ref: 'slider',
		                type: 'range',
		                name: this.props.options.label,
		                min: this.props.options.min,
		                max: this.props.options.max,
		                onInput: this._handleChange.bind(this),
		                step: this.props.options.step });
		        }
		    }]);

		    return SliderInput;
		}(_BaseFilter3.default);

	/***/ },
	/* 268 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function($) {'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.DynamicSearchInput = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactDom = __webpack_require__(15);

		var _reactDom2 = _interopRequireDefault(_reactDom);

		var _reactBootstrap = __webpack_require__(19);

		var _classnames = __webpack_require__(56);

		var _classnames2 = _interopRequireDefault(_classnames);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var InputMenu = function (_React$Component) {
		    _inherits(InputMenu, _React$Component);

		    function InputMenu(props) {
		        _classCallCheck(this, InputMenu);

		        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InputMenu).call(this, props));

		        _this.state = {
		            value: ''
		        };
		        _this.onChange = function (e) {
		            return _this.setState({
		                value: e.target.value
		            });
		        };
		        return _this;
		    }

		    _createClass(InputMenu, [{
		        key: 'filterChildren',
		        value: function filterChildren() {
		            var children = this.props.children;

		            var filtered = [];
		            _react2.default.Children.forEach(children, function (child) {
		                filtered.push(child);
		            });

		            return filtered;
		        }
		    }, {
		        key: 'render',
		        value: function render() {

		            return _react2.default.createElement(
		                'div',
		                { className: "dropdown-menu" },
		                _react2.default.createElement(
		                    'ul',
		                    { className: 'list-unstyled' },
		                    this.filterChildren()
		                )
		            );
		        }
		    }]);

		    return InputMenu;
		}(_react2.default.Component);

		var DynamicSearchInput = exports.DynamicSearchInput = function (_React$Component2) {
		    _inherits(DynamicSearchInput, _React$Component2);

		    function DynamicSearchInput(props) {
		        _classCallCheck(this, DynamicSearchInput);

		        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(DynamicSearchInput).call(this, props));

		        _this2.state = {
		            value: null,
		            searchString: "",
		            items: []
		        };
		        return _this2;
		    }

		    _createClass(DynamicSearchInput, [{
		        key: 'getCurrentState',
		        value: function getCurrentState() {
		            var result = {};
		            result[this.props.options.alias] = this.state.value || this.props.options.default;
		            return result;
		        }
		    }, {
		        key: '_fetchAPIData',
		        value: function _fetchAPIData(params) {
		            var url = this.props.options.url.concat("?", $.param(params));
		            $.get(url, function (result) {
		                this.setState({ items: result.data });
		            }.bind(this));
		        }
		    }, {
		        key: 'update',
		        value: function update(params) {
		            this._fetchAPIData(params);
		        }
		    }, {
		        key: 'componentDidMount',
		        value: function componentDidMount() {
		            this._fetchAPIData({});
		        }
		    }, {
		        key: '_handleItemSelect',
		        value: function _handleItemSelect(text, e) {
		            this.setState({ value: text });
		            this.dd.refs.inner.toggleOpen(false);
		            if (this.props.dynamic) {
		                var result = {
		                    alias: this.props.options.alias,
		                    value: text
		                };
		                this.props.onChange([result]);
		            }
		        }
		    }, {
		        key: '_filterItems',
		        value: function _filterItems() {
		            var items = this.state.items;
		            var searchString = this.state.searchString.trim().toLowerCase();
		            if (searchString.length > 0) {
		                items = items.filter(function (x) {
		                    return x.toLowerCase().match(searchString);
		                });
		            }
		            var nresults = items.length;
		            var results_left = "Results Left: #";
		            return items.map(function (item, index) {
		                if (index < this.props.options.max) {
		                    return _react2.default.createElement(
		                        _reactBootstrap.MenuItem,
		                        {
		                            key: index,
		                            onSelect: this._handleItemSelect.bind(this, item) },
		                        item
		                    );
		                } else if (index == this.props.options.max) {
		                    return _react2.default.createElement(
		                        _reactBootstrap.MenuItem,
		                        { key: index },
		                        results_left.replace("#", nresults - index)
		                    );
		                }
		            }.bind(this));
		        }
		    }, {
		        key: '_handleChange',
		        value: function _handleChange(e) {
		            e.preventDefault();
		            this.setState({
		                searchString: e.target.value,
		                value: e.target.value
		            });
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            var _this3 = this;

		            return _react2.default.createElement(
		                _reactBootstrap.Dropdown,
		                { id: 'dropdown-custom-menu',
		                    ref: function ref(dd) {
		                        return _this3.dd = dd;
		                    } },
		                _react2.default.createElement(_reactBootstrap.Input, {
		                    bsRole: 'toggle',
		                    type: 'text',
		                    ref: 'input',
		                    value: this.state.value,
		                    placeholder: this.props.options.placeholder,
		                    help: this.props.options.help,
		                    onChange: this._handleChange.bind(this) }),
		                _react2.default.createElement(
		                    InputMenu,
		                    {
		                        placeholder: this.props.options.placeholder,
		                        bsRole: 'menu' },
		                    this._filterItems()
		                )
		            );
		        }
		    }]);

		    return DynamicSearchInput;
		}(_react2.default.Component);
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

	/***/ },
	/* 269 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.CheckboxGroup = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactBootstrap = __webpack_require__(19);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var CheckboxGroup = exports.CheckboxGroup = function (_React$Component) {
		    _inherits(CheckboxGroup, _React$Component);

		    function CheckboxGroup(props) {
		        _classCallCheck(this, CheckboxGroup);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(CheckboxGroup).call(this, props));
		    }

		    _createClass(CheckboxGroup, [{
		        key: 'getCurrentState',
		        value: function getCurrentState() {
		            var result = {};
		            for (var i = 0; i < this.props.options.labels.length; i++) {
		                result[this.props.options.aliases[i]] = this.refs["checkbox_".concat(i)].getChecked();
		            }
		            return result;
		        }
		    }, {
		        key: '_resetChecked',
		        value: function _resetChecked() {
		            for (var i = 0; i < this.props.options.labels.length; i++) {
		                this.refs["checkbox_".concat(i)].getInputDOMNode().checked = false;
		            }
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            var labels = this.props.options.labels.map(function (item, index) {
		                return _react2.default.createElement(_reactBootstrap.Input, {
		                    ref: "checkbox_".concat(index),
		                    type: 'checkbox', label: item });
		            });
		            return _react2.default.createElement(
		                'div',
		                { className: 'inputgrp' },
		                _react2.default.createElement(
		                    'div',
		                    { className: 'btn-group horizontal' },
		                    _react2.default.createElement(
		                        _reactBootstrap.Button,
		                        { onClick: this.props.onChange.bind(this) },
		                        'Submit'
		                    ),
		                    _react2.default.createElement(
		                        _reactBootstrap.Button,
		                        { onClick: this._resetChecked.bind(this) },
		                        'Reset'
		                    )
		                ),
		                labels
		            );
		        }
		    }]);

		    return CheckboxGroup;
		}(_react2.default.Component);

	/***/ },
	/* 270 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		exports.FilterChart = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(2);

		var _react2 = _interopRequireDefault(_react);

		var _reactBootstrap = __webpack_require__(19);

		var _factory = __webpack_require__(16);

		var _factory2 = __webpack_require__(1);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var FilterChart = exports.FilterChart = function (_React$Component) {
		    _inherits(FilterChart, _React$Component);

		    function FilterChart(props) {
		        _classCallCheck(this, FilterChart);

		        return _possibleConstructorReturn(this, Object.getPrototypeOf(FilterChart).call(this, props));
		    }

		    _createClass(FilterChart, [{
		        key: '_handleClick',
		        value: function _handleClick(input) {
		            var params = {};
		            for (var i = 0; i < this.props.filters.length; i++) {
		                var vals = this.refs["filter_".concat(i)].refs.filter.getCurrentState();
		                for (var key in vals) {
		                    params[key] = vals[key];
		                }
		            }
		            if (input) {
		                for (var i = 0; i < input.length; i++) {
		                    params[input[i].alias] = input[i].value;
		                }
		            }
		            for (var i = 0; i < this.props.charts.length; i++) {
		                this.refs["chart_".concat(i)].update(params);
		            }
		            return params;
		        }
		    }, {
		        key: 'render',
		        value: function render() {
		            var items = this.props.filters.map(function (x, index) {
		                return _react2.default.createElement(_factory.Filter, {
		                    key: "fkey_".concat(index),
		                    ref: "filter_".concat(index),
		                    onChange: this._handleClick.bind(this),
		                    dynamic: this.props.dynamic,
		                    type: x.type, options: x.options });
		            }.bind(this));

		            var charts = this.props.charts.map(function (x, index) {
		                return _react2.default.createElement(_factory2.Chart, {
		                    ref: "chart_".concat(index),
		                    type: x.type, options: x.options });
		            });

		            return _react2.default.createElement(
		                'div',
		                null,
		                _react2.default.createElement(
		                    _reactBootstrap.Row,
		                    null,
		                    _react2.default.createElement(
		                        'div',
		                        { className: this.props.filter_style },
		                        items
		                    )
		                ),
		                _react2.default.createElement(
		                    _reactBootstrap.Row,
		                    null,
		                    charts
		                )
		            );
		        }
		    }]);

		    return FilterChart;
		}(_react2.default.Component);

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.0
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-08T20:02Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.0",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					// Support: IE<11
					// option.value not trimmed (#14858)
					return jQuery.trim( elem.value );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
								jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the compat branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				// Subtract offsetParent scroll positions
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ) -
					offsetParent.scrollTop();
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true ) -
					offsetParent.scrollLeft();
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(5);


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ReplaceImages = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ReplaceImages = exports.ReplaceImages = function (_React$Component) {
	    _inherits(ReplaceImages, _React$Component);

	    function ReplaceImages(props) {
	        _classCallCheck(this, ReplaceImages);

	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReplaceImages).call(this, props));

	        _this.state = {
	            data: []
	        };
	        return _this;
	    }

	    _createClass(ReplaceImages, [{
	        key: "_initAlerts",
	        value: function _initAlerts() {
	            $.get(this.props.url.concat("?", $.param({
	                game: "game1",
	                new_index: 1
	            })), function (r) {
	                this.setState({ data: r.result });
	            }.bind(this));
	        }
	    }, {
	        key: "update",
	        value: function update(items) {
	            var url = this.props.url.concat("?", $.param(items));
	            $.get(url, function (r) {
	                this.setState({ data: r.result });
	            }.bind(this));
	        }
	    }, {
	        key: "componentDidMount",
	        value: function componentDidMount() {
	            this._initAlerts();
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            var header = this.state.data.map(function (item, index) {
	                return _react2.default.createElement(
	                    "td",
	                    null,
	                    _react2.default.createElement(
	                        "div",
	                        { className: "SimInfo" },
	                        _react2.default.createElement(
	                            "h4",
	                            null,
	                            _react2.default.createElement(
	                                "span",
	                                { className: "pull-left label label-default" },
	                                item.position,
	                                " ",
	                                item.jersey
	                            )
	                        ),
	                        _react2.default.createElement(
	                            "h4",
	                            null,
	                            _react2.default.createElement(
	                                "span",
	                                { className: "pull-right label label-default" },
	                                item.name
	                            )
	                        )
	                    )
	                );
	            }.bind(this));
	            var images = this.state.data.map(function (item, index) {
	                return _react2.default.createElement(
	                    "td",
	                    { className: "style-image-table" },
	                    _react2.default.createElement("img", { className: "style-image", src: item.imgsrc, height: "145" }),
	                    _react2.default.createElement(
	                        "div",
	                        { className: "Siminfo" },
	                        _react2.default.createElement(
	                            "h4",
	                            null,
	                            _react2.default.createElement(
	                                "span",
	                                { className: "pull-left label label-default" },
	                                "Score: ",
	                                item.dist
	                            )
	                        )
	                    )
	                );
	            }.bind(this));

	            return _react2.default.createElement(
	                "div",
	                { className: "bs-scroll" },
	                _react2.default.createElement(
	                    "table",
	                    { className: "dash-grid", style: { width: "100%" } },
	                    _react2.default.createElement(
	                        "tbody",
	                        null,
	                        _react2.default.createElement(
	                            "tr",
	                            null,
	                            header
	                        ),
	                        _react2.default.createElement(
	                            "tr",
	                            null,
	                            images
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return ReplaceImages;
	}(_react2.default.Component);

	// <ul>
	//
	//     <li>{item.dist}</li>
	//     <li>{item.position}</li>
	//     <li>{item.jersey}</li>
	//     <li>{item.name}</li>
	// </ul>
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(409)))

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.0
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-08T20:02Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.0",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					// Support: IE<11
					// option.value not trimmed (#14858)
					return jQuery.trim( elem.value );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
								jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the compat branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				// Subtract offsetParent scroll positions
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ) -
					offsetParent.scrollTop();
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true ) -
					offsetParent.scrollLeft();
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ }
/******/ ]);